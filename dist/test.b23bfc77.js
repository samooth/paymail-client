"use strict";
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread3(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty2(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e60) {
                    throw _e60;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e61) {
            didErr = true;
            err = _e61;
        },
        f: function f() {
            try {
                if (!normalCompletion && it["return"] != null) it["return"]();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _defineProperty2(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    Object.defineProperty(subClass, "prototype", {
        writable: false
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
}
function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget);
        } else result = Super.apply(this, arguments);
        return _possibleConstructorReturn(this, result);
    };
}
function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === "object" || typeof call === "function")) return call;
    else if (call !== void 0) throw new TypeError("Derived constructors may only return object or undefined");
    return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function _wrapNativeSuper(Class1) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class1);
}
function _construct(Parent1, args1, Class2) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct.bind();
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
function _getPrototypeOf(o2) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o2);
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _regeneratorRuntime() {
    "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ 
    _regeneratorRuntime = function _regeneratorRuntime() {
        return exports;
    };
    var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
            value: value,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }), obj[key];
    }
    try {
        define({}, "");
    } catch (err1) {
        define = function define(obj, key, value) {
            return obj[key] = value;
        };
    }
    function wrap(innerFn1, outerFn, self1, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context1 = new Context(tryLocsList || []);
        return generator._invoke = function(innerFn, self, context) {
            var state = "suspendedStart";
            return function(method, arg) {
                if ("executing" === state) throw new Error("Generator is already running");
                if ("completed" === state) {
                    if ("throw" === method) throw arg;
                    return doneResult();
                }
                for(context.method = method, context.arg = arg;;){
                    var delegate = context.delegate;
                    if (delegate) {
                        var delegateResult = maybeInvokeDelegate(delegate, context);
                        if (delegateResult) {
                            if (delegateResult === ContinueSentinel) continue;
                            return delegateResult;
                        }
                    }
                    if ("next" === context.method) context.sent = context._sent = context.arg;
                    else if ("throw" === context.method) {
                        if ("suspendedStart" === state) throw state = "completed", context.arg;
                        context.dispatchException(context.arg);
                    } else "return" === context.method && context.abrupt("return", context.arg);
                    state = "executing";
                    var record = tryCatch(innerFn, self, context);
                    if ("normal" === record.type) {
                        if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
                        return {
                            value: record.arg,
                            done: context.done
                        };
                    }
                    "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
                }
            };
        }(innerFn1, self1, context1), generator;
    }
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function() {
        return this;
    });
    var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            define(prototype, method, function(arg) {
                return this._invoke(method, arg);
            });
        });
    }
    function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if ("throw" !== record.type) {
                var result = record.arg, value1 = result.value;
                return value1 && "object" == _typeof(value1) && hasOwn.call(value1, "__await") ? PromiseImpl.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                }) : PromiseImpl.resolve(value1).then(function(unwrapped) {
                    result.value = unwrapped, resolve(result);
                }, function(error) {
                    return invoke("throw", error, resolve, reject);
                });
            }
            reject(record.arg);
        }
        var previousPromise;
        this._invoke = function(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new PromiseImpl(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        };
    }
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (undefined === method) {
            if (context.delegate = null, "throw" === context.method) {
                if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
                context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
    }
    function Context(tryLocsList) {
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if ("function" == typeof iterable.next) return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    for(; ++i < iterable.length;){
                        if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
                    }
                    return next.value = undefined, next.done = !0, next;
                };
                return next1.next = next1;
            }
        }
        return {
            next: doneResult
        };
    }
    function doneResult() {
        return {
            value: undefined,
            done: !0
        };
    }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function(arg) {
        return {
            __await: arg
        };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
    }), define(Gp, "toString", function() {
        return "[object Generator]";
    }), exports.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        return keys.reverse(), function next() {
            for(; keys.length;){
                var key = keys.pop();
                if (key in object) return next.value = key, next.done = !1, next;
            }
            return next.done = !0, next;
        };
    }, exports.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for(var name in this)"t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
        },
        stop: function stop() {
            this.done = !0;
            var rootRecord = this.tryEntries[0].completion;
            if ("throw" === rootRecord.type) throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function dispatchException(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i], record = entry.completion;
                if ("root" === entry.tryLoc) return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
                    } else {
                        if (!hasFinally) throw new Error("try statement without catch or finally");
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    }
                }
            }
        },
        abrupt: function abrupt(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
            var record = finallyEntry ? finallyEntry.completion : {};
            return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
            if ("throw" === record.type) throw record.arg;
            return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
            }
        },
        "catch": function _catch(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if ("throw" === record.type) {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            return this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
        }
    }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) resolve(value);
    else Promise.resolve(value).then(_next, _throw);
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _typeof(obj1) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj1);
}
(function(f) {
    if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") module.exports = f();
    else if (typeof define === "function" && define.amd) define([], f);
    else {
        var g;
        if (typeof window !== "undefined") g = window;
        else if (typeof global !== "undefined") g = global;
        else if (typeof self !== "undefined") g = self;
        else g = this;
        g.paymail = f();
    }
})(function() {
    var define, module1, exports1;
    return (function() {
        function r1(e, n1, t) {
            function o(i, f) {
                if (!n1[i]) {
                    if (!e[i]) {
                        var c = "function" == typeof require && undefined;
                        if (!f && c) return c(i, !0);
                        if (u) return u(i, !0);
                        var a = new Error("Cannot find module '" + i + "'");
                        throw a.code = "MODULE_NOT_FOUND", a;
                    }
                    var p = n1[i] = {
                        exports: {}
                    };
                    e[i][0].call(p.exports, function(r) {
                        var n = e[i][1][r];
                        return o(n || r);
                    }, p, p.exports, r1, e, n1, t);
                }
                return n1[i].exports;
            }
            for(var u = "function" == typeof require && undefined, i1 = 0; i1 < t.length; i1++)o(t[i1]);
            return o;
        }
        return r1;
    })()({
        1: [
            function(require, module, exports) {
                "use strict";
                var asn1 = exports;
                asn1.bignum = require("bn.js");
                asn1.define = require("./asn1/api").define;
                asn1.base = require("./asn1/base");
                asn1.constants = require("./asn1/constants");
                asn1.decoders = require("./asn1/decoders");
                asn1.encoders = require("./asn1/encoders");
            },
            {
                "./asn1/api": 2,
                "./asn1/base": 4,
                "./asn1/constants": 8,
                "./asn1/decoders": 10,
                "./asn1/encoders": 13,
                "bn.js": 15
            }
        ],
        2: [
            function(require, module, exports) {
                "use strict";
                var encoders = require("./encoders");
                var decoders = require("./decoders");
                var inherits = require("inherits");
                var api = exports;
                api.define = function define(name, body) {
                    return new Entity(name, body);
                };
                function Entity(name, body) {
                    this.name = name;
                    this.body = body;
                    this.decoders = {};
                    this.encoders = {};
                }
                Entity.prototype._createNamed = function createNamed(Base) {
                    var name1 = this.name;
                    function Generated(entity) {
                        this._initNamed(entity, name1);
                    }
                    inherits(Generated, Base);
                    Generated.prototype._initNamed = function _initNamed(entity, name) {
                        Base.call(this, entity, name);
                    };
                    return new Generated(this);
                };
                Entity.prototype._getDecoder = function _getDecoder(enc) {
                    enc = enc || "der"; // Lazily create decoder
                    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
                    return this.decoders[enc];
                };
                Entity.prototype.decode = function decode(data, enc, options) {
                    return this._getDecoder(enc).decode(data, options);
                };
                Entity.prototype._getEncoder = function _getEncoder(enc) {
                    enc = enc || "der"; // Lazily create encoder
                    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
                    return this.encoders[enc];
                };
                Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
                    return this._getEncoder(enc).encode(data, reporter);
                };
            },
            {
                "./decoders": 10,
                "./encoders": 13,
                "inherits": 143
            }
        ],
        3: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var Reporter = require("../base/reporter").Reporter;
                var Buffer = require("safer-buffer").Buffer;
                function DecoderBuffer(base, options) {
                    Reporter.call(this, options);
                    if (!Buffer.isBuffer(base)) {
                        this.error("Input not Buffer");
                        return;
                    }
                    this.base = base;
                    this.offset = 0;
                    this.length = base.length;
                }
                inherits(DecoderBuffer, Reporter);
                exports.DecoderBuffer = DecoderBuffer;
                DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
                    if (data instanceof DecoderBuffer) return true;
                     // Or accept compatible API
                    var isCompatible = _typeof(data) === "object" && Buffer.isBuffer(data.base) && data.constructor.name === "DecoderBuffer" && typeof data.offset === "number" && typeof data.length === "number" && typeof data.save === "function" && typeof data.restore === "function" && typeof data.isEmpty === "function" && typeof data.readUInt8 === "function" && typeof data.skip === "function" && typeof data.raw === "function";
                    return isCompatible;
                };
                DecoderBuffer.prototype.save = function save() {
                    return {
                        offset: this.offset,
                        reporter: Reporter.prototype.save.call(this)
                    };
                };
                DecoderBuffer.prototype.restore = function restore(save) {
                    // Return skipped data
                    var res = new DecoderBuffer(this.base);
                    res.offset = save.offset;
                    res.length = this.offset;
                    this.offset = save.offset;
                    Reporter.prototype.restore.call(this, save.reporter);
                    return res;
                };
                DecoderBuffer.prototype.isEmpty = function isEmpty() {
                    return this.offset === this.length;
                };
                DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
                    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
                    else return this.error(fail || "DecoderBuffer overrun");
                };
                DecoderBuffer.prototype.skip = function skip(bytes, fail) {
                    if (!(this.offset + bytes <= this.length)) return this.error(fail || "DecoderBuffer overrun");
                    var res = new DecoderBuffer(this.base); // Share reporter state
                    res._reporterState = this._reporterState;
                    res.offset = this.offset;
                    res.length = this.offset + bytes;
                    this.offset += bytes;
                    return res;
                };
                DecoderBuffer.prototype.raw = function raw(save) {
                    return this.base.slice(save ? save.offset : this.offset, this.length);
                };
                function EncoderBuffer(value, reporter) {
                    if (Array.isArray(value)) {
                        this.length = 0;
                        this.value = value.map(function(item) {
                            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
                            this.length += item.length;
                            return item;
                        }, this);
                    } else if (typeof value === "number") {
                        if (!(0 <= value && value <= 0xff)) return reporter.error("non-byte EncoderBuffer value");
                        this.value = value;
                        this.length = 1;
                    } else if (typeof value === "string") {
                        this.value = value;
                        this.length = Buffer.byteLength(value);
                    } else if (Buffer.isBuffer(value)) {
                        this.value = value;
                        this.length = value.length;
                    } else return reporter.error("Unsupported type: " + _typeof(value));
                }
                exports.EncoderBuffer = EncoderBuffer;
                EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
                    if (data instanceof EncoderBuffer) return true;
                     // Or accept compatible API
                    var isCompatible = _typeof(data) === "object" && data.constructor.name === "EncoderBuffer" && typeof data.length === "number" && typeof data.join === "function";
                    return isCompatible;
                };
                EncoderBuffer.prototype.join = function join(out, offset) {
                    if (!out) out = Buffer.alloc(this.length);
                    if (!offset) offset = 0;
                    if (this.length === 0) return out;
                    if (Array.isArray(this.value)) this.value.forEach(function(item) {
                        item.join(out, offset);
                        offset += item.length;
                    });
                    else {
                        if (typeof this.value === "number") out[offset] = this.value;
                        else if (typeof this.value === "string") out.write(this.value, offset);
                        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
                        offset += this.length;
                    }
                    return out;
                };
            },
            {
                "../base/reporter": 6,
                "inherits": 143,
                "safer-buffer": 175
            }
        ],
        4: [
            function(require, module, exports) {
                "use strict";
                var base = exports;
                base.Reporter = require("./reporter").Reporter;
                base.DecoderBuffer = require("./buffer").DecoderBuffer;
                base.EncoderBuffer = require("./buffer").EncoderBuffer;
                base.Node = require("./node");
            },
            {
                "./buffer": 3,
                "./node": 5,
                "./reporter": 6
            }
        ],
        5: [
            function(require, module, exports) {
                "use strict";
                var Reporter = require("../base/reporter").Reporter;
                var EncoderBuffer = require("../base/buffer").EncoderBuffer;
                var DecoderBuffer = require("../base/buffer").DecoderBuffer;
                var assert = require("minimalistic-assert"); // Supported tags
                var tags = [
                    "seq",
                    "seqof",
                    "set",
                    "setof",
                    "objid",
                    "bool",
                    "gentime",
                    "utctime",
                    "null_",
                    "enum",
                    "int",
                    "objDesc",
                    "bitstr",
                    "bmpstr",
                    "charstr",
                    "genstr",
                    "graphstr",
                    "ia5str",
                    "iso646str",
                    "numstr",
                    "octstr",
                    "printstr",
                    "t61str",
                    "unistr",
                    "utf8str",
                    "videostr"
                ]; // Public methods list
                var methods = [
                    "key",
                    "obj",
                    "use",
                    "optional",
                    "explicit",
                    "implicit",
                    "def",
                    "choice",
                    "any",
                    "contains"
                ].concat(tags); // Overrided methods list
                var overrided = [
                    "_peekTag",
                    "_decodeTag",
                    "_use",
                    "_decodeStr",
                    "_decodeObjid",
                    "_decodeTime",
                    "_decodeNull",
                    "_decodeInt",
                    "_decodeBool",
                    "_decodeList",
                    "_encodeComposite",
                    "_encodeStr",
                    "_encodeObjid",
                    "_encodeTime",
                    "_encodeNull",
                    "_encodeInt",
                    "_encodeBool"
                ];
                function Node(enc, parent, name) {
                    var state = {};
                    this._baseState = state;
                    state.name = name;
                    state.enc = enc;
                    state.parent = parent || null;
                    state.children = null; // State
                    state.tag = null;
                    state.args = null;
                    state.reverseArgs = null;
                    state.choice = null;
                    state.optional = false;
                    state.any = false;
                    state.obj = false;
                    state.use = null;
                    state.useDecoder = null;
                    state.key = null;
                    state["default"] = null;
                    state.explicit = null;
                    state.implicit = null;
                    state.contains = null; // Should create new instance on each method
                    if (!state.parent) {
                        state.children = [];
                        this._wrap();
                    }
                }
                module.exports = Node;
                var stateProps = [
                    "enc",
                    "parent",
                    "children",
                    "tag",
                    "args",
                    "reverseArgs",
                    "choice",
                    "optional",
                    "any",
                    "obj",
                    "use",
                    "alteredUse",
                    "key",
                    "default",
                    "explicit",
                    "implicit",
                    "contains"
                ];
                Node.prototype.clone = function clone() {
                    var state = this._baseState;
                    var cstate = {};
                    stateProps.forEach(function(prop) {
                        cstate[prop] = state[prop];
                    });
                    var res = new this.constructor(cstate.parent);
                    res._baseState = cstate;
                    return res;
                };
                Node.prototype._wrap = function wrap() {
                    var state = this._baseState;
                    methods.forEach(function(method) {
                        this[method] = function _wrappedMethod() {
                            var clone = new this.constructor(this);
                            state.children.push(clone);
                            return clone[method].apply(clone, arguments);
                        };
                    }, this);
                };
                Node.prototype._init = function init(body) {
                    var state = this._baseState;
                    assert(state.parent === null);
                    body.call(this); // Filter children
                    state.children = state.children.filter(function(child) {
                        return child._baseState.parent === this;
                    }, this);
                    assert.equal(state.children.length, 1, "Root node can have only one child");
                };
                Node.prototype._useArgs = function useArgs(args) {
                    var state = this._baseState; // Filter children and args
                    var children = args.filter(function(arg) {
                        return arg instanceof this.constructor;
                    }, this);
                    args = args.filter(function(arg) {
                        return !(arg instanceof this.constructor);
                    }, this);
                    if (children.length !== 0) {
                        assert(state.children === null);
                        state.children = children; // Replace parent to maintain backward link
                        children.forEach(function(child) {
                            child._baseState.parent = this;
                        }, this);
                    }
                    if (args.length !== 0) {
                        assert(state.args === null);
                        state.args = args;
                        state.reverseArgs = args.map(function(arg) {
                            if (_typeof(arg) !== "object" || arg.constructor !== Object) return arg;
                            var res = {};
                            Object.keys(arg).forEach(function(key) {
                                if (key == (key | 0)) key |= 0;
                                var value = arg[key];
                                res[value] = key;
                            });
                            return res;
                        });
                    }
                }; //
                // Overrided methods
                //
                overrided.forEach(function(method) {
                    Node.prototype[method] = function _overrided() {
                        var state = this._baseState;
                        throw new Error(method + " not implemented for encoding: " + state.enc);
                    };
                }); //
                // Public methods
                //
                tags.forEach(function(tag) {
                    Node.prototype[tag] = function _tagMethod() {
                        var state = this._baseState;
                        var args = Array.prototype.slice.call(arguments);
                        assert(state.tag === null);
                        state.tag = tag;
                        this._useArgs(args);
                        return this;
                    };
                });
                Node.prototype.use = function use(item) {
                    assert(item);
                    var state = this._baseState;
                    assert(state.use === null);
                    state.use = item;
                    return this;
                };
                Node.prototype.optional = function optional() {
                    var state = this._baseState;
                    state.optional = true;
                    return this;
                };
                Node.prototype.def = function def(val) {
                    var state = this._baseState;
                    assert(state["default"] === null);
                    state["default"] = val;
                    state.optional = true;
                    return this;
                };
                Node.prototype.explicit = function explicit(num) {
                    var state = this._baseState;
                    assert(state.explicit === null && state.implicit === null);
                    state.explicit = num;
                    return this;
                };
                Node.prototype.implicit = function implicit(num) {
                    var state = this._baseState;
                    assert(state.explicit === null && state.implicit === null);
                    state.implicit = num;
                    return this;
                };
                Node.prototype.obj = function obj() {
                    var state = this._baseState;
                    var args = Array.prototype.slice.call(arguments);
                    state.obj = true;
                    if (args.length !== 0) this._useArgs(args);
                    return this;
                };
                Node.prototype.key = function key(newKey) {
                    var state = this._baseState;
                    assert(state.key === null);
                    state.key = newKey;
                    return this;
                };
                Node.prototype.any = function any() {
                    var state = this._baseState;
                    state.any = true;
                    return this;
                };
                Node.prototype.choice = function choice(obj) {
                    var state = this._baseState;
                    assert(state.choice === null);
                    state.choice = obj;
                    this._useArgs(Object.keys(obj).map(function(key) {
                        return obj[key];
                    }));
                    return this;
                };
                Node.prototype.contains = function contains(item) {
                    var state = this._baseState;
                    assert(state.use === null);
                    state.contains = item;
                    return this;
                }; //
                // Decoding
                //
                Node.prototype._decode = function decode(input, options) {
                    var state = this._baseState; // Decode root node
                    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
                    var result = state["default"];
                    var present = true;
                    var prevKey = null;
                    if (state.key !== null) prevKey = input.enterKey(state.key); // Check if tag is there
                    if (state.optional) {
                        var tag = null;
                        if (state.explicit !== null) tag = state.explicit;
                        else if (state.implicit !== null) tag = state.implicit;
                        else if (state.tag !== null) tag = state.tag;
                        if (tag === null && !state.any) {
                            // Trial and Error
                            var save = input.save();
                            try {
                                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                                else this._decodeChoice(input, options);
                                present = true;
                            } catch (e) {
                                present = false;
                            }
                            input.restore(save);
                        } else {
                            present = this._peekTag(input, tag, state.any);
                            if (input.isError(present)) return present;
                        }
                    } // Push object on stack
                    var prevObj;
                    if (state.obj && present) prevObj = input.enterObject();
                    if (present) {
                        // Unwrap explicit values
                        if (state.explicit !== null) {
                            var explicit = this._decodeTag(input, state.explicit);
                            if (input.isError(explicit)) return explicit;
                            input = explicit;
                        }
                        var start = input.offset; // Unwrap implicit and normal values
                        if (state.use === null && state.choice === null) {
                            var _save;
                            if (state.any) _save = input.save();
                            var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
                            if (input.isError(body)) return body;
                            if (state.any) result = input.raw(_save);
                            else input = body;
                        }
                        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, "tagged");
                        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, "content"); // Select proper method for tag
                        if (state.any) ;
                        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
                        else result = this._decodeChoice(input, options);
                        if (input.isError(result)) return result; // Decode children
                        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
                            // NOTE: We are ignoring errors here, to let parser continue with other
                            // parts of encoded data
                            child._decode(input, options);
                        });
                         // Decode contained/encoded by schema, only in bit or octet strings
                        if (state.contains && (state.tag === "octstr" || state.tag === "bitstr")) {
                            var data = new DecoderBuffer(result);
                            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
                        }
                    } // Pop object
                    if (state.obj && present) result = input.leaveObject(prevObj); // Set key
                    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
                    else if (prevKey !== null) input.exitKey(prevKey);
                    return result;
                };
                Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
                    var state = this._baseState;
                    if (tag === "seq" || tag === "set") return null;
                    if (tag === "seqof" || tag === "setof") return this._decodeList(input, tag, state.args[0], options);
                    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
                    else if (tag === "objid" && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
                    else if (tag === "objid") return this._decodeObjid(input, null, null, options);
                    else if (tag === "gentime" || tag === "utctime") return this._decodeTime(input, tag, options);
                    else if (tag === "null_") return this._decodeNull(input, options);
                    else if (tag === "bool") return this._decodeBool(input, options);
                    else if (tag === "objDesc") return this._decodeStr(input, tag, options);
                    else if (tag === "int" || tag === "enum") return this._decodeInt(input, state.args && state.args[0], options);
                    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
                    else return input.error("unknown tag: " + tag);
                };
                Node.prototype._getUse = function _getUse(entity, obj) {
                    var state = this._baseState; // Create altered use decoder if implicit is set
                    state.useDecoder = this._use(entity, obj);
                    assert(state.useDecoder._baseState.parent === null);
                    state.useDecoder = state.useDecoder._baseState.children[0];
                    if (state.implicit !== state.useDecoder._baseState.implicit) {
                        state.useDecoder = state.useDecoder.clone();
                        state.useDecoder._baseState.implicit = state.implicit;
                    }
                    return state.useDecoder;
                };
                Node.prototype._decodeChoice = function decodeChoice(input, options) {
                    var state = this._baseState;
                    var result = null;
                    var match = false;
                    Object.keys(state.choice).some(function(key) {
                        var save = input.save();
                        var node = state.choice[key];
                        try {
                            var value = node._decode(input, options);
                            if (input.isError(value)) return false;
                            result = {
                                type: key,
                                value: value
                            };
                            match = true;
                        } catch (e) {
                            input.restore(save);
                            return false;
                        }
                        return true;
                    }, this);
                    if (!match) return input.error("Choice not matched");
                    return result;
                }; //
                // Encoding
                //
                Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
                    return new EncoderBuffer(data, this.reporter);
                };
                Node.prototype._encode = function encode(data, reporter, parent) {
                    var state = this._baseState;
                    if (state["default"] !== null && state["default"] === data) return;
                    var result = this._encodeValue(data, reporter, parent);
                    if (result === undefined) return;
                    if (this._skipDefault(result, reporter, parent)) return;
                    return result;
                };
                Node.prototype._encodeValue = function encode(data, reporter, parent) {
                    var state1 = this._baseState; // Decode root node
                    if (state1.parent === null) return state1.children[0]._encode(data, reporter || new Reporter());
                    var result = null; // Set reporter to share it with a child class
                    this.reporter = reporter; // Check if data is there
                    if (state1.optional && data === undefined) {
                        if (state1["default"] !== null) data = state1["default"];
                        else return;
                    } // Encode children first
                    var content = null;
                    var primitive = false;
                    if (state1.any) // Anything that was given is translated to buffer
                    result = this._createEncoderBuffer(data);
                    else if (state1.choice) result = this._encodeChoice(data, reporter);
                    else if (state1.contains) {
                        content = this._getUse(state1.contains, parent)._encode(data, reporter);
                        primitive = true;
                    } else if (state1.children) {
                        content = state1.children.map(function(child) {
                            if (child._baseState.tag === "null_") return child._encode(null, reporter, data);
                            if (child._baseState.key === null) return reporter.error("Child should have a key");
                            var prevKey = reporter.enterKey(child._baseState.key);
                            if (_typeof(data) !== "object") return reporter.error("Child expected, but input is not object");
                            var res = child._encode(data[child._baseState.key], reporter, data);
                            reporter.leaveKey(prevKey);
                            return res;
                        }, this).filter(function(child) {
                            return child;
                        });
                        content = this._createEncoderBuffer(content);
                    } else {
                        if (state1.tag === "seqof" || state1.tag === "setof") {
                            // TODO(indutny): this should be thrown on DSL level
                            if (!(state1.args && state1.args.length === 1)) return reporter.error("Too many args for : " + state1.tag);
                            if (!Array.isArray(data)) return reporter.error("seqof/setof, but data is not Array");
                            var child1 = this.clone();
                            child1._baseState.implicit = null;
                            content = this._createEncoderBuffer(data.map(function(item) {
                                var state = this._baseState;
                                return this._getUse(state.args[0], data)._encode(item, reporter);
                            }, child1));
                        } else if (state1.use !== null) result = this._getUse(state1.use, parent)._encode(data, reporter);
                        else {
                            content = this._encodePrimitive(state1.tag, data);
                            primitive = true;
                        }
                    } // Encode data itself
                    if (!state1.any && state1.choice === null) {
                        var tag = state1.implicit !== null ? state1.implicit : state1.tag;
                        var cls = state1.implicit === null ? "universal" : "context";
                        if (tag === null) {
                            if (state1.use === null) reporter.error("Tag could be omitted only for .use()");
                        } else if (state1.use === null) result = this._encodeComposite(tag, primitive, cls, content);
                    } // Wrap in explicit
                    if (state1.explicit !== null) result = this._encodeComposite(state1.explicit, false, "context", result);
                    return result;
                };
                Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
                    var state = this._baseState;
                    var node = state.choice[data.type];
                    if (!node) assert(false, data.type + " not found in " + JSON.stringify(Object.keys(state.choice)));
                    return node._encode(data.value, reporter);
                };
                Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
                    var state = this._baseState;
                    if (/str$/.test(tag)) return this._encodeStr(data, tag);
                    else if (tag === "objid" && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
                    else if (tag === "objid") return this._encodeObjid(data, null, null);
                    else if (tag === "gentime" || tag === "utctime") return this._encodeTime(data, tag);
                    else if (tag === "null_") return this._encodeNull();
                    else if (tag === "int" || tag === "enum") return this._encodeInt(data, state.args && state.reverseArgs[0]);
                    else if (tag === "bool") return this._encodeBool(data);
                    else if (tag === "objDesc") return this._encodeStr(data, tag);
                    else throw new Error("Unsupported tag: " + tag);
                };
                Node.prototype._isNumstr = function isNumstr(str) {
                    return /^[0-9 ]*$/.test(str);
                };
                Node.prototype._isPrintstr = function isPrintstr(str) {
                    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
                };
            },
            {
                "../base/buffer": 3,
                "../base/reporter": 6,
                "minimalistic-assert": 150
            }
        ],
        6: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                function Reporter(options) {
                    this._reporterState = {
                        obj: null,
                        path: [],
                        options: options || {},
                        errors: []
                    };
                }
                exports.Reporter = Reporter;
                Reporter.prototype.isError = function isError(obj) {
                    return obj instanceof ReporterError;
                };
                Reporter.prototype.save = function save() {
                    var state = this._reporterState;
                    return {
                        obj: state.obj,
                        pathLen: state.path.length
                    };
                };
                Reporter.prototype.restore = function restore(data) {
                    var state = this._reporterState;
                    state.obj = data.obj;
                    state.path = state.path.slice(0, data.pathLen);
                };
                Reporter.prototype.enterKey = function enterKey(key) {
                    return this._reporterState.path.push(key);
                };
                Reporter.prototype.exitKey = function exitKey(index) {
                    var state = this._reporterState;
                    state.path = state.path.slice(0, index - 1);
                };
                Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
                    var state = this._reporterState;
                    this.exitKey(index);
                    if (state.obj !== null) state.obj[key] = value;
                };
                Reporter.prototype.path = function path() {
                    return this._reporterState.path.join("/");
                };
                Reporter.prototype.enterObject = function enterObject() {
                    var state = this._reporterState;
                    var prev = state.obj;
                    state.obj = {};
                    return prev;
                };
                Reporter.prototype.leaveObject = function leaveObject(prev) {
                    var state = this._reporterState;
                    var now = state.obj;
                    state.obj = prev;
                    return now;
                };
                Reporter.prototype.error = function error(msg) {
                    var err;
                    var state = this._reporterState;
                    var inherited = msg instanceof ReporterError;
                    if (inherited) err = msg;
                    else err = new ReporterError(state.path.map(function(elem) {
                        return "[" + JSON.stringify(elem) + "]";
                    }).join(""), msg.message || msg, msg.stack);
                    if (!state.options.partial) throw err;
                    if (!inherited) state.errors.push(err);
                    return err;
                };
                Reporter.prototype.wrapResult = function wrapResult(result) {
                    var state = this._reporterState;
                    if (!state.options.partial) return result;
                    return {
                        result: this.isError(result) ? null : result,
                        errors: state.errors
                    };
                };
                function ReporterError(path, msg) {
                    this.path = path;
                    this.rethrow(msg);
                }
                inherits(ReporterError, Error);
                ReporterError.prototype.rethrow = function rethrow(msg) {
                    this.message = msg + " at: " + (this.path || "(shallow)");
                    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
                    if (!this.stack) try {
                        // IE only adds stack when thrown
                        throw new Error(this.message);
                    } catch (e) {
                        this.stack = e.stack;
                    }
                    return this;
                };
            },
            {
                "inherits": 143
            }
        ],
        7: [
            function(require, module, exports) {
                "use strict"; // Helper
                function reverse(map) {
                    var res = {};
                    Object.keys(map).forEach(function(key) {
                        // Convert key to integer if it is stringified
                        if ((key | 0) == key) key = key | 0;
                        var value = map[key];
                        res[value] = key;
                    });
                    return res;
                }
                exports.tagClass = {
                    0: "universal",
                    1: "application",
                    2: "context",
                    3: "private"
                };
                exports.tagClassByName = reverse(exports.tagClass);
                exports.tag = {
                    0x00: "end",
                    0x01: "bool",
                    0x02: "int",
                    0x03: "bitstr",
                    0x04: "octstr",
                    0x05: "null_",
                    0x06: "objid",
                    0x07: "objDesc",
                    0x08: "external",
                    0x09: "real",
                    0x0a: "enum",
                    0x0b: "embed",
                    0x0c: "utf8str",
                    0x0d: "relativeOid",
                    0x10: "seq",
                    0x11: "set",
                    0x12: "numstr",
                    0x13: "printstr",
                    0x14: "t61str",
                    0x15: "videostr",
                    0x16: "ia5str",
                    0x17: "utctime",
                    0x18: "gentime",
                    0x19: "graphstr",
                    0x1a: "iso646str",
                    0x1b: "genstr",
                    0x1c: "unistr",
                    0x1d: "charstr",
                    0x1e: "bmpstr"
                };
                exports.tagByName = reverse(exports.tag);
            },
            {}
        ],
        8: [
            function(require, module, exports) {
                "use strict";
                var constants = exports; // Helper
                constants._reverse = function reverse(map) {
                    var res = {};
                    Object.keys(map).forEach(function(key) {
                        // Convert key to integer if it is stringified
                        if ((key | 0) == key) key = key | 0;
                        var value = map[key];
                        res[value] = key;
                    });
                    return res;
                };
                constants.der = require("./der");
            },
            {
                "./der": 7
            }
        ],
        9: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var bignum = require("bn.js");
                var DecoderBuffer = require("../base/buffer").DecoderBuffer;
                var Node = require("../base/node"); // Import DER constants
                var der = require("../constants/der");
                function DERDecoder(entity) {
                    this.enc = "der";
                    this.name = entity.name;
                    this.entity = entity; // Construct base tree
                    this.tree = new DERNode();
                    this.tree._init(entity.body);
                }
                module.exports = DERDecoder;
                DERDecoder.prototype.decode = function decode(data, options) {
                    if (!DecoderBuffer.isDecoderBuffer(data)) data = new DecoderBuffer(data, options);
                    return this.tree._decode(data, options);
                }; // Tree methods
                function DERNode(parent) {
                    Node.call(this, "der", parent);
                }
                inherits(DERNode, Node);
                DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
                    if (buffer.isEmpty()) return false;
                    var state = buffer.save();
                    var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
                    if (buffer.isError(decodedTag)) return decodedTag;
                    buffer.restore(state);
                    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + "of" === tag || any;
                };
                DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
                    var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
                    if (buffer.isError(decodedTag)) return decodedTag;
                    var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"'); // Failure
                    if (buffer.isError(len)) return len;
                    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + "of" !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
                    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"'); // Indefinite length... find END tag
                    var state = buffer.save();
                    var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
                    if (buffer.isError(res)) return res;
                    len = buffer.offset - state.offset;
                    buffer.restore(state);
                    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
                };
                DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
                    for(;;){
                        var tag = derDecodeTag(buffer, fail);
                        if (buffer.isError(tag)) return tag;
                        var len = derDecodeLen(buffer, tag.primitive, fail);
                        if (buffer.isError(len)) return len;
                        var res = void 0;
                        if (tag.primitive || len !== null) res = buffer.skip(len);
                        else res = this._skipUntilEnd(buffer, fail); // Failure
                        if (buffer.isError(res)) return res;
                        if (tag.tagStr === "end") break;
                    }
                };
                DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
                    var result = [];
                    while(!buffer.isEmpty()){
                        var possibleEnd = this._peekTag(buffer, "end");
                        if (buffer.isError(possibleEnd)) return possibleEnd;
                        var res = decoder.decode(buffer, "der", options);
                        if (buffer.isError(res) && possibleEnd) break;
                        result.push(res);
                    }
                    return result;
                };
                DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
                    if (tag === "bitstr") {
                        var unused = buffer.readUInt8();
                        if (buffer.isError(unused)) return unused;
                        return {
                            unused: unused,
                            data: buffer.raw()
                        };
                    } else if (tag === "bmpstr") {
                        var raw = buffer.raw();
                        if (raw.length % 2 === 1) return buffer.error("Decoding of string type: bmpstr length mismatch");
                        var str = "";
                        for(var i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
                        return str;
                    } else if (tag === "numstr") {
                        var numstr = buffer.raw().toString("ascii");
                        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
                        return numstr;
                    } else if (tag === "octstr") return buffer.raw();
                    else if (tag === "objDesc") return buffer.raw();
                    else if (tag === "printstr") {
                        var printstr = buffer.raw().toString("ascii");
                        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
                        return printstr;
                    } else if (/str$/.test(tag)) return buffer.raw().toString();
                    else return buffer.error("Decoding of string type: " + tag + " unsupported");
                };
                DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
                    var result;
                    var identifiers = [];
                    var ident = 0;
                    var subident = 0;
                    while(!buffer.isEmpty()){
                        subident = buffer.readUInt8();
                        ident <<= 7;
                        ident |= subident & 0x7f;
                        if ((subident & 0x80) === 0) {
                            identifiers.push(ident);
                            ident = 0;
                        }
                    }
                    if (subident & 0x80) identifiers.push(ident);
                    var first = identifiers[0] / 40 | 0;
                    var second = identifiers[0] % 40;
                    if (relative) result = identifiers;
                    else result = [
                        first,
                        second
                    ].concat(identifiers.slice(1));
                    if (values) {
                        var tmp = values[result.join(" ")];
                        if (tmp === undefined) tmp = values[result.join(".")];
                        if (tmp !== undefined) result = tmp;
                    }
                    return result;
                };
                DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
                    var str = buffer.raw().toString();
                    var year;
                    var mon;
                    var day;
                    var hour;
                    var min;
                    var sec;
                    if (tag === "gentime") {
                        year = str.slice(0, 4) | 0;
                        mon = str.slice(4, 6) | 0;
                        day = str.slice(6, 8) | 0;
                        hour = str.slice(8, 10) | 0;
                        min = str.slice(10, 12) | 0;
                        sec = str.slice(12, 14) | 0;
                    } else if (tag === "utctime") {
                        year = str.slice(0, 2) | 0;
                        mon = str.slice(2, 4) | 0;
                        day = str.slice(4, 6) | 0;
                        hour = str.slice(6, 8) | 0;
                        min = str.slice(8, 10) | 0;
                        sec = str.slice(10, 12) | 0;
                        if (year < 70) year = 2000 + year;
                        else year = 1900 + year;
                    } else return buffer.error("Decoding " + tag + " time is not supported yet");
                    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
                };
                DERNode.prototype._decodeNull = function decodeNull() {
                    return null;
                };
                DERNode.prototype._decodeBool = function decodeBool(buffer) {
                    var res = buffer.readUInt8();
                    if (buffer.isError(res)) return res;
                    else return res !== 0;
                };
                DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
                    // Bigint, return as it is (assume big endian)
                    var raw = buffer.raw();
                    var res = new bignum(raw);
                    if (values) res = values[res.toString(10)] || res;
                    return res;
                };
                DERNode.prototype._use = function use(entity, obj) {
                    if (typeof entity === "function") entity = entity(obj);
                    return entity._getDecoder("der").tree;
                }; // Utility methods
                function derDecodeTag(buf, fail) {
                    var tag = buf.readUInt8(fail);
                    if (buf.isError(tag)) return tag;
                    var cls = der.tagClass[tag >> 6];
                    var primitive = (tag & 0x20) === 0; // Multi-octet tag - load
                    if ((tag & 0x1f) === 0x1f) {
                        var oct = tag;
                        tag = 0;
                        while((oct & 0x80) === 0x80){
                            oct = buf.readUInt8(fail);
                            if (buf.isError(oct)) return oct;
                            tag <<= 7;
                            tag |= oct & 0x7f;
                        }
                    } else tag &= 0x1f;
                    var tagStr = der.tag[tag];
                    return {
                        cls: cls,
                        primitive: primitive,
                        tag: tag,
                        tagStr: tagStr
                    };
                }
                function derDecodeLen(buf, primitive, fail) {
                    var len = buf.readUInt8(fail);
                    if (buf.isError(len)) return len; // Indefinite form
                    if (!primitive && len === 0x80) return null; // Definite form
                    if ((len & 0x80) === 0) // Short form
                    return len;
                     // Long form
                    var num = len & 0x7f;
                    if (num > 4) return buf.error("length octect is too long");
                    len = 0;
                    for(var i = 0; i < num; i++){
                        len <<= 8;
                        var j = buf.readUInt8(fail);
                        if (buf.isError(j)) return j;
                        len |= j;
                    }
                    return len;
                }
            },
            {
                "../base/buffer": 3,
                "../base/node": 5,
                "../constants/der": 7,
                "bn.js": 15,
                "inherits": 143
            }
        ],
        10: [
            function(require, module, exports) {
                "use strict";
                var decoders = exports;
                decoders.der = require("./der");
                decoders.pem = require("./pem");
            },
            {
                "./der": 9,
                "./pem": 11
            }
        ],
        11: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var Buffer = require("safer-buffer").Buffer;
                var DERDecoder = require("./der");
                function PEMDecoder(entity) {
                    DERDecoder.call(this, entity);
                    this.enc = "pem";
                }
                inherits(PEMDecoder, DERDecoder);
                module.exports = PEMDecoder;
                PEMDecoder.prototype.decode = function decode(data, options) {
                    var lines = data.toString().split(/[\r\n]+/g);
                    var label = options.label.toUpperCase();
                    var re = /^-----(BEGIN|END) ([^-]+)-----$/;
                    var start = -1;
                    var end = -1;
                    for(var i = 0; i < lines.length; i++){
                        var match = lines[i].match(re);
                        if (match === null) continue;
                        if (match[2] !== label) continue;
                        if (start === -1) {
                            if (match[1] !== "BEGIN") break;
                            start = i;
                        } else {
                            if (match[1] !== "END") break;
                            end = i;
                            break;
                        }
                    }
                    if (start === -1 || end === -1) throw new Error("PEM section not found for: " + label);
                    var base64 = lines.slice(start + 1, end).join(""); // Remove excessive symbols
                    base64.replace(/[^a-z0-9+/=]+/gi, "");
                    var input = Buffer.from(base64, "base64");
                    return DERDecoder.prototype.decode.call(this, input, options);
                };
            },
            {
                "./der": 9,
                "inherits": 143,
                "safer-buffer": 175
            }
        ],
        12: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var Buffer = require("safer-buffer").Buffer;
                var Node = require("../base/node"); // Import DER constants
                var der = require("../constants/der");
                function DEREncoder(entity) {
                    this.enc = "der";
                    this.name = entity.name;
                    this.entity = entity; // Construct base tree
                    this.tree = new DERNode();
                    this.tree._init(entity.body);
                }
                module.exports = DEREncoder;
                DEREncoder.prototype.encode = function encode(data, reporter) {
                    return this.tree._encode(data, reporter).join();
                }; // Tree methods
                function DERNode(parent) {
                    Node.call(this, "der", parent);
                }
                inherits(DERNode, Node);
                DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
                    var encodedTag = encodeTag(tag, primitive, cls, this.reporter); // Short form
                    if (content.length < 0x80) {
                        var _header = Buffer.alloc(2);
                        _header[0] = encodedTag;
                        _header[1] = content.length;
                        return this._createEncoderBuffer([
                            _header,
                            content
                        ]);
                    } // Long form
                    // Count octets required to store length
                    var lenOctets = 1;
                    for(var i = content.length; i >= 0x100; i >>= 8)lenOctets++;
                    var header = Buffer.alloc(2 + lenOctets);
                    header[0] = encodedTag;
                    header[1] = 0x80 | lenOctets;
                    for(var _i = 1 + lenOctets, j = content.length; j > 0; _i--, j >>= 8)header[_i] = j & 0xff;
                    return this._createEncoderBuffer([
                        header,
                        content
                    ]);
                };
                DERNode.prototype._encodeStr = function encodeStr(str, tag) {
                    if (tag === "bitstr") return this._createEncoderBuffer([
                        str.unused | 0,
                        str.data
                    ]);
                    else if (tag === "bmpstr") {
                        var buf = Buffer.alloc(str.length * 2);
                        for(var i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
                        return this._createEncoderBuffer(buf);
                    } else if (tag === "numstr") {
                        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
                        return this._createEncoderBuffer(str);
                    } else if (tag === "printstr") {
                        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
                        return this._createEncoderBuffer(str);
                    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
                    else if (tag === "objDesc") return this._createEncoderBuffer(str);
                    else return this.reporter.error("Encoding of string type: " + tag + " unsupported");
                };
                DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
                    if (typeof id === "string") {
                        if (!values) return this.reporter.error("string objid given, but no values map found");
                        if (!values.hasOwnProperty(id)) return this.reporter.error("objid not found in values map");
                        id = values[id].split(/[\s.]+/g);
                        for(var i = 0; i < id.length; i++)id[i] |= 0;
                    } else if (Array.isArray(id)) {
                        id = id.slice();
                        for(var _i2 = 0; _i2 < id.length; _i2++)id[_i2] |= 0;
                    }
                    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
                    if (!relative) {
                        if (id[1] >= 40) return this.reporter.error("Second objid identifier OOB");
                        id.splice(0, 2, id[0] * 40 + id[1]);
                    } // Count number of octets
                    var size = 0;
                    for(var _i3 = 0; _i3 < id.length; _i3++){
                        var ident = id[_i3];
                        for(size++; ident >= 0x80; ident >>= 7)size++;
                    }
                    var objid = Buffer.alloc(size);
                    var offset = objid.length - 1;
                    for(var _i4 = id.length - 1; _i4 >= 0; _i4--){
                        var _ident = id[_i4];
                        objid[offset--] = _ident & 0x7f;
                        while((_ident >>= 7) > 0)objid[offset--] = 0x80 | _ident & 0x7f;
                    }
                    return this._createEncoderBuffer(objid);
                };
                function two(num) {
                    if (num < 10) return "0" + num;
                    else return num;
                }
                DERNode.prototype._encodeTime = function encodeTime(time, tag) {
                    var str;
                    var date = new Date(time);
                    if (tag === "gentime") str = [
                        two(date.getUTCFullYear()),
                        two(date.getUTCMonth() + 1),
                        two(date.getUTCDate()),
                        two(date.getUTCHours()),
                        two(date.getUTCMinutes()),
                        two(date.getUTCSeconds()),
                        "Z"
                    ].join("");
                    else if (tag === "utctime") str = [
                        two(date.getUTCFullYear() % 100),
                        two(date.getUTCMonth() + 1),
                        two(date.getUTCDate()),
                        two(date.getUTCHours()),
                        two(date.getUTCMinutes()),
                        two(date.getUTCSeconds()),
                        "Z"
                    ].join("");
                    else this.reporter.error("Encoding " + tag + " time is not supported yet");
                    return this._encodeStr(str, "octstr");
                };
                DERNode.prototype._encodeNull = function encodeNull() {
                    return this._createEncoderBuffer("");
                };
                DERNode.prototype._encodeInt = function encodeInt(num, values) {
                    if (typeof num === "string") {
                        if (!values) return this.reporter.error("String int or enum given, but no values map");
                        if (!values.hasOwnProperty(num)) return this.reporter.error("Values map doesn't contain: " + JSON.stringify(num));
                        num = values[num];
                    } // Bignum, assume big endian
                    if (typeof num !== "number" && !Buffer.isBuffer(num)) {
                        var numArray = num.toArray();
                        if (!num.sign && numArray[0] & 0x80) numArray.unshift(0);
                        num = Buffer.from(numArray);
                    }
                    if (Buffer.isBuffer(num)) {
                        var _size = num.length;
                        if (num.length === 0) _size++;
                        var _out = Buffer.alloc(_size);
                        num.copy(_out);
                        if (num.length === 0) _out[0] = 0;
                        return this._createEncoderBuffer(_out);
                    }
                    if (num < 0x80) return this._createEncoderBuffer(num);
                    if (num < 0x100) return this._createEncoderBuffer([
                        0,
                        num
                    ]);
                    var size = 1;
                    for(var i = num; i >= 0x100; i >>= 8)size++;
                    var out = new Array(size);
                    for(var _i5 = out.length - 1; _i5 >= 0; _i5--){
                        out[_i5] = num & 0xff;
                        num >>= 8;
                    }
                    if (out[0] & 0x80) out.unshift(0);
                    return this._createEncoderBuffer(Buffer.from(out));
                };
                DERNode.prototype._encodeBool = function encodeBool(value) {
                    return this._createEncoderBuffer(value ? 0xff : 0);
                };
                DERNode.prototype._use = function use(entity, obj) {
                    if (typeof entity === "function") entity = entity(obj);
                    return entity._getEncoder("der").tree;
                };
                DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
                    var state = this._baseState;
                    var i;
                    if (state["default"] === null) return false;
                    var data = dataBuffer.join();
                    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state["default"], reporter, parent).join();
                    if (data.length !== state.defaultBuffer.length) return false;
                    for(i = 0; i < data.length; i++){
                        if (data[i] !== state.defaultBuffer[i]) return false;
                    }
                    return true;
                }; // Utility methods
                function encodeTag(tag, primitive, cls, reporter) {
                    var res;
                    if (tag === "seqof") tag = "seq";
                    else if (tag === "setof") tag = "set";
                    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
                    else if (typeof tag === "number" && (tag | 0) === tag) res = tag;
                    else return reporter.error("Unknown tag: " + tag);
                    if (res >= 0x1f) return reporter.error("Multi-octet tag encoding unsupported");
                    if (!primitive) res |= 0x20;
                    res |= der.tagClassByName[cls || "universal"] << 6;
                    return res;
                }
            },
            {
                "../base/node": 5,
                "../constants/der": 7,
                "inherits": 143,
                "safer-buffer": 175
            }
        ],
        13: [
            function(require, module, exports) {
                "use strict";
                var encoders = exports;
                encoders.der = require("./der");
                encoders.pem = require("./pem");
            },
            {
                "./der": 12,
                "./pem": 14
            }
        ],
        14: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var DEREncoder = require("./der");
                function PEMEncoder(entity) {
                    DEREncoder.call(this, entity);
                    this.enc = "pem";
                }
                inherits(PEMEncoder, DEREncoder);
                module.exports = PEMEncoder;
                PEMEncoder.prototype.encode = function encode(data, options) {
                    var buf = DEREncoder.prototype.encode.call(this, data);
                    var p = buf.toString("base64");
                    var out = [
                        "-----BEGIN " + options.label + "-----"
                    ];
                    for(var i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
                    out.push("-----END " + options.label + "-----");
                    return out.join("\n");
                };
            },
            {
                "./der": 12,
                "inherits": 143
            }
        ],
        15: [
            function(require, module2, exports2) {
                (function(module, exports) {
                    "use strict"; // Utils
                    function assert(val, msg) {
                        if (!val) throw new Error(msg || "Assertion failed");
                    } // Could use `inherits` module, but don't want to move from single file
                    // architecture yet.
                    function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function TempCtor() {};
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    } // BN
                    function BN(number, base, endian) {
                        if (BN.isBN(number)) return number;
                        this.negative = 0;
                        this.words = null;
                        this.length = 0; // Reduction context
                        this.red = null;
                        if (number !== null) {
                            if (base === "le" || base === "be") {
                                endian = base;
                                base = 10;
                            }
                            this._init(number || 0, base || 10, endian || "be");
                        }
                    }
                    if (_typeof(module) === "object") module.exports = BN;
                    else exports.BN = BN;
                    BN.BN = BN;
                    BN.wordSize = 26;
                    var Buffer;
                    try {
                        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
                        else Buffer = require("buffer").Buffer;
                    } catch (e) {}
                    BN.isBN = function isBN(num) {
                        if (num instanceof BN) return true;
                        return num !== null && _typeof(num) === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                    };
                    BN.max = function max(left, right) {
                        if (left.cmp(right) > 0) return left;
                        return right;
                    };
                    BN.min = function min(left, right) {
                        if (left.cmp(right) < 0) return left;
                        return right;
                    };
                    BN.prototype._init = function init(number, base, endian) {
                        if (typeof number === "number") return this._initNumber(number, base, endian);
                        if (_typeof(number) === "object") return this._initArray(number, base, endian);
                        if (base === "hex") base = 16;
                        assert(base === (base | 0) && base >= 2 && base <= 36);
                        number = number.toString().replace(/\s+/g, "");
                        var start = 0;
                        if (number[0] === "-") {
                            start++;
                            this.negative = 1;
                        }
                        if (start < number.length) {
                            if (base === 16) this._parseHex(number, start, endian);
                            else {
                                this._parseBase(number, base, start);
                                if (endian === "le") this._initArray(this.toArray(), base, endian);
                            }
                        }
                    };
                    BN.prototype._initNumber = function _initNumber(number, base, endian) {
                        if (number < 0) {
                            this.negative = 1;
                            number = -number;
                        }
                        if (number < 0x4000000) {
                            this.words = [
                                number & 0x3ffffff
                            ];
                            this.length = 1;
                        } else if (number < 0x10000000000000) {
                            this.words = [
                                number & 0x3ffffff,
                                number / 0x4000000 & 0x3ffffff
                            ];
                            this.length = 2;
                        } else {
                            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                            this.words = [
                                number & 0x3ffffff,
                                number / 0x4000000 & 0x3ffffff,
                                1
                            ];
                            this.length = 3;
                        }
                        if (endian !== "le") return; // Reverse the bytes
                        this._initArray(this.toArray(), base, endian);
                    };
                    BN.prototype._initArray = function _initArray(number, base, endian) {
                        // Perhaps a Uint8Array
                        assert(typeof number.length === "number");
                        if (number.length <= 0) {
                            this.words = [
                                0
                            ];
                            this.length = 1;
                            return this;
                        }
                        this.length = Math.ceil(number.length / 3);
                        this.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)this.words[i] = 0;
                        var j, w;
                        var off = 0;
                        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
                            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                            this.words[j] |= w << off & 0x3ffffff;
                            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
                            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                            this.words[j] |= w << off & 0x3ffffff;
                            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        return this.strip();
                    };
                    function parseHex4Bits(string, index) {
                        var c = string.charCodeAt(index); // 'A' - 'F'
                        if (c >= 65 && c <= 70) return c - 55; // 'a' - 'f'
                        else if (c >= 97 && c <= 102) return c - 87; // '0' - '9'
                        else return c - 48 & 0xf;
                    }
                    function parseHexByte(string, lowerBound, index) {
                        var r = parseHex4Bits(string, index);
                        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
                        return r;
                    }
                    BN.prototype._parseHex = function _parseHex(number, start, endian) {
                        // Create possibly bigger array to ensure that it fits the number
                        this.length = Math.ceil((number.length - start) / 6);
                        this.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)this.words[i] = 0;
                         // 24-bits chunks
                        var off = 0;
                        var j = 0;
                        var w;
                        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
                            w = parseHexByte(number, start, i) << off;
                            this.words[j] |= w & 0x3ffffff;
                            if (off >= 18) {
                                off -= 18;
                                j += 1;
                                this.words[j] |= w >>> 26;
                            } else off += 8;
                        }
                        else {
                            var parseLength = number.length - start;
                            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                                w = parseHexByte(number, start, i) << off;
                                this.words[j] |= w & 0x3ffffff;
                                if (off >= 18) {
                                    off -= 18;
                                    j += 1;
                                    this.words[j] |= w >>> 26;
                                } else off += 8;
                            }
                        }
                        this.strip();
                    };
                    function parseBase(str, start, end, mul) {
                        var r = 0;
                        var len = Math.min(str.length, end);
                        for(var i = start; i < len; i++){
                            var c = str.charCodeAt(i) - 48;
                            r *= mul; // 'a'
                            if (c >= 49) r += c - 49 + 0xa; // 'A'
                            else if (c >= 17) r += c - 17 + 0xa; // '0' - '9'
                            else r += c;
                        }
                        return r;
                    }
                    BN.prototype._parseBase = function _parseBase(number, base, start) {
                        // Initialize as zero
                        this.words = [
                            0
                        ];
                        this.length = 1; // Find length of limb in base
                        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
                        limbLen--;
                        limbPow = limbPow / base | 0;
                        var total = number.length - start;
                        var mod = total % limbLen;
                        var end = Math.min(total, total - mod) + start;
                        var word = 0;
                        for(var i = start; i < end; i += limbLen){
                            word = parseBase(number, i, i + limbLen, base);
                            this.imuln(limbPow);
                            if (this.words[0] + word < 0x4000000) this.words[0] += word;
                            else this._iaddn(word);
                        }
                        if (mod !== 0) {
                            var pow = 1;
                            word = parseBase(number, i, number.length, base);
                            for(i = 0; i < mod; i++)pow *= base;
                            this.imuln(pow);
                            if (this.words[0] + word < 0x4000000) this.words[0] += word;
                            else this._iaddn(word);
                        }
                        this.strip();
                    };
                    BN.prototype.copy = function copy(dest) {
                        dest.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
                        dest.length = this.length;
                        dest.negative = this.negative;
                        dest.red = this.red;
                    };
                    BN.prototype.clone = function clone() {
                        var r = new BN(null);
                        this.copy(r);
                        return r;
                    };
                    BN.prototype._expand = function _expand(size) {
                        while(this.length < size)this.words[this.length++] = 0;
                        return this;
                    }; // Remove leading `0` from `this`
                    BN.prototype.strip = function strip() {
                        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
                        return this._normSign();
                    };
                    BN.prototype._normSign = function _normSign() {
                        // -0 = 0
                        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
                        return this;
                    };
                    BN.prototype.inspect = function inspect() {
                        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                    };
                    /*
         var zeros = [];
        var groupSizes = [];
        var groupBases = [];
         var s = '';
        var i = -1;
        while (++i < BN.wordSize) {
          zeros[i] = s;
          s += '0';
        }
        groupSizes[0] = 0;
        groupSizes[1] = 0;
        groupBases[0] = 0;
        groupBases[1] = 0;
        var base = 2 - 1;
        while (++base < 36 + 1) {
          var groupSize = 0;
          var groupBase = 1;
          while (groupBase < (1 << BN.wordSize) / base) {
            groupBase *= base;
            groupSize += 1;
          }
          groupSizes[base] = groupSize;
          groupBases[base] = groupBase;
        }
         */ var zeros = [
                        "",
                        "0",
                        "00",
                        "000",
                        "0000",
                        "00000",
                        "000000",
                        "0000000",
                        "00000000",
                        "000000000",
                        "0000000000",
                        "00000000000",
                        "000000000000",
                        "0000000000000",
                        "00000000000000",
                        "000000000000000",
                        "0000000000000000",
                        "00000000000000000",
                        "000000000000000000",
                        "0000000000000000000",
                        "00000000000000000000",
                        "000000000000000000000",
                        "0000000000000000000000",
                        "00000000000000000000000",
                        "000000000000000000000000",
                        "0000000000000000000000000"
                    ];
                    var groupSizes = [
                        0,
                        0,
                        25,
                        16,
                        12,
                        11,
                        10,
                        9,
                        8,
                        8,
                        7,
                        7,
                        7,
                        7,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ];
                    var groupBases = [
                        0,
                        0,
                        33554432,
                        43046721,
                        16777216,
                        48828125,
                        60466176,
                        40353607,
                        16777216,
                        43046721,
                        10000000,
                        19487171,
                        35831808,
                        62748517,
                        7529536,
                        11390625,
                        16777216,
                        24137569,
                        34012224,
                        47045881,
                        64000000,
                        4084101,
                        5153632,
                        6436343,
                        7962624,
                        9765625,
                        11881376,
                        14348907,
                        17210368,
                        20511149,
                        24300000,
                        28629151,
                        33554432,
                        39135393,
                        45435424,
                        52521875,
                        60466176
                    ];
                    BN.prototype.toString = function toString(base, padding) {
                        base = base || 10;
                        padding = padding | 0 || 1;
                        var out;
                        if (base === 16 || base === "hex") {
                            out = "";
                            var off = 0;
                            var carry = 0;
                            for(var i = 0; i < this.length; i++){
                                var w = this.words[i];
                                var word = ((w << off | carry) & 0xffffff).toString(16);
                                carry = w >>> 24 - off & 0xffffff;
                                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                                else out = word + out;
                                off += 2;
                                if (off >= 26) {
                                    off -= 26;
                                    i--;
                                }
                            }
                            if (carry !== 0) out = carry.toString(16) + out;
                            while(out.length % padding !== 0)out = "0" + out;
                            if (this.negative !== 0) out = "-" + out;
                            return out;
                        }
                        if (base === (base | 0) && base >= 2 && base <= 36) {
                            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                            var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);
                            var groupBase = groupBases[base];
                            out = "";
                            var c = this.clone();
                            c.negative = 0;
                            while(!c.isZero()){
                                var r = c.modn(groupBase).toString(base);
                                c = c.idivn(groupBase);
                                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                                else out = r + out;
                            }
                            if (this.isZero()) out = "0" + out;
                            while(out.length % padding !== 0)out = "0" + out;
                            if (this.negative !== 0) out = "-" + out;
                            return out;
                        }
                        assert(false, "Base should be between 2 and 36");
                    };
                    BN.prototype.toNumber = function toNumber() {
                        var ret = this.words[0];
                        if (this.length === 2) ret += this.words[1] * 0x4000000;
                        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
                        ret += 0x10000000000000 + this.words[1] * 0x4000000;
                        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
                        return this.negative !== 0 ? -ret : ret;
                    };
                    BN.prototype.toJSON = function toJSON() {
                        return this.toString(16);
                    };
                    BN.prototype.toBuffer = function toBuffer(endian, length) {
                        assert(typeof Buffer !== "undefined");
                        return this.toArrayLike(Buffer, endian, length);
                    };
                    BN.prototype.toArray = function toArray(endian, length) {
                        return this.toArrayLike(Array, endian, length);
                    };
                    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                        var byteLength = this.byteLength();
                        var reqLength = length || Math.max(1, byteLength);
                        assert(byteLength <= reqLength, "byte array longer than desired length");
                        assert(reqLength > 0, "Requested array length <= 0");
                        this.strip();
                        var littleEndian = endian === "le";
                        var res = new ArrayType(reqLength);
                        var b, i;
                        var q = this.clone();
                        if (!littleEndian) {
                            // Assume big-endian
                            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
                            for(i = 0; !q.isZero(); i++){
                                b = q.andln(0xff);
                                q.iushrn(8);
                                res[reqLength - i - 1] = b;
                            }
                        } else {
                            for(i = 0; !q.isZero(); i++){
                                b = q.andln(0xff);
                                q.iushrn(8);
                                res[i] = b;
                            }
                            for(; i < reqLength; i++)res[i] = 0;
                        }
                        return res;
                    };
                    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
                        return 32 - Math.clz32(w);
                    };
                    else BN.prototype._countBits = function _countBits(w) {
                        var t = w;
                        var r = 0;
                        if (t >= 0x1000) {
                            r += 13;
                            t >>>= 13;
                        }
                        if (t >= 0x40) {
                            r += 7;
                            t >>>= 7;
                        }
                        if (t >= 0x8) {
                            r += 4;
                            t >>>= 4;
                        }
                        if (t >= 0x02) {
                            r += 2;
                            t >>>= 2;
                        }
                        return r + t;
                    };
                    BN.prototype._zeroBits = function _zeroBits(w) {
                        // Short-cut
                        if (w === 0) return 26;
                        var t = w;
                        var r = 0;
                        if ((t & 0x1fff) === 0) {
                            r += 13;
                            t >>>= 13;
                        }
                        if ((t & 0x7f) === 0) {
                            r += 7;
                            t >>>= 7;
                        }
                        if ((t & 0xf) === 0) {
                            r += 4;
                            t >>>= 4;
                        }
                        if ((t & 0x3) === 0) {
                            r += 2;
                            t >>>= 2;
                        }
                        if ((t & 0x1) === 0) r++;
                        return r;
                    }; // Return number of used bits in a BN
                    BN.prototype.bitLength = function bitLength() {
                        var w = this.words[this.length - 1];
                        var hi = this._countBits(w);
                        return (this.length - 1) * 26 + hi;
                    };
                    function toBitArray(num) {
                        var w = new Array(num.bitLength());
                        for(var bit = 0; bit < w.length; bit++){
                            var off = bit / 26 | 0;
                            var wbit = bit % 26;
                            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
                        }
                        return w;
                    } // Number of trailing zero bits
                    BN.prototype.zeroBits = function zeroBits() {
                        if (this.isZero()) return 0;
                        var r = 0;
                        for(var i = 0; i < this.length; i++){
                            var b = this._zeroBits(this.words[i]);
                            r += b;
                            if (b !== 26) break;
                        }
                        return r;
                    };
                    BN.prototype.byteLength = function byteLength() {
                        return Math.ceil(this.bitLength() / 8);
                    };
                    BN.prototype.toTwos = function toTwos(width) {
                        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
                        return this.clone();
                    };
                    BN.prototype.fromTwos = function fromTwos(width) {
                        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
                        return this.clone();
                    };
                    BN.prototype.isNeg = function isNeg() {
                        return this.negative !== 0;
                    }; // Return negative clone of `this`
                    BN.prototype.neg = function neg() {
                        return this.clone().ineg();
                    };
                    BN.prototype.ineg = function ineg() {
                        if (!this.isZero()) this.negative ^= 1;
                        return this;
                    }; // Or `num` with `this` in-place
                    BN.prototype.iuor = function iuor(num) {
                        while(this.length < num.length)this.words[this.length++] = 0;
                        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
                        return this.strip();
                    };
                    BN.prototype.ior = function ior(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuor(num);
                    }; // Or `num` with `this`
                    BN.prototype.or = function or(num) {
                        if (this.length > num.length) return this.clone().ior(num);
                        return num.clone().ior(this);
                    };
                    BN.prototype.uor = function uor(num) {
                        if (this.length > num.length) return this.clone().iuor(num);
                        return num.clone().iuor(this);
                    }; // And `num` with `this` in-place
                    BN.prototype.iuand = function iuand(num) {
                        // b = min-length(num, this)
                        var b;
                        if (this.length > num.length) b = num;
                        else b = this;
                        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
                        this.length = b.length;
                        return this.strip();
                    };
                    BN.prototype.iand = function iand(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuand(num);
                    }; // And `num` with `this`
                    BN.prototype.and = function and(num) {
                        if (this.length > num.length) return this.clone().iand(num);
                        return num.clone().iand(this);
                    };
                    BN.prototype.uand = function uand(num) {
                        if (this.length > num.length) return this.clone().iuand(num);
                        return num.clone().iuand(this);
                    }; // Xor `num` with `this` in-place
                    BN.prototype.iuxor = function iuxor(num) {
                        // a.length > b.length
                        var a;
                        var b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
                        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
                        this.length = a.length;
                        return this.strip();
                    };
                    BN.prototype.ixor = function ixor(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuxor(num);
                    }; // Xor `num` with `this`
                    BN.prototype.xor = function xor(num) {
                        if (this.length > num.length) return this.clone().ixor(num);
                        return num.clone().ixor(this);
                    };
                    BN.prototype.uxor = function uxor(num) {
                        if (this.length > num.length) return this.clone().iuxor(num);
                        return num.clone().iuxor(this);
                    }; // Not ``this`` with ``width`` bitwidth
                    BN.prototype.inotn = function inotn(width) {
                        assert(typeof width === "number" && width >= 0);
                        var bytesNeeded = Math.ceil(width / 26) | 0;
                        var bitsLeft = width % 26; // Extend the buffer with leading zeroes
                        this._expand(bytesNeeded);
                        if (bitsLeft > 0) bytesNeeded--;
                         // Handle complete words
                        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
                         // Handle the residue
                        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
                         // And remove leading zeroes
                        return this.strip();
                    };
                    BN.prototype.notn = function notn(width) {
                        return this.clone().inotn(width);
                    }; // Set `bit` of `this`
                    BN.prototype.setn = function setn(bit, val) {
                        assert(typeof bit === "number" && bit >= 0);
                        var off = bit / 26 | 0;
                        var wbit = bit % 26;
                        this._expand(off + 1);
                        if (val) this.words[off] = this.words[off] | 1 << wbit;
                        else this.words[off] = this.words[off] & ~(1 << wbit);
                        return this.strip();
                    }; // Add `num` to `this` in-place
                    BN.prototype.iadd = function iadd(num) {
                        var r; // negative + positive
                        if (this.negative !== 0 && num.negative === 0) {
                            this.negative = 0;
                            r = this.isub(num);
                            this.negative ^= 1;
                            return this._normSign(); // positive + negative
                        } else if (this.negative === 0 && num.negative !== 0) {
                            num.negative = 0;
                            r = this.isub(num);
                            num.negative = 1;
                            return r._normSign();
                        } // a.length > b.length
                        var a, b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        var carry = 0;
                        for(var i = 0; i < b.length; i++){
                            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        for(; carry !== 0 && i < a.length; i++){
                            r = (a.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        this.length = a.length;
                        if (carry !== 0) {
                            this.words[this.length] = carry;
                            this.length++; // Copy the rest of the words
                        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
                        return this;
                    }; // Add `num` to `this`
                    BN.prototype.add = function add(num) {
                        var res;
                        if (num.negative !== 0 && this.negative === 0) {
                            num.negative = 0;
                            res = this.sub(num);
                            num.negative ^= 1;
                            return res;
                        } else if (num.negative === 0 && this.negative !== 0) {
                            this.negative = 0;
                            res = num.sub(this);
                            this.negative = 1;
                            return res;
                        }
                        if (this.length > num.length) return this.clone().iadd(num);
                        return num.clone().iadd(this);
                    }; // Subtract `num` from `this` in-place
                    BN.prototype.isub = function isub(num) {
                        // this - (-num) = this + num
                        if (num.negative !== 0) {
                            num.negative = 0;
                            var r = this.iadd(num);
                            num.negative = 1;
                            return r._normSign(); // -this - num = -(this + num)
                        } else if (this.negative !== 0) {
                            this.negative = 0;
                            this.iadd(num);
                            this.negative = 1;
                            return this._normSign();
                        } // At this point both numbers are positive
                        var cmp = this.cmp(num); // Optimization - zeroify
                        if (cmp === 0) {
                            this.negative = 0;
                            this.length = 1;
                            this.words[0] = 0;
                            return this;
                        } // a > b
                        var a, b;
                        if (cmp > 0) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        var carry = 0;
                        for(var i = 0; i < b.length; i++){
                            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        }
                        for(; carry !== 0 && i < a.length; i++){
                            r = (a.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        } // Copy rest of the words
                        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
                        this.length = Math.max(this.length, i);
                        if (a !== this) this.negative = 1;
                        return this.strip();
                    }; // Subtract `num` from `this`
                    BN.prototype.sub = function sub(num) {
                        return this.clone().isub(num);
                    };
                    function smallMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        var len = self.length + num.length | 0;
                        out.length = len;
                        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)
                        var a = self.words[0] | 0;
                        var b = num.words[0] | 0;
                        var r = a * b;
                        var lo = r & 0x3ffffff;
                        var carry = r / 0x4000000 | 0;
                        out.words[0] = lo;
                        for(var k = 1; k < len; k++){
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = carry >>> 26;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                                var i = k - j | 0;
                                a = self.words[i] | 0;
                                b = num.words[j] | 0;
                                r = a * b + rword;
                                ncarry += r / 0x4000000 | 0;
                                rword = r & 0x3ffffff;
                            }
                            out.words[k] = rword | 0;
                            carry = ncarry | 0;
                        }
                        if (carry !== 0) out.words[k] = carry | 0;
                        else out.length--;
                        return out.strip();
                    } // TODO(indutny): it may be reasonable to omit it for users who don't need
                    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                    // multiplication (like elliptic secp256k1).
                    var comb10MulTo = function comb10MulTo(self, num, out) {
                        var a = self.words;
                        var b = num.words;
                        var o = out.words;
                        var c = 0;
                        var lo;
                        var mid;
                        var hi;
                        var a0 = a[0] | 0;
                        var al0 = a0 & 0x1fff;
                        var ah0 = a0 >>> 13;
                        var a1 = a[1] | 0;
                        var al1 = a1 & 0x1fff;
                        var ah1 = a1 >>> 13;
                        var a2 = a[2] | 0;
                        var al2 = a2 & 0x1fff;
                        var ah2 = a2 >>> 13;
                        var a3 = a[3] | 0;
                        var al3 = a3 & 0x1fff;
                        var ah3 = a3 >>> 13;
                        var a4 = a[4] | 0;
                        var al4 = a4 & 0x1fff;
                        var ah4 = a4 >>> 13;
                        var a5 = a[5] | 0;
                        var al5 = a5 & 0x1fff;
                        var ah5 = a5 >>> 13;
                        var a6 = a[6] | 0;
                        var al6 = a6 & 0x1fff;
                        var ah6 = a6 >>> 13;
                        var a7 = a[7] | 0;
                        var al7 = a7 & 0x1fff;
                        var ah7 = a7 >>> 13;
                        var a8 = a[8] | 0;
                        var al8 = a8 & 0x1fff;
                        var ah8 = a8 >>> 13;
                        var a9 = a[9] | 0;
                        var al9 = a9 & 0x1fff;
                        var ah9 = a9 >>> 13;
                        var b0 = b[0] | 0;
                        var bl0 = b0 & 0x1fff;
                        var bh0 = b0 >>> 13;
                        var b1 = b[1] | 0;
                        var bl1 = b1 & 0x1fff;
                        var bh1 = b1 >>> 13;
                        var b2 = b[2] | 0;
                        var bl2 = b2 & 0x1fff;
                        var bh2 = b2 >>> 13;
                        var b3 = b[3] | 0;
                        var bl3 = b3 & 0x1fff;
                        var bh3 = b3 >>> 13;
                        var b4 = b[4] | 0;
                        var bl4 = b4 & 0x1fff;
                        var bh4 = b4 >>> 13;
                        var b5 = b[5] | 0;
                        var bl5 = b5 & 0x1fff;
                        var bh5 = b5 >>> 13;
                        var b6 = b[6] | 0;
                        var bl6 = b6 & 0x1fff;
                        var bh6 = b6 >>> 13;
                        var b7 = b[7] | 0;
                        var bl7 = b7 & 0x1fff;
                        var bh7 = b7 >>> 13;
                        var b8 = b[8] | 0;
                        var bl8 = b8 & 0x1fff;
                        var bh8 = b8 >>> 13;
                        var b9 = b[9] | 0;
                        var bl9 = b9 & 0x1fff;
                        var bh9 = b9 >>> 13;
                        out.negative = self.negative ^ num.negative;
                        out.length = 19;
                        /* k = 0 */ lo = Math.imul(al0, bl0);
                        mid = Math.imul(al0, bh0);
                        mid = mid + Math.imul(ah0, bl0) | 0;
                        hi = Math.imul(ah0, bh0);
                        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                        w0 &= 0x3ffffff;
                        /* k = 1 */ lo = Math.imul(al1, bl0);
                        mid = Math.imul(al1, bh0);
                        mid = mid + Math.imul(ah1, bl0) | 0;
                        hi = Math.imul(ah1, bh0);
                        lo = lo + Math.imul(al0, bl1) | 0;
                        mid = mid + Math.imul(al0, bh1) | 0;
                        mid = mid + Math.imul(ah0, bl1) | 0;
                        hi = hi + Math.imul(ah0, bh1) | 0;
                        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                        w1 &= 0x3ffffff;
                        /* k = 2 */ lo = Math.imul(al2, bl0);
                        mid = Math.imul(al2, bh0);
                        mid = mid + Math.imul(ah2, bl0) | 0;
                        hi = Math.imul(ah2, bh0);
                        lo = lo + Math.imul(al1, bl1) | 0;
                        mid = mid + Math.imul(al1, bh1) | 0;
                        mid = mid + Math.imul(ah1, bl1) | 0;
                        hi = hi + Math.imul(ah1, bh1) | 0;
                        lo = lo + Math.imul(al0, bl2) | 0;
                        mid = mid + Math.imul(al0, bh2) | 0;
                        mid = mid + Math.imul(ah0, bl2) | 0;
                        hi = hi + Math.imul(ah0, bh2) | 0;
                        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                        w2 &= 0x3ffffff;
                        /* k = 3 */ lo = Math.imul(al3, bl0);
                        mid = Math.imul(al3, bh0);
                        mid = mid + Math.imul(ah3, bl0) | 0;
                        hi = Math.imul(ah3, bh0);
                        lo = lo + Math.imul(al2, bl1) | 0;
                        mid = mid + Math.imul(al2, bh1) | 0;
                        mid = mid + Math.imul(ah2, bl1) | 0;
                        hi = hi + Math.imul(ah2, bh1) | 0;
                        lo = lo + Math.imul(al1, bl2) | 0;
                        mid = mid + Math.imul(al1, bh2) | 0;
                        mid = mid + Math.imul(ah1, bl2) | 0;
                        hi = hi + Math.imul(ah1, bh2) | 0;
                        lo = lo + Math.imul(al0, bl3) | 0;
                        mid = mid + Math.imul(al0, bh3) | 0;
                        mid = mid + Math.imul(ah0, bl3) | 0;
                        hi = hi + Math.imul(ah0, bh3) | 0;
                        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                        w3 &= 0x3ffffff;
                        /* k = 4 */ lo = Math.imul(al4, bl0);
                        mid = Math.imul(al4, bh0);
                        mid = mid + Math.imul(ah4, bl0) | 0;
                        hi = Math.imul(ah4, bh0);
                        lo = lo + Math.imul(al3, bl1) | 0;
                        mid = mid + Math.imul(al3, bh1) | 0;
                        mid = mid + Math.imul(ah3, bl1) | 0;
                        hi = hi + Math.imul(ah3, bh1) | 0;
                        lo = lo + Math.imul(al2, bl2) | 0;
                        mid = mid + Math.imul(al2, bh2) | 0;
                        mid = mid + Math.imul(ah2, bl2) | 0;
                        hi = hi + Math.imul(ah2, bh2) | 0;
                        lo = lo + Math.imul(al1, bl3) | 0;
                        mid = mid + Math.imul(al1, bh3) | 0;
                        mid = mid + Math.imul(ah1, bl3) | 0;
                        hi = hi + Math.imul(ah1, bh3) | 0;
                        lo = lo + Math.imul(al0, bl4) | 0;
                        mid = mid + Math.imul(al0, bh4) | 0;
                        mid = mid + Math.imul(ah0, bl4) | 0;
                        hi = hi + Math.imul(ah0, bh4) | 0;
                        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                        w4 &= 0x3ffffff;
                        /* k = 5 */ lo = Math.imul(al5, bl0);
                        mid = Math.imul(al5, bh0);
                        mid = mid + Math.imul(ah5, bl0) | 0;
                        hi = Math.imul(ah5, bh0);
                        lo = lo + Math.imul(al4, bl1) | 0;
                        mid = mid + Math.imul(al4, bh1) | 0;
                        mid = mid + Math.imul(ah4, bl1) | 0;
                        hi = hi + Math.imul(ah4, bh1) | 0;
                        lo = lo + Math.imul(al3, bl2) | 0;
                        mid = mid + Math.imul(al3, bh2) | 0;
                        mid = mid + Math.imul(ah3, bl2) | 0;
                        hi = hi + Math.imul(ah3, bh2) | 0;
                        lo = lo + Math.imul(al2, bl3) | 0;
                        mid = mid + Math.imul(al2, bh3) | 0;
                        mid = mid + Math.imul(ah2, bl3) | 0;
                        hi = hi + Math.imul(ah2, bh3) | 0;
                        lo = lo + Math.imul(al1, bl4) | 0;
                        mid = mid + Math.imul(al1, bh4) | 0;
                        mid = mid + Math.imul(ah1, bl4) | 0;
                        hi = hi + Math.imul(ah1, bh4) | 0;
                        lo = lo + Math.imul(al0, bl5) | 0;
                        mid = mid + Math.imul(al0, bh5) | 0;
                        mid = mid + Math.imul(ah0, bl5) | 0;
                        hi = hi + Math.imul(ah0, bh5) | 0;
                        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                        w5 &= 0x3ffffff;
                        /* k = 6 */ lo = Math.imul(al6, bl0);
                        mid = Math.imul(al6, bh0);
                        mid = mid + Math.imul(ah6, bl0) | 0;
                        hi = Math.imul(ah6, bh0);
                        lo = lo + Math.imul(al5, bl1) | 0;
                        mid = mid + Math.imul(al5, bh1) | 0;
                        mid = mid + Math.imul(ah5, bl1) | 0;
                        hi = hi + Math.imul(ah5, bh1) | 0;
                        lo = lo + Math.imul(al4, bl2) | 0;
                        mid = mid + Math.imul(al4, bh2) | 0;
                        mid = mid + Math.imul(ah4, bl2) | 0;
                        hi = hi + Math.imul(ah4, bh2) | 0;
                        lo = lo + Math.imul(al3, bl3) | 0;
                        mid = mid + Math.imul(al3, bh3) | 0;
                        mid = mid + Math.imul(ah3, bl3) | 0;
                        hi = hi + Math.imul(ah3, bh3) | 0;
                        lo = lo + Math.imul(al2, bl4) | 0;
                        mid = mid + Math.imul(al2, bh4) | 0;
                        mid = mid + Math.imul(ah2, bl4) | 0;
                        hi = hi + Math.imul(ah2, bh4) | 0;
                        lo = lo + Math.imul(al1, bl5) | 0;
                        mid = mid + Math.imul(al1, bh5) | 0;
                        mid = mid + Math.imul(ah1, bl5) | 0;
                        hi = hi + Math.imul(ah1, bh5) | 0;
                        lo = lo + Math.imul(al0, bl6) | 0;
                        mid = mid + Math.imul(al0, bh6) | 0;
                        mid = mid + Math.imul(ah0, bl6) | 0;
                        hi = hi + Math.imul(ah0, bh6) | 0;
                        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                        w6 &= 0x3ffffff;
                        /* k = 7 */ lo = Math.imul(al7, bl0);
                        mid = Math.imul(al7, bh0);
                        mid = mid + Math.imul(ah7, bl0) | 0;
                        hi = Math.imul(ah7, bh0);
                        lo = lo + Math.imul(al6, bl1) | 0;
                        mid = mid + Math.imul(al6, bh1) | 0;
                        mid = mid + Math.imul(ah6, bl1) | 0;
                        hi = hi + Math.imul(ah6, bh1) | 0;
                        lo = lo + Math.imul(al5, bl2) | 0;
                        mid = mid + Math.imul(al5, bh2) | 0;
                        mid = mid + Math.imul(ah5, bl2) | 0;
                        hi = hi + Math.imul(ah5, bh2) | 0;
                        lo = lo + Math.imul(al4, bl3) | 0;
                        mid = mid + Math.imul(al4, bh3) | 0;
                        mid = mid + Math.imul(ah4, bl3) | 0;
                        hi = hi + Math.imul(ah4, bh3) | 0;
                        lo = lo + Math.imul(al3, bl4) | 0;
                        mid = mid + Math.imul(al3, bh4) | 0;
                        mid = mid + Math.imul(ah3, bl4) | 0;
                        hi = hi + Math.imul(ah3, bh4) | 0;
                        lo = lo + Math.imul(al2, bl5) | 0;
                        mid = mid + Math.imul(al2, bh5) | 0;
                        mid = mid + Math.imul(ah2, bl5) | 0;
                        hi = hi + Math.imul(ah2, bh5) | 0;
                        lo = lo + Math.imul(al1, bl6) | 0;
                        mid = mid + Math.imul(al1, bh6) | 0;
                        mid = mid + Math.imul(ah1, bl6) | 0;
                        hi = hi + Math.imul(ah1, bh6) | 0;
                        lo = lo + Math.imul(al0, bl7) | 0;
                        mid = mid + Math.imul(al0, bh7) | 0;
                        mid = mid + Math.imul(ah0, bl7) | 0;
                        hi = hi + Math.imul(ah0, bh7) | 0;
                        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                        w7 &= 0x3ffffff;
                        /* k = 8 */ lo = Math.imul(al8, bl0);
                        mid = Math.imul(al8, bh0);
                        mid = mid + Math.imul(ah8, bl0) | 0;
                        hi = Math.imul(ah8, bh0);
                        lo = lo + Math.imul(al7, bl1) | 0;
                        mid = mid + Math.imul(al7, bh1) | 0;
                        mid = mid + Math.imul(ah7, bl1) | 0;
                        hi = hi + Math.imul(ah7, bh1) | 0;
                        lo = lo + Math.imul(al6, bl2) | 0;
                        mid = mid + Math.imul(al6, bh2) | 0;
                        mid = mid + Math.imul(ah6, bl2) | 0;
                        hi = hi + Math.imul(ah6, bh2) | 0;
                        lo = lo + Math.imul(al5, bl3) | 0;
                        mid = mid + Math.imul(al5, bh3) | 0;
                        mid = mid + Math.imul(ah5, bl3) | 0;
                        hi = hi + Math.imul(ah5, bh3) | 0;
                        lo = lo + Math.imul(al4, bl4) | 0;
                        mid = mid + Math.imul(al4, bh4) | 0;
                        mid = mid + Math.imul(ah4, bl4) | 0;
                        hi = hi + Math.imul(ah4, bh4) | 0;
                        lo = lo + Math.imul(al3, bl5) | 0;
                        mid = mid + Math.imul(al3, bh5) | 0;
                        mid = mid + Math.imul(ah3, bl5) | 0;
                        hi = hi + Math.imul(ah3, bh5) | 0;
                        lo = lo + Math.imul(al2, bl6) | 0;
                        mid = mid + Math.imul(al2, bh6) | 0;
                        mid = mid + Math.imul(ah2, bl6) | 0;
                        hi = hi + Math.imul(ah2, bh6) | 0;
                        lo = lo + Math.imul(al1, bl7) | 0;
                        mid = mid + Math.imul(al1, bh7) | 0;
                        mid = mid + Math.imul(ah1, bl7) | 0;
                        hi = hi + Math.imul(ah1, bh7) | 0;
                        lo = lo + Math.imul(al0, bl8) | 0;
                        mid = mid + Math.imul(al0, bh8) | 0;
                        mid = mid + Math.imul(ah0, bl8) | 0;
                        hi = hi + Math.imul(ah0, bh8) | 0;
                        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                        w8 &= 0x3ffffff;
                        /* k = 9 */ lo = Math.imul(al9, bl0);
                        mid = Math.imul(al9, bh0);
                        mid = mid + Math.imul(ah9, bl0) | 0;
                        hi = Math.imul(ah9, bh0);
                        lo = lo + Math.imul(al8, bl1) | 0;
                        mid = mid + Math.imul(al8, bh1) | 0;
                        mid = mid + Math.imul(ah8, bl1) | 0;
                        hi = hi + Math.imul(ah8, bh1) | 0;
                        lo = lo + Math.imul(al7, bl2) | 0;
                        mid = mid + Math.imul(al7, bh2) | 0;
                        mid = mid + Math.imul(ah7, bl2) | 0;
                        hi = hi + Math.imul(ah7, bh2) | 0;
                        lo = lo + Math.imul(al6, bl3) | 0;
                        mid = mid + Math.imul(al6, bh3) | 0;
                        mid = mid + Math.imul(ah6, bl3) | 0;
                        hi = hi + Math.imul(ah6, bh3) | 0;
                        lo = lo + Math.imul(al5, bl4) | 0;
                        mid = mid + Math.imul(al5, bh4) | 0;
                        mid = mid + Math.imul(ah5, bl4) | 0;
                        hi = hi + Math.imul(ah5, bh4) | 0;
                        lo = lo + Math.imul(al4, bl5) | 0;
                        mid = mid + Math.imul(al4, bh5) | 0;
                        mid = mid + Math.imul(ah4, bl5) | 0;
                        hi = hi + Math.imul(ah4, bh5) | 0;
                        lo = lo + Math.imul(al3, bl6) | 0;
                        mid = mid + Math.imul(al3, bh6) | 0;
                        mid = mid + Math.imul(ah3, bl6) | 0;
                        hi = hi + Math.imul(ah3, bh6) | 0;
                        lo = lo + Math.imul(al2, bl7) | 0;
                        mid = mid + Math.imul(al2, bh7) | 0;
                        mid = mid + Math.imul(ah2, bl7) | 0;
                        hi = hi + Math.imul(ah2, bh7) | 0;
                        lo = lo + Math.imul(al1, bl8) | 0;
                        mid = mid + Math.imul(al1, bh8) | 0;
                        mid = mid + Math.imul(ah1, bl8) | 0;
                        hi = hi + Math.imul(ah1, bh8) | 0;
                        lo = lo + Math.imul(al0, bl9) | 0;
                        mid = mid + Math.imul(al0, bh9) | 0;
                        mid = mid + Math.imul(ah0, bl9) | 0;
                        hi = hi + Math.imul(ah0, bh9) | 0;
                        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                        w9 &= 0x3ffffff;
                        /* k = 10 */ lo = Math.imul(al9, bl1);
                        mid = Math.imul(al9, bh1);
                        mid = mid + Math.imul(ah9, bl1) | 0;
                        hi = Math.imul(ah9, bh1);
                        lo = lo + Math.imul(al8, bl2) | 0;
                        mid = mid + Math.imul(al8, bh2) | 0;
                        mid = mid + Math.imul(ah8, bl2) | 0;
                        hi = hi + Math.imul(ah8, bh2) | 0;
                        lo = lo + Math.imul(al7, bl3) | 0;
                        mid = mid + Math.imul(al7, bh3) | 0;
                        mid = mid + Math.imul(ah7, bl3) | 0;
                        hi = hi + Math.imul(ah7, bh3) | 0;
                        lo = lo + Math.imul(al6, bl4) | 0;
                        mid = mid + Math.imul(al6, bh4) | 0;
                        mid = mid + Math.imul(ah6, bl4) | 0;
                        hi = hi + Math.imul(ah6, bh4) | 0;
                        lo = lo + Math.imul(al5, bl5) | 0;
                        mid = mid + Math.imul(al5, bh5) | 0;
                        mid = mid + Math.imul(ah5, bl5) | 0;
                        hi = hi + Math.imul(ah5, bh5) | 0;
                        lo = lo + Math.imul(al4, bl6) | 0;
                        mid = mid + Math.imul(al4, bh6) | 0;
                        mid = mid + Math.imul(ah4, bl6) | 0;
                        hi = hi + Math.imul(ah4, bh6) | 0;
                        lo = lo + Math.imul(al3, bl7) | 0;
                        mid = mid + Math.imul(al3, bh7) | 0;
                        mid = mid + Math.imul(ah3, bl7) | 0;
                        hi = hi + Math.imul(ah3, bh7) | 0;
                        lo = lo + Math.imul(al2, bl8) | 0;
                        mid = mid + Math.imul(al2, bh8) | 0;
                        mid = mid + Math.imul(ah2, bl8) | 0;
                        hi = hi + Math.imul(ah2, bh8) | 0;
                        lo = lo + Math.imul(al1, bl9) | 0;
                        mid = mid + Math.imul(al1, bh9) | 0;
                        mid = mid + Math.imul(ah1, bl9) | 0;
                        hi = hi + Math.imul(ah1, bh9) | 0;
                        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                        w10 &= 0x3ffffff;
                        /* k = 11 */ lo = Math.imul(al9, bl2);
                        mid = Math.imul(al9, bh2);
                        mid = mid + Math.imul(ah9, bl2) | 0;
                        hi = Math.imul(ah9, bh2);
                        lo = lo + Math.imul(al8, bl3) | 0;
                        mid = mid + Math.imul(al8, bh3) | 0;
                        mid = mid + Math.imul(ah8, bl3) | 0;
                        hi = hi + Math.imul(ah8, bh3) | 0;
                        lo = lo + Math.imul(al7, bl4) | 0;
                        mid = mid + Math.imul(al7, bh4) | 0;
                        mid = mid + Math.imul(ah7, bl4) | 0;
                        hi = hi + Math.imul(ah7, bh4) | 0;
                        lo = lo + Math.imul(al6, bl5) | 0;
                        mid = mid + Math.imul(al6, bh5) | 0;
                        mid = mid + Math.imul(ah6, bl5) | 0;
                        hi = hi + Math.imul(ah6, bh5) | 0;
                        lo = lo + Math.imul(al5, bl6) | 0;
                        mid = mid + Math.imul(al5, bh6) | 0;
                        mid = mid + Math.imul(ah5, bl6) | 0;
                        hi = hi + Math.imul(ah5, bh6) | 0;
                        lo = lo + Math.imul(al4, bl7) | 0;
                        mid = mid + Math.imul(al4, bh7) | 0;
                        mid = mid + Math.imul(ah4, bl7) | 0;
                        hi = hi + Math.imul(ah4, bh7) | 0;
                        lo = lo + Math.imul(al3, bl8) | 0;
                        mid = mid + Math.imul(al3, bh8) | 0;
                        mid = mid + Math.imul(ah3, bl8) | 0;
                        hi = hi + Math.imul(ah3, bh8) | 0;
                        lo = lo + Math.imul(al2, bl9) | 0;
                        mid = mid + Math.imul(al2, bh9) | 0;
                        mid = mid + Math.imul(ah2, bl9) | 0;
                        hi = hi + Math.imul(ah2, bh9) | 0;
                        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                        w11 &= 0x3ffffff;
                        /* k = 12 */ lo = Math.imul(al9, bl3);
                        mid = Math.imul(al9, bh3);
                        mid = mid + Math.imul(ah9, bl3) | 0;
                        hi = Math.imul(ah9, bh3);
                        lo = lo + Math.imul(al8, bl4) | 0;
                        mid = mid + Math.imul(al8, bh4) | 0;
                        mid = mid + Math.imul(ah8, bl4) | 0;
                        hi = hi + Math.imul(ah8, bh4) | 0;
                        lo = lo + Math.imul(al7, bl5) | 0;
                        mid = mid + Math.imul(al7, bh5) | 0;
                        mid = mid + Math.imul(ah7, bl5) | 0;
                        hi = hi + Math.imul(ah7, bh5) | 0;
                        lo = lo + Math.imul(al6, bl6) | 0;
                        mid = mid + Math.imul(al6, bh6) | 0;
                        mid = mid + Math.imul(ah6, bl6) | 0;
                        hi = hi + Math.imul(ah6, bh6) | 0;
                        lo = lo + Math.imul(al5, bl7) | 0;
                        mid = mid + Math.imul(al5, bh7) | 0;
                        mid = mid + Math.imul(ah5, bl7) | 0;
                        hi = hi + Math.imul(ah5, bh7) | 0;
                        lo = lo + Math.imul(al4, bl8) | 0;
                        mid = mid + Math.imul(al4, bh8) | 0;
                        mid = mid + Math.imul(ah4, bl8) | 0;
                        hi = hi + Math.imul(ah4, bh8) | 0;
                        lo = lo + Math.imul(al3, bl9) | 0;
                        mid = mid + Math.imul(al3, bh9) | 0;
                        mid = mid + Math.imul(ah3, bl9) | 0;
                        hi = hi + Math.imul(ah3, bh9) | 0;
                        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                        w12 &= 0x3ffffff;
                        /* k = 13 */ lo = Math.imul(al9, bl4);
                        mid = Math.imul(al9, bh4);
                        mid = mid + Math.imul(ah9, bl4) | 0;
                        hi = Math.imul(ah9, bh4);
                        lo = lo + Math.imul(al8, bl5) | 0;
                        mid = mid + Math.imul(al8, bh5) | 0;
                        mid = mid + Math.imul(ah8, bl5) | 0;
                        hi = hi + Math.imul(ah8, bh5) | 0;
                        lo = lo + Math.imul(al7, bl6) | 0;
                        mid = mid + Math.imul(al7, bh6) | 0;
                        mid = mid + Math.imul(ah7, bl6) | 0;
                        hi = hi + Math.imul(ah7, bh6) | 0;
                        lo = lo + Math.imul(al6, bl7) | 0;
                        mid = mid + Math.imul(al6, bh7) | 0;
                        mid = mid + Math.imul(ah6, bl7) | 0;
                        hi = hi + Math.imul(ah6, bh7) | 0;
                        lo = lo + Math.imul(al5, bl8) | 0;
                        mid = mid + Math.imul(al5, bh8) | 0;
                        mid = mid + Math.imul(ah5, bl8) | 0;
                        hi = hi + Math.imul(ah5, bh8) | 0;
                        lo = lo + Math.imul(al4, bl9) | 0;
                        mid = mid + Math.imul(al4, bh9) | 0;
                        mid = mid + Math.imul(ah4, bl9) | 0;
                        hi = hi + Math.imul(ah4, bh9) | 0;
                        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                        w13 &= 0x3ffffff;
                        /* k = 14 */ lo = Math.imul(al9, bl5);
                        mid = Math.imul(al9, bh5);
                        mid = mid + Math.imul(ah9, bl5) | 0;
                        hi = Math.imul(ah9, bh5);
                        lo = lo + Math.imul(al8, bl6) | 0;
                        mid = mid + Math.imul(al8, bh6) | 0;
                        mid = mid + Math.imul(ah8, bl6) | 0;
                        hi = hi + Math.imul(ah8, bh6) | 0;
                        lo = lo + Math.imul(al7, bl7) | 0;
                        mid = mid + Math.imul(al7, bh7) | 0;
                        mid = mid + Math.imul(ah7, bl7) | 0;
                        hi = hi + Math.imul(ah7, bh7) | 0;
                        lo = lo + Math.imul(al6, bl8) | 0;
                        mid = mid + Math.imul(al6, bh8) | 0;
                        mid = mid + Math.imul(ah6, bl8) | 0;
                        hi = hi + Math.imul(ah6, bh8) | 0;
                        lo = lo + Math.imul(al5, bl9) | 0;
                        mid = mid + Math.imul(al5, bh9) | 0;
                        mid = mid + Math.imul(ah5, bl9) | 0;
                        hi = hi + Math.imul(ah5, bh9) | 0;
                        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                        w14 &= 0x3ffffff;
                        /* k = 15 */ lo = Math.imul(al9, bl6);
                        mid = Math.imul(al9, bh6);
                        mid = mid + Math.imul(ah9, bl6) | 0;
                        hi = Math.imul(ah9, bh6);
                        lo = lo + Math.imul(al8, bl7) | 0;
                        mid = mid + Math.imul(al8, bh7) | 0;
                        mid = mid + Math.imul(ah8, bl7) | 0;
                        hi = hi + Math.imul(ah8, bh7) | 0;
                        lo = lo + Math.imul(al7, bl8) | 0;
                        mid = mid + Math.imul(al7, bh8) | 0;
                        mid = mid + Math.imul(ah7, bl8) | 0;
                        hi = hi + Math.imul(ah7, bh8) | 0;
                        lo = lo + Math.imul(al6, bl9) | 0;
                        mid = mid + Math.imul(al6, bh9) | 0;
                        mid = mid + Math.imul(ah6, bl9) | 0;
                        hi = hi + Math.imul(ah6, bh9) | 0;
                        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                        w15 &= 0x3ffffff;
                        /* k = 16 */ lo = Math.imul(al9, bl7);
                        mid = Math.imul(al9, bh7);
                        mid = mid + Math.imul(ah9, bl7) | 0;
                        hi = Math.imul(ah9, bh7);
                        lo = lo + Math.imul(al8, bl8) | 0;
                        mid = mid + Math.imul(al8, bh8) | 0;
                        mid = mid + Math.imul(ah8, bl8) | 0;
                        hi = hi + Math.imul(ah8, bh8) | 0;
                        lo = lo + Math.imul(al7, bl9) | 0;
                        mid = mid + Math.imul(al7, bh9) | 0;
                        mid = mid + Math.imul(ah7, bl9) | 0;
                        hi = hi + Math.imul(ah7, bh9) | 0;
                        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                        w16 &= 0x3ffffff;
                        /* k = 17 */ lo = Math.imul(al9, bl8);
                        mid = Math.imul(al9, bh8);
                        mid = mid + Math.imul(ah9, bl8) | 0;
                        hi = Math.imul(ah9, bh8);
                        lo = lo + Math.imul(al8, bl9) | 0;
                        mid = mid + Math.imul(al8, bh9) | 0;
                        mid = mid + Math.imul(ah8, bl9) | 0;
                        hi = hi + Math.imul(ah8, bh9) | 0;
                        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                        w17 &= 0x3ffffff;
                        /* k = 18 */ lo = Math.imul(al9, bl9);
                        mid = Math.imul(al9, bh9);
                        mid = mid + Math.imul(ah9, bl9) | 0;
                        hi = Math.imul(ah9, bh9);
                        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                        w18 &= 0x3ffffff;
                        o[0] = w0;
                        o[1] = w1;
                        o[2] = w2;
                        o[3] = w3;
                        o[4] = w4;
                        o[5] = w5;
                        o[6] = w6;
                        o[7] = w7;
                        o[8] = w8;
                        o[9] = w9;
                        o[10] = w10;
                        o[11] = w11;
                        o[12] = w12;
                        o[13] = w13;
                        o[14] = w14;
                        o[15] = w15;
                        o[16] = w16;
                        o[17] = w17;
                        o[18] = w18;
                        if (c !== 0) {
                            o[19] = c;
                            out.length++;
                        }
                        return out;
                    }; // Polyfill comb
                    if (!Math.imul) comb10MulTo = smallMulTo;
                    function bigMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        out.length = self.length + num.length;
                        var carry = 0;
                        var hncarry = 0;
                        for(var k = 0; k < out.length - 1; k++){
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = hncarry;
                            hncarry = 0;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                                var i = k - j;
                                var a = self.words[i] | 0;
                                var b = num.words[j] | 0;
                                var r = a * b;
                                var lo = r & 0x3ffffff;
                                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                                lo = lo + rword | 0;
                                rword = lo & 0x3ffffff;
                                ncarry = ncarry + (lo >>> 26) | 0;
                                hncarry += ncarry >>> 26;
                                ncarry &= 0x3ffffff;
                            }
                            out.words[k] = rword;
                            carry = ncarry;
                            ncarry = hncarry;
                        }
                        if (carry !== 0) out.words[k] = carry;
                        else out.length--;
                        return out.strip();
                    }
                    function jumboMulTo(self, num, out) {
                        var fftm = new FFTM();
                        return fftm.mulp(self, num, out);
                    }
                    BN.prototype.mulTo = function mulTo(num, out) {
                        var res;
                        var len = this.length + num.length;
                        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
                        else if (len < 63) res = smallMulTo(this, num, out);
                        else if (len < 1024) res = bigMulTo(this, num, out);
                        else res = jumboMulTo(this, num, out);
                        return res;
                    }; // Cooley-Tukey algorithm for FFT
                    // slightly revisited to rely on looping instead of recursion
                    function FFTM(x, y) {
                        this.x = x;
                        this.y = y;
                    }
                    FFTM.prototype.makeRBT = function makeRBT(N) {
                        var t = new Array(N);
                        var l = BN.prototype._countBits(N) - 1;
                        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
                        return t;
                    }; // Returns binary-reversed representation of `x`
                    FFTM.prototype.revBin = function revBin(x, l, N) {
                        if (x === 0 || x === N - 1) return x;
                        var rb = 0;
                        for(var i = 0; i < l; i++){
                            rb |= (x & 1) << l - i - 1;
                            x >>= 1;
                        }
                        return rb;
                    }; // Performs "tweedling" phase, therefore 'emulating'
                    // behaviour of the recursive algorithm
                    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                        for(var i = 0; i < N; i++){
                            rtws[i] = rws[rbt[i]];
                            itws[i] = iws[rbt[i]];
                        }
                    };
                    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                        this.permute(rbt, rws, iws, rtws, itws, N);
                        for(var s = 1; s < N; s <<= 1){
                            var l = s << 1;
                            var rtwdf = Math.cos(2 * Math.PI / l);
                            var itwdf = Math.sin(2 * Math.PI / l);
                            for(var p = 0; p < N; p += l){
                                var rtwdf_ = rtwdf;
                                var itwdf_ = itwdf;
                                for(var j = 0; j < s; j++){
                                    var re = rtws[p + j];
                                    var ie = itws[p + j];
                                    var ro = rtws[p + j + s];
                                    var io = itws[p + j + s];
                                    var rx = rtwdf_ * ro - itwdf_ * io;
                                    io = rtwdf_ * io + itwdf_ * ro;
                                    ro = rx;
                                    rtws[p + j] = re + ro;
                                    itws[p + j] = ie + io;
                                    rtws[p + j + s] = re - ro;
                                    itws[p + j + s] = ie - io;
                                    /* jshint maxdepth : false */ if (j !== l) {
                                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                        rtwdf_ = rx;
                                    }
                                }
                            }
                        }
                    };
                    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                        var N = Math.max(m, n) | 1;
                        var odd = N & 1;
                        var i = 0;
                        for(N = N / 2 | 0; N; N = N >>> 1)i++;
                        return 1 << i + 1 + odd;
                    };
                    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                        if (N <= 1) return;
                        for(var i = 0; i < N / 2; i++){
                            var t = rws[i];
                            rws[i] = rws[N - i - 1];
                            rws[N - i - 1] = t;
                            t = iws[i];
                            iws[i] = -iws[N - i - 1];
                            iws[N - i - 1] = -t;
                        }
                    };
                    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                        var carry = 0;
                        for(var i = 0; i < N / 2; i++){
                            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
                            ws[i] = w & 0x3ffffff;
                            if (w < 0x4000000) carry = 0;
                            else carry = w / 0x4000000 | 0;
                        }
                        return ws;
                    };
                    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                        var carry = 0;
                        for(var i = 0; i < len; i++){
                            carry = carry + (ws[i] | 0);
                            rws[2 * i] = carry & 0x1fff;
                            carry = carry >>> 13;
                            rws[2 * i + 1] = carry & 0x1fff;
                            carry = carry >>> 13;
                        } // Pad with zeroes
                        for(i = 2 * len; i < N; ++i)rws[i] = 0;
                        assert(carry === 0);
                        assert((carry & -8192) === 0);
                    };
                    FFTM.prototype.stub = function stub(N) {
                        var ph = new Array(N);
                        for(var i = 0; i < N; i++)ph[i] = 0;
                        return ph;
                    };
                    FFTM.prototype.mulp = function mulp(x, y, out) {
                        var N = 2 * this.guessLen13b(x.length, y.length);
                        var rbt = this.makeRBT(N);
                        var _ = this.stub(N);
                        var rws = new Array(N);
                        var rwst = new Array(N);
                        var iwst = new Array(N);
                        var nrws = new Array(N);
                        var nrwst = new Array(N);
                        var niwst = new Array(N);
                        var rmws = out.words;
                        rmws.length = N;
                        this.convert13b(x.words, x.length, rws, N);
                        this.convert13b(y.words, y.length, nrws, N);
                        this.transform(rws, _, rwst, iwst, N, rbt);
                        this.transform(nrws, _, nrwst, niwst, N, rbt);
                        for(var i = 0; i < N; i++){
                            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                            rwst[i] = rx;
                        }
                        this.conjugate(rwst, iwst, N);
                        this.transform(rwst, iwst, rmws, _, N, rbt);
                        this.conjugate(rmws, _, N);
                        this.normalize13b(rmws, N);
                        out.negative = x.negative ^ y.negative;
                        out.length = x.length + y.length;
                        return out.strip();
                    }; // Multiply `this` by `num`
                    BN.prototype.mul = function mul(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return this.mulTo(num, out);
                    }; // Multiply employing FFT
                    BN.prototype.mulf = function mulf(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return jumboMulTo(this, num, out);
                    }; // In-place Multiplication
                    BN.prototype.imul = function imul(num) {
                        return this.clone().mulTo(num, this);
                    };
                    BN.prototype.imuln = function imuln(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000); // Carry
                        var carry = 0;
                        for(var i = 0; i < this.length; i++){
                            var w = (this.words[i] | 0) * num;
                            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                            carry >>= 26;
                            carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum
                            carry += lo >>> 26;
                            this.words[i] = lo & 0x3ffffff;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return this;
                    };
                    BN.prototype.muln = function muln(num) {
                        return this.clone().imuln(num);
                    }; // `this` * `this`
                    BN.prototype.sqr = function sqr() {
                        return this.mul(this);
                    }; // `this` * `this` in-place
                    BN.prototype.isqr = function isqr() {
                        return this.imul(this.clone());
                    }; // Math.pow(`this`, `num`)
                    BN.prototype.pow = function pow(num) {
                        var w = toBitArray(num);
                        if (w.length === 0) return new BN(1); // Skip leading zeroes
                        var res = this;
                        for(var i = 0; i < w.length; i++, res = res.sqr()){
                            if (w[i] !== 0) break;
                        }
                        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
                            if (w[i] === 0) continue;
                            res = res.mul(q);
                        }
                        return res;
                    }; // Shift-left in-place
                    BN.prototype.iushln = function iushln(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
                        var i;
                        if (r !== 0) {
                            var carry = 0;
                            for(i = 0; i < this.length; i++){
                                var newCarry = this.words[i] & carryMask;
                                var c = (this.words[i] | 0) - newCarry << r;
                                this.words[i] = c | carry;
                                carry = newCarry >>> 26 - r;
                            }
                            if (carry) {
                                this.words[i] = carry;
                                this.length++;
                            }
                        }
                        if (s !== 0) {
                            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
                            for(i = 0; i < s; i++)this.words[i] = 0;
                            this.length += s;
                        }
                        return this.strip();
                    };
                    BN.prototype.ishln = function ishln(bits) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushln(bits);
                    }; // Shift-right in-place
                    // NOTE: `hint` is a lowest bit before trailing zeroes
                    // NOTE: if `extended` is present - it will be filled with destroyed bits
                    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                        assert(typeof bits === "number" && bits >= 0);
                        var h;
                        if (hint) h = (hint - hint % 26) / 26;
                        else h = 0;
                        var r = bits % 26;
                        var s = Math.min((bits - r) / 26, this.length);
                        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                        var maskedWords = extended;
                        h -= s;
                        h = Math.max(0, h); // Extended mode, copy masked part
                        if (maskedWords) {
                            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
                            maskedWords.length = s;
                        }
                        if (s === 0) ;
                        else if (this.length > s) {
                            this.length -= s;
                            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
                        } else {
                            this.words[0] = 0;
                            this.length = 1;
                        }
                        var carry = 0;
                        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
                            var word = this.words[i] | 0;
                            this.words[i] = carry << 26 - r | word >>> r;
                            carry = word & mask;
                        } // Push carried bits as a mask
                        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
                        if (this.length === 0) {
                            this.words[0] = 0;
                            this.length = 1;
                        }
                        return this.strip();
                    };
                    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushrn(bits, hint, extended);
                    }; // Shift-left
                    BN.prototype.shln = function shln(bits) {
                        return this.clone().ishln(bits);
                    };
                    BN.prototype.ushln = function ushln(bits) {
                        return this.clone().iushln(bits);
                    }; // Shift-right
                    BN.prototype.shrn = function shrn(bits) {
                        return this.clone().ishrn(bits);
                    };
                    BN.prototype.ushrn = function ushrn(bits) {
                        return this.clone().iushrn(bits);
                    }; // Test if n bit is set
                    BN.prototype.testn = function testn(bit) {
                        assert(typeof bit === "number" && bit >= 0);
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r; // Fast case: bit is much higher than all existing words
                        if (this.length <= s) return false; // Check bit and return
                        var w = this.words[s];
                        return !!(w & q);
                    }; // Return only lowers bits of number (in-place)
                    BN.prototype.imaskn = function imaskn(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        assert(this.negative === 0, "imaskn works only with positive numbers");
                        if (this.length <= s) return this;
                        if (r !== 0) s++;
                        this.length = Math.min(s, this.length);
                        if (r !== 0) {
                            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                            this.words[this.length - 1] &= mask;
                        }
                        return this.strip();
                    }; // Return only lowers bits of number
                    BN.prototype.maskn = function maskn(bits) {
                        return this.clone().imaskn(bits);
                    }; // Add plain number `num` to `this`
                    BN.prototype.iaddn = function iaddn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.isubn(-num); // Possible sign change
                        if (this.negative !== 0) {
                            if (this.length === 1 && (this.words[0] | 0) < num) {
                                this.words[0] = num - (this.words[0] | 0);
                                this.negative = 0;
                                return this;
                            }
                            this.negative = 0;
                            this.isubn(num);
                            this.negative = 1;
                            return this;
                        } // Add without checks
                        return this._iaddn(num);
                    };
                    BN.prototype._iaddn = function _iaddn(num) {
                        this.words[0] += num; // Carry
                        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
                            this.words[i] -= 0x4000000;
                            if (i === this.length - 1) this.words[i + 1] = 1;
                            else this.words[i + 1]++;
                        }
                        this.length = Math.max(this.length, i + 1);
                        return this;
                    }; // Subtract plain number `num` from `this`
                    BN.prototype.isubn = function isubn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.iaddn(-num);
                        if (this.negative !== 0) {
                            this.negative = 0;
                            this.iaddn(num);
                            this.negative = 1;
                            return this;
                        }
                        this.words[0] -= num;
                        if (this.length === 1 && this.words[0] < 0) {
                            this.words[0] = -this.words[0];
                            this.negative = 1;
                        } else // Carry
                        for(var i = 0; i < this.length && this.words[i] < 0; i++){
                            this.words[i] += 0x4000000;
                            this.words[i + 1] -= 1;
                        }
                        return this.strip();
                    };
                    BN.prototype.addn = function addn(num) {
                        return this.clone().iaddn(num);
                    };
                    BN.prototype.subn = function subn(num) {
                        return this.clone().isubn(num);
                    };
                    BN.prototype.iabs = function iabs() {
                        this.negative = 0;
                        return this;
                    };
                    BN.prototype.abs = function abs() {
                        return this.clone().iabs();
                    };
                    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                        var len = num.length + shift;
                        var i;
                        this._expand(len);
                        var w;
                        var carry = 0;
                        for(i = 0; i < num.length; i++){
                            w = (this.words[i + shift] | 0) + carry;
                            var right = (num.words[i] | 0) * mul;
                            w -= right & 0x3ffffff;
                            carry = (w >> 26) - (right / 0x4000000 | 0);
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        for(; i < this.length - shift; i++){
                            w = (this.words[i + shift] | 0) + carry;
                            carry = w >> 26;
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        if (carry === 0) return this.strip(); // Subtraction overflow
                        assert(carry === -1);
                        carry = 0;
                        for(i = 0; i < this.length; i++){
                            w = -(this.words[i] | 0) + carry;
                            carry = w >> 26;
                            this.words[i] = w & 0x3ffffff;
                        }
                        this.negative = 1;
                        return this.strip();
                    };
                    BN.prototype._wordDiv = function _wordDiv(num, mode) {
                        var shift = this.length - num.length;
                        var a = this.clone();
                        var b = num; // Normalize
                        var bhi = b.words[b.length - 1] | 0;
                        var bhiBits = this._countBits(bhi);
                        shift = 26 - bhiBits;
                        if (shift !== 0) {
                            b = b.ushln(shift);
                            a.iushln(shift);
                            bhi = b.words[b.length - 1] | 0;
                        } // Initialize quotient
                        var m = a.length - b.length;
                        var q;
                        if (mode !== "mod") {
                            q = new BN(null);
                            q.length = m + 1;
                            q.words = new Array(q.length);
                            for(var i = 0; i < q.length; i++)q.words[i] = 0;
                        }
                        var diff = a.clone()._ishlnsubmul(b, 1, m);
                        if (diff.negative === 0) {
                            a = diff;
                            if (q) q.words[m] = 1;
                        }
                        for(var j = m - 1; j >= 0; j--){
                            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                            // (0x7ffffff)
                            qj = Math.min(qj / bhi | 0, 0x3ffffff);
                            a._ishlnsubmul(b, qj, j);
                            while(a.negative !== 0){
                                qj--;
                                a.negative = 0;
                                a._ishlnsubmul(b, 1, j);
                                if (!a.isZero()) a.negative ^= 1;
                            }
                            if (q) q.words[j] = qj;
                        }
                        if (q) q.strip();
                        a.strip(); // Denormalize
                        if (mode !== "div" && shift !== 0) a.iushrn(shift);
                        return {
                            div: q || null,
                            mod: a
                        };
                    }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
                    //       to `div` to request div only, or be absent to
                    //       request both div & mod
                    //       2) `positive` is true if unsigned mod is requested
                    BN.prototype.divmod = function divmod(num, mode, positive) {
                        assert(!num.isZero());
                        if (this.isZero()) return {
                            div: new BN(0),
                            mod: new BN(0)
                        };
                        var div, mod, res;
                        if (this.negative !== 0 && num.negative === 0) {
                            res = this.neg().divmod(num, mode);
                            if (mode !== "mod") div = res.div.neg();
                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) mod.iadd(num);
                            }
                            return {
                                div: div,
                                mod: mod
                            };
                        }
                        if (this.negative === 0 && num.negative !== 0) {
                            res = this.divmod(num.neg(), mode);
                            if (mode !== "mod") div = res.div.neg();
                            return {
                                div: div,
                                mod: res.mod
                            };
                        }
                        if ((this.negative & num.negative) !== 0) {
                            res = this.neg().divmod(num.neg(), mode);
                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) mod.isub(num);
                            }
                            return {
                                div: res.div,
                                mod: mod
                            };
                        } // Both numbers are positive at this point
                        // Strip both numbers to approximate shift value
                        if (num.length > this.length || this.cmp(num) < 0) return {
                            div: new BN(0),
                            mod: this
                        };
                         // Very short reduction
                        if (num.length === 1) {
                            if (mode === "div") return {
                                div: this.divn(num.words[0]),
                                mod: null
                            };
                            if (mode === "mod") return {
                                div: null,
                                mod: new BN(this.modn(num.words[0]))
                            };
                            return {
                                div: this.divn(num.words[0]),
                                mod: new BN(this.modn(num.words[0]))
                            };
                        }
                        return this._wordDiv(num, mode);
                    }; // Find `this` / `num`
                    BN.prototype.div = function div(num) {
                        return this.divmod(num, "div", false).div;
                    }; // Find `this` % `num`
                    BN.prototype.mod = function mod(num) {
                        return this.divmod(num, "mod", false).mod;
                    };
                    BN.prototype.umod = function umod(num) {
                        return this.divmod(num, "mod", true).mod;
                    }; // Find Round(`this` / `num`)
                    BN.prototype.divRound = function divRound(num) {
                        var dm = this.divmod(num); // Fast case - exact division
                        if (dm.mod.isZero()) return dm.div;
                        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                        var half = num.ushrn(1);
                        var r2 = num.andln(1);
                        var cmp = mod.cmp(half); // Round down
                        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up
                        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                    };
                    BN.prototype.modn = function modn(num) {
                        assert(num <= 0x3ffffff);
                        var p = 67108864 % num;
                        var acc = 0;
                        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
                        return acc;
                    }; // In-place division by number
                    BN.prototype.idivn = function idivn(num) {
                        assert(num <= 0x3ffffff);
                        var carry = 0;
                        for(var i = this.length - 1; i >= 0; i--){
                            var w = (this.words[i] | 0) + carry * 0x4000000;
                            this.words[i] = w / num | 0;
                            carry = w % num;
                        }
                        return this.strip();
                    };
                    BN.prototype.divn = function divn(num) {
                        return this.clone().idivn(num);
                    };
                    BN.prototype.egcd = function egcd(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());
                        var x = this;
                        var y = p.clone();
                        if (x.negative !== 0) x = x.umod(p);
                        else x = x.clone();
                         // A * x + B * y = x
                        var A = new BN(1);
                        var B = new BN(0); // C * x + D * y = y
                        var C = new BN(0);
                        var D = new BN(1);
                        var g = 0;
                        while(x.isEven() && y.isEven()){
                            x.iushrn(1);
                            y.iushrn(1);
                            ++g;
                        }
                        var yp = y.clone();
                        var xp = x.clone();
                        while(!x.isZero()){
                            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                            if (i > 0) {
                                x.iushrn(i);
                                while(i-- > 0){
                                    if (A.isOdd() || B.isOdd()) {
                                        A.iadd(yp);
                                        B.isub(xp);
                                    }
                                    A.iushrn(1);
                                    B.iushrn(1);
                                }
                            }
                            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                            if (j > 0) {
                                y.iushrn(j);
                                while(j-- > 0){
                                    if (C.isOdd() || D.isOdd()) {
                                        C.iadd(yp);
                                        D.isub(xp);
                                    }
                                    C.iushrn(1);
                                    D.iushrn(1);
                                }
                            }
                            if (x.cmp(y) >= 0) {
                                x.isub(y);
                                A.isub(C);
                                B.isub(D);
                            } else {
                                y.isub(x);
                                C.isub(A);
                                D.isub(B);
                            }
                        }
                        return {
                            a: C,
                            b: D,
                            gcd: y.iushln(g)
                        };
                    }; // This is reduced incarnation of the binary EEA
                    // above, designated to invert members of the
                    // _prime_ fields F(p) at a maximal speed
                    BN.prototype._invmp = function _invmp(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());
                        var a = this;
                        var b = p.clone();
                        if (a.negative !== 0) a = a.umod(p);
                        else a = a.clone();
                        var x1 = new BN(1);
                        var x2 = new BN(0);
                        var delta = b.clone();
                        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
                            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                            if (i > 0) {
                                a.iushrn(i);
                                while(i-- > 0){
                                    if (x1.isOdd()) x1.iadd(delta);
                                    x1.iushrn(1);
                                }
                            }
                            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                            if (j > 0) {
                                b.iushrn(j);
                                while(j-- > 0){
                                    if (x2.isOdd()) x2.iadd(delta);
                                    x2.iushrn(1);
                                }
                            }
                            if (a.cmp(b) >= 0) {
                                a.isub(b);
                                x1.isub(x2);
                            } else {
                                b.isub(a);
                                x2.isub(x1);
                            }
                        }
                        var res;
                        if (a.cmpn(1) === 0) res = x1;
                        else res = x2;
                        if (res.cmpn(0) < 0) res.iadd(p);
                        return res;
                    };
                    BN.prototype.gcd = function gcd(num) {
                        if (this.isZero()) return num.abs();
                        if (num.isZero()) return this.abs();
                        var a = this.clone();
                        var b = num.clone();
                        a.negative = 0;
                        b.negative = 0; // Remove common factor of two
                        for(var shift = 0; a.isEven() && b.isEven(); shift++){
                            a.iushrn(1);
                            b.iushrn(1);
                        }
                        do {
                            while(a.isEven())a.iushrn(1);
                            while(b.isEven())b.iushrn(1);
                            var r = a.cmp(b);
                            if (r < 0) {
                                // Swap `a` and `b` to make `a` always bigger than `b`
                                var t = a;
                                a = b;
                                b = t;
                            } else if (r === 0 || b.cmpn(1) === 0) break;
                            a.isub(b);
                        }while (true);
                        return b.iushln(shift);
                    }; // Invert number in the field F(num)
                    BN.prototype.invm = function invm(num) {
                        return this.egcd(num).a.umod(num);
                    };
                    BN.prototype.isEven = function isEven() {
                        return (this.words[0] & 1) === 0;
                    };
                    BN.prototype.isOdd = function isOdd() {
                        return (this.words[0] & 1) === 1;
                    }; // And first word and num
                    BN.prototype.andln = function andln(num) {
                        return this.words[0] & num;
                    }; // Increment at the bit position in-line
                    BN.prototype.bincn = function bincn(bit) {
                        assert(typeof bit === "number");
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r; // Fast case: bit is much higher than all existing words
                        if (this.length <= s) {
                            this._expand(s + 1);
                            this.words[s] |= q;
                            return this;
                        } // Add bit and propagate, if needed
                        var carry = q;
                        for(var i = s; carry !== 0 && i < this.length; i++){
                            var w = this.words[i] | 0;
                            w += carry;
                            carry = w >>> 26;
                            w &= 0x3ffffff;
                            this.words[i] = w;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return this;
                    };
                    BN.prototype.isZero = function isZero() {
                        return this.length === 1 && this.words[0] === 0;
                    };
                    BN.prototype.cmpn = function cmpn(num) {
                        var negative = num < 0;
                        if (this.negative !== 0 && !negative) return -1;
                        if (this.negative === 0 && negative) return 1;
                        this.strip();
                        var res;
                        if (this.length > 1) res = 1;
                        else {
                            if (negative) num = -num;
                            assert(num <= 0x3ffffff, "Number is too big");
                            var w = this.words[0] | 0;
                            res = w === num ? 0 : w < num ? -1 : 1;
                        }
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    }; // Compare two numbers and return:
                    // 1 - if `this` > `num`
                    // 0 - if `this` == `num`
                    // -1 - if `this` < `num`
                    BN.prototype.cmp = function cmp(num) {
                        if (this.negative !== 0 && num.negative === 0) return -1;
                        if (this.negative === 0 && num.negative !== 0) return 1;
                        var res = this.ucmp(num);
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    }; // Unsigned comparison
                    BN.prototype.ucmp = function ucmp(num) {
                        // At this point both numbers have the same sign
                        if (this.length > num.length) return 1;
                        if (this.length < num.length) return -1;
                        var res = 0;
                        for(var i = this.length - 1; i >= 0; i--){
                            var a = this.words[i] | 0;
                            var b = num.words[i] | 0;
                            if (a === b) continue;
                            if (a < b) res = -1;
                            else if (a > b) res = 1;
                            break;
                        }
                        return res;
                    };
                    BN.prototype.gtn = function gtn(num) {
                        return this.cmpn(num) === 1;
                    };
                    BN.prototype.gt = function gt(num) {
                        return this.cmp(num) === 1;
                    };
                    BN.prototype.gten = function gten(num) {
                        return this.cmpn(num) >= 0;
                    };
                    BN.prototype.gte = function gte(num) {
                        return this.cmp(num) >= 0;
                    };
                    BN.prototype.ltn = function ltn(num) {
                        return this.cmpn(num) === -1;
                    };
                    BN.prototype.lt = function lt(num) {
                        return this.cmp(num) === -1;
                    };
                    BN.prototype.lten = function lten(num) {
                        return this.cmpn(num) <= 0;
                    };
                    BN.prototype.lte = function lte(num) {
                        return this.cmp(num) <= 0;
                    };
                    BN.prototype.eqn = function eqn(num) {
                        return this.cmpn(num) === 0;
                    };
                    BN.prototype.eq = function eq(num) {
                        return this.cmp(num) === 0;
                    }; //
                    // A reduce context, could be using montgomery or something better, depending
                    // on the `m` itself.
                    //
                    BN.red = function red(num) {
                        return new Red(num);
                    };
                    BN.prototype.toRed = function toRed(ctx) {
                        assert(!this.red, "Already a number in reduction context");
                        assert(this.negative === 0, "red works only with positives");
                        return ctx.convertTo(this)._forceRed(ctx);
                    };
                    BN.prototype.fromRed = function fromRed() {
                        assert(this.red, "fromRed works only with numbers in reduction context");
                        return this.red.convertFrom(this);
                    };
                    BN.prototype._forceRed = function _forceRed(ctx) {
                        this.red = ctx;
                        return this;
                    };
                    BN.prototype.forceRed = function forceRed(ctx) {
                        assert(!this.red, "Already a number in reduction context");
                        return this._forceRed(ctx);
                    };
                    BN.prototype.redAdd = function redAdd(num) {
                        assert(this.red, "redAdd works only with red numbers");
                        return this.red.add(this, num);
                    };
                    BN.prototype.redIAdd = function redIAdd(num) {
                        assert(this.red, "redIAdd works only with red numbers");
                        return this.red.iadd(this, num);
                    };
                    BN.prototype.redSub = function redSub(num) {
                        assert(this.red, "redSub works only with red numbers");
                        return this.red.sub(this, num);
                    };
                    BN.prototype.redISub = function redISub(num) {
                        assert(this.red, "redISub works only with red numbers");
                        return this.red.isub(this, num);
                    };
                    BN.prototype.redShl = function redShl(num) {
                        assert(this.red, "redShl works only with red numbers");
                        return this.red.shl(this, num);
                    };
                    BN.prototype.redMul = function redMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.mul(this, num);
                    };
                    BN.prototype.redIMul = function redIMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.imul(this, num);
                    };
                    BN.prototype.redSqr = function redSqr() {
                        assert(this.red, "redSqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqr(this);
                    };
                    BN.prototype.redISqr = function redISqr() {
                        assert(this.red, "redISqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.isqr(this);
                    }; // Square root over p
                    BN.prototype.redSqrt = function redSqrt() {
                        assert(this.red, "redSqrt works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqrt(this);
                    };
                    BN.prototype.redInvm = function redInvm() {
                        assert(this.red, "redInvm works only with red numbers");
                        this.red._verify1(this);
                        return this.red.invm(this);
                    }; // Return negative clone of `this` % `red modulo`
                    BN.prototype.redNeg = function redNeg() {
                        assert(this.red, "redNeg works only with red numbers");
                        this.red._verify1(this);
                        return this.red.neg(this);
                    };
                    BN.prototype.redPow = function redPow(num) {
                        assert(this.red && !num.red, "redPow(normalNum)");
                        this.red._verify1(this);
                        return this.red.pow(this, num);
                    }; // Prime numbers with efficient reduction
                    var primes = {
                        k256: null,
                        p224: null,
                        p192: null,
                        p25519: null
                    }; // Pseudo-Mersenne prime
                    function MPrime(name, p) {
                        // P = 2 ^ N - K
                        this.name = name;
                        this.p = new BN(p, 16);
                        this.n = this.p.bitLength();
                        this.k = new BN(1).iushln(this.n).isub(this.p);
                        this.tmp = this._tmp();
                    }
                    MPrime.prototype._tmp = function _tmp() {
                        var tmp = new BN(null);
                        tmp.words = new Array(Math.ceil(this.n / 13));
                        return tmp;
                    };
                    MPrime.prototype.ireduce = function ireduce(num) {
                        // Assumes that `num` is less than `P^2`
                        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                        var r = num;
                        var rlen;
                        do {
                            this.split(r, this.tmp);
                            r = this.imulK(r);
                            r = r.iadd(this.tmp);
                            rlen = r.bitLength();
                        }while (rlen > this.n);
                        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                        if (cmp === 0) {
                            r.words[0] = 0;
                            r.length = 1;
                        } else if (cmp > 0) r.isub(this.p);
                        else if (r.strip !== undefined) // r is BN v4 instance
                        r.strip();
                        else // r is BN v5 instance
                        r._strip();
                        return r;
                    };
                    MPrime.prototype.split = function split(input, out) {
                        input.iushrn(this.n, 0, out);
                    };
                    MPrime.prototype.imulK = function imulK(num) {
                        return num.imul(this.k);
                    };
                    function K256() {
                        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                    }
                    inherits(K256, MPrime);
                    K256.prototype.split = function split(input, output) {
                        // 256 = 9 * 26 + 22
                        var mask = 0x3fffff;
                        var outLen = Math.min(input.length, 9);
                        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
                        output.length = outLen;
                        if (input.length <= 9) {
                            input.words[0] = 0;
                            input.length = 1;
                            return;
                        } // Shift by 9 limbs
                        var prev = input.words[9];
                        output.words[output.length++] = prev & mask;
                        for(i = 10; i < input.length; i++){
                            var next = input.words[i] | 0;
                            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                            prev = next;
                        }
                        prev >>>= 22;
                        input.words[i - 10] = prev;
                        if (prev === 0 && input.length > 10) input.length -= 10;
                        else input.length -= 9;
                    };
                    K256.prototype.imulK = function imulK(num) {
                        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                        num.words[num.length] = 0;
                        num.words[num.length + 1] = 0;
                        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                        var lo = 0;
                        for(var i = 0; i < num.length; i++){
                            var w = num.words[i] | 0;
                            lo += w * 0x3d1;
                            num.words[i] = lo & 0x3ffffff;
                            lo = w * 0x40 + (lo / 0x4000000 | 0);
                        } // Fast length reduction
                        if (num.words[num.length - 1] === 0) {
                            num.length--;
                            if (num.words[num.length - 1] === 0) num.length--;
                        }
                        return num;
                    };
                    function P224() {
                        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                    }
                    inherits(P224, MPrime);
                    function P192() {
                        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                    }
                    inherits(P192, MPrime);
                    function P25519() {
                        // 2 ^ 255 - 19
                        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                    }
                    inherits(P25519, MPrime);
                    P25519.prototype.imulK = function imulK(num) {
                        // K = 0x13
                        var carry = 0;
                        for(var i = 0; i < num.length; i++){
                            var hi = (num.words[i] | 0) * 0x13 + carry;
                            var lo = hi & 0x3ffffff;
                            hi >>>= 26;
                            num.words[i] = lo;
                            carry = hi;
                        }
                        if (carry !== 0) num.words[num.length++] = carry;
                        return num;
                    }; // Exported mostly for testing purposes, use plain name instead
                    BN._prime = function prime(name) {
                        // Cached version of prime
                        if (primes[name]) return primes[name];
                        var prime;
                        if (name === "k256") prime = new K256();
                        else if (name === "p224") prime = new P224();
                        else if (name === "p192") prime = new P192();
                        else if (name === "p25519") prime = new P25519();
                        else throw new Error("Unknown prime " + name);
                        primes[name] = prime;
                        return prime;
                    }; //
                    // Base reduction engine
                    //
                    function Red(m) {
                        if (typeof m === "string") {
                            var prime = BN._prime(m);
                            this.m = prime.p;
                            this.prime = prime;
                        } else {
                            assert(m.gtn(1), "modulus must be greater than 1");
                            this.m = m;
                            this.prime = null;
                        }
                    }
                    Red.prototype._verify1 = function _verify1(a) {
                        assert(a.negative === 0, "red works only with positives");
                        assert(a.red, "red works only with red numbers");
                    };
                    Red.prototype._verify2 = function _verify2(a, b) {
                        assert((a.negative | b.negative) === 0, "red works only with positives");
                        assert(a.red && a.red === b.red, "red works only with red numbers");
                    };
                    Red.prototype.imod = function imod(a) {
                        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                        return a.umod(this.m)._forceRed(this);
                    };
                    Red.prototype.neg = function neg(a) {
                        if (a.isZero()) return a.clone();
                        return this.m.sub(a)._forceRed(this);
                    };
                    Red.prototype.add = function add(a, b) {
                        this._verify2(a, b);
                        var res = a.add(b);
                        if (res.cmp(this.m) >= 0) res.isub(this.m);
                        return res._forceRed(this);
                    };
                    Red.prototype.iadd = function iadd(a, b) {
                        this._verify2(a, b);
                        var res = a.iadd(b);
                        if (res.cmp(this.m) >= 0) res.isub(this.m);
                        return res;
                    };
                    Red.prototype.sub = function sub(a, b) {
                        this._verify2(a, b);
                        var res = a.sub(b);
                        if (res.cmpn(0) < 0) res.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Red.prototype.isub = function isub(a, b) {
                        this._verify2(a, b);
                        var res = a.isub(b);
                        if (res.cmpn(0) < 0) res.iadd(this.m);
                        return res;
                    };
                    Red.prototype.shl = function shl(a, num) {
                        this._verify1(a);
                        return this.imod(a.ushln(num));
                    };
                    Red.prototype.imul = function imul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.imul(b));
                    };
                    Red.prototype.mul = function mul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.mul(b));
                    };
                    Red.prototype.isqr = function isqr(a) {
                        return this.imul(a, a.clone());
                    };
                    Red.prototype.sqr = function sqr(a) {
                        return this.mul(a, a);
                    };
                    Red.prototype.sqrt = function sqrt(a) {
                        if (a.isZero()) return a.clone();
                        var mod3 = this.m.andln(3);
                        assert(mod3 % 2 === 1); // Fast case
                        if (mod3 === 3) {
                            var pow = this.m.add(new BN(1)).iushrn(2);
                            return this.pow(a, pow);
                        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                        //
                        // Find Q and S, that Q * 2 ^ S = (P - 1)
                        var q = this.m.subn(1);
                        var s = 0;
                        while(!q.isZero() && q.andln(1) === 0){
                            s++;
                            q.iushrn(1);
                        }
                        assert(!q.isZero());
                        var one = new BN(1).toRed(this);
                        var nOne = one.redNeg(); // Find quadratic non-residue
                        // NOTE: Max is such because of generalized Riemann hypothesis.
                        var lpow = this.m.subn(1).iushrn(1);
                        var z = this.m.bitLength();
                        z = new BN(2 * z * z).toRed(this);
                        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
                        var c = this.pow(z, q);
                        var r = this.pow(a, q.addn(1).iushrn(1));
                        var t = this.pow(a, q);
                        var m = s;
                        while(t.cmp(one) !== 0){
                            var tmp = t;
                            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
                            assert(i < m);
                            var b = this.pow(c, new BN(1).iushln(m - i - 1));
                            r = r.redMul(b);
                            c = b.redSqr();
                            t = t.redMul(c);
                            m = i;
                        }
                        return r;
                    };
                    Red.prototype.invm = function invm(a) {
                        var inv = a._invmp(this.m);
                        if (inv.negative !== 0) {
                            inv.negative = 0;
                            return this.imod(inv).redNeg();
                        } else return this.imod(inv);
                    };
                    Red.prototype.pow = function pow(a, num) {
                        if (num.isZero()) return new BN(1).toRed(this);
                        if (num.cmpn(1) === 0) return a.clone();
                        var windowSize = 4;
                        var wnd = new Array(1 << windowSize);
                        wnd[0] = new BN(1).toRed(this);
                        wnd[1] = a;
                        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
                        var res = wnd[0];
                        var current = 0;
                        var currentLen = 0;
                        var start = num.bitLength() % 26;
                        if (start === 0) start = 26;
                        for(i = num.length - 1; i >= 0; i--){
                            var word = num.words[i];
                            for(var j = start - 1; j >= 0; j--){
                                var bit = word >> j & 1;
                                if (res !== wnd[0]) res = this.sqr(res);
                                if (bit === 0 && current === 0) {
                                    currentLen = 0;
                                    continue;
                                }
                                current <<= 1;
                                current |= bit;
                                currentLen++;
                                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                                res = this.mul(res, wnd[current]);
                                currentLen = 0;
                                current = 0;
                            }
                            start = 26;
                        }
                        return res;
                    };
                    Red.prototype.convertTo = function convertTo(num) {
                        var r = num.umod(this.m);
                        return r === num ? r.clone() : r;
                    };
                    Red.prototype.convertFrom = function convertFrom(num) {
                        var res = num.clone();
                        res.red = null;
                        return res;
                    }; //
                    // Montgomery method engine
                    //
                    BN.mont = function mont(num) {
                        return new Mont(num);
                    };
                    function Mont(m) {
                        Red.call(this, m);
                        this.shift = this.m.bitLength();
                        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
                        this.r = new BN(1).iushln(this.shift);
                        this.r2 = this.imod(this.r.sqr());
                        this.rinv = this.r._invmp(this.m);
                        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                        this.minv = this.minv.umod(this.r);
                        this.minv = this.r.sub(this.minv);
                    }
                    inherits(Mont, Red);
                    Mont.prototype.convertTo = function convertTo(num) {
                        return this.imod(num.ushln(this.shift));
                    };
                    Mont.prototype.convertFrom = function convertFrom(num) {
                        var r = this.imod(num.mul(this.rinv));
                        r.red = null;
                        return r;
                    };
                    Mont.prototype.imul = function imul(a, b) {
                        if (a.isZero() || b.isZero()) {
                            a.words[0] = 0;
                            a.length = 1;
                            return a;
                        }
                        var t = a.imul(b);
                        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
                        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Mont.prototype.mul = function mul(a, b) {
                        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
                        var t = a.mul(b);
                        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
                        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Mont.prototype.invm = function invm(a) {
                        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                        var res = this.imod(a._invmp(this.m).mul(this.r2));
                        return res._forceRed(this);
                    };
                })(typeof module2 === "undefined" || module2, this);
            },
            {
                "buffer": 224
            }
        ],
        16: [
            function(require, module, exports) {
                (function(global) {
                    (function() {
                        "use strict";
                        var possibleNames = [
                            "BigInt64Array",
                            "BigUint64Array",
                            "Float32Array",
                            "Float64Array",
                            "Int16Array",
                            "Int32Array",
                            "Int8Array",
                            "Uint16Array",
                            "Uint32Array",
                            "Uint8Array",
                            "Uint8ClampedArray"
                        ];
                        var g = typeof globalThis === "undefined" ? global : globalThis;
                        module.exports = function availableTypedArrays() {
                            var out = [];
                            for(var i = 0; i < possibleNames.length; i++)if (typeof g[possibleNames[i]] === "function") out[out.length] = possibleNames[i];
                            return out;
                        };
                    }).call(this);
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {}
        ],
        17: [
            function(require, module, exports) {
                "use strict";
                exports.byteLength = byteLength;
                exports.toByteArray = toByteArray;
                exports.fromByteArray = fromByteArray;
                var lookup = [];
                var revLookup = [];
                var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
                var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
                for(var i2 = 0, len1 = code.length; i2 < len1; ++i2){
                    lookup[i2] = code[i2];
                    revLookup[code.charCodeAt(i2)] = i2;
                } // Support decoding URL-safe base64 strings, as Node.js does.
                // See: https://en.wikipedia.org/wiki/Base64#URL_applications
                revLookup["-".charCodeAt(0)] = 62;
                revLookup["_".charCodeAt(0)] = 63;
                function getLens(b64) {
                    var len = b64.length;
                    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
                     // Trim off extra bytes after placeholder bytes are found
                    // See: https://github.com/beatgammit/base64-js/issues/42
                    var validLen = b64.indexOf("=");
                    if (validLen === -1) validLen = len;
                    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
                    return [
                        validLen,
                        placeHoldersLen
                    ];
                } // base64 is 4/3 + up to two characters of the original data
                function byteLength(b64) {
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];
                    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
                }
                function _byteLength(b64, validLen, placeHoldersLen) {
                    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
                }
                function toByteArray(b64) {
                    var tmp;
                    var lens = getLens(b64);
                    var validLen = lens[0];
                    var placeHoldersLen = lens[1];
                    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
                    var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars
                    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
                    var i;
                    for(i = 0; i < len; i += 4){
                        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                        arr[curByte++] = tmp >> 16 & 0xFF;
                        arr[curByte++] = tmp >> 8 & 0xFF;
                        arr[curByte++] = tmp & 0xFF;
                    }
                    if (placeHoldersLen === 2) {
                        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                        arr[curByte++] = tmp & 0xFF;
                    }
                    if (placeHoldersLen === 1) {
                        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                        arr[curByte++] = tmp >> 8 & 0xFF;
                        arr[curByte++] = tmp & 0xFF;
                    }
                    return arr;
                }
                function tripletToBase64(num) {
                    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
                }
                function encodeChunk(uint8, start, end) {
                    var tmp;
                    var output = [];
                    for(var i = start; i < end; i += 3){
                        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
                        output.push(tripletToBase64(tmp));
                    }
                    return output.join("");
                }
                function fromByteArray(uint8) {
                    var tmp;
                    var len = uint8.length;
                    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
                    var parts = [];
                    var maxChunkLength = 16383; // must be multiple of 3
                    // go through the array every three bytes, we'll deal with trailing stuff later
                    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                     // pad the end with zeros, but make sure to not forget the extra bytes
                    if (extraBytes === 1) {
                        tmp = uint8[len - 1];
                        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
                    } else if (extraBytes === 2) {
                        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
                    }
                    return parts.join("");
                }
            },
            {}
        ],
        18: [
            function(require, module3, exports3) {
                (function(module, exports) {
                    "use strict"; // Utils
                    function assert(val, msg) {
                        if (!val) throw new Error(msg || "Assertion failed");
                    } // Could use `inherits` module, but don't want to move from single file
                    // architecture yet.
                    function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function TempCtor() {};
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    } // BN
                    function BN(number, base, endian) {
                        if (BN.isBN(number)) return number;
                        this.negative = 0;
                        this.words = null;
                        this.length = 0; // Reduction context
                        this.red = null;
                        if (number !== null) {
                            if (base === "le" || base === "be") {
                                endian = base;
                                base = 10;
                            }
                            this._init(number || 0, base || 10, endian || "be");
                        }
                    }
                    if (_typeof(module) === "object") module.exports = BN;
                    else exports.BN = BN;
                    BN.BN = BN;
                    BN.wordSize = 26;
                    var Buffer;
                    try {
                        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
                        else Buffer = require("buffer").Buffer;
                    } catch (e) {}
                    BN.isBN = function isBN(num) {
                        if (num instanceof BN) return true;
                        return num !== null && _typeof(num) === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                    };
                    BN.max = function max(left, right) {
                        if (left.cmp(right) > 0) return left;
                        return right;
                    };
                    BN.min = function min(left, right) {
                        if (left.cmp(right) < 0) return left;
                        return right;
                    };
                    BN.prototype._init = function init(number, base, endian) {
                        if (typeof number === "number") return this._initNumber(number, base, endian);
                        if (_typeof(number) === "object") return this._initArray(number, base, endian);
                        if (base === "hex") base = 16;
                        assert(base === (base | 0) && base >= 2 && base <= 36);
                        number = number.toString().replace(/\s+/g, "");
                        var start = 0;
                        if (number[0] === "-") {
                            start++;
                            this.negative = 1;
                        }
                        if (start < number.length) {
                            if (base === 16) this._parseHex(number, start, endian);
                            else {
                                this._parseBase(number, base, start);
                                if (endian === "le") this._initArray(this.toArray(), base, endian);
                            }
                        }
                    };
                    BN.prototype._initNumber = function _initNumber(number, base, endian) {
                        if (number < 0) {
                            this.negative = 1;
                            number = -number;
                        }
                        if (number < 0x4000000) {
                            this.words = [
                                number & 0x3ffffff
                            ];
                            this.length = 1;
                        } else if (number < 0x10000000000000) {
                            this.words = [
                                number & 0x3ffffff,
                                number / 0x4000000 & 0x3ffffff
                            ];
                            this.length = 2;
                        } else {
                            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                            this.words = [
                                number & 0x3ffffff,
                                number / 0x4000000 & 0x3ffffff,
                                1
                            ];
                            this.length = 3;
                        }
                        if (endian !== "le") return; // Reverse the bytes
                        this._initArray(this.toArray(), base, endian);
                    };
                    BN.prototype._initArray = function _initArray(number, base, endian) {
                        // Perhaps a Uint8Array
                        assert(typeof number.length === "number");
                        if (number.length <= 0) {
                            this.words = [
                                0
                            ];
                            this.length = 1;
                            return this;
                        }
                        this.length = Math.ceil(number.length / 3);
                        this.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)this.words[i] = 0;
                        var j, w;
                        var off = 0;
                        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
                            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                            this.words[j] |= w << off & 0x3ffffff;
                            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
                            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                            this.words[j] |= w << off & 0x3ffffff;
                            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        return this._strip();
                    };
                    function parseHex4Bits(string, index) {
                        var c = string.charCodeAt(index); // '0' - '9'
                        if (c >= 48 && c <= 57) return c - 48; // 'A' - 'F'
                        else if (c >= 65 && c <= 70) return c - 55; // 'a' - 'f'
                        else if (c >= 97 && c <= 102) return c - 87;
                        else assert(false, "Invalid character in " + string);
                    }
                    function parseHexByte(string, lowerBound, index) {
                        var r = parseHex4Bits(string, index);
                        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
                        return r;
                    }
                    BN.prototype._parseHex = function _parseHex(number, start, endian) {
                        // Create possibly bigger array to ensure that it fits the number
                        this.length = Math.ceil((number.length - start) / 6);
                        this.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)this.words[i] = 0;
                         // 24-bits chunks
                        var off = 0;
                        var j = 0;
                        var w;
                        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
                            w = parseHexByte(number, start, i) << off;
                            this.words[j] |= w & 0x3ffffff;
                            if (off >= 18) {
                                off -= 18;
                                j += 1;
                                this.words[j] |= w >>> 26;
                            } else off += 8;
                        }
                        else {
                            var parseLength = number.length - start;
                            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                                w = parseHexByte(number, start, i) << off;
                                this.words[j] |= w & 0x3ffffff;
                                if (off >= 18) {
                                    off -= 18;
                                    j += 1;
                                    this.words[j] |= w >>> 26;
                                } else off += 8;
                            }
                        }
                        this._strip();
                    };
                    function parseBase(str, start, end, mul) {
                        var r = 0;
                        var b = 0;
                        var len = Math.min(str.length, end);
                        for(var i = start; i < len; i++){
                            var c = str.charCodeAt(i) - 48;
                            r *= mul; // 'a'
                            if (c >= 49) b = c - 49 + 0xa; // 'A'
                            else if (c >= 17) b = c - 17 + 0xa; // '0' - '9'
                            else b = c;
                            assert(c >= 0 && b < mul, "Invalid character");
                            r += b;
                        }
                        return r;
                    }
                    BN.prototype._parseBase = function _parseBase(number, base, start) {
                        // Initialize as zero
                        this.words = [
                            0
                        ];
                        this.length = 1; // Find length of limb in base
                        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
                        limbLen--;
                        limbPow = limbPow / base | 0;
                        var total = number.length - start;
                        var mod = total % limbLen;
                        var end = Math.min(total, total - mod) + start;
                        var word = 0;
                        for(var i = start; i < end; i += limbLen){
                            word = parseBase(number, i, i + limbLen, base);
                            this.imuln(limbPow);
                            if (this.words[0] + word < 0x4000000) this.words[0] += word;
                            else this._iaddn(word);
                        }
                        if (mod !== 0) {
                            var pow = 1;
                            word = parseBase(number, i, number.length, base);
                            for(i = 0; i < mod; i++)pow *= base;
                            this.imuln(pow);
                            if (this.words[0] + word < 0x4000000) this.words[0] += word;
                            else this._iaddn(word);
                        }
                        this._strip();
                    };
                    BN.prototype.copy = function copy(dest) {
                        dest.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
                        dest.length = this.length;
                        dest.negative = this.negative;
                        dest.red = this.red;
                    };
                    function move(dest, src) {
                        dest.words = src.words;
                        dest.length = src.length;
                        dest.negative = src.negative;
                        dest.red = src.red;
                    }
                    BN.prototype._move = function _move(dest) {
                        move(dest, this);
                    };
                    BN.prototype.clone = function clone() {
                        var r = new BN(null);
                        this.copy(r);
                        return r;
                    };
                    BN.prototype._expand = function _expand(size) {
                        while(this.length < size)this.words[this.length++] = 0;
                        return this;
                    }; // Remove leading `0` from `this`
                    BN.prototype._strip = function strip() {
                        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
                        return this._normSign();
                    };
                    BN.prototype._normSign = function _normSign() {
                        // -0 = 0
                        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
                        return this;
                    }; // Check Symbol.for because not everywhere where Symbol defined
                    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
                    if (typeof Symbol !== "undefined" && typeof Symbol["for"] === "function") try {
                        BN.prototype[Symbol["for"]("nodejs.util.inspect.custom")] = inspect;
                    } catch (e1) {
                        BN.prototype.inspect = inspect;
                    }
                    else BN.prototype.inspect = inspect;
                    function inspect() {
                        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                    }
                    /*
         var zeros = [];
        var groupSizes = [];
        var groupBases = [];
         var s = '';
        var i = -1;
        while (++i < BN.wordSize) {
          zeros[i] = s;
          s += '0';
        }
        groupSizes[0] = 0;
        groupSizes[1] = 0;
        groupBases[0] = 0;
        groupBases[1] = 0;
        var base = 2 - 1;
        while (++base < 36 + 1) {
          var groupSize = 0;
          var groupBase = 1;
          while (groupBase < (1 << BN.wordSize) / base) {
            groupBase *= base;
            groupSize += 1;
          }
          groupSizes[base] = groupSize;
          groupBases[base] = groupBase;
        }
         */ var zeros = [
                        "",
                        "0",
                        "00",
                        "000",
                        "0000",
                        "00000",
                        "000000",
                        "0000000",
                        "00000000",
                        "000000000",
                        "0000000000",
                        "00000000000",
                        "000000000000",
                        "0000000000000",
                        "00000000000000",
                        "000000000000000",
                        "0000000000000000",
                        "00000000000000000",
                        "000000000000000000",
                        "0000000000000000000",
                        "00000000000000000000",
                        "000000000000000000000",
                        "0000000000000000000000",
                        "00000000000000000000000",
                        "000000000000000000000000",
                        "0000000000000000000000000"
                    ];
                    var groupSizes = [
                        0,
                        0,
                        25,
                        16,
                        12,
                        11,
                        10,
                        9,
                        8,
                        8,
                        7,
                        7,
                        7,
                        7,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ];
                    var groupBases = [
                        0,
                        0,
                        33554432,
                        43046721,
                        16777216,
                        48828125,
                        60466176,
                        40353607,
                        16777216,
                        43046721,
                        10000000,
                        19487171,
                        35831808,
                        62748517,
                        7529536,
                        11390625,
                        16777216,
                        24137569,
                        34012224,
                        47045881,
                        64000000,
                        4084101,
                        5153632,
                        6436343,
                        7962624,
                        9765625,
                        11881376,
                        14348907,
                        17210368,
                        20511149,
                        24300000,
                        28629151,
                        33554432,
                        39135393,
                        45435424,
                        52521875,
                        60466176
                    ];
                    BN.prototype.toString = function toString(base, padding) {
                        base = base || 10;
                        padding = padding | 0 || 1;
                        var out;
                        if (base === 16 || base === "hex") {
                            out = "";
                            var off = 0;
                            var carry = 0;
                            for(var i = 0; i < this.length; i++){
                                var w = this.words[i];
                                var word = ((w << off | carry) & 0xffffff).toString(16);
                                carry = w >>> 24 - off & 0xffffff;
                                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                                else out = word + out;
                                off += 2;
                                if (off >= 26) {
                                    off -= 26;
                                    i--;
                                }
                            }
                            if (carry !== 0) out = carry.toString(16) + out;
                            while(out.length % padding !== 0)out = "0" + out;
                            if (this.negative !== 0) out = "-" + out;
                            return out;
                        }
                        if (base === (base | 0) && base >= 2 && base <= 36) {
                            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                            var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);
                            var groupBase = groupBases[base];
                            out = "";
                            var c = this.clone();
                            c.negative = 0;
                            while(!c.isZero()){
                                var r = c.modrn(groupBase).toString(base);
                                c = c.idivn(groupBase);
                                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                                else out = r + out;
                            }
                            if (this.isZero()) out = "0" + out;
                            while(out.length % padding !== 0)out = "0" + out;
                            if (this.negative !== 0) out = "-" + out;
                            return out;
                        }
                        assert(false, "Base should be between 2 and 36");
                    };
                    BN.prototype.toNumber = function toNumber() {
                        var ret = this.words[0];
                        if (this.length === 2) ret += this.words[1] * 0x4000000;
                        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
                        ret += 0x10000000000000 + this.words[1] * 0x4000000;
                        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
                        return this.negative !== 0 ? -ret : ret;
                    };
                    BN.prototype.toJSON = function toJSON() {
                        return this.toString(16, 2);
                    };
                    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
                        return this.toArrayLike(Buffer, endian, length);
                    };
                    BN.prototype.toArray = function toArray(endian, length) {
                        return this.toArrayLike(Array, endian, length);
                    };
                    var allocate = function allocate(ArrayType, size) {
                        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
                        return new ArrayType(size);
                    };
                    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                        this._strip();
                        var byteLength = this.byteLength();
                        var reqLength = length || Math.max(1, byteLength);
                        assert(byteLength <= reqLength, "byte array longer than desired length");
                        assert(reqLength > 0, "Requested array length <= 0");
                        var res = allocate(ArrayType, reqLength);
                        var postfix = endian === "le" ? "LE" : "BE";
                        this["_toArrayLike" + postfix](res, byteLength);
                        return res;
                    };
                    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
                        var position = 0;
                        var carry = 0;
                        for(var i = 0, shift = 0; i < this.length; i++){
                            var word = this.words[i] << shift | carry;
                            res[position++] = word & 0xff;
                            if (position < res.length) res[position++] = word >> 8 & 0xff;
                            if (position < res.length) res[position++] = word >> 16 & 0xff;
                            if (shift === 6) {
                                if (position < res.length) res[position++] = word >> 24 & 0xff;
                                carry = 0;
                                shift = 0;
                            } else {
                                carry = word >>> 24;
                                shift += 2;
                            }
                        }
                        if (position < res.length) {
                            res[position++] = carry;
                            while(position < res.length)res[position++] = 0;
                        }
                    };
                    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
                        var position = res.length - 1;
                        var carry = 0;
                        for(var i = 0, shift = 0; i < this.length; i++){
                            var word = this.words[i] << shift | carry;
                            res[position--] = word & 0xff;
                            if (position >= 0) res[position--] = word >> 8 & 0xff;
                            if (position >= 0) res[position--] = word >> 16 & 0xff;
                            if (shift === 6) {
                                if (position >= 0) res[position--] = word >> 24 & 0xff;
                                carry = 0;
                                shift = 0;
                            } else {
                                carry = word >>> 24;
                                shift += 2;
                            }
                        }
                        if (position >= 0) {
                            res[position--] = carry;
                            while(position >= 0)res[position--] = 0;
                        }
                    };
                    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
                        return 32 - Math.clz32(w);
                    };
                    else BN.prototype._countBits = function _countBits(w) {
                        var t = w;
                        var r = 0;
                        if (t >= 0x1000) {
                            r += 13;
                            t >>>= 13;
                        }
                        if (t >= 0x40) {
                            r += 7;
                            t >>>= 7;
                        }
                        if (t >= 0x8) {
                            r += 4;
                            t >>>= 4;
                        }
                        if (t >= 0x02) {
                            r += 2;
                            t >>>= 2;
                        }
                        return r + t;
                    };
                    BN.prototype._zeroBits = function _zeroBits(w) {
                        // Short-cut
                        if (w === 0) return 26;
                        var t = w;
                        var r = 0;
                        if ((t & 0x1fff) === 0) {
                            r += 13;
                            t >>>= 13;
                        }
                        if ((t & 0x7f) === 0) {
                            r += 7;
                            t >>>= 7;
                        }
                        if ((t & 0xf) === 0) {
                            r += 4;
                            t >>>= 4;
                        }
                        if ((t & 0x3) === 0) {
                            r += 2;
                            t >>>= 2;
                        }
                        if ((t & 0x1) === 0) r++;
                        return r;
                    }; // Return number of used bits in a BN
                    BN.prototype.bitLength = function bitLength() {
                        var w = this.words[this.length - 1];
                        var hi = this._countBits(w);
                        return (this.length - 1) * 26 + hi;
                    };
                    function toBitArray(num) {
                        var w = new Array(num.bitLength());
                        for(var bit = 0; bit < w.length; bit++){
                            var off = bit / 26 | 0;
                            var wbit = bit % 26;
                            w[bit] = num.words[off] >>> wbit & 0x01;
                        }
                        return w;
                    } // Number of trailing zero bits
                    BN.prototype.zeroBits = function zeroBits() {
                        if (this.isZero()) return 0;
                        var r = 0;
                        for(var i = 0; i < this.length; i++){
                            var b = this._zeroBits(this.words[i]);
                            r += b;
                            if (b !== 26) break;
                        }
                        return r;
                    };
                    BN.prototype.byteLength = function byteLength() {
                        return Math.ceil(this.bitLength() / 8);
                    };
                    BN.prototype.toTwos = function toTwos(width) {
                        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
                        return this.clone();
                    };
                    BN.prototype.fromTwos = function fromTwos(width) {
                        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
                        return this.clone();
                    };
                    BN.prototype.isNeg = function isNeg() {
                        return this.negative !== 0;
                    }; // Return negative clone of `this`
                    BN.prototype.neg = function neg() {
                        return this.clone().ineg();
                    };
                    BN.prototype.ineg = function ineg() {
                        if (!this.isZero()) this.negative ^= 1;
                        return this;
                    }; // Or `num` with `this` in-place
                    BN.prototype.iuor = function iuor(num) {
                        while(this.length < num.length)this.words[this.length++] = 0;
                        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
                        return this._strip();
                    };
                    BN.prototype.ior = function ior(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuor(num);
                    }; // Or `num` with `this`
                    BN.prototype.or = function or(num) {
                        if (this.length > num.length) return this.clone().ior(num);
                        return num.clone().ior(this);
                    };
                    BN.prototype.uor = function uor(num) {
                        if (this.length > num.length) return this.clone().iuor(num);
                        return num.clone().iuor(this);
                    }; // And `num` with `this` in-place
                    BN.prototype.iuand = function iuand(num) {
                        // b = min-length(num, this)
                        var b;
                        if (this.length > num.length) b = num;
                        else b = this;
                        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
                        this.length = b.length;
                        return this._strip();
                    };
                    BN.prototype.iand = function iand(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuand(num);
                    }; // And `num` with `this`
                    BN.prototype.and = function and(num) {
                        if (this.length > num.length) return this.clone().iand(num);
                        return num.clone().iand(this);
                    };
                    BN.prototype.uand = function uand(num) {
                        if (this.length > num.length) return this.clone().iuand(num);
                        return num.clone().iuand(this);
                    }; // Xor `num` with `this` in-place
                    BN.prototype.iuxor = function iuxor(num) {
                        // a.length > b.length
                        var a;
                        var b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
                        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
                        this.length = a.length;
                        return this._strip();
                    };
                    BN.prototype.ixor = function ixor(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuxor(num);
                    }; // Xor `num` with `this`
                    BN.prototype.xor = function xor(num) {
                        if (this.length > num.length) return this.clone().ixor(num);
                        return num.clone().ixor(this);
                    };
                    BN.prototype.uxor = function uxor(num) {
                        if (this.length > num.length) return this.clone().iuxor(num);
                        return num.clone().iuxor(this);
                    }; // Not ``this`` with ``width`` bitwidth
                    BN.prototype.inotn = function inotn(width) {
                        assert(typeof width === "number" && width >= 0);
                        var bytesNeeded = Math.ceil(width / 26) | 0;
                        var bitsLeft = width % 26; // Extend the buffer with leading zeroes
                        this._expand(bytesNeeded);
                        if (bitsLeft > 0) bytesNeeded--;
                         // Handle complete words
                        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
                         // Handle the residue
                        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
                         // And remove leading zeroes
                        return this._strip();
                    };
                    BN.prototype.notn = function notn(width) {
                        return this.clone().inotn(width);
                    }; // Set `bit` of `this`
                    BN.prototype.setn = function setn(bit, val) {
                        assert(typeof bit === "number" && bit >= 0);
                        var off = bit / 26 | 0;
                        var wbit = bit % 26;
                        this._expand(off + 1);
                        if (val) this.words[off] = this.words[off] | 1 << wbit;
                        else this.words[off] = this.words[off] & ~(1 << wbit);
                        return this._strip();
                    }; // Add `num` to `this` in-place
                    BN.prototype.iadd = function iadd(num) {
                        var r; // negative + positive
                        if (this.negative !== 0 && num.negative === 0) {
                            this.negative = 0;
                            r = this.isub(num);
                            this.negative ^= 1;
                            return this._normSign(); // positive + negative
                        } else if (this.negative === 0 && num.negative !== 0) {
                            num.negative = 0;
                            r = this.isub(num);
                            num.negative = 1;
                            return r._normSign();
                        } // a.length > b.length
                        var a, b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        var carry = 0;
                        for(var i = 0; i < b.length; i++){
                            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        for(; carry !== 0 && i < a.length; i++){
                            r = (a.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        this.length = a.length;
                        if (carry !== 0) {
                            this.words[this.length] = carry;
                            this.length++; // Copy the rest of the words
                        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
                        return this;
                    }; // Add `num` to `this`
                    BN.prototype.add = function add(num) {
                        var res;
                        if (num.negative !== 0 && this.negative === 0) {
                            num.negative = 0;
                            res = this.sub(num);
                            num.negative ^= 1;
                            return res;
                        } else if (num.negative === 0 && this.negative !== 0) {
                            this.negative = 0;
                            res = num.sub(this);
                            this.negative = 1;
                            return res;
                        }
                        if (this.length > num.length) return this.clone().iadd(num);
                        return num.clone().iadd(this);
                    }; // Subtract `num` from `this` in-place
                    BN.prototype.isub = function isub(num) {
                        // this - (-num) = this + num
                        if (num.negative !== 0) {
                            num.negative = 0;
                            var r = this.iadd(num);
                            num.negative = 1;
                            return r._normSign(); // -this - num = -(this + num)
                        } else if (this.negative !== 0) {
                            this.negative = 0;
                            this.iadd(num);
                            this.negative = 1;
                            return this._normSign();
                        } // At this point both numbers are positive
                        var cmp = this.cmp(num); // Optimization - zeroify
                        if (cmp === 0) {
                            this.negative = 0;
                            this.length = 1;
                            this.words[0] = 0;
                            return this;
                        } // a > b
                        var a, b;
                        if (cmp > 0) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        var carry = 0;
                        for(var i = 0; i < b.length; i++){
                            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        }
                        for(; carry !== 0 && i < a.length; i++){
                            r = (a.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        } // Copy rest of the words
                        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
                        this.length = Math.max(this.length, i);
                        if (a !== this) this.negative = 1;
                        return this._strip();
                    }; // Subtract `num` from `this`
                    BN.prototype.sub = function sub(num) {
                        return this.clone().isub(num);
                    };
                    function smallMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        var len = self.length + num.length | 0;
                        out.length = len;
                        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)
                        var a = self.words[0] | 0;
                        var b = num.words[0] | 0;
                        var r = a * b;
                        var lo = r & 0x3ffffff;
                        var carry = r / 0x4000000 | 0;
                        out.words[0] = lo;
                        for(var k = 1; k < len; k++){
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = carry >>> 26;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                                var i = k - j | 0;
                                a = self.words[i] | 0;
                                b = num.words[j] | 0;
                                r = a * b + rword;
                                ncarry += r / 0x4000000 | 0;
                                rword = r & 0x3ffffff;
                            }
                            out.words[k] = rword | 0;
                            carry = ncarry | 0;
                        }
                        if (carry !== 0) out.words[k] = carry | 0;
                        else out.length--;
                        return out._strip();
                    } // TODO(indutny): it may be reasonable to omit it for users who don't need
                    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                    // multiplication (like elliptic secp256k1).
                    var comb10MulTo = function comb10MulTo(self, num, out) {
                        var a = self.words;
                        var b = num.words;
                        var o = out.words;
                        var c = 0;
                        var lo;
                        var mid;
                        var hi;
                        var a0 = a[0] | 0;
                        var al0 = a0 & 0x1fff;
                        var ah0 = a0 >>> 13;
                        var a1 = a[1] | 0;
                        var al1 = a1 & 0x1fff;
                        var ah1 = a1 >>> 13;
                        var a2 = a[2] | 0;
                        var al2 = a2 & 0x1fff;
                        var ah2 = a2 >>> 13;
                        var a3 = a[3] | 0;
                        var al3 = a3 & 0x1fff;
                        var ah3 = a3 >>> 13;
                        var a4 = a[4] | 0;
                        var al4 = a4 & 0x1fff;
                        var ah4 = a4 >>> 13;
                        var a5 = a[5] | 0;
                        var al5 = a5 & 0x1fff;
                        var ah5 = a5 >>> 13;
                        var a6 = a[6] | 0;
                        var al6 = a6 & 0x1fff;
                        var ah6 = a6 >>> 13;
                        var a7 = a[7] | 0;
                        var al7 = a7 & 0x1fff;
                        var ah7 = a7 >>> 13;
                        var a8 = a[8] | 0;
                        var al8 = a8 & 0x1fff;
                        var ah8 = a8 >>> 13;
                        var a9 = a[9] | 0;
                        var al9 = a9 & 0x1fff;
                        var ah9 = a9 >>> 13;
                        var b0 = b[0] | 0;
                        var bl0 = b0 & 0x1fff;
                        var bh0 = b0 >>> 13;
                        var b1 = b[1] | 0;
                        var bl1 = b1 & 0x1fff;
                        var bh1 = b1 >>> 13;
                        var b2 = b[2] | 0;
                        var bl2 = b2 & 0x1fff;
                        var bh2 = b2 >>> 13;
                        var b3 = b[3] | 0;
                        var bl3 = b3 & 0x1fff;
                        var bh3 = b3 >>> 13;
                        var b4 = b[4] | 0;
                        var bl4 = b4 & 0x1fff;
                        var bh4 = b4 >>> 13;
                        var b5 = b[5] | 0;
                        var bl5 = b5 & 0x1fff;
                        var bh5 = b5 >>> 13;
                        var b6 = b[6] | 0;
                        var bl6 = b6 & 0x1fff;
                        var bh6 = b6 >>> 13;
                        var b7 = b[7] | 0;
                        var bl7 = b7 & 0x1fff;
                        var bh7 = b7 >>> 13;
                        var b8 = b[8] | 0;
                        var bl8 = b8 & 0x1fff;
                        var bh8 = b8 >>> 13;
                        var b9 = b[9] | 0;
                        var bl9 = b9 & 0x1fff;
                        var bh9 = b9 >>> 13;
                        out.negative = self.negative ^ num.negative;
                        out.length = 19;
                        /* k = 0 */ lo = Math.imul(al0, bl0);
                        mid = Math.imul(al0, bh0);
                        mid = mid + Math.imul(ah0, bl0) | 0;
                        hi = Math.imul(ah0, bh0);
                        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                        w0 &= 0x3ffffff;
                        /* k = 1 */ lo = Math.imul(al1, bl0);
                        mid = Math.imul(al1, bh0);
                        mid = mid + Math.imul(ah1, bl0) | 0;
                        hi = Math.imul(ah1, bh0);
                        lo = lo + Math.imul(al0, bl1) | 0;
                        mid = mid + Math.imul(al0, bh1) | 0;
                        mid = mid + Math.imul(ah0, bl1) | 0;
                        hi = hi + Math.imul(ah0, bh1) | 0;
                        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                        w1 &= 0x3ffffff;
                        /* k = 2 */ lo = Math.imul(al2, bl0);
                        mid = Math.imul(al2, bh0);
                        mid = mid + Math.imul(ah2, bl0) | 0;
                        hi = Math.imul(ah2, bh0);
                        lo = lo + Math.imul(al1, bl1) | 0;
                        mid = mid + Math.imul(al1, bh1) | 0;
                        mid = mid + Math.imul(ah1, bl1) | 0;
                        hi = hi + Math.imul(ah1, bh1) | 0;
                        lo = lo + Math.imul(al0, bl2) | 0;
                        mid = mid + Math.imul(al0, bh2) | 0;
                        mid = mid + Math.imul(ah0, bl2) | 0;
                        hi = hi + Math.imul(ah0, bh2) | 0;
                        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                        w2 &= 0x3ffffff;
                        /* k = 3 */ lo = Math.imul(al3, bl0);
                        mid = Math.imul(al3, bh0);
                        mid = mid + Math.imul(ah3, bl0) | 0;
                        hi = Math.imul(ah3, bh0);
                        lo = lo + Math.imul(al2, bl1) | 0;
                        mid = mid + Math.imul(al2, bh1) | 0;
                        mid = mid + Math.imul(ah2, bl1) | 0;
                        hi = hi + Math.imul(ah2, bh1) | 0;
                        lo = lo + Math.imul(al1, bl2) | 0;
                        mid = mid + Math.imul(al1, bh2) | 0;
                        mid = mid + Math.imul(ah1, bl2) | 0;
                        hi = hi + Math.imul(ah1, bh2) | 0;
                        lo = lo + Math.imul(al0, bl3) | 0;
                        mid = mid + Math.imul(al0, bh3) | 0;
                        mid = mid + Math.imul(ah0, bl3) | 0;
                        hi = hi + Math.imul(ah0, bh3) | 0;
                        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                        w3 &= 0x3ffffff;
                        /* k = 4 */ lo = Math.imul(al4, bl0);
                        mid = Math.imul(al4, bh0);
                        mid = mid + Math.imul(ah4, bl0) | 0;
                        hi = Math.imul(ah4, bh0);
                        lo = lo + Math.imul(al3, bl1) | 0;
                        mid = mid + Math.imul(al3, bh1) | 0;
                        mid = mid + Math.imul(ah3, bl1) | 0;
                        hi = hi + Math.imul(ah3, bh1) | 0;
                        lo = lo + Math.imul(al2, bl2) | 0;
                        mid = mid + Math.imul(al2, bh2) | 0;
                        mid = mid + Math.imul(ah2, bl2) | 0;
                        hi = hi + Math.imul(ah2, bh2) | 0;
                        lo = lo + Math.imul(al1, bl3) | 0;
                        mid = mid + Math.imul(al1, bh3) | 0;
                        mid = mid + Math.imul(ah1, bl3) | 0;
                        hi = hi + Math.imul(ah1, bh3) | 0;
                        lo = lo + Math.imul(al0, bl4) | 0;
                        mid = mid + Math.imul(al0, bh4) | 0;
                        mid = mid + Math.imul(ah0, bl4) | 0;
                        hi = hi + Math.imul(ah0, bh4) | 0;
                        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                        w4 &= 0x3ffffff;
                        /* k = 5 */ lo = Math.imul(al5, bl0);
                        mid = Math.imul(al5, bh0);
                        mid = mid + Math.imul(ah5, bl0) | 0;
                        hi = Math.imul(ah5, bh0);
                        lo = lo + Math.imul(al4, bl1) | 0;
                        mid = mid + Math.imul(al4, bh1) | 0;
                        mid = mid + Math.imul(ah4, bl1) | 0;
                        hi = hi + Math.imul(ah4, bh1) | 0;
                        lo = lo + Math.imul(al3, bl2) | 0;
                        mid = mid + Math.imul(al3, bh2) | 0;
                        mid = mid + Math.imul(ah3, bl2) | 0;
                        hi = hi + Math.imul(ah3, bh2) | 0;
                        lo = lo + Math.imul(al2, bl3) | 0;
                        mid = mid + Math.imul(al2, bh3) | 0;
                        mid = mid + Math.imul(ah2, bl3) | 0;
                        hi = hi + Math.imul(ah2, bh3) | 0;
                        lo = lo + Math.imul(al1, bl4) | 0;
                        mid = mid + Math.imul(al1, bh4) | 0;
                        mid = mid + Math.imul(ah1, bl4) | 0;
                        hi = hi + Math.imul(ah1, bh4) | 0;
                        lo = lo + Math.imul(al0, bl5) | 0;
                        mid = mid + Math.imul(al0, bh5) | 0;
                        mid = mid + Math.imul(ah0, bl5) | 0;
                        hi = hi + Math.imul(ah0, bh5) | 0;
                        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                        w5 &= 0x3ffffff;
                        /* k = 6 */ lo = Math.imul(al6, bl0);
                        mid = Math.imul(al6, bh0);
                        mid = mid + Math.imul(ah6, bl0) | 0;
                        hi = Math.imul(ah6, bh0);
                        lo = lo + Math.imul(al5, bl1) | 0;
                        mid = mid + Math.imul(al5, bh1) | 0;
                        mid = mid + Math.imul(ah5, bl1) | 0;
                        hi = hi + Math.imul(ah5, bh1) | 0;
                        lo = lo + Math.imul(al4, bl2) | 0;
                        mid = mid + Math.imul(al4, bh2) | 0;
                        mid = mid + Math.imul(ah4, bl2) | 0;
                        hi = hi + Math.imul(ah4, bh2) | 0;
                        lo = lo + Math.imul(al3, bl3) | 0;
                        mid = mid + Math.imul(al3, bh3) | 0;
                        mid = mid + Math.imul(ah3, bl3) | 0;
                        hi = hi + Math.imul(ah3, bh3) | 0;
                        lo = lo + Math.imul(al2, bl4) | 0;
                        mid = mid + Math.imul(al2, bh4) | 0;
                        mid = mid + Math.imul(ah2, bl4) | 0;
                        hi = hi + Math.imul(ah2, bh4) | 0;
                        lo = lo + Math.imul(al1, bl5) | 0;
                        mid = mid + Math.imul(al1, bh5) | 0;
                        mid = mid + Math.imul(ah1, bl5) | 0;
                        hi = hi + Math.imul(ah1, bh5) | 0;
                        lo = lo + Math.imul(al0, bl6) | 0;
                        mid = mid + Math.imul(al0, bh6) | 0;
                        mid = mid + Math.imul(ah0, bl6) | 0;
                        hi = hi + Math.imul(ah0, bh6) | 0;
                        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                        w6 &= 0x3ffffff;
                        /* k = 7 */ lo = Math.imul(al7, bl0);
                        mid = Math.imul(al7, bh0);
                        mid = mid + Math.imul(ah7, bl0) | 0;
                        hi = Math.imul(ah7, bh0);
                        lo = lo + Math.imul(al6, bl1) | 0;
                        mid = mid + Math.imul(al6, bh1) | 0;
                        mid = mid + Math.imul(ah6, bl1) | 0;
                        hi = hi + Math.imul(ah6, bh1) | 0;
                        lo = lo + Math.imul(al5, bl2) | 0;
                        mid = mid + Math.imul(al5, bh2) | 0;
                        mid = mid + Math.imul(ah5, bl2) | 0;
                        hi = hi + Math.imul(ah5, bh2) | 0;
                        lo = lo + Math.imul(al4, bl3) | 0;
                        mid = mid + Math.imul(al4, bh3) | 0;
                        mid = mid + Math.imul(ah4, bl3) | 0;
                        hi = hi + Math.imul(ah4, bh3) | 0;
                        lo = lo + Math.imul(al3, bl4) | 0;
                        mid = mid + Math.imul(al3, bh4) | 0;
                        mid = mid + Math.imul(ah3, bl4) | 0;
                        hi = hi + Math.imul(ah3, bh4) | 0;
                        lo = lo + Math.imul(al2, bl5) | 0;
                        mid = mid + Math.imul(al2, bh5) | 0;
                        mid = mid + Math.imul(ah2, bl5) | 0;
                        hi = hi + Math.imul(ah2, bh5) | 0;
                        lo = lo + Math.imul(al1, bl6) | 0;
                        mid = mid + Math.imul(al1, bh6) | 0;
                        mid = mid + Math.imul(ah1, bl6) | 0;
                        hi = hi + Math.imul(ah1, bh6) | 0;
                        lo = lo + Math.imul(al0, bl7) | 0;
                        mid = mid + Math.imul(al0, bh7) | 0;
                        mid = mid + Math.imul(ah0, bl7) | 0;
                        hi = hi + Math.imul(ah0, bh7) | 0;
                        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                        w7 &= 0x3ffffff;
                        /* k = 8 */ lo = Math.imul(al8, bl0);
                        mid = Math.imul(al8, bh0);
                        mid = mid + Math.imul(ah8, bl0) | 0;
                        hi = Math.imul(ah8, bh0);
                        lo = lo + Math.imul(al7, bl1) | 0;
                        mid = mid + Math.imul(al7, bh1) | 0;
                        mid = mid + Math.imul(ah7, bl1) | 0;
                        hi = hi + Math.imul(ah7, bh1) | 0;
                        lo = lo + Math.imul(al6, bl2) | 0;
                        mid = mid + Math.imul(al6, bh2) | 0;
                        mid = mid + Math.imul(ah6, bl2) | 0;
                        hi = hi + Math.imul(ah6, bh2) | 0;
                        lo = lo + Math.imul(al5, bl3) | 0;
                        mid = mid + Math.imul(al5, bh3) | 0;
                        mid = mid + Math.imul(ah5, bl3) | 0;
                        hi = hi + Math.imul(ah5, bh3) | 0;
                        lo = lo + Math.imul(al4, bl4) | 0;
                        mid = mid + Math.imul(al4, bh4) | 0;
                        mid = mid + Math.imul(ah4, bl4) | 0;
                        hi = hi + Math.imul(ah4, bh4) | 0;
                        lo = lo + Math.imul(al3, bl5) | 0;
                        mid = mid + Math.imul(al3, bh5) | 0;
                        mid = mid + Math.imul(ah3, bl5) | 0;
                        hi = hi + Math.imul(ah3, bh5) | 0;
                        lo = lo + Math.imul(al2, bl6) | 0;
                        mid = mid + Math.imul(al2, bh6) | 0;
                        mid = mid + Math.imul(ah2, bl6) | 0;
                        hi = hi + Math.imul(ah2, bh6) | 0;
                        lo = lo + Math.imul(al1, bl7) | 0;
                        mid = mid + Math.imul(al1, bh7) | 0;
                        mid = mid + Math.imul(ah1, bl7) | 0;
                        hi = hi + Math.imul(ah1, bh7) | 0;
                        lo = lo + Math.imul(al0, bl8) | 0;
                        mid = mid + Math.imul(al0, bh8) | 0;
                        mid = mid + Math.imul(ah0, bl8) | 0;
                        hi = hi + Math.imul(ah0, bh8) | 0;
                        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                        w8 &= 0x3ffffff;
                        /* k = 9 */ lo = Math.imul(al9, bl0);
                        mid = Math.imul(al9, bh0);
                        mid = mid + Math.imul(ah9, bl0) | 0;
                        hi = Math.imul(ah9, bh0);
                        lo = lo + Math.imul(al8, bl1) | 0;
                        mid = mid + Math.imul(al8, bh1) | 0;
                        mid = mid + Math.imul(ah8, bl1) | 0;
                        hi = hi + Math.imul(ah8, bh1) | 0;
                        lo = lo + Math.imul(al7, bl2) | 0;
                        mid = mid + Math.imul(al7, bh2) | 0;
                        mid = mid + Math.imul(ah7, bl2) | 0;
                        hi = hi + Math.imul(ah7, bh2) | 0;
                        lo = lo + Math.imul(al6, bl3) | 0;
                        mid = mid + Math.imul(al6, bh3) | 0;
                        mid = mid + Math.imul(ah6, bl3) | 0;
                        hi = hi + Math.imul(ah6, bh3) | 0;
                        lo = lo + Math.imul(al5, bl4) | 0;
                        mid = mid + Math.imul(al5, bh4) | 0;
                        mid = mid + Math.imul(ah5, bl4) | 0;
                        hi = hi + Math.imul(ah5, bh4) | 0;
                        lo = lo + Math.imul(al4, bl5) | 0;
                        mid = mid + Math.imul(al4, bh5) | 0;
                        mid = mid + Math.imul(ah4, bl5) | 0;
                        hi = hi + Math.imul(ah4, bh5) | 0;
                        lo = lo + Math.imul(al3, bl6) | 0;
                        mid = mid + Math.imul(al3, bh6) | 0;
                        mid = mid + Math.imul(ah3, bl6) | 0;
                        hi = hi + Math.imul(ah3, bh6) | 0;
                        lo = lo + Math.imul(al2, bl7) | 0;
                        mid = mid + Math.imul(al2, bh7) | 0;
                        mid = mid + Math.imul(ah2, bl7) | 0;
                        hi = hi + Math.imul(ah2, bh7) | 0;
                        lo = lo + Math.imul(al1, bl8) | 0;
                        mid = mid + Math.imul(al1, bh8) | 0;
                        mid = mid + Math.imul(ah1, bl8) | 0;
                        hi = hi + Math.imul(ah1, bh8) | 0;
                        lo = lo + Math.imul(al0, bl9) | 0;
                        mid = mid + Math.imul(al0, bh9) | 0;
                        mid = mid + Math.imul(ah0, bl9) | 0;
                        hi = hi + Math.imul(ah0, bh9) | 0;
                        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                        w9 &= 0x3ffffff;
                        /* k = 10 */ lo = Math.imul(al9, bl1);
                        mid = Math.imul(al9, bh1);
                        mid = mid + Math.imul(ah9, bl1) | 0;
                        hi = Math.imul(ah9, bh1);
                        lo = lo + Math.imul(al8, bl2) | 0;
                        mid = mid + Math.imul(al8, bh2) | 0;
                        mid = mid + Math.imul(ah8, bl2) | 0;
                        hi = hi + Math.imul(ah8, bh2) | 0;
                        lo = lo + Math.imul(al7, bl3) | 0;
                        mid = mid + Math.imul(al7, bh3) | 0;
                        mid = mid + Math.imul(ah7, bl3) | 0;
                        hi = hi + Math.imul(ah7, bh3) | 0;
                        lo = lo + Math.imul(al6, bl4) | 0;
                        mid = mid + Math.imul(al6, bh4) | 0;
                        mid = mid + Math.imul(ah6, bl4) | 0;
                        hi = hi + Math.imul(ah6, bh4) | 0;
                        lo = lo + Math.imul(al5, bl5) | 0;
                        mid = mid + Math.imul(al5, bh5) | 0;
                        mid = mid + Math.imul(ah5, bl5) | 0;
                        hi = hi + Math.imul(ah5, bh5) | 0;
                        lo = lo + Math.imul(al4, bl6) | 0;
                        mid = mid + Math.imul(al4, bh6) | 0;
                        mid = mid + Math.imul(ah4, bl6) | 0;
                        hi = hi + Math.imul(ah4, bh6) | 0;
                        lo = lo + Math.imul(al3, bl7) | 0;
                        mid = mid + Math.imul(al3, bh7) | 0;
                        mid = mid + Math.imul(ah3, bl7) | 0;
                        hi = hi + Math.imul(ah3, bh7) | 0;
                        lo = lo + Math.imul(al2, bl8) | 0;
                        mid = mid + Math.imul(al2, bh8) | 0;
                        mid = mid + Math.imul(ah2, bl8) | 0;
                        hi = hi + Math.imul(ah2, bh8) | 0;
                        lo = lo + Math.imul(al1, bl9) | 0;
                        mid = mid + Math.imul(al1, bh9) | 0;
                        mid = mid + Math.imul(ah1, bl9) | 0;
                        hi = hi + Math.imul(ah1, bh9) | 0;
                        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                        w10 &= 0x3ffffff;
                        /* k = 11 */ lo = Math.imul(al9, bl2);
                        mid = Math.imul(al9, bh2);
                        mid = mid + Math.imul(ah9, bl2) | 0;
                        hi = Math.imul(ah9, bh2);
                        lo = lo + Math.imul(al8, bl3) | 0;
                        mid = mid + Math.imul(al8, bh3) | 0;
                        mid = mid + Math.imul(ah8, bl3) | 0;
                        hi = hi + Math.imul(ah8, bh3) | 0;
                        lo = lo + Math.imul(al7, bl4) | 0;
                        mid = mid + Math.imul(al7, bh4) | 0;
                        mid = mid + Math.imul(ah7, bl4) | 0;
                        hi = hi + Math.imul(ah7, bh4) | 0;
                        lo = lo + Math.imul(al6, bl5) | 0;
                        mid = mid + Math.imul(al6, bh5) | 0;
                        mid = mid + Math.imul(ah6, bl5) | 0;
                        hi = hi + Math.imul(ah6, bh5) | 0;
                        lo = lo + Math.imul(al5, bl6) | 0;
                        mid = mid + Math.imul(al5, bh6) | 0;
                        mid = mid + Math.imul(ah5, bl6) | 0;
                        hi = hi + Math.imul(ah5, bh6) | 0;
                        lo = lo + Math.imul(al4, bl7) | 0;
                        mid = mid + Math.imul(al4, bh7) | 0;
                        mid = mid + Math.imul(ah4, bl7) | 0;
                        hi = hi + Math.imul(ah4, bh7) | 0;
                        lo = lo + Math.imul(al3, bl8) | 0;
                        mid = mid + Math.imul(al3, bh8) | 0;
                        mid = mid + Math.imul(ah3, bl8) | 0;
                        hi = hi + Math.imul(ah3, bh8) | 0;
                        lo = lo + Math.imul(al2, bl9) | 0;
                        mid = mid + Math.imul(al2, bh9) | 0;
                        mid = mid + Math.imul(ah2, bl9) | 0;
                        hi = hi + Math.imul(ah2, bh9) | 0;
                        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                        w11 &= 0x3ffffff;
                        /* k = 12 */ lo = Math.imul(al9, bl3);
                        mid = Math.imul(al9, bh3);
                        mid = mid + Math.imul(ah9, bl3) | 0;
                        hi = Math.imul(ah9, bh3);
                        lo = lo + Math.imul(al8, bl4) | 0;
                        mid = mid + Math.imul(al8, bh4) | 0;
                        mid = mid + Math.imul(ah8, bl4) | 0;
                        hi = hi + Math.imul(ah8, bh4) | 0;
                        lo = lo + Math.imul(al7, bl5) | 0;
                        mid = mid + Math.imul(al7, bh5) | 0;
                        mid = mid + Math.imul(ah7, bl5) | 0;
                        hi = hi + Math.imul(ah7, bh5) | 0;
                        lo = lo + Math.imul(al6, bl6) | 0;
                        mid = mid + Math.imul(al6, bh6) | 0;
                        mid = mid + Math.imul(ah6, bl6) | 0;
                        hi = hi + Math.imul(ah6, bh6) | 0;
                        lo = lo + Math.imul(al5, bl7) | 0;
                        mid = mid + Math.imul(al5, bh7) | 0;
                        mid = mid + Math.imul(ah5, bl7) | 0;
                        hi = hi + Math.imul(ah5, bh7) | 0;
                        lo = lo + Math.imul(al4, bl8) | 0;
                        mid = mid + Math.imul(al4, bh8) | 0;
                        mid = mid + Math.imul(ah4, bl8) | 0;
                        hi = hi + Math.imul(ah4, bh8) | 0;
                        lo = lo + Math.imul(al3, bl9) | 0;
                        mid = mid + Math.imul(al3, bh9) | 0;
                        mid = mid + Math.imul(ah3, bl9) | 0;
                        hi = hi + Math.imul(ah3, bh9) | 0;
                        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                        w12 &= 0x3ffffff;
                        /* k = 13 */ lo = Math.imul(al9, bl4);
                        mid = Math.imul(al9, bh4);
                        mid = mid + Math.imul(ah9, bl4) | 0;
                        hi = Math.imul(ah9, bh4);
                        lo = lo + Math.imul(al8, bl5) | 0;
                        mid = mid + Math.imul(al8, bh5) | 0;
                        mid = mid + Math.imul(ah8, bl5) | 0;
                        hi = hi + Math.imul(ah8, bh5) | 0;
                        lo = lo + Math.imul(al7, bl6) | 0;
                        mid = mid + Math.imul(al7, bh6) | 0;
                        mid = mid + Math.imul(ah7, bl6) | 0;
                        hi = hi + Math.imul(ah7, bh6) | 0;
                        lo = lo + Math.imul(al6, bl7) | 0;
                        mid = mid + Math.imul(al6, bh7) | 0;
                        mid = mid + Math.imul(ah6, bl7) | 0;
                        hi = hi + Math.imul(ah6, bh7) | 0;
                        lo = lo + Math.imul(al5, bl8) | 0;
                        mid = mid + Math.imul(al5, bh8) | 0;
                        mid = mid + Math.imul(ah5, bl8) | 0;
                        hi = hi + Math.imul(ah5, bh8) | 0;
                        lo = lo + Math.imul(al4, bl9) | 0;
                        mid = mid + Math.imul(al4, bh9) | 0;
                        mid = mid + Math.imul(ah4, bl9) | 0;
                        hi = hi + Math.imul(ah4, bh9) | 0;
                        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                        w13 &= 0x3ffffff;
                        /* k = 14 */ lo = Math.imul(al9, bl5);
                        mid = Math.imul(al9, bh5);
                        mid = mid + Math.imul(ah9, bl5) | 0;
                        hi = Math.imul(ah9, bh5);
                        lo = lo + Math.imul(al8, bl6) | 0;
                        mid = mid + Math.imul(al8, bh6) | 0;
                        mid = mid + Math.imul(ah8, bl6) | 0;
                        hi = hi + Math.imul(ah8, bh6) | 0;
                        lo = lo + Math.imul(al7, bl7) | 0;
                        mid = mid + Math.imul(al7, bh7) | 0;
                        mid = mid + Math.imul(ah7, bl7) | 0;
                        hi = hi + Math.imul(ah7, bh7) | 0;
                        lo = lo + Math.imul(al6, bl8) | 0;
                        mid = mid + Math.imul(al6, bh8) | 0;
                        mid = mid + Math.imul(ah6, bl8) | 0;
                        hi = hi + Math.imul(ah6, bh8) | 0;
                        lo = lo + Math.imul(al5, bl9) | 0;
                        mid = mid + Math.imul(al5, bh9) | 0;
                        mid = mid + Math.imul(ah5, bl9) | 0;
                        hi = hi + Math.imul(ah5, bh9) | 0;
                        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                        w14 &= 0x3ffffff;
                        /* k = 15 */ lo = Math.imul(al9, bl6);
                        mid = Math.imul(al9, bh6);
                        mid = mid + Math.imul(ah9, bl6) | 0;
                        hi = Math.imul(ah9, bh6);
                        lo = lo + Math.imul(al8, bl7) | 0;
                        mid = mid + Math.imul(al8, bh7) | 0;
                        mid = mid + Math.imul(ah8, bl7) | 0;
                        hi = hi + Math.imul(ah8, bh7) | 0;
                        lo = lo + Math.imul(al7, bl8) | 0;
                        mid = mid + Math.imul(al7, bh8) | 0;
                        mid = mid + Math.imul(ah7, bl8) | 0;
                        hi = hi + Math.imul(ah7, bh8) | 0;
                        lo = lo + Math.imul(al6, bl9) | 0;
                        mid = mid + Math.imul(al6, bh9) | 0;
                        mid = mid + Math.imul(ah6, bl9) | 0;
                        hi = hi + Math.imul(ah6, bh9) | 0;
                        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                        w15 &= 0x3ffffff;
                        /* k = 16 */ lo = Math.imul(al9, bl7);
                        mid = Math.imul(al9, bh7);
                        mid = mid + Math.imul(ah9, bl7) | 0;
                        hi = Math.imul(ah9, bh7);
                        lo = lo + Math.imul(al8, bl8) | 0;
                        mid = mid + Math.imul(al8, bh8) | 0;
                        mid = mid + Math.imul(ah8, bl8) | 0;
                        hi = hi + Math.imul(ah8, bh8) | 0;
                        lo = lo + Math.imul(al7, bl9) | 0;
                        mid = mid + Math.imul(al7, bh9) | 0;
                        mid = mid + Math.imul(ah7, bl9) | 0;
                        hi = hi + Math.imul(ah7, bh9) | 0;
                        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                        w16 &= 0x3ffffff;
                        /* k = 17 */ lo = Math.imul(al9, bl8);
                        mid = Math.imul(al9, bh8);
                        mid = mid + Math.imul(ah9, bl8) | 0;
                        hi = Math.imul(ah9, bh8);
                        lo = lo + Math.imul(al8, bl9) | 0;
                        mid = mid + Math.imul(al8, bh9) | 0;
                        mid = mid + Math.imul(ah8, bl9) | 0;
                        hi = hi + Math.imul(ah8, bh9) | 0;
                        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                        w17 &= 0x3ffffff;
                        /* k = 18 */ lo = Math.imul(al9, bl9);
                        mid = Math.imul(al9, bh9);
                        mid = mid + Math.imul(ah9, bl9) | 0;
                        hi = Math.imul(ah9, bh9);
                        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                        w18 &= 0x3ffffff;
                        o[0] = w0;
                        o[1] = w1;
                        o[2] = w2;
                        o[3] = w3;
                        o[4] = w4;
                        o[5] = w5;
                        o[6] = w6;
                        o[7] = w7;
                        o[8] = w8;
                        o[9] = w9;
                        o[10] = w10;
                        o[11] = w11;
                        o[12] = w12;
                        o[13] = w13;
                        o[14] = w14;
                        o[15] = w15;
                        o[16] = w16;
                        o[17] = w17;
                        o[18] = w18;
                        if (c !== 0) {
                            o[19] = c;
                            out.length++;
                        }
                        return out;
                    }; // Polyfill comb
                    if (!Math.imul) comb10MulTo = smallMulTo;
                    function bigMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        out.length = self.length + num.length;
                        var carry = 0;
                        var hncarry = 0;
                        for(var k = 0; k < out.length - 1; k++){
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = hncarry;
                            hncarry = 0;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                                var i = k - j;
                                var a = self.words[i] | 0;
                                var b = num.words[j] | 0;
                                var r = a * b;
                                var lo = r & 0x3ffffff;
                                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                                lo = lo + rword | 0;
                                rword = lo & 0x3ffffff;
                                ncarry = ncarry + (lo >>> 26) | 0;
                                hncarry += ncarry >>> 26;
                                ncarry &= 0x3ffffff;
                            }
                            out.words[k] = rword;
                            carry = ncarry;
                            ncarry = hncarry;
                        }
                        if (carry !== 0) out.words[k] = carry;
                        else out.length--;
                        return out._strip();
                    }
                    function jumboMulTo(self, num, out) {
                        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
                        // var fftm = new FFTM();
                        // return fftm.mulp(self, num, out);
                        return bigMulTo(self, num, out);
                    }
                    BN.prototype.mulTo = function mulTo(num, out) {
                        var res;
                        var len = this.length + num.length;
                        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
                        else if (len < 63) res = smallMulTo(this, num, out);
                        else if (len < 1024) res = bigMulTo(this, num, out);
                        else res = jumboMulTo(this, num, out);
                        return res;
                    }; // Cooley-Tukey algorithm for FFT
                    // slightly revisited to rely on looping instead of recursion
                    function FFTM(x, y) {
                        this.x = x;
                        this.y = y;
                    }
                    FFTM.prototype.makeRBT = function makeRBT(N) {
                        var t = new Array(N);
                        var l = BN.prototype._countBits(N) - 1;
                        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
                        return t;
                    }; // Returns binary-reversed representation of `x`
                    FFTM.prototype.revBin = function revBin(x, l, N) {
                        if (x === 0 || x === N - 1) return x;
                        var rb = 0;
                        for(var i = 0; i < l; i++){
                            rb |= (x & 1) << l - i - 1;
                            x >>= 1;
                        }
                        return rb;
                    }; // Performs "tweedling" phase, therefore 'emulating'
                    // behaviour of the recursive algorithm
                    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                        for(var i = 0; i < N; i++){
                            rtws[i] = rws[rbt[i]];
                            itws[i] = iws[rbt[i]];
                        }
                    };
                    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                        this.permute(rbt, rws, iws, rtws, itws, N);
                        for(var s = 1; s < N; s <<= 1){
                            var l = s << 1;
                            var rtwdf = Math.cos(2 * Math.PI / l);
                            var itwdf = Math.sin(2 * Math.PI / l);
                            for(var p = 0; p < N; p += l){
                                var rtwdf_ = rtwdf;
                                var itwdf_ = itwdf;
                                for(var j = 0; j < s; j++){
                                    var re = rtws[p + j];
                                    var ie = itws[p + j];
                                    var ro = rtws[p + j + s];
                                    var io = itws[p + j + s];
                                    var rx = rtwdf_ * ro - itwdf_ * io;
                                    io = rtwdf_ * io + itwdf_ * ro;
                                    ro = rx;
                                    rtws[p + j] = re + ro;
                                    itws[p + j] = ie + io;
                                    rtws[p + j + s] = re - ro;
                                    itws[p + j + s] = ie - io;
                                    /* jshint maxdepth : false */ if (j !== l) {
                                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                        rtwdf_ = rx;
                                    }
                                }
                            }
                        }
                    };
                    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                        var N = Math.max(m, n) | 1;
                        var odd = N & 1;
                        var i = 0;
                        for(N = N / 2 | 0; N; N = N >>> 1)i++;
                        return 1 << i + 1 + odd;
                    };
                    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                        if (N <= 1) return;
                        for(var i = 0; i < N / 2; i++){
                            var t = rws[i];
                            rws[i] = rws[N - i - 1];
                            rws[N - i - 1] = t;
                            t = iws[i];
                            iws[i] = -iws[N - i - 1];
                            iws[N - i - 1] = -t;
                        }
                    };
                    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                        var carry = 0;
                        for(var i = 0; i < N / 2; i++){
                            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
                            ws[i] = w & 0x3ffffff;
                            if (w < 0x4000000) carry = 0;
                            else carry = w / 0x4000000 | 0;
                        }
                        return ws;
                    };
                    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                        var carry = 0;
                        for(var i = 0; i < len; i++){
                            carry = carry + (ws[i] | 0);
                            rws[2 * i] = carry & 0x1fff;
                            carry = carry >>> 13;
                            rws[2 * i + 1] = carry & 0x1fff;
                            carry = carry >>> 13;
                        } // Pad with zeroes
                        for(i = 2 * len; i < N; ++i)rws[i] = 0;
                        assert(carry === 0);
                        assert((carry & -8192) === 0);
                    };
                    FFTM.prototype.stub = function stub(N) {
                        var ph = new Array(N);
                        for(var i = 0; i < N; i++)ph[i] = 0;
                        return ph;
                    };
                    FFTM.prototype.mulp = function mulp(x, y, out) {
                        var N = 2 * this.guessLen13b(x.length, y.length);
                        var rbt = this.makeRBT(N);
                        var _ = this.stub(N);
                        var rws = new Array(N);
                        var rwst = new Array(N);
                        var iwst = new Array(N);
                        var nrws = new Array(N);
                        var nrwst = new Array(N);
                        var niwst = new Array(N);
                        var rmws = out.words;
                        rmws.length = N;
                        this.convert13b(x.words, x.length, rws, N);
                        this.convert13b(y.words, y.length, nrws, N);
                        this.transform(rws, _, rwst, iwst, N, rbt);
                        this.transform(nrws, _, nrwst, niwst, N, rbt);
                        for(var i = 0; i < N; i++){
                            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                            rwst[i] = rx;
                        }
                        this.conjugate(rwst, iwst, N);
                        this.transform(rwst, iwst, rmws, _, N, rbt);
                        this.conjugate(rmws, _, N);
                        this.normalize13b(rmws, N);
                        out.negative = x.negative ^ y.negative;
                        out.length = x.length + y.length;
                        return out._strip();
                    }; // Multiply `this` by `num`
                    BN.prototype.mul = function mul(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return this.mulTo(num, out);
                    }; // Multiply employing FFT
                    BN.prototype.mulf = function mulf(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return jumboMulTo(this, num, out);
                    }; // In-place Multiplication
                    BN.prototype.imul = function imul(num) {
                        return this.clone().mulTo(num, this);
                    };
                    BN.prototype.imuln = function imuln(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;
                        assert(typeof num === "number");
                        assert(num < 0x4000000); // Carry
                        var carry = 0;
                        for(var i = 0; i < this.length; i++){
                            var w = (this.words[i] | 0) * num;
                            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                            carry >>= 26;
                            carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum
                            carry += lo >>> 26;
                            this.words[i] = lo & 0x3ffffff;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return isNegNum ? this.ineg() : this;
                    };
                    BN.prototype.muln = function muln(num) {
                        return this.clone().imuln(num);
                    }; // `this` * `this`
                    BN.prototype.sqr = function sqr() {
                        return this.mul(this);
                    }; // `this` * `this` in-place
                    BN.prototype.isqr = function isqr() {
                        return this.imul(this.clone());
                    }; // Math.pow(`this`, `num`)
                    BN.prototype.pow = function pow(num) {
                        var w = toBitArray(num);
                        if (w.length === 0) return new BN(1); // Skip leading zeroes
                        var res = this;
                        for(var i = 0; i < w.length; i++, res = res.sqr()){
                            if (w[i] !== 0) break;
                        }
                        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
                            if (w[i] === 0) continue;
                            res = res.mul(q);
                        }
                        return res;
                    }; // Shift-left in-place
                    BN.prototype.iushln = function iushln(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
                        var i;
                        if (r !== 0) {
                            var carry = 0;
                            for(i = 0; i < this.length; i++){
                                var newCarry = this.words[i] & carryMask;
                                var c = (this.words[i] | 0) - newCarry << r;
                                this.words[i] = c | carry;
                                carry = newCarry >>> 26 - r;
                            }
                            if (carry) {
                                this.words[i] = carry;
                                this.length++;
                            }
                        }
                        if (s !== 0) {
                            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
                            for(i = 0; i < s; i++)this.words[i] = 0;
                            this.length += s;
                        }
                        return this._strip();
                    };
                    BN.prototype.ishln = function ishln(bits) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushln(bits);
                    }; // Shift-right in-place
                    // NOTE: `hint` is a lowest bit before trailing zeroes
                    // NOTE: if `extended` is present - it will be filled with destroyed bits
                    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                        assert(typeof bits === "number" && bits >= 0);
                        var h;
                        if (hint) h = (hint - hint % 26) / 26;
                        else h = 0;
                        var r = bits % 26;
                        var s = Math.min((bits - r) / 26, this.length);
                        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                        var maskedWords = extended;
                        h -= s;
                        h = Math.max(0, h); // Extended mode, copy masked part
                        if (maskedWords) {
                            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
                            maskedWords.length = s;
                        }
                        if (s === 0) ;
                        else if (this.length > s) {
                            this.length -= s;
                            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
                        } else {
                            this.words[0] = 0;
                            this.length = 1;
                        }
                        var carry = 0;
                        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
                            var word = this.words[i] | 0;
                            this.words[i] = carry << 26 - r | word >>> r;
                            carry = word & mask;
                        } // Push carried bits as a mask
                        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
                        if (this.length === 0) {
                            this.words[0] = 0;
                            this.length = 1;
                        }
                        return this._strip();
                    };
                    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushrn(bits, hint, extended);
                    }; // Shift-left
                    BN.prototype.shln = function shln(bits) {
                        return this.clone().ishln(bits);
                    };
                    BN.prototype.ushln = function ushln(bits) {
                        return this.clone().iushln(bits);
                    }; // Shift-right
                    BN.prototype.shrn = function shrn(bits) {
                        return this.clone().ishrn(bits);
                    };
                    BN.prototype.ushrn = function ushrn(bits) {
                        return this.clone().iushrn(bits);
                    }; // Test if n bit is set
                    BN.prototype.testn = function testn(bit) {
                        assert(typeof bit === "number" && bit >= 0);
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r; // Fast case: bit is much higher than all existing words
                        if (this.length <= s) return false; // Check bit and return
                        var w = this.words[s];
                        return !!(w & q);
                    }; // Return only lowers bits of number (in-place)
                    BN.prototype.imaskn = function imaskn(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        assert(this.negative === 0, "imaskn works only with positive numbers");
                        if (this.length <= s) return this;
                        if (r !== 0) s++;
                        this.length = Math.min(s, this.length);
                        if (r !== 0) {
                            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                            this.words[this.length - 1] &= mask;
                        }
                        return this._strip();
                    }; // Return only lowers bits of number
                    BN.prototype.maskn = function maskn(bits) {
                        return this.clone().imaskn(bits);
                    }; // Add plain number `num` to `this`
                    BN.prototype.iaddn = function iaddn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.isubn(-num); // Possible sign change
                        if (this.negative !== 0) {
                            if (this.length === 1 && (this.words[0] | 0) <= num) {
                                this.words[0] = num - (this.words[0] | 0);
                                this.negative = 0;
                                return this;
                            }
                            this.negative = 0;
                            this.isubn(num);
                            this.negative = 1;
                            return this;
                        } // Add without checks
                        return this._iaddn(num);
                    };
                    BN.prototype._iaddn = function _iaddn(num) {
                        this.words[0] += num; // Carry
                        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
                            this.words[i] -= 0x4000000;
                            if (i === this.length - 1) this.words[i + 1] = 1;
                            else this.words[i + 1]++;
                        }
                        this.length = Math.max(this.length, i + 1);
                        return this;
                    }; // Subtract plain number `num` from `this`
                    BN.prototype.isubn = function isubn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.iaddn(-num);
                        if (this.negative !== 0) {
                            this.negative = 0;
                            this.iaddn(num);
                            this.negative = 1;
                            return this;
                        }
                        this.words[0] -= num;
                        if (this.length === 1 && this.words[0] < 0) {
                            this.words[0] = -this.words[0];
                            this.negative = 1;
                        } else // Carry
                        for(var i = 0; i < this.length && this.words[i] < 0; i++){
                            this.words[i] += 0x4000000;
                            this.words[i + 1] -= 1;
                        }
                        return this._strip();
                    };
                    BN.prototype.addn = function addn(num) {
                        return this.clone().iaddn(num);
                    };
                    BN.prototype.subn = function subn(num) {
                        return this.clone().isubn(num);
                    };
                    BN.prototype.iabs = function iabs() {
                        this.negative = 0;
                        return this;
                    };
                    BN.prototype.abs = function abs() {
                        return this.clone().iabs();
                    };
                    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                        var len = num.length + shift;
                        var i;
                        this._expand(len);
                        var w;
                        var carry = 0;
                        for(i = 0; i < num.length; i++){
                            w = (this.words[i + shift] | 0) + carry;
                            var right = (num.words[i] | 0) * mul;
                            w -= right & 0x3ffffff;
                            carry = (w >> 26) - (right / 0x4000000 | 0);
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        for(; i < this.length - shift; i++){
                            w = (this.words[i + shift] | 0) + carry;
                            carry = w >> 26;
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        if (carry === 0) return this._strip(); // Subtraction overflow
                        assert(carry === -1);
                        carry = 0;
                        for(i = 0; i < this.length; i++){
                            w = -(this.words[i] | 0) + carry;
                            carry = w >> 26;
                            this.words[i] = w & 0x3ffffff;
                        }
                        this.negative = 1;
                        return this._strip();
                    };
                    BN.prototype._wordDiv = function _wordDiv(num, mode) {
                        var shift = this.length - num.length;
                        var a = this.clone();
                        var b = num; // Normalize
                        var bhi = b.words[b.length - 1] | 0;
                        var bhiBits = this._countBits(bhi);
                        shift = 26 - bhiBits;
                        if (shift !== 0) {
                            b = b.ushln(shift);
                            a.iushln(shift);
                            bhi = b.words[b.length - 1] | 0;
                        } // Initialize quotient
                        var m = a.length - b.length;
                        var q;
                        if (mode !== "mod") {
                            q = new BN(null);
                            q.length = m + 1;
                            q.words = new Array(q.length);
                            for(var i = 0; i < q.length; i++)q.words[i] = 0;
                        }
                        var diff = a.clone()._ishlnsubmul(b, 1, m);
                        if (diff.negative === 0) {
                            a = diff;
                            if (q) q.words[m] = 1;
                        }
                        for(var j = m - 1; j >= 0; j--){
                            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                            // (0x7ffffff)
                            qj = Math.min(qj / bhi | 0, 0x3ffffff);
                            a._ishlnsubmul(b, qj, j);
                            while(a.negative !== 0){
                                qj--;
                                a.negative = 0;
                                a._ishlnsubmul(b, 1, j);
                                if (!a.isZero()) a.negative ^= 1;
                            }
                            if (q) q.words[j] = qj;
                        }
                        if (q) q._strip();
                        a._strip(); // Denormalize
                        if (mode !== "div" && shift !== 0) a.iushrn(shift);
                        return {
                            div: q || null,
                            mod: a
                        };
                    }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
                    //       to `div` to request div only, or be absent to
                    //       request both div & mod
                    //       2) `positive` is true if unsigned mod is requested
                    BN.prototype.divmod = function divmod(num, mode, positive) {
                        assert(!num.isZero());
                        if (this.isZero()) return {
                            div: new BN(0),
                            mod: new BN(0)
                        };
                        var div, mod, res;
                        if (this.negative !== 0 && num.negative === 0) {
                            res = this.neg().divmod(num, mode);
                            if (mode !== "mod") div = res.div.neg();
                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) mod.iadd(num);
                            }
                            return {
                                div: div,
                                mod: mod
                            };
                        }
                        if (this.negative === 0 && num.negative !== 0) {
                            res = this.divmod(num.neg(), mode);
                            if (mode !== "mod") div = res.div.neg();
                            return {
                                div: div,
                                mod: res.mod
                            };
                        }
                        if ((this.negative & num.negative) !== 0) {
                            res = this.neg().divmod(num.neg(), mode);
                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) mod.isub(num);
                            }
                            return {
                                div: res.div,
                                mod: mod
                            };
                        } // Both numbers are positive at this point
                        // Strip both numbers to approximate shift value
                        if (num.length > this.length || this.cmp(num) < 0) return {
                            div: new BN(0),
                            mod: this
                        };
                         // Very short reduction
                        if (num.length === 1) {
                            if (mode === "div") return {
                                div: this.divn(num.words[0]),
                                mod: null
                            };
                            if (mode === "mod") return {
                                div: null,
                                mod: new BN(this.modrn(num.words[0]))
                            };
                            return {
                                div: this.divn(num.words[0]),
                                mod: new BN(this.modrn(num.words[0]))
                            };
                        }
                        return this._wordDiv(num, mode);
                    }; // Find `this` / `num`
                    BN.prototype.div = function div(num) {
                        return this.divmod(num, "div", false).div;
                    }; // Find `this` % `num`
                    BN.prototype.mod = function mod(num) {
                        return this.divmod(num, "mod", false).mod;
                    };
                    BN.prototype.umod = function umod(num) {
                        return this.divmod(num, "mod", true).mod;
                    }; // Find Round(`this` / `num`)
                    BN.prototype.divRound = function divRound(num) {
                        var dm = this.divmod(num); // Fast case - exact division
                        if (dm.mod.isZero()) return dm.div;
                        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                        var half = num.ushrn(1);
                        var r2 = num.andln(1);
                        var cmp = mod.cmp(half); // Round down
                        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up
                        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                    };
                    BN.prototype.modrn = function modrn(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;
                        assert(num <= 0x3ffffff);
                        var p = 67108864 % num;
                        var acc = 0;
                        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
                        return isNegNum ? -acc : acc;
                    }; // WARNING: DEPRECATED
                    BN.prototype.modn = function modn(num) {
                        return this.modrn(num);
                    }; // In-place division by number
                    BN.prototype.idivn = function idivn(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;
                        assert(num <= 0x3ffffff);
                        var carry = 0;
                        for(var i = this.length - 1; i >= 0; i--){
                            var w = (this.words[i] | 0) + carry * 0x4000000;
                            this.words[i] = w / num | 0;
                            carry = w % num;
                        }
                        this._strip();
                        return isNegNum ? this.ineg() : this;
                    };
                    BN.prototype.divn = function divn(num) {
                        return this.clone().idivn(num);
                    };
                    BN.prototype.egcd = function egcd(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());
                        var x = this;
                        var y = p.clone();
                        if (x.negative !== 0) x = x.umod(p);
                        else x = x.clone();
                         // A * x + B * y = x
                        var A = new BN(1);
                        var B = new BN(0); // C * x + D * y = y
                        var C = new BN(0);
                        var D = new BN(1);
                        var g = 0;
                        while(x.isEven() && y.isEven()){
                            x.iushrn(1);
                            y.iushrn(1);
                            ++g;
                        }
                        var yp = y.clone();
                        var xp = x.clone();
                        while(!x.isZero()){
                            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                            if (i > 0) {
                                x.iushrn(i);
                                while(i-- > 0){
                                    if (A.isOdd() || B.isOdd()) {
                                        A.iadd(yp);
                                        B.isub(xp);
                                    }
                                    A.iushrn(1);
                                    B.iushrn(1);
                                }
                            }
                            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                            if (j > 0) {
                                y.iushrn(j);
                                while(j-- > 0){
                                    if (C.isOdd() || D.isOdd()) {
                                        C.iadd(yp);
                                        D.isub(xp);
                                    }
                                    C.iushrn(1);
                                    D.iushrn(1);
                                }
                            }
                            if (x.cmp(y) >= 0) {
                                x.isub(y);
                                A.isub(C);
                                B.isub(D);
                            } else {
                                y.isub(x);
                                C.isub(A);
                                D.isub(B);
                            }
                        }
                        return {
                            a: C,
                            b: D,
                            gcd: y.iushln(g)
                        };
                    }; // This is reduced incarnation of the binary EEA
                    // above, designated to invert members of the
                    // _prime_ fields F(p) at a maximal speed
                    BN.prototype._invmp = function _invmp(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());
                        var a = this;
                        var b = p.clone();
                        if (a.negative !== 0) a = a.umod(p);
                        else a = a.clone();
                        var x1 = new BN(1);
                        var x2 = new BN(0);
                        var delta = b.clone();
                        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
                            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                            if (i > 0) {
                                a.iushrn(i);
                                while(i-- > 0){
                                    if (x1.isOdd()) x1.iadd(delta);
                                    x1.iushrn(1);
                                }
                            }
                            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                            if (j > 0) {
                                b.iushrn(j);
                                while(j-- > 0){
                                    if (x2.isOdd()) x2.iadd(delta);
                                    x2.iushrn(1);
                                }
                            }
                            if (a.cmp(b) >= 0) {
                                a.isub(b);
                                x1.isub(x2);
                            } else {
                                b.isub(a);
                                x2.isub(x1);
                            }
                        }
                        var res;
                        if (a.cmpn(1) === 0) res = x1;
                        else res = x2;
                        if (res.cmpn(0) < 0) res.iadd(p);
                        return res;
                    };
                    BN.prototype.gcd = function gcd(num) {
                        if (this.isZero()) return num.abs();
                        if (num.isZero()) return this.abs();
                        var a = this.clone();
                        var b = num.clone();
                        a.negative = 0;
                        b.negative = 0; // Remove common factor of two
                        for(var shift = 0; a.isEven() && b.isEven(); shift++){
                            a.iushrn(1);
                            b.iushrn(1);
                        }
                        do {
                            while(a.isEven())a.iushrn(1);
                            while(b.isEven())b.iushrn(1);
                            var r = a.cmp(b);
                            if (r < 0) {
                                // Swap `a` and `b` to make `a` always bigger than `b`
                                var t = a;
                                a = b;
                                b = t;
                            } else if (r === 0 || b.cmpn(1) === 0) break;
                            a.isub(b);
                        }while (true);
                        return b.iushln(shift);
                    }; // Invert number in the field F(num)
                    BN.prototype.invm = function invm(num) {
                        return this.egcd(num).a.umod(num);
                    };
                    BN.prototype.isEven = function isEven() {
                        return (this.words[0] & 1) === 0;
                    };
                    BN.prototype.isOdd = function isOdd() {
                        return (this.words[0] & 1) === 1;
                    }; // And first word and num
                    BN.prototype.andln = function andln(num) {
                        return this.words[0] & num;
                    }; // Increment at the bit position in-line
                    BN.prototype.bincn = function bincn(bit) {
                        assert(typeof bit === "number");
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r; // Fast case: bit is much higher than all existing words
                        if (this.length <= s) {
                            this._expand(s + 1);
                            this.words[s] |= q;
                            return this;
                        } // Add bit and propagate, if needed
                        var carry = q;
                        for(var i = s; carry !== 0 && i < this.length; i++){
                            var w = this.words[i] | 0;
                            w += carry;
                            carry = w >>> 26;
                            w &= 0x3ffffff;
                            this.words[i] = w;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return this;
                    };
                    BN.prototype.isZero = function isZero() {
                        return this.length === 1 && this.words[0] === 0;
                    };
                    BN.prototype.cmpn = function cmpn(num) {
                        var negative = num < 0;
                        if (this.negative !== 0 && !negative) return -1;
                        if (this.negative === 0 && negative) return 1;
                        this._strip();
                        var res;
                        if (this.length > 1) res = 1;
                        else {
                            if (negative) num = -num;
                            assert(num <= 0x3ffffff, "Number is too big");
                            var w = this.words[0] | 0;
                            res = w === num ? 0 : w < num ? -1 : 1;
                        }
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    }; // Compare two numbers and return:
                    // 1 - if `this` > `num`
                    // 0 - if `this` == `num`
                    // -1 - if `this` < `num`
                    BN.prototype.cmp = function cmp(num) {
                        if (this.negative !== 0 && num.negative === 0) return -1;
                        if (this.negative === 0 && num.negative !== 0) return 1;
                        var res = this.ucmp(num);
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    }; // Unsigned comparison
                    BN.prototype.ucmp = function ucmp(num) {
                        // At this point both numbers have the same sign
                        if (this.length > num.length) return 1;
                        if (this.length < num.length) return -1;
                        var res = 0;
                        for(var i = this.length - 1; i >= 0; i--){
                            var a = this.words[i] | 0;
                            var b = num.words[i] | 0;
                            if (a === b) continue;
                            if (a < b) res = -1;
                            else if (a > b) res = 1;
                            break;
                        }
                        return res;
                    };
                    BN.prototype.gtn = function gtn(num) {
                        return this.cmpn(num) === 1;
                    };
                    BN.prototype.gt = function gt(num) {
                        return this.cmp(num) === 1;
                    };
                    BN.prototype.gten = function gten(num) {
                        return this.cmpn(num) >= 0;
                    };
                    BN.prototype.gte = function gte(num) {
                        return this.cmp(num) >= 0;
                    };
                    BN.prototype.ltn = function ltn(num) {
                        return this.cmpn(num) === -1;
                    };
                    BN.prototype.lt = function lt(num) {
                        return this.cmp(num) === -1;
                    };
                    BN.prototype.lten = function lten(num) {
                        return this.cmpn(num) <= 0;
                    };
                    BN.prototype.lte = function lte(num) {
                        return this.cmp(num) <= 0;
                    };
                    BN.prototype.eqn = function eqn(num) {
                        return this.cmpn(num) === 0;
                    };
                    BN.prototype.eq = function eq(num) {
                        return this.cmp(num) === 0;
                    }; //
                    // A reduce context, could be using montgomery or something better, depending
                    // on the `m` itself.
                    //
                    BN.red = function red(num) {
                        return new Red(num);
                    };
                    BN.prototype.toRed = function toRed(ctx) {
                        assert(!this.red, "Already a number in reduction context");
                        assert(this.negative === 0, "red works only with positives");
                        return ctx.convertTo(this)._forceRed(ctx);
                    };
                    BN.prototype.fromRed = function fromRed() {
                        assert(this.red, "fromRed works only with numbers in reduction context");
                        return this.red.convertFrom(this);
                    };
                    BN.prototype._forceRed = function _forceRed(ctx) {
                        this.red = ctx;
                        return this;
                    };
                    BN.prototype.forceRed = function forceRed(ctx) {
                        assert(!this.red, "Already a number in reduction context");
                        return this._forceRed(ctx);
                    };
                    BN.prototype.redAdd = function redAdd(num) {
                        assert(this.red, "redAdd works only with red numbers");
                        return this.red.add(this, num);
                    };
                    BN.prototype.redIAdd = function redIAdd(num) {
                        assert(this.red, "redIAdd works only with red numbers");
                        return this.red.iadd(this, num);
                    };
                    BN.prototype.redSub = function redSub(num) {
                        assert(this.red, "redSub works only with red numbers");
                        return this.red.sub(this, num);
                    };
                    BN.prototype.redISub = function redISub(num) {
                        assert(this.red, "redISub works only with red numbers");
                        return this.red.isub(this, num);
                    };
                    BN.prototype.redShl = function redShl(num) {
                        assert(this.red, "redShl works only with red numbers");
                        return this.red.shl(this, num);
                    };
                    BN.prototype.redMul = function redMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.mul(this, num);
                    };
                    BN.prototype.redIMul = function redIMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.imul(this, num);
                    };
                    BN.prototype.redSqr = function redSqr() {
                        assert(this.red, "redSqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqr(this);
                    };
                    BN.prototype.redISqr = function redISqr() {
                        assert(this.red, "redISqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.isqr(this);
                    }; // Square root over p
                    BN.prototype.redSqrt = function redSqrt() {
                        assert(this.red, "redSqrt works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqrt(this);
                    };
                    BN.prototype.redInvm = function redInvm() {
                        assert(this.red, "redInvm works only with red numbers");
                        this.red._verify1(this);
                        return this.red.invm(this);
                    }; // Return negative clone of `this` % `red modulo`
                    BN.prototype.redNeg = function redNeg() {
                        assert(this.red, "redNeg works only with red numbers");
                        this.red._verify1(this);
                        return this.red.neg(this);
                    };
                    BN.prototype.redPow = function redPow(num) {
                        assert(this.red && !num.red, "redPow(normalNum)");
                        this.red._verify1(this);
                        return this.red.pow(this, num);
                    }; // Prime numbers with efficient reduction
                    var primes = {
                        k256: null,
                        p224: null,
                        p192: null,
                        p25519: null
                    }; // Pseudo-Mersenne prime
                    function MPrime(name, p) {
                        // P = 2 ^ N - K
                        this.name = name;
                        this.p = new BN(p, 16);
                        this.n = this.p.bitLength();
                        this.k = new BN(1).iushln(this.n).isub(this.p);
                        this.tmp = this._tmp();
                    }
                    MPrime.prototype._tmp = function _tmp() {
                        var tmp = new BN(null);
                        tmp.words = new Array(Math.ceil(this.n / 13));
                        return tmp;
                    };
                    MPrime.prototype.ireduce = function ireduce(num) {
                        // Assumes that `num` is less than `P^2`
                        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                        var r = num;
                        var rlen;
                        do {
                            this.split(r, this.tmp);
                            r = this.imulK(r);
                            r = r.iadd(this.tmp);
                            rlen = r.bitLength();
                        }while (rlen > this.n);
                        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                        if (cmp === 0) {
                            r.words[0] = 0;
                            r.length = 1;
                        } else if (cmp > 0) r.isub(this.p);
                        else if (r.strip !== undefined) // r is a BN v4 instance
                        r.strip();
                        else // r is a BN v5 instance
                        r._strip();
                        return r;
                    };
                    MPrime.prototype.split = function split(input, out) {
                        input.iushrn(this.n, 0, out);
                    };
                    MPrime.prototype.imulK = function imulK(num) {
                        return num.imul(this.k);
                    };
                    function K256() {
                        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                    }
                    inherits(K256, MPrime);
                    K256.prototype.split = function split(input, output) {
                        // 256 = 9 * 26 + 22
                        var mask = 0x3fffff;
                        var outLen = Math.min(input.length, 9);
                        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
                        output.length = outLen;
                        if (input.length <= 9) {
                            input.words[0] = 0;
                            input.length = 1;
                            return;
                        } // Shift by 9 limbs
                        var prev = input.words[9];
                        output.words[output.length++] = prev & mask;
                        for(i = 10; i < input.length; i++){
                            var next = input.words[i] | 0;
                            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                            prev = next;
                        }
                        prev >>>= 22;
                        input.words[i - 10] = prev;
                        if (prev === 0 && input.length > 10) input.length -= 10;
                        else input.length -= 9;
                    };
                    K256.prototype.imulK = function imulK(num) {
                        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                        num.words[num.length] = 0;
                        num.words[num.length + 1] = 0;
                        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                        var lo = 0;
                        for(var i = 0; i < num.length; i++){
                            var w = num.words[i] | 0;
                            lo += w * 0x3d1;
                            num.words[i] = lo & 0x3ffffff;
                            lo = w * 0x40 + (lo / 0x4000000 | 0);
                        } // Fast length reduction
                        if (num.words[num.length - 1] === 0) {
                            num.length--;
                            if (num.words[num.length - 1] === 0) num.length--;
                        }
                        return num;
                    };
                    function P224() {
                        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                    }
                    inherits(P224, MPrime);
                    function P192() {
                        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                    }
                    inherits(P192, MPrime);
                    function P25519() {
                        // 2 ^ 255 - 19
                        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                    }
                    inherits(P25519, MPrime);
                    P25519.prototype.imulK = function imulK(num) {
                        // K = 0x13
                        var carry = 0;
                        for(var i = 0; i < num.length; i++){
                            var hi = (num.words[i] | 0) * 0x13 + carry;
                            var lo = hi & 0x3ffffff;
                            hi >>>= 26;
                            num.words[i] = lo;
                            carry = hi;
                        }
                        if (carry !== 0) num.words[num.length++] = carry;
                        return num;
                    }; // Exported mostly for testing purposes, use plain name instead
                    BN._prime = function prime(name) {
                        // Cached version of prime
                        if (primes[name]) return primes[name];
                        var prime;
                        if (name === "k256") prime = new K256();
                        else if (name === "p224") prime = new P224();
                        else if (name === "p192") prime = new P192();
                        else if (name === "p25519") prime = new P25519();
                        else throw new Error("Unknown prime " + name);
                        primes[name] = prime;
                        return prime;
                    }; //
                    // Base reduction engine
                    //
                    function Red(m) {
                        if (typeof m === "string") {
                            var prime = BN._prime(m);
                            this.m = prime.p;
                            this.prime = prime;
                        } else {
                            assert(m.gtn(1), "modulus must be greater than 1");
                            this.m = m;
                            this.prime = null;
                        }
                    }
                    Red.prototype._verify1 = function _verify1(a) {
                        assert(a.negative === 0, "red works only with positives");
                        assert(a.red, "red works only with red numbers");
                    };
                    Red.prototype._verify2 = function _verify2(a, b) {
                        assert((a.negative | b.negative) === 0, "red works only with positives");
                        assert(a.red && a.red === b.red, "red works only with red numbers");
                    };
                    Red.prototype.imod = function imod(a) {
                        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                        move(a, a.umod(this.m)._forceRed(this));
                        return a;
                    };
                    Red.prototype.neg = function neg(a) {
                        if (a.isZero()) return a.clone();
                        return this.m.sub(a)._forceRed(this);
                    };
                    Red.prototype.add = function add(a, b) {
                        this._verify2(a, b);
                        var res = a.add(b);
                        if (res.cmp(this.m) >= 0) res.isub(this.m);
                        return res._forceRed(this);
                    };
                    Red.prototype.iadd = function iadd(a, b) {
                        this._verify2(a, b);
                        var res = a.iadd(b);
                        if (res.cmp(this.m) >= 0) res.isub(this.m);
                        return res;
                    };
                    Red.prototype.sub = function sub(a, b) {
                        this._verify2(a, b);
                        var res = a.sub(b);
                        if (res.cmpn(0) < 0) res.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Red.prototype.isub = function isub(a, b) {
                        this._verify2(a, b);
                        var res = a.isub(b);
                        if (res.cmpn(0) < 0) res.iadd(this.m);
                        return res;
                    };
                    Red.prototype.shl = function shl(a, num) {
                        this._verify1(a);
                        return this.imod(a.ushln(num));
                    };
                    Red.prototype.imul = function imul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.imul(b));
                    };
                    Red.prototype.mul = function mul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.mul(b));
                    };
                    Red.prototype.isqr = function isqr(a) {
                        return this.imul(a, a.clone());
                    };
                    Red.prototype.sqr = function sqr(a) {
                        return this.mul(a, a);
                    };
                    Red.prototype.sqrt = function sqrt(a) {
                        if (a.isZero()) return a.clone();
                        var mod3 = this.m.andln(3);
                        assert(mod3 % 2 === 1); // Fast case
                        if (mod3 === 3) {
                            var pow = this.m.add(new BN(1)).iushrn(2);
                            return this.pow(a, pow);
                        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                        //
                        // Find Q and S, that Q * 2 ^ S = (P - 1)
                        var q = this.m.subn(1);
                        var s = 0;
                        while(!q.isZero() && q.andln(1) === 0){
                            s++;
                            q.iushrn(1);
                        }
                        assert(!q.isZero());
                        var one = new BN(1).toRed(this);
                        var nOne = one.redNeg(); // Find quadratic non-residue
                        // NOTE: Max is such because of generalized Riemann hypothesis.
                        var lpow = this.m.subn(1).iushrn(1);
                        var z = this.m.bitLength();
                        z = new BN(2 * z * z).toRed(this);
                        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
                        var c = this.pow(z, q);
                        var r = this.pow(a, q.addn(1).iushrn(1));
                        var t = this.pow(a, q);
                        var m = s;
                        while(t.cmp(one) !== 0){
                            var tmp = t;
                            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
                            assert(i < m);
                            var b = this.pow(c, new BN(1).iushln(m - i - 1));
                            r = r.redMul(b);
                            c = b.redSqr();
                            t = t.redMul(c);
                            m = i;
                        }
                        return r;
                    };
                    Red.prototype.invm = function invm(a) {
                        var inv = a._invmp(this.m);
                        if (inv.negative !== 0) {
                            inv.negative = 0;
                            return this.imod(inv).redNeg();
                        } else return this.imod(inv);
                    };
                    Red.prototype.pow = function pow(a, num) {
                        if (num.isZero()) return new BN(1).toRed(this);
                        if (num.cmpn(1) === 0) return a.clone();
                        var windowSize = 4;
                        var wnd = new Array(1 << windowSize);
                        wnd[0] = new BN(1).toRed(this);
                        wnd[1] = a;
                        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
                        var res = wnd[0];
                        var current = 0;
                        var currentLen = 0;
                        var start = num.bitLength() % 26;
                        if (start === 0) start = 26;
                        for(i = num.length - 1; i >= 0; i--){
                            var word = num.words[i];
                            for(var j = start - 1; j >= 0; j--){
                                var bit = word >> j & 1;
                                if (res !== wnd[0]) res = this.sqr(res);
                                if (bit === 0 && current === 0) {
                                    currentLen = 0;
                                    continue;
                                }
                                current <<= 1;
                                current |= bit;
                                currentLen++;
                                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                                res = this.mul(res, wnd[current]);
                                currentLen = 0;
                                current = 0;
                            }
                            start = 26;
                        }
                        return res;
                    };
                    Red.prototype.convertTo = function convertTo(num) {
                        var r = num.umod(this.m);
                        return r === num ? r.clone() : r;
                    };
                    Red.prototype.convertFrom = function convertFrom(num) {
                        var res = num.clone();
                        res.red = null;
                        return res;
                    }; //
                    // Montgomery method engine
                    //
                    BN.mont = function mont(num) {
                        return new Mont(num);
                    };
                    function Mont(m) {
                        Red.call(this, m);
                        this.shift = this.m.bitLength();
                        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
                        this.r = new BN(1).iushln(this.shift);
                        this.r2 = this.imod(this.r.sqr());
                        this.rinv = this.r._invmp(this.m);
                        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                        this.minv = this.minv.umod(this.r);
                        this.minv = this.r.sub(this.minv);
                    }
                    inherits(Mont, Red);
                    Mont.prototype.convertTo = function convertTo(num) {
                        return this.imod(num.ushln(this.shift));
                    };
                    Mont.prototype.convertFrom = function convertFrom(num) {
                        var r = this.imod(num.mul(this.rinv));
                        r.red = null;
                        return r;
                    };
                    Mont.prototype.imul = function imul(a, b) {
                        if (a.isZero() || b.isZero()) {
                            a.words[0] = 0;
                            a.length = 1;
                            return a;
                        }
                        var t = a.imul(b);
                        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
                        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Mont.prototype.mul = function mul(a, b) {
                        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
                        var t = a.mul(b);
                        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
                        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Mont.prototype.invm = function invm(a) {
                        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                        var res = this.imod(a._invmp(this.m).mul(this.r2));
                        return res._forceRed(this);
                    };
                })(typeof module3 === "undefined" || module3, this);
            },
            {
                "buffer": 224
            }
        ],
        19: [
            function(require, module, exports) {
                var r;
                module.exports = function rand(len) {
                    if (!r) r = new Rand(null);
                    return r.generate(len);
                };
                function Rand(rand) {
                    this.rand = rand;
                }
                module.exports.Rand = Rand;
                Rand.prototype.generate = function generate(len) {
                    return this._rand(len);
                }; // Emulate crypto API using randy
                Rand.prototype._rand = function _rand(n) {
                    if (this.rand.getBytes) return this.rand.getBytes(n);
                    var res = new Uint8Array(n);
                    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
                    return res;
                };
                if ((typeof self === "undefined" ? "undefined" : _typeof(self)) === "object") {
                    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
                    Rand.prototype._rand = function _rand(n) {
                        var arr = new Uint8Array(n);
                        self.crypto.getRandomValues(arr);
                        return arr;
                    };
                    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
                    Rand.prototype._rand = function _rand(n) {
                        var arr = new Uint8Array(n);
                        self.msCrypto.getRandomValues(arr);
                        return arr;
                    }; // Safari's WebWorkers do not have `crypto`
                    else if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") // Old junk
                    Rand.prototype._rand = function() {
                        throw new Error("Not implemented yet");
                    };
                } else // Node.js or Web worker with no crypto support
                try {
                    var crypto = require("crypto");
                    if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");
                    Rand.prototype._rand = function _rand(n) {
                        return crypto.randomBytes(n);
                    };
                } catch (e) {}
            },
            {
                "crypto": 224
            }
        ],
        20: [
            function(require, module, exports) {
                // based on the aes implimentation in triple sec
                // https://github.com/keybase/triplesec
                // which is in turn based on the one from crypto-js
                // https://code.google.com/p/crypto-js/
                var Buffer = require("safe-buffer").Buffer;
                function asUInt32Array(buf) {
                    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                    var len = buf.length / 4 | 0;
                    var out = new Array(len);
                    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
                    return out;
                }
                function scrubVec(v) {
                    for(var i = 0; i < v.length; v++)v[i] = 0;
                }
                function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
                    var SUB_MIX0 = SUB_MIX[0];
                    var SUB_MIX1 = SUB_MIX[1];
                    var SUB_MIX2 = SUB_MIX[2];
                    var SUB_MIX3 = SUB_MIX[3];
                    var s0 = M[0] ^ keySchedule[0];
                    var s1 = M[1] ^ keySchedule[1];
                    var s2 = M[2] ^ keySchedule[2];
                    var s3 = M[3] ^ keySchedule[3];
                    var t0, t1, t2, t3;
                    var ksRow = 4;
                    for(var round = 1; round < nRounds; round++){
                        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
                        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
                        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
                        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
                        s0 = t0;
                        s1 = t1;
                        s2 = t2;
                        s3 = t3;
                    }
                    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
                    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
                    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
                    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
                    t0 = t0 >>> 0;
                    t1 = t1 >>> 0;
                    t2 = t2 >>> 0;
                    t3 = t3 >>> 0;
                    return [
                        t0,
                        t1,
                        t2,
                        t3
                    ];
                } // AES constants
                var RCON = [
                    0x00,
                    0x01,
                    0x02,
                    0x04,
                    0x08,
                    0x10,
                    0x20,
                    0x40,
                    0x80,
                    0x1b,
                    0x36
                ];
                var G = function() {
                    // Compute double table
                    var d = new Array(256);
                    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
                    else d[j] = j << 1 ^ 0x11b;
                    var SBOX = [];
                    var INV_SBOX = [];
                    var SUB_MIX = [
                        [],
                        [],
                        [],
                        []
                    ];
                    var INV_SUB_MIX = [
                        [],
                        [],
                        [],
                        []
                    ]; // Walk GF(2^8)
                    var x = 0;
                    var xi = 0;
                    for(var i = 0; i < 256; ++i){
                        // Compute sbox
                        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
                        SBOX[x] = sx;
                        INV_SBOX[sx] = x; // Compute multiplication
                        var x2 = d[x];
                        var x4 = d[x2];
                        var x8 = d[x4]; // Compute sub bytes, mix columns tables
                        var t = d[sx] * 0x101 ^ sx * 0x1010100;
                        SUB_MIX[0][x] = t << 24 | t >>> 8;
                        SUB_MIX[1][x] = t << 16 | t >>> 16;
                        SUB_MIX[2][x] = t << 8 | t >>> 24;
                        SUB_MIX[3][x] = t; // Compute inv sub bytes, inv mix columns tables
                        t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
                        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
                        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
                        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
                        INV_SUB_MIX[3][sx] = t;
                        if (x === 0) x = xi = 1;
                        else {
                            x = x2 ^ d[d[d[x8 ^ x2]]];
                            xi ^= d[d[xi]];
                        }
                    }
                    return {
                        SBOX: SBOX,
                        INV_SBOX: INV_SBOX,
                        SUB_MIX: SUB_MIX,
                        INV_SUB_MIX: INV_SUB_MIX
                    };
                }();
                function AES(key) {
                    this._key = asUInt32Array(key);
                    this._reset();
                }
                AES.blockSize = 16;
                AES.keySize = 32;
                AES.prototype.blockSize = AES.blockSize;
                AES.prototype.keySize = AES.keySize;
                AES.prototype._reset = function() {
                    var keyWords = this._key;
                    var keySize = keyWords.length;
                    var nRounds = keySize + 6;
                    var ksRows = (nRounds + 1) * 4;
                    var keySchedule = [];
                    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
                    for(k = keySize; k < ksRows; k++){
                        var t = keySchedule[k - 1];
                        if (k % keySize === 0) {
                            t = t << 8 | t >>> 24;
                            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
                            t ^= RCON[k / keySize | 0] << 24;
                        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
                        keySchedule[k] = keySchedule[k - keySize] ^ t;
                    }
                    var invKeySchedule = [];
                    for(var ik = 0; ik < ksRows; ik++){
                        var ksR = ksRows - ik;
                        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
                        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
                        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
                    }
                    this._nRounds = nRounds;
                    this._keySchedule = keySchedule;
                    this._invKeySchedule = invKeySchedule;
                };
                AES.prototype.encryptBlockRaw = function(M) {
                    M = asUInt32Array(M);
                    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
                };
                AES.prototype.encryptBlock = function(M) {
                    var out = this.encryptBlockRaw(M);
                    var buf = Buffer.allocUnsafe(16);
                    buf.writeUInt32BE(out[0], 0);
                    buf.writeUInt32BE(out[1], 4);
                    buf.writeUInt32BE(out[2], 8);
                    buf.writeUInt32BE(out[3], 12);
                    return buf;
                };
                AES.prototype.decryptBlock = function(M) {
                    M = asUInt32Array(M); // swap
                    var m1 = M[1];
                    M[1] = M[3];
                    M[3] = m1;
                    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
                    var buf = Buffer.allocUnsafe(16);
                    buf.writeUInt32BE(out[0], 0);
                    buf.writeUInt32BE(out[3], 4);
                    buf.writeUInt32BE(out[2], 8);
                    buf.writeUInt32BE(out[1], 12);
                    return buf;
                };
                AES.prototype.scrub = function() {
                    scrubVec(this._keySchedule);
                    scrubVec(this._invKeySchedule);
                    scrubVec(this._key);
                };
                module.exports.AES = AES;
            },
            {
                "safe-buffer": 174
            }
        ],
        21: [
            function(require, module, exports) {
                var aes = require("./aes");
                var Buffer = require("safe-buffer").Buffer;
                var Transform = require("cipher-base");
                var inherits = require("inherits");
                var GHASH = require("./ghash");
                var xor = require("buffer-xor");
                var incr32 = require("./incr32");
                function xorTest(a, b) {
                    var out = 0;
                    if (a.length !== b.length) out++;
                    var len = Math.min(a.length, b.length);
                    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
                    return out;
                }
                function calcIv(self, iv, ck) {
                    if (iv.length === 12) {
                        self._finID = Buffer.concat([
                            iv,
                            Buffer.from([
                                0,
                                0,
                                0,
                                1
                            ])
                        ]);
                        return Buffer.concat([
                            iv,
                            Buffer.from([
                                0,
                                0,
                                0,
                                2
                            ])
                        ]);
                    }
                    var ghash = new GHASH(ck);
                    var len = iv.length;
                    var toPad = len % 16;
                    ghash.update(iv);
                    if (toPad) {
                        toPad = 16 - toPad;
                        ghash.update(Buffer.alloc(toPad, 0));
                    }
                    ghash.update(Buffer.alloc(8, 0));
                    var ivBits = len * 8;
                    var tail = Buffer.alloc(8);
                    tail.writeUIntBE(ivBits, 0, 8);
                    ghash.update(tail);
                    self._finID = ghash.state;
                    var out = Buffer.from(self._finID);
                    incr32(out);
                    return out;
                }
                function StreamCipher(mode, key, iv, decrypt) {
                    Transform.call(this);
                    var h = Buffer.alloc(4, 0);
                    this._cipher = new aes.AES(key);
                    var ck = this._cipher.encryptBlock(h);
                    this._ghash = new GHASH(ck);
                    iv = calcIv(this, iv, ck);
                    this._prev = Buffer.from(iv);
                    this._cache = Buffer.allocUnsafe(0);
                    this._secCache = Buffer.allocUnsafe(0);
                    this._decrypt = decrypt;
                    this._alen = 0;
                    this._len = 0;
                    this._mode = mode;
                    this._authTag = null;
                    this._called = false;
                }
                inherits(StreamCipher, Transform);
                StreamCipher.prototype._update = function(chunk) {
                    if (!this._called && this._alen) {
                        var rump = 16 - this._alen % 16;
                        if (rump < 16) {
                            rump = Buffer.alloc(rump, 0);
                            this._ghash.update(rump);
                        }
                    }
                    this._called = true;
                    var out = this._mode.encrypt(this, chunk);
                    if (this._decrypt) this._ghash.update(chunk);
                    else this._ghash.update(out);
                    this._len += chunk.length;
                    return out;
                };
                StreamCipher.prototype._final = function() {
                    if (this._decrypt && !this._authTag) throw new Error("Unsupported state or unable to authenticate data");
                    var tag = xor(this._ghash["final"](this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
                    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error("Unsupported state or unable to authenticate data");
                    this._authTag = tag;
                    this._cipher.scrub();
                };
                StreamCipher.prototype.getAuthTag = function getAuthTag() {
                    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error("Attempting to get auth tag in unsupported state");
                    return this._authTag;
                };
                StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
                    if (!this._decrypt) throw new Error("Attempting to set auth tag in unsupported state");
                    this._authTag = tag;
                };
                StreamCipher.prototype.setAAD = function setAAD(buf) {
                    if (this._called) throw new Error("Attempting to set AAD in unsupported state");
                    this._ghash.update(buf);
                    this._alen += buf.length;
                };
                module.exports = StreamCipher;
            },
            {
                "./aes": 20,
                "./ghash": 25,
                "./incr32": 26,
                "buffer-xor": 62,
                "cipher-base": 66,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        22: [
            function(require, module, exports) {
                var ciphers = require("./encrypter");
                var deciphers = require("./decrypter");
                var modes = require("./modes/list.json");
                function getCiphers() {
                    return Object.keys(modes);
                }
                exports.createCipher = exports.Cipher = ciphers.createCipher;
                exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
                exports.createDecipher = exports.Decipher = deciphers.createDecipher;
                exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
                exports.listCiphers = exports.getCiphers = getCiphers;
            },
            {
                "./decrypter": 23,
                "./encrypter": 24,
                "./modes/list.json": 34
            }
        ],
        23: [
            function(require, module, exports) {
                var AuthCipher = require("./authCipher");
                var Buffer = require("safe-buffer").Buffer;
                var MODES = require("./modes");
                var StreamCipher = require("./streamCipher");
                var Transform = require("cipher-base");
                var aes = require("./aes");
                var ebtk = require("evp_bytestokey");
                var inherits = require("inherits");
                function Decipher(mode, key, iv) {
                    Transform.call(this);
                    this._cache = new Splitter();
                    this._last = void 0;
                    this._cipher = new aes.AES(key);
                    this._prev = Buffer.from(iv);
                    this._mode = mode;
                    this._autopadding = true;
                }
                inherits(Decipher, Transform);
                Decipher.prototype._update = function(data) {
                    this._cache.add(data);
                    var chunk;
                    var thing;
                    var out = [];
                    while(chunk = this._cache.get(this._autopadding)){
                        thing = this._mode.decrypt(this, chunk);
                        out.push(thing);
                    }
                    return Buffer.concat(out);
                };
                Decipher.prototype._final = function() {
                    var chunk = this._cache.flush();
                    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
                    else if (chunk) throw new Error("data not multiple of block length");
                };
                Decipher.prototype.setAutoPadding = function(setTo) {
                    this._autopadding = !!setTo;
                    return this;
                };
                function Splitter() {
                    this.cache = Buffer.allocUnsafe(0);
                }
                Splitter.prototype.add = function(data) {
                    this.cache = Buffer.concat([
                        this.cache,
                        data
                    ]);
                };
                Splitter.prototype.get = function(autoPadding) {
                    var out;
                    if (autoPadding) {
                        if (this.cache.length > 16) {
                            out = this.cache.slice(0, 16);
                            this.cache = this.cache.slice(16);
                            return out;
                        }
                    } else if (this.cache.length >= 16) {
                        out = this.cache.slice(0, 16);
                        this.cache = this.cache.slice(16);
                        return out;
                    }
                    return null;
                };
                Splitter.prototype.flush = function() {
                    if (this.cache.length) return this.cache;
                };
                function unpad(last) {
                    var padded = last[15];
                    if (padded < 1 || padded > 16) throw new Error("unable to decrypt data");
                    var i = -1;
                    while(++i < padded){
                        if (last[i + (16 - padded)] !== padded) throw new Error("unable to decrypt data");
                    }
                    if (padded === 16) return;
                    return last.slice(0, 16 - padded);
                }
                function createDecipheriv(suite, password, iv) {
                    var config = MODES[suite.toLowerCase()];
                    if (!config) throw new TypeError("invalid suite type");
                    if (typeof iv === "string") iv = Buffer.from(iv);
                    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
                    if (typeof password === "string") password = Buffer.from(password);
                    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
                    if (config.type === "stream") return new StreamCipher(config.module, password, iv, true);
                    else if (config.type === "auth") return new AuthCipher(config.module, password, iv, true);
                    return new Decipher(config.module, password, iv);
                }
                function createDecipher(suite, password) {
                    var config = MODES[suite.toLowerCase()];
                    if (!config) throw new TypeError("invalid suite type");
                    var keys = ebtk(password, false, config.key, config.iv);
                    return createDecipheriv(suite, keys.key, keys.iv);
                }
                exports.createDecipher = createDecipher;
                exports.createDecipheriv = createDecipheriv;
            },
            {
                "./aes": 20,
                "./authCipher": 21,
                "./modes": 33,
                "./streamCipher": 36,
                "cipher-base": 66,
                "evp_bytestokey": 104,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        24: [
            function(require, module, exports) {
                var MODES = require("./modes");
                var AuthCipher = require("./authCipher");
                var Buffer = require("safe-buffer").Buffer;
                var StreamCipher = require("./streamCipher");
                var Transform = require("cipher-base");
                var aes = require("./aes");
                var ebtk = require("evp_bytestokey");
                var inherits = require("inherits");
                function Cipher(mode, key, iv) {
                    Transform.call(this);
                    this._cache = new Splitter();
                    this._cipher = new aes.AES(key);
                    this._prev = Buffer.from(iv);
                    this._mode = mode;
                    this._autopadding = true;
                }
                inherits(Cipher, Transform);
                Cipher.prototype._update = function(data) {
                    this._cache.add(data);
                    var chunk;
                    var thing;
                    var out = [];
                    while(chunk = this._cache.get()){
                        thing = this._mode.encrypt(this, chunk);
                        out.push(thing);
                    }
                    return Buffer.concat(out);
                };
                var PADDING = Buffer.alloc(16, 0x10);
                Cipher.prototype._final = function() {
                    var chunk = this._cache.flush();
                    if (this._autopadding) {
                        chunk = this._mode.encrypt(this, chunk);
                        this._cipher.scrub();
                        return chunk;
                    }
                    if (!chunk.equals(PADDING)) {
                        this._cipher.scrub();
                        throw new Error("data not multiple of block length");
                    }
                };
                Cipher.prototype.setAutoPadding = function(setTo) {
                    this._autopadding = !!setTo;
                    return this;
                };
                function Splitter() {
                    this.cache = Buffer.allocUnsafe(0);
                }
                Splitter.prototype.add = function(data) {
                    this.cache = Buffer.concat([
                        this.cache,
                        data
                    ]);
                };
                Splitter.prototype.get = function() {
                    if (this.cache.length > 15) {
                        var out = this.cache.slice(0, 16);
                        this.cache = this.cache.slice(16);
                        return out;
                    }
                    return null;
                };
                Splitter.prototype.flush = function() {
                    var len = 16 - this.cache.length;
                    var padBuff = Buffer.allocUnsafe(len);
                    var i = -1;
                    while(++i < len)padBuff.writeUInt8(len, i);
                    return Buffer.concat([
                        this.cache,
                        padBuff
                    ]);
                };
                function createCipheriv(suite, password, iv) {
                    var config = MODES[suite.toLowerCase()];
                    if (!config) throw new TypeError("invalid suite type");
                    if (typeof password === "string") password = Buffer.from(password);
                    if (password.length !== config.key / 8) throw new TypeError("invalid key length " + password.length);
                    if (typeof iv === "string") iv = Buffer.from(iv);
                    if (config.mode !== "GCM" && iv.length !== config.iv) throw new TypeError("invalid iv length " + iv.length);
                    if (config.type === "stream") return new StreamCipher(config.module, password, iv);
                    else if (config.type === "auth") return new AuthCipher(config.module, password, iv);
                    return new Cipher(config.module, password, iv);
                }
                function createCipher(suite, password) {
                    var config = MODES[suite.toLowerCase()];
                    if (!config) throw new TypeError("invalid suite type");
                    var keys = ebtk(password, false, config.key, config.iv);
                    return createCipheriv(suite, keys.key, keys.iv);
                }
                exports.createCipheriv = createCipheriv;
                exports.createCipher = createCipher;
            },
            {
                "./aes": 20,
                "./authCipher": 21,
                "./modes": 33,
                "./streamCipher": 36,
                "cipher-base": 66,
                "evp_bytestokey": 104,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        25: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                var ZEROES = Buffer.alloc(16, 0);
                function toArray(buf) {
                    return [
                        buf.readUInt32BE(0),
                        buf.readUInt32BE(4),
                        buf.readUInt32BE(8),
                        buf.readUInt32BE(12)
                    ];
                }
                function fromArray(out) {
                    var buf = Buffer.allocUnsafe(16);
                    buf.writeUInt32BE(out[0] >>> 0, 0);
                    buf.writeUInt32BE(out[1] >>> 0, 4);
                    buf.writeUInt32BE(out[2] >>> 0, 8);
                    buf.writeUInt32BE(out[3] >>> 0, 12);
                    return buf;
                }
                function GHASH(key) {
                    this.h = key;
                    this.state = Buffer.alloc(16, 0);
                    this.cache = Buffer.allocUnsafe(0);
                } // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
                // by Juho Vähä-Herttua
                GHASH.prototype.ghash = function(block) {
                    var i = -1;
                    while(++i < block.length)this.state[i] ^= block[i];
                    this._multiply();
                };
                GHASH.prototype._multiply = function() {
                    var Vi = toArray(this.h);
                    var Zi = [
                        0,
                        0,
                        0,
                        0
                    ];
                    var j, xi, lsbVi;
                    var i = -1;
                    while(++i < 128){
                        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
                        if (xi) {
                            // Z_i+1 = Z_i ^ V_i
                            Zi[0] ^= Vi[0];
                            Zi[1] ^= Vi[1];
                            Zi[2] ^= Vi[2];
                            Zi[3] ^= Vi[3];
                        } // Store the value of LSB(V_i)
                        lsbVi = (Vi[3] & 1) !== 0; // V_i+1 = V_i >> 1
                        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
                        Vi[0] = Vi[0] >>> 1; // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
                        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
                    }
                    this.state = fromArray(Zi);
                };
                GHASH.prototype.update = function(buf) {
                    this.cache = Buffer.concat([
                        this.cache,
                        buf
                    ]);
                    var chunk;
                    while(this.cache.length >= 16){
                        chunk = this.cache.slice(0, 16);
                        this.cache = this.cache.slice(16);
                        this.ghash(chunk);
                    }
                };
                GHASH.prototype["final"] = function(abl, bl) {
                    if (this.cache.length) this.ghash(Buffer.concat([
                        this.cache,
                        ZEROES
                    ], 16));
                    this.ghash(fromArray([
                        0,
                        abl,
                        0,
                        bl
                    ]));
                    return this.state;
                };
                module.exports = GHASH;
            },
            {
                "safe-buffer": 174
            }
        ],
        26: [
            function(require, module, exports) {
                function incr32(iv) {
                    var len = iv.length;
                    var item;
                    while(len--){
                        item = iv.readUInt8(len);
                        if (item === 255) iv.writeUInt8(0, len);
                        else {
                            item++;
                            iv.writeUInt8(item, len);
                            break;
                        }
                    }
                }
                module.exports = incr32;
            },
            {}
        ],
        27: [
            function(require, module, exports) {
                var xor = require("buffer-xor");
                exports.encrypt = function(self, block) {
                    var data = xor(block, self._prev);
                    self._prev = self._cipher.encryptBlock(data);
                    return self._prev;
                };
                exports.decrypt = function(self, block) {
                    var pad = self._prev;
                    self._prev = block;
                    var out = self._cipher.decryptBlock(block);
                    return xor(out, pad);
                };
            },
            {
                "buffer-xor": 62
            }
        ],
        28: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                var xor = require("buffer-xor");
                function encryptStart(self, data, decrypt) {
                    var len = data.length;
                    var out = xor(data, self._cache);
                    self._cache = self._cache.slice(len);
                    self._prev = Buffer.concat([
                        self._prev,
                        decrypt ? data : out
                    ]);
                    return out;
                }
                exports.encrypt = function(self, data, decrypt) {
                    var out = Buffer.allocUnsafe(0);
                    var len;
                    while(data.length){
                        if (self._cache.length === 0) {
                            self._cache = self._cipher.encryptBlock(self._prev);
                            self._prev = Buffer.allocUnsafe(0);
                        }
                        if (self._cache.length <= data.length) {
                            len = self._cache.length;
                            out = Buffer.concat([
                                out,
                                encryptStart(self, data.slice(0, len), decrypt)
                            ]);
                            data = data.slice(len);
                        } else {
                            out = Buffer.concat([
                                out,
                                encryptStart(self, data, decrypt)
                            ]);
                            break;
                        }
                    }
                    return out;
                };
            },
            {
                "buffer-xor": 62,
                "safe-buffer": 174
            }
        ],
        29: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                function encryptByte(self, byteParam, decrypt) {
                    var pad;
                    var i = -1;
                    var len = 8;
                    var out = 0;
                    var bit, value;
                    while(++i < len){
                        pad = self._cipher.encryptBlock(self._prev);
                        bit = byteParam & 1 << 7 - i ? 0x80 : 0;
                        value = pad[0] ^ bit;
                        out += (value & 0x80) >> i % 8;
                        self._prev = shiftIn(self._prev, decrypt ? bit : value);
                    }
                    return out;
                }
                function shiftIn(buffer, value) {
                    var len = buffer.length;
                    var i = -1;
                    var out = Buffer.allocUnsafe(buffer.length);
                    buffer = Buffer.concat([
                        buffer,
                        Buffer.from([
                            value
                        ])
                    ]);
                    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
                    return out;
                }
                exports.encrypt = function(self, chunk, decrypt) {
                    var len = chunk.length;
                    var out = Buffer.allocUnsafe(len);
                    var i = -1;
                    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
                    return out;
                };
            },
            {
                "safe-buffer": 174
            }
        ],
        30: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                function encryptByte(self, byteParam, decrypt) {
                    var pad = self._cipher.encryptBlock(self._prev);
                    var out = pad[0] ^ byteParam;
                    self._prev = Buffer.concat([
                        self._prev.slice(1),
                        Buffer.from([
                            decrypt ? byteParam : out
                        ])
                    ]);
                    return out;
                }
                exports.encrypt = function(self, chunk, decrypt) {
                    var len = chunk.length;
                    var out = Buffer.allocUnsafe(len);
                    var i = -1;
                    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
                    return out;
                };
            },
            {
                "safe-buffer": 174
            }
        ],
        31: [
            function(require, module, exports) {
                var xor = require("buffer-xor");
                var Buffer = require("safe-buffer").Buffer;
                var incr32 = require("../incr32");
                function getBlock(self) {
                    var out = self._cipher.encryptBlockRaw(self._prev);
                    incr32(self._prev);
                    return out;
                }
                var blockSize = 16;
                exports.encrypt = function(self, chunk) {
                    var chunkNum = Math.ceil(chunk.length / blockSize);
                    var start = self._cache.length;
                    self._cache = Buffer.concat([
                        self._cache,
                        Buffer.allocUnsafe(chunkNum * blockSize)
                    ]);
                    for(var i = 0; i < chunkNum; i++){
                        var out = getBlock(self);
                        var offset = start + i * blockSize;
                        self._cache.writeUInt32BE(out[0], offset + 0);
                        self._cache.writeUInt32BE(out[1], offset + 4);
                        self._cache.writeUInt32BE(out[2], offset + 8);
                        self._cache.writeUInt32BE(out[3], offset + 12);
                    }
                    var pad = self._cache.slice(0, chunk.length);
                    self._cache = self._cache.slice(chunk.length);
                    return xor(chunk, pad);
                };
            },
            {
                "../incr32": 26,
                "buffer-xor": 62,
                "safe-buffer": 174
            }
        ],
        32: [
            function(require, module, exports) {
                exports.encrypt = function(self, block) {
                    return self._cipher.encryptBlock(block);
                };
                exports.decrypt = function(self, block) {
                    return self._cipher.decryptBlock(block);
                };
            },
            {}
        ],
        33: [
            function(require, module, exports) {
                var modeModules = {
                    ECB: require("./ecb"),
                    CBC: require("./cbc"),
                    CFB: require("./cfb"),
                    CFB8: require("./cfb8"),
                    CFB1: require("./cfb1"),
                    OFB: require("./ofb"),
                    CTR: require("./ctr"),
                    GCM: require("./ctr")
                };
                var modes = require("./list.json");
                for(var key in modes)modes[key].module = modeModules[modes[key].mode];
                module.exports = modes;
            },
            {
                "./cbc": 27,
                "./cfb": 28,
                "./cfb1": 29,
                "./cfb8": 30,
                "./ctr": 31,
                "./ecb": 32,
                "./list.json": 34,
                "./ofb": 35
            }
        ],
        34: [
            function(require, module, exports) {
                module.exports = {
                    "aes-128-ecb": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 0,
                        "mode": "ECB",
                        "type": "block"
                    },
                    "aes-192-ecb": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 0,
                        "mode": "ECB",
                        "type": "block"
                    },
                    "aes-256-ecb": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 0,
                        "mode": "ECB",
                        "type": "block"
                    },
                    "aes-128-cbc": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "CBC",
                        "type": "block"
                    },
                    "aes-192-cbc": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "CBC",
                        "type": "block"
                    },
                    "aes-256-cbc": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "CBC",
                        "type": "block"
                    },
                    "aes128": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "CBC",
                        "type": "block"
                    },
                    "aes192": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "CBC",
                        "type": "block"
                    },
                    "aes256": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "CBC",
                        "type": "block"
                    },
                    "aes-128-cfb": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "CFB",
                        "type": "stream"
                    },
                    "aes-192-cfb": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "CFB",
                        "type": "stream"
                    },
                    "aes-256-cfb": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "CFB",
                        "type": "stream"
                    },
                    "aes-128-cfb8": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "CFB8",
                        "type": "stream"
                    },
                    "aes-192-cfb8": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "CFB8",
                        "type": "stream"
                    },
                    "aes-256-cfb8": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "CFB8",
                        "type": "stream"
                    },
                    "aes-128-cfb1": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "CFB1",
                        "type": "stream"
                    },
                    "aes-192-cfb1": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "CFB1",
                        "type": "stream"
                    },
                    "aes-256-cfb1": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "CFB1",
                        "type": "stream"
                    },
                    "aes-128-ofb": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "OFB",
                        "type": "stream"
                    },
                    "aes-192-ofb": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "OFB",
                        "type": "stream"
                    },
                    "aes-256-ofb": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "OFB",
                        "type": "stream"
                    },
                    "aes-128-ctr": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 16,
                        "mode": "CTR",
                        "type": "stream"
                    },
                    "aes-192-ctr": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 16,
                        "mode": "CTR",
                        "type": "stream"
                    },
                    "aes-256-ctr": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 16,
                        "mode": "CTR",
                        "type": "stream"
                    },
                    "aes-128-gcm": {
                        "cipher": "AES",
                        "key": 128,
                        "iv": 12,
                        "mode": "GCM",
                        "type": "auth"
                    },
                    "aes-192-gcm": {
                        "cipher": "AES",
                        "key": 192,
                        "iv": 12,
                        "mode": "GCM",
                        "type": "auth"
                    },
                    "aes-256-gcm": {
                        "cipher": "AES",
                        "key": 256,
                        "iv": 12,
                        "mode": "GCM",
                        "type": "auth"
                    }
                };
            },
            {}
        ],
        35: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        var xor = require("buffer-xor");
                        function getBlock(self) {
                            self._prev = self._cipher.encryptBlock(self._prev);
                            return self._prev;
                        }
                        exports.encrypt = function(self, chunk) {
                            while(self._cache.length < chunk.length)self._cache = Buffer.concat([
                                self._cache,
                                getBlock(self)
                            ]);
                            var pad = self._cache.slice(0, chunk.length);
                            self._cache = self._cache.slice(chunk.length);
                            return xor(chunk, pad);
                        };
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "buffer": 63,
                "buffer-xor": 62
            }
        ],
        36: [
            function(require, module, exports) {
                var aes = require("./aes");
                var Buffer = require("safe-buffer").Buffer;
                var Transform = require("cipher-base");
                var inherits = require("inherits");
                function StreamCipher(mode, key, iv, decrypt) {
                    Transform.call(this);
                    this._cipher = new aes.AES(key);
                    this._prev = Buffer.from(iv);
                    this._cache = Buffer.allocUnsafe(0);
                    this._secCache = Buffer.allocUnsafe(0);
                    this._decrypt = decrypt;
                    this._mode = mode;
                }
                inherits(StreamCipher, Transform);
                StreamCipher.prototype._update = function(chunk) {
                    return this._mode.encrypt(this, chunk, this._decrypt);
                };
                StreamCipher.prototype._final = function() {
                    this._cipher.scrub();
                };
                module.exports = StreamCipher;
            },
            {
                "./aes": 20,
                "cipher-base": 66,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        37: [
            function(require, module, exports) {
                var DES = require("browserify-des");
                var aes = require("browserify-aes/browser");
                var aesModes = require("browserify-aes/modes");
                var desModes = require("browserify-des/modes");
                var ebtk = require("evp_bytestokey");
                function createCipher(suite, password) {
                    suite = suite.toLowerCase();
                    var keyLen, ivLen;
                    if (aesModes[suite]) {
                        keyLen = aesModes[suite].key;
                        ivLen = aesModes[suite].iv;
                    } else if (desModes[suite]) {
                        keyLen = desModes[suite].key * 8;
                        ivLen = desModes[suite].iv;
                    } else throw new TypeError("invalid suite type");
                    var keys = ebtk(password, false, keyLen, ivLen);
                    return createCipheriv(suite, keys.key, keys.iv);
                }
                function createDecipher(suite, password) {
                    suite = suite.toLowerCase();
                    var keyLen, ivLen;
                    if (aesModes[suite]) {
                        keyLen = aesModes[suite].key;
                        ivLen = aesModes[suite].iv;
                    } else if (desModes[suite]) {
                        keyLen = desModes[suite].key * 8;
                        ivLen = desModes[suite].iv;
                    } else throw new TypeError("invalid suite type");
                    var keys = ebtk(password, false, keyLen, ivLen);
                    return createDecipheriv(suite, keys.key, keys.iv);
                }
                function createCipheriv(suite, key, iv) {
                    suite = suite.toLowerCase();
                    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
                    if (desModes[suite]) return new DES({
                        key: key,
                        iv: iv,
                        mode: suite
                    });
                    throw new TypeError("invalid suite type");
                }
                function createDecipheriv(suite, key, iv) {
                    suite = suite.toLowerCase();
                    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
                    if (desModes[suite]) return new DES({
                        key: key,
                        iv: iv,
                        mode: suite,
                        decrypt: true
                    });
                    throw new TypeError("invalid suite type");
                }
                function getCiphers() {
                    return Object.keys(desModes).concat(aes.getCiphers());
                }
                exports.createCipher = exports.Cipher = createCipher;
                exports.createCipheriv = exports.Cipheriv = createCipheriv;
                exports.createDecipher = exports.Decipher = createDecipher;
                exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
                exports.listCiphers = exports.getCiphers = getCiphers;
            },
            {
                "browserify-aes/browser": 22,
                "browserify-aes/modes": 33,
                "browserify-des": 38,
                "browserify-des/modes": 39,
                "evp_bytestokey": 104
            }
        ],
        38: [
            function(require, module, exports) {
                var CipherBase = require("cipher-base");
                var des = require("des.js");
                var inherits = require("inherits");
                var Buffer = require("safe-buffer").Buffer;
                var modes = {
                    "des-ede3-cbc": des.CBC.instantiate(des.EDE),
                    "des-ede3": des.EDE,
                    "des-ede-cbc": des.CBC.instantiate(des.EDE),
                    "des-ede": des.EDE,
                    "des-cbc": des.CBC.instantiate(des.DES),
                    "des-ecb": des.DES
                };
                modes.des = modes["des-cbc"];
                modes.des3 = modes["des-ede3-cbc"];
                module.exports = DES;
                inherits(DES, CipherBase);
                function DES(opts) {
                    CipherBase.call(this);
                    var modeName = opts.mode.toLowerCase();
                    var mode = modes[modeName];
                    var type;
                    if (opts.decrypt) type = "decrypt";
                    else type = "encrypt";
                    var key = opts.key;
                    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
                    if (modeName === "des-ede" || modeName === "des-ede-cbc") key = Buffer.concat([
                        key,
                        key.slice(0, 8)
                    ]);
                    var iv = opts.iv;
                    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
                    this._des = mode.create({
                        key: key,
                        iv: iv,
                        type: type
                    });
                }
                DES.prototype._update = function(data) {
                    return Buffer.from(this._des.update(data));
                };
                DES.prototype._final = function() {
                    return Buffer.from(this._des["final"]());
                };
            },
            {
                "cipher-base": 66,
                "des.js": 74,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        39: [
            function(require, module, exports) {
                exports["des-ecb"] = {
                    key: 8,
                    iv: 0
                };
                exports["des-cbc"] = exports.des = {
                    key: 8,
                    iv: 8
                };
                exports["des-ede3-cbc"] = exports.des3 = {
                    key: 24,
                    iv: 8
                };
                exports["des-ede3"] = {
                    key: 24,
                    iv: 0
                };
                exports["des-ede-cbc"] = {
                    key: 16,
                    iv: 8
                };
                exports["des-ede"] = {
                    key: 16,
                    iv: 0
                };
            },
            {}
        ],
        40: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        var BN = require("bn.js");
                        var randomBytes = require("randombytes");
                        function blind(priv) {
                            var r = getr(priv);
                            var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
                            return {
                                blinder: blinder,
                                unblinder: r.invm(priv.modulus)
                            };
                        }
                        function getr(priv) {
                            var len = priv.modulus.byteLength();
                            var r;
                            do r = new BN(randomBytes(len));
                            while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2));
                            return r;
                        }
                        function crt(msg, priv) {
                            var blinds = blind(priv);
                            var len = priv.modulus.byteLength();
                            var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
                            var c1 = blinded.toRed(BN.mont(priv.prime1));
                            var c2 = blinded.toRed(BN.mont(priv.prime2));
                            var qinv = priv.coefficient;
                            var p = priv.prime1;
                            var q = priv.prime2;
                            var m1 = c1.redPow(priv.exponent1).fromRed();
                            var m2 = c2.redPow(priv.exponent2).fromRed();
                            var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
                            return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, "be", len);
                        }
                        crt.getr = getr;
                        module.exports = crt;
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "bn.js": 18,
                "buffer": 63,
                "randombytes": 171
            }
        ],
        41: [
            function(require, module, exports) {
                module.exports = require("./browser/algorithms.json");
            },
            {
                "./browser/algorithms.json": 42
            }
        ],
        42: [
            function(require, module, exports) {
                module.exports = {
                    "sha224WithRSAEncryption": {
                        "sign": "rsa",
                        "hash": "sha224",
                        "id": "302d300d06096086480165030402040500041c"
                    },
                    "RSA-SHA224": {
                        "sign": "ecdsa/rsa",
                        "hash": "sha224",
                        "id": "302d300d06096086480165030402040500041c"
                    },
                    "sha256WithRSAEncryption": {
                        "sign": "rsa",
                        "hash": "sha256",
                        "id": "3031300d060960864801650304020105000420"
                    },
                    "RSA-SHA256": {
                        "sign": "ecdsa/rsa",
                        "hash": "sha256",
                        "id": "3031300d060960864801650304020105000420"
                    },
                    "sha384WithRSAEncryption": {
                        "sign": "rsa",
                        "hash": "sha384",
                        "id": "3041300d060960864801650304020205000430"
                    },
                    "RSA-SHA384": {
                        "sign": "ecdsa/rsa",
                        "hash": "sha384",
                        "id": "3041300d060960864801650304020205000430"
                    },
                    "sha512WithRSAEncryption": {
                        "sign": "rsa",
                        "hash": "sha512",
                        "id": "3051300d060960864801650304020305000440"
                    },
                    "RSA-SHA512": {
                        "sign": "ecdsa/rsa",
                        "hash": "sha512",
                        "id": "3051300d060960864801650304020305000440"
                    },
                    "RSA-SHA1": {
                        "sign": "rsa",
                        "hash": "sha1",
                        "id": "3021300906052b0e03021a05000414"
                    },
                    "ecdsa-with-SHA1": {
                        "sign": "ecdsa",
                        "hash": "sha1",
                        "id": ""
                    },
                    "sha256": {
                        "sign": "ecdsa",
                        "hash": "sha256",
                        "id": ""
                    },
                    "sha224": {
                        "sign": "ecdsa",
                        "hash": "sha224",
                        "id": ""
                    },
                    "sha384": {
                        "sign": "ecdsa",
                        "hash": "sha384",
                        "id": ""
                    },
                    "sha512": {
                        "sign": "ecdsa",
                        "hash": "sha512",
                        "id": ""
                    },
                    "DSA-SHA": {
                        "sign": "dsa",
                        "hash": "sha1",
                        "id": ""
                    },
                    "DSA-SHA1": {
                        "sign": "dsa",
                        "hash": "sha1",
                        "id": ""
                    },
                    "DSA": {
                        "sign": "dsa",
                        "hash": "sha1",
                        "id": ""
                    },
                    "DSA-WITH-SHA224": {
                        "sign": "dsa",
                        "hash": "sha224",
                        "id": ""
                    },
                    "DSA-SHA224": {
                        "sign": "dsa",
                        "hash": "sha224",
                        "id": ""
                    },
                    "DSA-WITH-SHA256": {
                        "sign": "dsa",
                        "hash": "sha256",
                        "id": ""
                    },
                    "DSA-SHA256": {
                        "sign": "dsa",
                        "hash": "sha256",
                        "id": ""
                    },
                    "DSA-WITH-SHA384": {
                        "sign": "dsa",
                        "hash": "sha384",
                        "id": ""
                    },
                    "DSA-SHA384": {
                        "sign": "dsa",
                        "hash": "sha384",
                        "id": ""
                    },
                    "DSA-WITH-SHA512": {
                        "sign": "dsa",
                        "hash": "sha512",
                        "id": ""
                    },
                    "DSA-SHA512": {
                        "sign": "dsa",
                        "hash": "sha512",
                        "id": ""
                    },
                    "DSA-RIPEMD160": {
                        "sign": "dsa",
                        "hash": "rmd160",
                        "id": ""
                    },
                    "ripemd160WithRSA": {
                        "sign": "rsa",
                        "hash": "rmd160",
                        "id": "3021300906052b2403020105000414"
                    },
                    "RSA-RIPEMD160": {
                        "sign": "rsa",
                        "hash": "rmd160",
                        "id": "3021300906052b2403020105000414"
                    },
                    "md5WithRSAEncryption": {
                        "sign": "rsa",
                        "hash": "md5",
                        "id": "3020300c06082a864886f70d020505000410"
                    },
                    "RSA-MD5": {
                        "sign": "rsa",
                        "hash": "md5",
                        "id": "3020300c06082a864886f70d020505000410"
                    }
                };
            },
            {}
        ],
        43: [
            function(require, module, exports) {
                module.exports = {
                    "1.3.132.0.10": "secp256k1",
                    "1.3.132.0.33": "p224",
                    "1.2.840.10045.3.1.1": "p192",
                    "1.2.840.10045.3.1.7": "p256",
                    "1.3.132.0.34": "p384",
                    "1.3.132.0.35": "p521"
                };
            },
            {}
        ],
        44: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                var createHash = require("create-hash");
                var stream = require("readable-stream");
                var inherits = require("inherits");
                var sign = require("./sign");
                var verify = require("./verify");
                var algorithms = require("./algorithms.json");
                Object.keys(algorithms).forEach(function(key) {
                    algorithms[key].id = Buffer.from(algorithms[key].id, "hex");
                    algorithms[key.toLowerCase()] = algorithms[key];
                });
                function Sign(algorithm) {
                    stream.Writable.call(this);
                    var data = algorithms[algorithm];
                    if (!data) throw new Error("Unknown message digest");
                    this._hashType = data.hash;
                    this._hash = createHash(data.hash);
                    this._tag = data.id;
                    this._signType = data.sign;
                }
                inherits(Sign, stream.Writable);
                Sign.prototype._write = function _write(data, _, done) {
                    this._hash.update(data);
                    done();
                };
                Sign.prototype.update = function update(data, enc) {
                    if (typeof data === "string") data = Buffer.from(data, enc);
                    this._hash.update(data);
                    return this;
                };
                Sign.prototype.sign = function signMethod(key, enc) {
                    this.end();
                    var hash = this._hash.digest();
                    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
                    return enc ? sig.toString(enc) : sig;
                };
                function Verify(algorithm) {
                    stream.Writable.call(this);
                    var data = algorithms[algorithm];
                    if (!data) throw new Error("Unknown message digest");
                    this._hash = createHash(data.hash);
                    this._tag = data.id;
                    this._signType = data.sign;
                }
                inherits(Verify, stream.Writable);
                Verify.prototype._write = function _write(data, _, done) {
                    this._hash.update(data);
                    done();
                };
                Verify.prototype.update = function update(data, enc) {
                    if (typeof data === "string") data = Buffer.from(data, enc);
                    this._hash.update(data);
                    return this;
                };
                Verify.prototype.verify = function verifyMethod(key, sig, enc) {
                    if (typeof sig === "string") sig = Buffer.from(sig, enc);
                    this.end();
                    var hash = this._hash.digest();
                    return verify(sig, hash, key, this._signType, this._tag);
                };
                function createSign(algorithm) {
                    return new Sign(algorithm);
                }
                function createVerify(algorithm) {
                    return new Verify(algorithm);
                }
                module.exports = {
                    Sign: createSign,
                    Verify: createVerify,
                    createSign: createSign,
                    createVerify: createVerify
                };
            },
            {
                "./algorithms.json": 42,
                "./sign": 45,
                "./verify": 46,
                "create-hash": 69,
                "inherits": 143,
                "readable-stream": 61,
                "safe-buffer": 174
            }
        ],
        45: [
            function(require, module, exports) {
                // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
                var Buffer = require("safe-buffer").Buffer;
                var createHmac = require("create-hmac");
                var crt = require("browserify-rsa");
                var EC = require("elliptic").ec;
                var BN = require("bn.js");
                var parseKeys = require("parse-asn1");
                var curves = require("./curves.json");
                function sign(hash, key, hashType, signType, tag) {
                    var priv = parseKeys(key);
                    if (priv.curve) {
                        // rsa keys can be interpreted as ecdsa ones in openssl
                        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
                        return ecSign(hash, priv);
                    } else if (priv.type === "dsa") {
                        if (signType !== "dsa") throw new Error("wrong private key type");
                        return dsaSign(hash, priv, hashType);
                    } else {
                        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong private key type");
                    }
                    hash = Buffer.concat([
                        tag,
                        hash
                    ]);
                    var len = priv.modulus.byteLength();
                    var pad = [
                        0,
                        1
                    ];
                    while(hash.length + pad.length + 1 < len)pad.push(0xff);
                    pad.push(0x00);
                    var i = -1;
                    while(++i < hash.length)pad.push(hash[i]);
                    var out = crt(pad, priv);
                    return out;
                }
                function ecSign(hash, priv) {
                    var curveId = curves[priv.curve.join(".")];
                    if (!curveId) throw new Error("unknown curve " + priv.curve.join("."));
                    var curve = new EC(curveId);
                    var key = curve.keyFromPrivate(priv.privateKey);
                    var out = key.sign(hash);
                    return Buffer.from(out.toDER());
                }
                function dsaSign(hash, priv, algo) {
                    var x = priv.params.priv_key;
                    var p = priv.params.p;
                    var q = priv.params.q;
                    var g = priv.params.g;
                    var r = new BN(0);
                    var k;
                    var H = bits2int(hash, q).mod(q);
                    var s = false;
                    var kv = getKey(x, q, hash, algo);
                    while(s === false){
                        k = makeKey(q, kv, algo);
                        r = makeR(g, k, p, q);
                        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
                        if (s.cmpn(0) === 0) {
                            s = false;
                            r = new BN(0);
                        }
                    }
                    return toDER(r, s);
                }
                function toDER(r, s) {
                    r = r.toArray();
                    s = s.toArray(); // Pad values
                    if (r[0] & 0x80) r = [
                        0
                    ].concat(r);
                    if (s[0] & 0x80) s = [
                        0
                    ].concat(s);
                    var total = r.length + s.length + 4;
                    var res = [
                        0x30,
                        total,
                        0x02,
                        r.length
                    ];
                    res = res.concat(r, [
                        0x02,
                        s.length
                    ], s);
                    return Buffer.from(res);
                }
                function getKey(x, q, hash, algo) {
                    x = Buffer.from(x.toArray());
                    if (x.length < q.byteLength()) {
                        var zeros = Buffer.alloc(q.byteLength() - x.length);
                        x = Buffer.concat([
                            zeros,
                            x
                        ]);
                    }
                    var hlen = hash.length;
                    var hbits = bits2octets(hash, q);
                    var v = Buffer.alloc(hlen);
                    v.fill(1);
                    var k = Buffer.alloc(hlen);
                    k = createHmac(algo, k).update(v).update(Buffer.from([
                        0
                    ])).update(x).update(hbits).digest();
                    v = createHmac(algo, k).update(v).digest();
                    k = createHmac(algo, k).update(v).update(Buffer.from([
                        1
                    ])).update(x).update(hbits).digest();
                    v = createHmac(algo, k).update(v).digest();
                    return {
                        k: k,
                        v: v
                    };
                }
                function bits2int(obits, q) {
                    var bits = new BN(obits);
                    var shift = (obits.length << 3) - q.bitLength();
                    if (shift > 0) bits.ishrn(shift);
                    return bits;
                }
                function bits2octets(bits, q) {
                    bits = bits2int(bits, q);
                    bits = bits.mod(q);
                    var out = Buffer.from(bits.toArray());
                    if (out.length < q.byteLength()) {
                        var zeros = Buffer.alloc(q.byteLength() - out.length);
                        out = Buffer.concat([
                            zeros,
                            out
                        ]);
                    }
                    return out;
                }
                function makeKey(q, kv, algo) {
                    var t;
                    var k;
                    do {
                        t = Buffer.alloc(0);
                        while(t.length * 8 < q.bitLength()){
                            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
                            t = Buffer.concat([
                                t,
                                kv.v
                            ]);
                        }
                        k = bits2int(t, q);
                        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
                            0
                        ])).digest();
                        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
                    }while (k.cmp(q) !== -1);
                    return k;
                }
                function makeR(g, k, p, q) {
                    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
                }
                module.exports = sign;
                module.exports.getKey = getKey;
                module.exports.makeKey = makeKey;
            },
            {
                "./curves.json": 43,
                "bn.js": 18,
                "browserify-rsa": 40,
                "create-hmac": 71,
                "elliptic": 85,
                "parse-asn1": 156,
                "safe-buffer": 174
            }
        ],
        46: [
            function(require, module, exports) {
                // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
                var Buffer = require("safe-buffer").Buffer;
                var BN = require("bn.js");
                var EC = require("elliptic").ec;
                var parseKeys = require("parse-asn1");
                var curves = require("./curves.json");
                function verify(sig, hash, key, signType, tag) {
                    var pub = parseKeys(key);
                    if (pub.type === "ec") {
                        // rsa keys can be interpreted as ecdsa ones in openssl
                        if (signType !== "ecdsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
                        return ecVerify(sig, hash, pub);
                    } else if (pub.type === "dsa") {
                        if (signType !== "dsa") throw new Error("wrong public key type");
                        return dsaVerify(sig, hash, pub);
                    } else {
                        if (signType !== "rsa" && signType !== "ecdsa/rsa") throw new Error("wrong public key type");
                    }
                    hash = Buffer.concat([
                        tag,
                        hash
                    ]);
                    var len = pub.modulus.byteLength();
                    var pad = [
                        1
                    ];
                    var padNum = 0;
                    while(hash.length + pad.length + 2 < len){
                        pad.push(0xff);
                        padNum++;
                    }
                    pad.push(0x00);
                    var i = -1;
                    while(++i < hash.length)pad.push(hash[i]);
                    pad = Buffer.from(pad);
                    var red = BN.mont(pub.modulus);
                    sig = new BN(sig).toRed(red);
                    sig = sig.redPow(new BN(pub.publicExponent));
                    sig = Buffer.from(sig.fromRed().toArray());
                    var out = padNum < 8 ? 1 : 0;
                    len = Math.min(sig.length, pad.length);
                    if (sig.length !== pad.length) out = 1;
                    i = -1;
                    while(++i < len)out |= sig[i] ^ pad[i];
                    return out === 0;
                }
                function ecVerify(sig, hash, pub) {
                    var curveId = curves[pub.data.algorithm.curve.join(".")];
                    if (!curveId) throw new Error("unknown curve " + pub.data.algorithm.curve.join("."));
                    var curve = new EC(curveId);
                    var pubkey = pub.data.subjectPrivateKey.data;
                    return curve.verify(hash, sig, pubkey);
                }
                function dsaVerify(sig, hash, pub) {
                    var p = pub.data.p;
                    var q = pub.data.q;
                    var g = pub.data.g;
                    var y = pub.data.pub_key;
                    var unpacked = parseKeys.signature.decode(sig, "der");
                    var s = unpacked.s;
                    var r = unpacked.r;
                    checkValue(s, q);
                    checkValue(r, q);
                    var montp = BN.mont(p);
                    var w = s.invm(q);
                    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
                    return v.cmp(r) === 0;
                }
                function checkValue(b, q) {
                    if (b.cmpn(0) <= 0) throw new Error("invalid sig");
                    if (b.cmp(q) >= q) throw new Error("invalid sig");
                }
                module.exports = verify;
            },
            {
                "./curves.json": 43,
                "bn.js": 18,
                "elliptic": 85,
                "parse-asn1": 156,
                "safe-buffer": 174
            }
        ],
        47: [
            function(require, module, exports) {
                "use strict";
                function _inheritsLoose(subClass, superClass) {
                    subClass.prototype = Object.create(superClass.prototype);
                    subClass.prototype.constructor = subClass;
                    subClass.__proto__ = superClass;
                }
                var codes = {};
                function createErrorType(code, message, Base) {
                    if (!Base) Base = Error;
                    function getMessage(arg1, arg2, arg3) {
                        if (typeof message === "string") return message;
                        else return message(arg1, arg2, arg3);
                    }
                    var NodeError1 = /*#__PURE__*/ function(_Base) {
                        _inheritsLoose(NodeError, _Base);
                        function NodeError(arg1, arg2, arg3) {
                            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
                        }
                        return NodeError;
                    }(Base);
                    NodeError1.prototype.name = Base.name;
                    NodeError1.prototype.code = code;
                    codes[code] = NodeError1;
                } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
                function oneOf(expected, thing) {
                    if (Array.isArray(expected)) {
                        var len = expected.length;
                        expected = expected.map(function(i) {
                            return String(i);
                        });
                        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
                        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
                        else return "of ".concat(thing, " ").concat(expected[0]);
                    } else return "of ".concat(thing, " ").concat(String(expected));
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
                function startsWith(str, search, pos) {
                    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
                function endsWith(str, search, this_len) {
                    if (this_len === undefined || this_len > str.length) this_len = str.length;
                    return str.substring(this_len - search.length, this_len) === search;
                } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
                function includes(str, search, start) {
                    if (typeof start !== "number") start = 0;
                    if (start + search.length > str.length) return false;
                    else return str.indexOf(search, start) !== -1;
                }
                createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
                    return 'The value "' + value + '" is invalid for option "' + name + '"';
                }, TypeError);
                createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
                    // determiner: 'must be' or 'must not be'
                    var determiner;
                    if (typeof expected === "string" && startsWith(expected, "not ")) {
                        determiner = "must not be";
                        expected = expected.replace(/^not /, "");
                    } else determiner = "must be";
                    var msg;
                    if (endsWith(name, " argument")) // For cases like 'first argument'
                    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
                    else {
                        var type = includes(name, ".") ? "property" : "argument";
                        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
                    }
                    msg += ". Received type ".concat(_typeof(actual));
                    return msg;
                }, TypeError);
                createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
                createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
                    return "The " + name + " method is not implemented";
                });
                createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
                createErrorType("ERR_STREAM_DESTROYED", function(name) {
                    return "Cannot call " + name + " after a stream was destroyed";
                });
                createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
                createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
                createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
                createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
                createErrorType("ERR_UNKNOWN_ENCODING", function(arg) {
                    return "Unknown encoding: " + arg;
                }, TypeError);
                createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
                module.exports.codes = codes;
            },
            {}
        ],
        48: [
            function(require, module, exports) {
                (function(process) {
                    (function() {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.
                        // a duplex stream is just a stream that is both readable and writable.
                        // Since JS doesn't have multiple prototypal inheritance, this class
                        // prototypally inherits from Readable, and then parasitically from
                        // Writable.
                        "use strict";
                        /*<replacement>*/ var objectKeys = Object.keys || function(obj) {
                            var keys = [];
                            for(var key in obj)keys.push(key);
                            return keys;
                        };
                        /*</replacement>*/ module.exports = Duplex;
                        var Readable = require("./_stream_readable");
                        var Writable = require("./_stream_writable");
                        require("inherits")(Duplex, Readable);
                        // Allow the keys array to be GC'ed.
                        var keys1 = objectKeys(Writable.prototype);
                        for(var v = 0; v < keys1.length; v++){
                            var method = keys1[v];
                            if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
                        }
                        function Duplex(options) {
                            if (!(this instanceof Duplex)) return new Duplex(options);
                            Readable.call(this, options);
                            Writable.call(this, options);
                            this.allowHalfOpen = true;
                            if (options) {
                                if (options.readable === false) this.readable = false;
                                if (options.writable === false) this.writable = false;
                                if (options.allowHalfOpen === false) {
                                    this.allowHalfOpen = false;
                                    this.once("end", onend);
                                }
                            }
                        }
                        Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._writableState.highWaterMark;
                            }
                        });
                        Object.defineProperty(Duplex.prototype, "writableBuffer", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._writableState && this._writableState.getBuffer();
                            }
                        });
                        Object.defineProperty(Duplex.prototype, "writableLength", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._writableState.length;
                            }
                        }); // the no-half-open enforcer
                        function onend() {
                            // If the writable side ended, then we're ok.
                            if (this._writableState.ended) return; // no more data can be written.
                            // But allow more writes to happen in this tick.
                            process.nextTick(onEndNT, this);
                        }
                        function onEndNT(self) {
                            self.end();
                        }
                        Object.defineProperty(Duplex.prototype, "destroyed", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                if (this._readableState === undefined || this._writableState === undefined) return false;
                                return this._readableState.destroyed && this._writableState.destroyed;
                            },
                            set: function set(value) {
                                // we ignore the value if the stream
                                // has not been initialized yet
                                if (this._readableState === undefined || this._writableState === undefined) return;
                                 // backward compatibility, the user is explicitly
                                // managing destroyed
                                this._readableState.destroyed = value;
                                this._writableState.destroyed = value;
                            }
                        });
                    }).call(this);
                }).call(this, require("_process"));
            },
            {
                "./_stream_readable": 50,
                "./_stream_writable": 52,
                "_process": 163,
                "inherits": 143
            }
        ],
        49: [
            function(require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                // a passthrough stream.
                // basically just the most minimal sort of Transform stream.
                // Every written chunk gets output as-is.
                "use strict";
                module.exports = PassThrough;
                var Transform = require("./_stream_transform");
                require("inherits")(PassThrough, Transform);
                function PassThrough(options) {
                    if (!(this instanceof PassThrough)) return new PassThrough(options);
                    Transform.call(this, options);
                }
                PassThrough.prototype._transform = function(chunk, encoding, cb) {
                    cb(null, chunk);
                };
            },
            {
                "./_stream_transform": 51,
                "inherits": 143
            }
        ],
        50: [
            function(require, module, exports) {
                (function(process, global) {
                    (function() {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.
                        "use strict";
                        module.exports = Readable;
                        /*<replacement>*/ var Duplex;
                        /*</replacement>*/ Readable.ReadableState = ReadableState;
                        /*<replacement>*/ var EE = require("events").EventEmitter;
                        var EElistenerCount = function EElistenerCount(emitter, type) {
                            return emitter.listeners(type).length;
                        };
                        /*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
                        /*</replacement>*/ var Buffer = require("buffer").Buffer;
                        var OurUint8Array = global.Uint8Array || function() {};
                        function _uint8ArrayToBuffer(chunk) {
                            return Buffer.from(chunk);
                        }
                        function _isUint8Array(obj) {
                            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                        }
                        /*<replacement>*/ var debugUtil = require("util");
                        var debug;
                        if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog("stream");
                        else debug = function debug() {};
                        /*</replacement>*/ var BufferList = require("./internal/streams/buffer_list");
                        var destroyImpl = require("./internal/streams/destroy");
                        var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
                        var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
                        var StringDecoder;
                        var createReadableStreamAsyncIterator;
                        var from;
                        require("inherits")(Readable, Stream);
                        var errorOrDestroy = destroyImpl.errorOrDestroy;
                        var kProxyEvents = [
                            "error",
                            "close",
                            "destroy",
                            "pause",
                            "resume"
                        ];
                        function prependListener(emitter, event, fn) {
                            // Sadly this is not cacheable as some libraries bundle their own
                            // event emitter implementation with them.
                            if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
                            // userland ones.  NEVER DO THIS. This is here only because this code needs
                            // to continue to work with older versions of Node.js that do not include
                            // the prependListener() method. The goal is to eventually remove this hack.
                            if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
                            else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
                            else emitter._events[event] = [
                                fn,
                                emitter._events[event]
                            ];
                        }
                        function ReadableState(options, stream, isDuplex) {
                            Duplex = Duplex || require("./_stream_duplex");
                            options = options || {}; // Duplex streams are both readable and writable, but share
                            // the same options object.
                            // However, some cases require setting options to different
                            // values for the readable and the writable sides of the duplex stream.
                            // These options can be provided separately as readableXXX and writableXXX.
                            if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
                            // make all the buffer merging and length checks go away
                            this.objectMode = !!options.objectMode;
                            if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
                            // Note: 0 is a valid value, means "don't call _read preemptively ever"
                            this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
                            // linked list can remove elements from the beginning faster than
                            // array.shift()
                            this.buffer = new BufferList();
                            this.length = 0;
                            this.pipes = null;
                            this.pipesCount = 0;
                            this.flowing = null;
                            this.ended = false;
                            this.endEmitted = false;
                            this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
                            // immediately, or on a later tick.  We set this to true at first, because
                            // any actions that shouldn't happen until "later" should generally also
                            // not happen before the first read call.
                            this.sync = true; // whenever we return null, then we set a flag to say
                            // that we're awaiting a 'readable' event emission.
                            this.needReadable = false;
                            this.emittedReadable = false;
                            this.readableListening = false;
                            this.resumeScheduled = false;
                            this.paused = true; // Should close be emitted on destroy. Defaults to true.
                            this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
                            this.autoDestroy = !!options.autoDestroy; // has it been destroyed
                            this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
                            // encoding is 'binary' so we have to make this configurable.
                            // Everything else in the universe uses 'utf8', though.
                            this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s
                            this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
                            this.readingMore = false;
                            this.decoder = null;
                            this.encoding = null;
                            if (options.encoding) {
                                if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
                                this.decoder = new StringDecoder(options.encoding);
                                this.encoding = options.encoding;
                            }
                        }
                        function Readable(options) {
                            Duplex = Duplex || require("./_stream_duplex");
                            if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
                            // the ReadableState constructor, at least with V8 6.5
                            var isDuplex = this instanceof Duplex;
                            this._readableState = new ReadableState(options, this, isDuplex); // legacy
                            this.readable = true;
                            if (options) {
                                if (typeof options.read === "function") this._read = options.read;
                                if (typeof options.destroy === "function") this._destroy = options.destroy;
                            }
                            Stream.call(this);
                        }
                        Object.defineProperty(Readable.prototype, "destroyed", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                if (this._readableState === undefined) return false;
                                return this._readableState.destroyed;
                            },
                            set: function set(value) {
                                // we ignore the value if the stream
                                // has not been initialized yet
                                if (!this._readableState) return;
                                 // backward compatibility, the user is explicitly
                                // managing destroyed
                                this._readableState.destroyed = value;
                            }
                        });
                        Readable.prototype.destroy = destroyImpl.destroy;
                        Readable.prototype._undestroy = destroyImpl.undestroy;
                        Readable.prototype._destroy = function(err, cb) {
                            cb(err);
                        }; // Manually shove something into the read() buffer.
                        // This returns true if the highWaterMark has not been hit yet,
                        // similar to how Writable.write() returns true if you should
                        // write() some more.
                        Readable.prototype.push = function(chunk, encoding) {
                            var state = this._readableState;
                            var skipChunkCheck;
                            if (!state.objectMode) {
                                if (typeof chunk === "string") {
                                    encoding = encoding || state.defaultEncoding;
                                    if (encoding !== state.encoding) {
                                        chunk = Buffer.from(chunk, encoding);
                                        encoding = "";
                                    }
                                    skipChunkCheck = true;
                                }
                            } else skipChunkCheck = true;
                            return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
                        }; // Unshift should *always* be something directly out of read()
                        Readable.prototype.unshift = function(chunk) {
                            return readableAddChunk(this, chunk, null, true, false);
                        };
                        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
                            debug("readableAddChunk", chunk);
                            var state = stream._readableState;
                            if (chunk === null) {
                                state.reading = false;
                                onEofChunk(stream, state);
                            } else {
                                var er;
                                if (!skipChunkCheck) er = chunkInvalid(state, chunk);
                                if (er) errorOrDestroy(stream, er);
                                else if (state.objectMode || chunk && chunk.length > 0) {
                                    if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
                                    if (addToFront) {
                                        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                                        else addChunk(stream, state, chunk, true);
                                    } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                                    else if (state.destroyed) return false;
                                    else {
                                        state.reading = false;
                                        if (state.decoder && !encoding) {
                                            chunk = state.decoder.write(chunk);
                                            if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                                            else maybeReadMore(stream, state);
                                        } else addChunk(stream, state, chunk, false);
                                    }
                                } else if (!addToFront) {
                                    state.reading = false;
                                    maybeReadMore(stream, state);
                                }
                            } // We can push more data if we are below the highWaterMark.
                            // Also, if we have no data yet, we can stand some more bytes.
                            // This is to work around cases where hwm=0, such as the repl.
                            return !state.ended && (state.length < state.highWaterMark || state.length === 0);
                        }
                        function addChunk(stream, state, chunk, addToFront) {
                            if (state.flowing && state.length === 0 && !state.sync) {
                                state.awaitDrain = 0;
                                stream.emit("data", chunk);
                            } else {
                                // update the buffer info.
                                state.length += state.objectMode ? 1 : chunk.length;
                                if (addToFront) state.buffer.unshift(chunk);
                                else state.buffer.push(chunk);
                                if (state.needReadable) emitReadable(stream);
                            }
                            maybeReadMore(stream, state);
                        }
                        function chunkInvalid(state, chunk) {
                            var er;
                            if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
                                "string",
                                "Buffer",
                                "Uint8Array"
                            ], chunk);
                            return er;
                        }
                        Readable.prototype.isPaused = function() {
                            return this._readableState.flowing === false;
                        }; // backwards compatibility.
                        Readable.prototype.setEncoding = function(enc) {
                            if (!StringDecoder) StringDecoder = require("string_decoder/").StringDecoder;
                            var decoder = new StringDecoder(enc);
                            this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
                            this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
                            var p = this._readableState.buffer.head;
                            var content = "";
                            while(p !== null){
                                content += decoder.write(p.data);
                                p = p.next;
                            }
                            this._readableState.buffer.clear();
                            if (content !== "") this._readableState.buffer.push(content);
                            this._readableState.length = content.length;
                            return this;
                        }; // Don't raise the hwm > 1GB
                        var MAX_HWM = 0x40000000;
                        function computeNewHighWaterMark(n) {
                            if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
                            n = MAX_HWM;
                            else {
                                // Get the next highest power of 2 to prevent increasing hwm excessively in
                                // tiny amounts
                                n--;
                                n |= n >>> 1;
                                n |= n >>> 2;
                                n |= n >>> 4;
                                n |= n >>> 8;
                                n |= n >>> 16;
                                n++;
                            }
                            return n;
                        } // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function howMuchToRead(n, state) {
                            if (n <= 0 || state.length === 0 && state.ended) return 0;
                            if (state.objectMode) return 1;
                            if (n !== n) {
                                // Only flow one buffer at a time
                                if (state.flowing && state.length) return state.buffer.head.data.length;
                                else return state.length;
                            } // If we're asking for more than the current hwm, then raise the hwm.
                            if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
                            if (n <= state.length) return n; // Don't have enough
                            if (!state.ended) {
                                state.needReadable = true;
                                return 0;
                            }
                            return state.length;
                        } // you can override either this method, or the async _read(n) below.
                        Readable.prototype.read = function(n) {
                            debug("read", n);
                            n = parseInt(n, 10);
                            var state = this._readableState;
                            var nOrig = n;
                            if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
                            // already have a bunch of data in the buffer, then just trigger
                            // the 'readable' event and move on.
                            if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
                                debug("read: emitReadable", state.length, state.ended);
                                if (state.length === 0 && state.ended) endReadable(this);
                                else emitReadable(this);
                                return null;
                            }
                            n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
                            if (n === 0 && state.ended) {
                                if (state.length === 0) endReadable(this);
                                return null;
                            } // All the actual chunk generation logic needs to be
                            // *below* the call to _read.  The reason is that in certain
                            // synthetic stream cases, such as passthrough streams, _read
                            // may be a completely synchronous operation which may change
                            // the state of the read buffer, providing enough data when
                            // before there was *not* enough.
                            //
                            // So, the steps are:
                            // 1. Figure out what the state of things will be after we do
                            // a read from the buffer.
                            //
                            // 2. If that resulting state will trigger a _read, then call _read.
                            // Note that this may be asynchronous, or synchronous.  Yes, it is
                            // deeply ugly to write APIs this way, but that still doesn't mean
                            // that the Readable class should behave improperly, as streams are
                            // designed to be sync/async agnostic.
                            // Take note if the _read call is sync or async (ie, if the read call
                            // has returned yet), so that we know whether or not it's safe to emit
                            // 'readable' etc.
                            //
                            // 3. Actually pull the requested chunks out of the buffer and return.
                            // if we need a readable event, then we need to do some reading.
                            var doRead = state.needReadable;
                            debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some
                            if (state.length === 0 || state.length - n < state.highWaterMark) {
                                doRead = true;
                                debug("length less than watermark", doRead);
                            } // however, if we've ended, then there's no point, and if we're already
                            // reading, then it's unnecessary.
                            if (state.ended || state.reading) {
                                doRead = false;
                                debug("reading or ended", doRead);
                            } else if (doRead) {
                                debug("do read");
                                state.reading = true;
                                state.sync = true; // if the length is currently zero, then we *need* a readable event.
                                if (state.length === 0) state.needReadable = true; // call internal read method
                                this._read(state.highWaterMark);
                                state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
                                // and we need to re-evaluate how much data we can return to the user.
                                if (!state.reading) n = howMuchToRead(nOrig, state);
                            }
                            var ret;
                            if (n > 0) ret = fromList(n, state);
                            else ret = null;
                            if (ret === null) {
                                state.needReadable = state.length <= state.highWaterMark;
                                n = 0;
                            } else {
                                state.length -= n;
                                state.awaitDrain = 0;
                            }
                            if (state.length === 0) {
                                // If we have nothing in the buffer, then we want to know
                                // as soon as we *do* get something into the buffer.
                                if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
                                if (nOrig !== n && state.ended) endReadable(this);
                            }
                            if (ret !== null) this.emit("data", ret);
                            return ret;
                        };
                        function onEofChunk(stream, state) {
                            debug("onEofChunk");
                            if (state.ended) return;
                            if (state.decoder) {
                                var chunk = state.decoder.end();
                                if (chunk && chunk.length) {
                                    state.buffer.push(chunk);
                                    state.length += state.objectMode ? 1 : chunk.length;
                                }
                            }
                            state.ended = true;
                            if (state.sync) // if we are sync, wait until next tick to emit the data.
                            // Otherwise we risk emitting data in the flow()
                            // the readable code triggers during a read() call
                            emitReadable(stream);
                            else {
                                // emit 'readable' now to make sure it gets picked up.
                                state.needReadable = false;
                                if (!state.emittedReadable) {
                                    state.emittedReadable = true;
                                    emitReadable_(stream);
                                }
                            }
                        } // Don't emit readable right away in sync mode, because this can trigger
                        // another read() call => stack overflow.  This way, it might trigger
                        // a nextTick recursion warning, but that's not so bad.
                        function emitReadable(stream) {
                            var state = stream._readableState;
                            debug("emitReadable", state.needReadable, state.emittedReadable);
                            state.needReadable = false;
                            if (!state.emittedReadable) {
                                debug("emitReadable", state.flowing);
                                state.emittedReadable = true;
                                process.nextTick(emitReadable_, stream);
                            }
                        }
                        function emitReadable_(stream) {
                            var state = stream._readableState;
                            debug("emitReadable_", state.destroyed, state.length, state.ended);
                            if (!state.destroyed && (state.length || state.ended)) {
                                stream.emit("readable");
                                state.emittedReadable = false;
                            } // The stream needs another readable event if
                            // 1. It is not flowing, as the flow mechanism will take
                            //    care of it.
                            // 2. It is not ended.
                            // 3. It is below the highWaterMark, so we can schedule
                            //    another readable later.
                            state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
                            flow(stream);
                        } // at this point, the user has presumably seen the 'readable' event,
                        // and called read() to consume some data.  that may have triggered
                        // in turn another _read(n) call, in which case reading = true if
                        // it's in progress.
                        // However, if we're not ended, or reading, and the length < hwm,
                        // then go ahead and try to read some more preemptively.
                        function maybeReadMore(stream, state) {
                            if (!state.readingMore) {
                                state.readingMore = true;
                                process.nextTick(maybeReadMore_, stream, state);
                            }
                        }
                        function maybeReadMore_(stream, state) {
                            // Attempt to read more data if we should.
                            //
                            // The conditions for reading more data are (one of):
                            // - Not enough data buffered (state.length < state.highWaterMark). The loop
                            //   is responsible for filling the buffer with enough data if such data
                            //   is available. If highWaterMark is 0 and we are not in the flowing mode
                            //   we should _not_ attempt to buffer any extra data. We'll get more data
                            //   when the stream consumer calls read() instead.
                            // - No data in the buffer, and the stream is in flowing mode. In this mode
                            //   the loop below is responsible for ensuring read() is called. Failing to
                            //   call read here would abort the flow and there's no other mechanism for
                            //   continuing the flow if the stream consumer has just subscribed to the
                            //   'data' event.
                            //
                            // In addition to the above conditions to keep reading data, the following
                            // conditions prevent the data from being read:
                            // - The stream has ended (state.ended).
                            // - There is already a pending 'read' operation (state.reading). This is a
                            //   case where the the stream has called the implementation defined _read()
                            //   method, but they are processing the call asynchronously and have _not_
                            //   called push() with new data. In this case we skip performing more
                            //   read()s. The execution ends in this method again after the _read() ends
                            //   up calling push() with more data.
                            while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
                                var len = state.length;
                                debug("maybeReadMore read 0");
                                stream.read(0);
                                if (len === state.length) break;
                            }
                            state.readingMore = false;
                        } // abstract method.  to be overridden in specific implementation classes.
                        // call cb(er, data) where data is <= n in length.
                        // for virtual (non-string, non-buffer) streams, "length" is somewhat
                        // arbitrary, and perhaps not very meaningful.
                        Readable.prototype._read = function(n) {
                            errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
                        };
                        Readable.prototype.pipe = function(dest, pipeOpts) {
                            var src = this;
                            var state = this._readableState;
                            switch(state.pipesCount){
                                case 0:
                                    state.pipes = dest;
                                    break;
                                case 1:
                                    state.pipes = [
                                        state.pipes,
                                        dest
                                    ];
                                    break;
                                default:
                                    state.pipes.push(dest);
                                    break;
                            }
                            state.pipesCount += 1;
                            debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
                            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
                            var endFn = doEnd ? onend : unpipe;
                            if (state.endEmitted) process.nextTick(endFn);
                            else src.once("end", endFn);
                            dest.on("unpipe", onunpipe);
                            function onunpipe(readable, unpipeInfo) {
                                debug("onunpipe");
                                if (readable === src) {
                                    if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                                        unpipeInfo.hasUnpiped = true;
                                        cleanup();
                                    }
                                }
                            }
                            function onend() {
                                debug("onend");
                                dest.end();
                            } // when the dest drains, it reduces the awaitDrain counter
                            // on the source.  This would be more elegant with a .once()
                            // handler in flow(), but adding and removing repeatedly is
                            // too slow.
                            var ondrain = pipeOnDrain(src);
                            dest.on("drain", ondrain);
                            var cleanedUp = false;
                            function cleanup() {
                                debug("cleanup"); // cleanup event handlers once the pipe is broken
                                dest.removeListener("close", onclose);
                                dest.removeListener("finish", onfinish);
                                dest.removeListener("drain", ondrain);
                                dest.removeListener("error", onerror);
                                dest.removeListener("unpipe", onunpipe);
                                src.removeListener("end", onend);
                                src.removeListener("end", unpipe);
                                src.removeListener("data", ondata);
                                cleanedUp = true; // if the reader is waiting for a drain event from this
                                // specific writer, then it would cause it to never start
                                // flowing again.
                                // So, if this is awaiting a drain, then we just call it now.
                                // If we don't know, then assume that we are waiting for one.
                                if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
                            }
                            src.on("data", ondata);
                            function ondata(chunk) {
                                debug("ondata");
                                var ret = dest.write(chunk);
                                debug("dest.write", ret);
                                if (ret === false) {
                                    // If the user unpiped during `dest.write()`, it is possible
                                    // to get stuck in a permanently paused state if that write
                                    // also returned false.
                                    // => Check whether `dest` is still a piping destination.
                                    if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                                        debug("false write response, pause", state.awaitDrain);
                                        state.awaitDrain++;
                                    }
                                    src.pause();
                                }
                            } // if the dest has an error, then stop piping into it.
                            // however, don't suppress the throwing behavior for this.
                            function onerror(er) {
                                debug("onerror", er);
                                unpipe();
                                dest.removeListener("error", onerror);
                                if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
                            } // Make sure our error handler is attached before userland ones.
                            prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.
                            function onclose() {
                                dest.removeListener("finish", onfinish);
                                unpipe();
                            }
                            dest.once("close", onclose);
                            function onfinish() {
                                debug("onfinish");
                                dest.removeListener("close", onclose);
                                unpipe();
                            }
                            dest.once("finish", onfinish);
                            function unpipe() {
                                debug("unpipe");
                                src.unpipe(dest);
                            } // tell the dest that it's being piped to
                            dest.emit("pipe", src); // start the flow if it hasn't been started already.
                            if (!state.flowing) {
                                debug("pipe resume");
                                src.resume();
                            }
                            return dest;
                        };
                        function pipeOnDrain(src) {
                            return function pipeOnDrainFunctionResult() {
                                var state = src._readableState;
                                debug("pipeOnDrain", state.awaitDrain);
                                if (state.awaitDrain) state.awaitDrain--;
                                if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
                                    state.flowing = true;
                                    flow(src);
                                }
                            };
                        }
                        Readable.prototype.unpipe = function(dest) {
                            var state = this._readableState;
                            var unpipeInfo = {
                                hasUnpiped: false
                            }; // if we're not piping anywhere, then do nothing.
                            if (state.pipesCount === 0) return this; // just one destination.  most common case.
                            if (state.pipesCount === 1) {
                                // passed in one, but it's not the right one.
                                if (dest && dest !== state.pipes) return this;
                                if (!dest) dest = state.pipes; // got a match.
                                state.pipes = null;
                                state.pipesCount = 0;
                                state.flowing = false;
                                if (dest) dest.emit("unpipe", this, unpipeInfo);
                                return this;
                            } // slow case. multiple pipe destinations.
                            if (!dest) {
                                // remove all.
                                var dests = state.pipes;
                                var len = state.pipesCount;
                                state.pipes = null;
                                state.pipesCount = 0;
                                state.flowing = false;
                                for(var i = 0; i < len; i++)dests[i].emit("unpipe", this, {
                                    hasUnpiped: false
                                });
                                return this;
                            } // try to find the right one.
                            var index = indexOf(state.pipes, dest);
                            if (index === -1) return this;
                            state.pipes.splice(index, 1);
                            state.pipesCount -= 1;
                            if (state.pipesCount === 1) state.pipes = state.pipes[0];
                            dest.emit("unpipe", this, unpipeInfo);
                            return this;
                        }; // set up data events if they are asked for
                        // Ensure readable listeners eventually get something
                        Readable.prototype.on = function(ev, fn) {
                            var res = Stream.prototype.on.call(this, ev, fn);
                            var state = this._readableState;
                            if (ev === "data") {
                                // update readableListening so that resume() may be a no-op
                                // a few lines down. This is needed to support once('readable').
                                state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused
                                if (state.flowing !== false) this.resume();
                            } else if (ev === "readable") {
                                if (!state.endEmitted && !state.readableListening) {
                                    state.readableListening = state.needReadable = true;
                                    state.flowing = false;
                                    state.emittedReadable = false;
                                    debug("on readable", state.length, state.reading);
                                    if (state.length) emitReadable(this);
                                    else if (!state.reading) process.nextTick(nReadingNextTick, this);
                                }
                            }
                            return res;
                        };
                        Readable.prototype.addListener = Readable.prototype.on;
                        Readable.prototype.removeListener = function(ev, fn) {
                            var res = Stream.prototype.removeListener.call(this, ev, fn);
                            if (ev === "readable") // We need to check if there is someone still listening to
                            // readable and reset the state. However this needs to happen
                            // after readable has been emitted but before I/O (nextTick) to
                            // support once('readable', fn) cycles. This means that calling
                            // resume within the same tick will have no
                            // effect.
                            process.nextTick(updateReadableListening, this);
                            return res;
                        };
                        Readable.prototype.removeAllListeners = function(ev) {
                            var res = Stream.prototype.removeAllListeners.apply(this, arguments);
                            if (ev === "readable" || ev === undefined) // We need to check if there is someone still listening to
                            // readable and reset the state. However this needs to happen
                            // after readable has been emitted but before I/O (nextTick) to
                            // support once('readable', fn) cycles. This means that calling
                            // resume within the same tick will have no
                            // effect.
                            process.nextTick(updateReadableListening, this);
                            return res;
                        };
                        function updateReadableListening(self) {
                            var state = self._readableState;
                            state.readableListening = self.listenerCount("readable") > 0;
                            if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
                            // the upcoming resume will not flow.
                            state.flowing = true; // crude way to check if we should resume
                            else if (self.listenerCount("data") > 0) self.resume();
                        }
                        function nReadingNextTick(self) {
                            debug("readable nexttick read 0");
                            self.read(0);
                        } // pause() and resume() are remnants of the legacy readable stream API
                        // If the user uses them, then switch into old mode.
                        Readable.prototype.resume = function() {
                            var state = this._readableState;
                            if (!state.flowing) {
                                debug("resume"); // we flow only if there is no one listening
                                // for readable, but we still have to call
                                // resume()
                                state.flowing = !state.readableListening;
                                resume(this, state);
                            }
                            state.paused = false;
                            return this;
                        };
                        function resume(stream, state) {
                            if (!state.resumeScheduled) {
                                state.resumeScheduled = true;
                                process.nextTick(resume_, stream, state);
                            }
                        }
                        function resume_(stream, state) {
                            debug("resume", state.reading);
                            if (!state.reading) stream.read(0);
                            state.resumeScheduled = false;
                            stream.emit("resume");
                            flow(stream);
                            if (state.flowing && !state.reading) stream.read(0);
                        }
                        Readable.prototype.pause = function() {
                            debug("call pause flowing=%j", this._readableState.flowing);
                            if (this._readableState.flowing !== false) {
                                debug("pause");
                                this._readableState.flowing = false;
                                this.emit("pause");
                            }
                            this._readableState.paused = true;
                            return this;
                        };
                        function flow(stream) {
                            var state = stream._readableState;
                            debug("flow", state.flowing);
                            while(state.flowing && stream.read() !== null);
                        } // wrap an old-style stream as the async data source.
                        // This is *not* part of the readable stream interface.
                        // It is an ugly unfortunate mess of history.
                        Readable.prototype.wrap = function(stream) {
                            var _this = this;
                            var state = this._readableState;
                            var paused = false;
                            stream.on("end", function() {
                                debug("wrapped end");
                                if (state.decoder && !state.ended) {
                                    var chunk = state.decoder.end();
                                    if (chunk && chunk.length) _this.push(chunk);
                                }
                                _this.push(null);
                            });
                            stream.on("data", function(chunk) {
                                debug("wrapped data");
                                if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
                                if (state.objectMode && (chunk === null || chunk === undefined)) return;
                                else if (!state.objectMode && (!chunk || !chunk.length)) return;
                                var ret = _this.push(chunk);
                                if (!ret) {
                                    paused = true;
                                    stream.pause();
                                }
                            }); // proxy all the other methods.
                            // important when wrapping filters and duplexes.
                            for(var i in stream)if (this[i] === undefined && typeof stream[i] === "function") this[i] = function methodWrap(method) {
                                return function methodWrapReturnFunction() {
                                    return stream[method].apply(stream, arguments);
                                };
                            }(i);
                             // proxy certain important events.
                            for(var n2 = 0; n2 < kProxyEvents.length; n2++)stream.on(kProxyEvents[n2], this.emit.bind(this, kProxyEvents[n2]));
                             // when we try to consume some more bytes, simply unpause the
                            // underlying stream.
                            this._read = function(n) {
                                debug("wrapped _read", n);
                                if (paused) {
                                    paused = false;
                                    stream.resume();
                                }
                            };
                            return this;
                        };
                        if (typeof Symbol === "function") Readable.prototype[Symbol.asyncIterator] = function() {
                            if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require("./internal/streams/async_iterator");
                            return createReadableStreamAsyncIterator(this);
                        };
                        Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._readableState.highWaterMark;
                            }
                        });
                        Object.defineProperty(Readable.prototype, "readableBuffer", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._readableState && this._readableState.buffer;
                            }
                        });
                        Object.defineProperty(Readable.prototype, "readableFlowing", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._readableState.flowing;
                            },
                            set: function set(state) {
                                if (this._readableState) this._readableState.flowing = state;
                            }
                        }); // exposed for testing purposes only.
                        Readable._fromList = fromList;
                        Object.defineProperty(Readable.prototype, "readableLength", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._readableState.length;
                            }
                        }); // Pluck off n bytes from an array of buffers.
                        // Length is the combined lengths of all the buffers in the list.
                        // This function is designed to be inlinable, so please take care when making
                        // changes to the function body.
                        function fromList(n, state) {
                            // nothing buffered
                            if (state.length === 0) return null;
                            var ret;
                            if (state.objectMode) ret = state.buffer.shift();
                            else if (!n || n >= state.length) {
                                // read it all, truncate the list
                                if (state.decoder) ret = state.buffer.join("");
                                else if (state.buffer.length === 1) ret = state.buffer.first();
                                else ret = state.buffer.concat(state.length);
                                state.buffer.clear();
                            } else // read part of list
                            ret = state.buffer.consume(n, state.decoder);
                            return ret;
                        }
                        function endReadable(stream) {
                            var state = stream._readableState;
                            debug("endReadable", state.endEmitted);
                            if (!state.endEmitted) {
                                state.ended = true;
                                process.nextTick(endReadableNT, state, stream);
                            }
                        }
                        function endReadableNT(state, stream) {
                            debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.
                            if (!state.endEmitted && state.length === 0) {
                                state.endEmitted = true;
                                stream.readable = false;
                                stream.emit("end");
                                if (state.autoDestroy) {
                                    // In case of duplex streams we need a way to detect
                                    // if the writable side is ready for autoDestroy as well
                                    var wState = stream._writableState;
                                    if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
                                }
                            }
                        }
                        if (typeof Symbol === "function") Readable.from = function(iterable, opts) {
                            if (from === undefined) from = require("./internal/streams/from");
                            return from(Readable, iterable, opts);
                        };
                        function indexOf(xs, x) {
                            for(var i = 0, l = xs.length; i < l; i++){
                                if (xs[i] === x) return i;
                            }
                            return -1;
                        }
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "../errors": 47,
                "./_stream_duplex": 48,
                "./internal/streams/async_iterator": 53,
                "./internal/streams/buffer_list": 54,
                "./internal/streams/destroy": 55,
                "./internal/streams/from": 57,
                "./internal/streams/state": 59,
                "./internal/streams/stream": 60,
                "_process": 163,
                "buffer": 63,
                "events": 103,
                "inherits": 143,
                "string_decoder/": 199,
                "util": 224
            }
        ],
        51: [
            function(require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                // a transform stream is a readable/writable stream where you do
                // something with the data.  Sometimes it's called a "filter",
                // but that's not a great name for it, since that implies a thing where
                // some bits pass through, and others are simply ignored.  (That would
                // be a valid example of a transform, of course.)
                //
                // While the output is causally related to the input, it's not a
                // necessarily symmetric or synchronous transformation.  For example,
                // a zlib stream might take multiple plain-text writes(), and then
                // emit a single compressed chunk some time in the future.
                //
                // Here's how this works:
                //
                // The Transform stream has all the aspects of the readable and writable
                // stream classes.  When you write(chunk), that calls _write(chunk,cb)
                // internally, and returns false if there's a lot of pending writes
                // buffered up.  When you call read(), that calls _read(n) until
                // there's enough pending readable data buffered up.
                //
                // In a transform stream, the written data is placed in a buffer.  When
                // _read(n) is called, it transforms the queued up data, calling the
                // buffered _write cb's as it consumes chunks.  If consuming a single
                // written chunk would result in multiple output chunks, then the first
                // outputted bit calls the readcb, and subsequent chunks just go into
                // the read buffer, and will cause it to emit 'readable' if necessary.
                //
                // This way, back-pressure is actually determined by the reading side,
                // since _read has to be called to start processing a new chunk.  However,
                // a pathological inflate type of transform can cause excessive buffering
                // here.  For example, imagine a stream where every byte of input is
                // interpreted as an integer from 0-255, and then results in that many
                // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
                // 1kb of data being output.  In this case, you could write a very small
                // amount of input, and end up with a very large amount of output.  In
                // such a pathological inflating mechanism, there'd be no way to tell
                // the system to stop doing the transform.  A single 4MB write could
                // cause the system to run out of memory.
                //
                // However, even in such a pathological case, only a single written chunk
                // would be consumed, and then the rest would wait (un-transformed) until
                // the results of the previous transformed chunk were consumed.
                "use strict";
                module.exports = Transform;
                var _require$codes = require("../errors").codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
                var Duplex = require("./_stream_duplex");
                require("inherits")(Transform, Duplex);
                function afterTransform(er, data) {
                    var ts = this._transformState;
                    ts.transforming = false;
                    var cb = ts.writecb;
                    if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
                    ts.writechunk = null;
                    ts.writecb = null;
                    if (data != null) this.push(data);
                    cb(er);
                    var rs = this._readableState;
                    rs.reading = false;
                    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                }
                function Transform(options) {
                    if (!(this instanceof Transform)) return new Transform(options);
                    Duplex.call(this, options);
                    this._transformState = {
                        afterTransform: afterTransform.bind(this),
                        needTransform: false,
                        transforming: false,
                        writecb: null,
                        writechunk: null,
                        writeencoding: null
                    }; // start out asking for a readable event once data is transformed.
                    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
                    // that Readable wants before the first _read call, so unset the
                    // sync guard flag.
                    this._readableState.sync = false;
                    if (options) {
                        if (typeof options.transform === "function") this._transform = options.transform;
                        if (typeof options.flush === "function") this._flush = options.flush;
                    } // When the writable side finishes, then flush out anything remaining.
                    this.on("prefinish", prefinish);
                }
                function prefinish() {
                    var _this = this;
                    if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
                        done(_this, er, data);
                    });
                    else done(this, null, null);
                }
                Transform.prototype.push = function(chunk, encoding) {
                    this._transformState.needTransform = false;
                    return Duplex.prototype.push.call(this, chunk, encoding);
                }; // This is the part where you do stuff!
                // override this function in implementation classes.
                // 'chunk' is an input chunk.
                //
                // Call `push(newChunk)` to pass along transformed output
                // to the readable side.  You may call 'push' zero or more times.
                //
                // Call `cb(err)` when you are done with this chunk.  If you pass
                // an error, then that'll put the hurt on the whole operation.  If you
                // never call cb(), then you'll never get another chunk.
                Transform.prototype._transform = function(chunk, encoding, cb) {
                    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
                };
                Transform.prototype._write = function(chunk, encoding, cb) {
                    var ts = this._transformState;
                    ts.writecb = cb;
                    ts.writechunk = chunk;
                    ts.writeencoding = encoding;
                    if (!ts.transforming) {
                        var rs = this._readableState;
                        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
                    }
                }; // Doesn't matter what the args are here.
                // _transform does all the work.
                // That we got here means that the readable side wants more data.
                Transform.prototype._read = function(n) {
                    var ts = this._transformState;
                    if (ts.writechunk !== null && !ts.transforming) {
                        ts.transforming = true;
                        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
                    } else // mark that we need a transform, so that any data that comes in
                    // will get processed, now that we've asked for it.
                    ts.needTransform = true;
                };
                Transform.prototype._destroy = function(err, cb) {
                    Duplex.prototype._destroy.call(this, err, function(err2) {
                        cb(err2);
                    });
                };
                function done(stream, er, data) {
                    if (er) return stream.emit("error", er);
                    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
                    // if there's nothing in the write buffer, then that means
                    // that nothing more will ever be provided
                    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
                    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
                    return stream.push(null);
                }
            },
            {
                "../errors": 47,
                "./_stream_duplex": 48,
                "inherits": 143
            }
        ],
        52: [
            function(require, module, exports) {
                (function(process, global) {
                    (function() {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.
                        // A bit simpler than readable streams.
                        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
                        // the drain event emission and buffering.
                        "use strict";
                        module.exports = Writable;
                        /* <replacement> */ function WriteReq(chunk, encoding, cb) {
                            this.chunk = chunk;
                            this.encoding = encoding;
                            this.callback = cb;
                            this.next = null;
                        } // It seems a linked list but it is not
                        // there will be only 2 of these for each stream
                        function CorkedRequest(state) {
                            var _this = this;
                            this.next = null;
                            this.entry = null;
                            this.finish = function() {
                                onCorkedFinish(_this, state);
                            };
                        }
                        /* </replacement> */ /*<replacement>*/ var Duplex;
                        /*</replacement>*/ Writable.WritableState = WritableState;
                        /*<replacement>*/ var internalUtil = {
                            deprecate: require("util-deprecate")
                        };
                        /*</replacement>*/ /*<replacement>*/ var Stream = require("./internal/streams/stream");
                        /*</replacement>*/ var Buffer = require("buffer").Buffer;
                        var OurUint8Array = global.Uint8Array || function() {};
                        function _uint8ArrayToBuffer(chunk) {
                            return Buffer.from(chunk);
                        }
                        function _isUint8Array(obj) {
                            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
                        }
                        var destroyImpl = require("./internal/streams/destroy");
                        var _require = require("./internal/streams/state"), getHighWaterMark = _require.getHighWaterMark;
                        var _require$codes = require("../errors").codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
                        var errorOrDestroy = destroyImpl.errorOrDestroy;
                        require("inherits")(Writable, Stream);
                        function nop() {}
                        function WritableState(options, stream, isDuplex) {
                            Duplex = Duplex || require("./_stream_duplex");
                            options = options || {}; // Duplex streams are both readable and writable, but share
                            // the same options object.
                            // However, some cases require setting options to different
                            // values for the readable and the writable sides of the duplex stream,
                            // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
                            if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
                            // contains buffers or objects.
                            this.objectMode = !!options.objectMode;
                            if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
                            // Note: 0 is a valid value, means that we always return false if
                            // the entire buffer is not flushed immediately on write()
                            this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called
                            this.finalCalled = false; // drain event flag.
                            this.needDrain = false; // at the start of calling end()
                            this.ending = false; // when end() has been called, and returned
                            this.ended = false; // when 'finish' is emitted
                            this.finished = false; // has it been destroyed
                            this.destroyed = false; // should we decode strings into buffers before passing to _write?
                            // this is here so that some node-core streams can optimize string
                            // handling at a lower level.
                            var noDecode = options.decodeStrings === false;
                            this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
                            // encoding is 'binary' so we have to make this configurable.
                            // Everything else in the universe uses 'utf8', though.
                            this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
                            // of how much we're waiting to get pushed to some underlying
                            // socket or file.
                            this.length = 0; // a flag to see when we're in the middle of a write.
                            this.writing = false; // when true all writes will be buffered until .uncork() call
                            this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
                            // or on a later tick.  We set this to true at first, because any
                            // actions that shouldn't happen until "later" should generally also
                            // not happen before the first write call.
                            this.sync = true; // a flag to know if we're processing previously buffered items, which
                            // may call the _write() callback in the same tick, so that we don't
                            // end up in an overlapped onwrite situation.
                            this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
                            this.onwrite = function(er) {
                                onwrite(stream, er);
                            }; // the callback that the user supplies to write(chunk,encoding,cb)
                            this.writecb = null; // the amount that is being written when _write is called.
                            this.writelen = 0;
                            this.bufferedRequest = null;
                            this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
                            // this must be 0 before 'finish' can be emitted
                            this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
                            // This is relevant for synchronous Transform streams
                            this.prefinished = false; // True if the error was already emitted and should not be thrown again
                            this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
                            this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
                            this.autoDestroy = !!options.autoDestroy; // count buffered requests
                            this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
                            // one allocated and free to use, and we maintain at most two
                            this.corkedRequestsFree = new CorkedRequest(this);
                        }
                        WritableState.prototype.getBuffer = function getBuffer() {
                            var current = this.bufferedRequest;
                            var out = [];
                            while(current){
                                out.push(current);
                                current = current.next;
                            }
                            return out;
                        };
                        (function() {
                            try {
                                Object.defineProperty(WritableState.prototype, "buffer", {
                                    get: internalUtil.deprecate(function writableStateBufferGetter() {
                                        return this.getBuffer();
                                    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
                                });
                            } catch (_) {}
                        })(); // Test _writableState for inheritance to account for Duplex streams,
                        // whose prototype chain only points to Readable.
                        var realHasInstance;
                        if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
                            realHasInstance = Function.prototype[Symbol.hasInstance];
                            Object.defineProperty(Writable, Symbol.hasInstance, {
                                value: function value(object) {
                                    if (realHasInstance.call(this, object)) return true;
                                    if (this !== Writable) return false;
                                    return object && object._writableState instanceof WritableState;
                                }
                            });
                        } else realHasInstance = function realHasInstance(object) {
                            return object instanceof this;
                        };
                        function Writable(options) {
                            Duplex = Duplex || require("./_stream_duplex"); // Writable ctor is applied to Duplexes, too.
                            // `realHasInstance` is necessary because using plain `instanceof`
                            // would return false, as no `_writableState` property is attached.
                            // Trying to use the custom `instanceof` for Writable here will also break the
                            // Node.js LazyTransform implementation, which has a non-trivial getter for
                            // `_writableState` that would lead to infinite recursion.
                            // Checking for a Stream.Duplex instance is faster here instead of inside
                            // the WritableState constructor, at least with V8 6.5
                            var isDuplex = this instanceof Duplex;
                            if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
                            this._writableState = new WritableState(options, this, isDuplex); // legacy.
                            this.writable = true;
                            if (options) {
                                if (typeof options.write === "function") this._write = options.write;
                                if (typeof options.writev === "function") this._writev = options.writev;
                                if (typeof options.destroy === "function") this._destroy = options.destroy;
                                if (typeof options["final"] === "function") this._final = options["final"];
                            }
                            Stream.call(this);
                        } // Otherwise people can pipe Writable streams, which is just wrong.
                        Writable.prototype.pipe = function() {
                            errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
                        };
                        function writeAfterEnd(stream, cb) {
                            var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
                            errorOrDestroy(stream, er);
                            process.nextTick(cb, er);
                        } // Checks that a user-supplied chunk is valid, especially for the particular
                        // mode the stream is in. Currently this means that `null` is never accepted
                        // and undefined/non-string values are only allowed in object mode.
                        function validChunk(stream, state, chunk, cb) {
                            var er;
                            if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
                            else if (typeof chunk !== "string" && !state.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", [
                                "string",
                                "Buffer"
                            ], chunk);
                            if (er) {
                                errorOrDestroy(stream, er);
                                process.nextTick(cb, er);
                                return false;
                            }
                            return true;
                        }
                        Writable.prototype.write = function(chunk, encoding, cb) {
                            var state = this._writableState;
                            var ret = false;
                            var isBuf = !state.objectMode && _isUint8Array(chunk);
                            if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
                            if (typeof encoding === "function") {
                                cb = encoding;
                                encoding = null;
                            }
                            if (isBuf) encoding = "buffer";
                            else if (!encoding) encoding = state.defaultEncoding;
                            if (typeof cb !== "function") cb = nop;
                            if (state.ending) writeAfterEnd(this, cb);
                            else if (isBuf || validChunk(this, state, chunk, cb)) {
                                state.pendingcb++;
                                ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
                            }
                            return ret;
                        };
                        Writable.prototype.cork = function() {
                            this._writableState.corked++;
                        };
                        Writable.prototype.uncork = function() {
                            var state = this._writableState;
                            if (state.corked) {
                                state.corked--;
                                if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
                            }
                        };
                        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
                            // node::ParseEncoding() requires lower case.
                            if (typeof encoding === "string") encoding = encoding.toLowerCase();
                            if (!([
                                "hex",
                                "utf8",
                                "utf-8",
                                "ascii",
                                "binary",
                                "base64",
                                "ucs2",
                                "ucs-2",
                                "utf16le",
                                "utf-16le",
                                "raw"
                            ].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
                            this._writableState.defaultEncoding = encoding;
                            return this;
                        };
                        Object.defineProperty(Writable.prototype, "writableBuffer", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._writableState && this._writableState.getBuffer();
                            }
                        });
                        function decodeChunk(state, chunk, encoding) {
                            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") chunk = Buffer.from(chunk, encoding);
                            return chunk;
                        }
                        Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._writableState.highWaterMark;
                            }
                        }); // if we're already writing something, then just put this
                        // in the queue, and wait our turn.  Otherwise, call _write
                        // If we return false, then we need a drain event, so set that flag.
                        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
                            if (!isBuf) {
                                var newChunk = decodeChunk(state, chunk, encoding);
                                if (chunk !== newChunk) {
                                    isBuf = true;
                                    encoding = "buffer";
                                    chunk = newChunk;
                                }
                            }
                            var len = state.objectMode ? 1 : chunk.length;
                            state.length += len;
                            var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
                            if (!ret) state.needDrain = true;
                            if (state.writing || state.corked) {
                                var last = state.lastBufferedRequest;
                                state.lastBufferedRequest = {
                                    chunk: chunk,
                                    encoding: encoding,
                                    isBuf: isBuf,
                                    callback: cb,
                                    next: null
                                };
                                if (last) last.next = state.lastBufferedRequest;
                                else state.bufferedRequest = state.lastBufferedRequest;
                                state.bufferedRequestCount += 1;
                            } else doWrite(stream, state, false, len, chunk, encoding, cb);
                            return ret;
                        }
                        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
                            state.writelen = len;
                            state.writecb = cb;
                            state.writing = true;
                            state.sync = true;
                            if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
                            else if (writev) stream._writev(chunk, state.onwrite);
                            else stream._write(chunk, encoding, state.onwrite);
                            state.sync = false;
                        }
                        function onwriteError(stream, state, sync, er, cb) {
                            --state.pendingcb;
                            if (sync) {
                                // defer the callback if we are being called synchronously
                                // to avoid piling up things on the stack
                                process.nextTick(cb, er); // this can emit finish, and it will always happen
                                // after error
                                process.nextTick(finishMaybe, stream, state);
                                stream._writableState.errorEmitted = true;
                                errorOrDestroy(stream, er);
                            } else {
                                // the caller expect this to happen before if
                                // it is async
                                cb(er);
                                stream._writableState.errorEmitted = true;
                                errorOrDestroy(stream, er); // this can emit finish, but finish must
                                // always follow error
                                finishMaybe(stream, state);
                            }
                        }
                        function onwriteStateUpdate(state) {
                            state.writing = false;
                            state.writecb = null;
                            state.length -= state.writelen;
                            state.writelen = 0;
                        }
                        function onwrite(stream, er) {
                            var state = stream._writableState;
                            var sync = state.sync;
                            var cb = state.writecb;
                            if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
                            onwriteStateUpdate(state);
                            if (er) onwriteError(stream, state, sync, er, cb);
                            else {
                                // Check if we're actually ready to finish, but don't emit yet
                                var finished = needFinish(state) || stream.destroyed;
                                if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
                                if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
                                else afterWrite(stream, state, finished, cb);
                            }
                        }
                        function afterWrite(stream, state, finished, cb) {
                            if (!finished) onwriteDrain(stream, state);
                            state.pendingcb--;
                            cb();
                            finishMaybe(stream, state);
                        } // Must force callback to be called on nextTick, so that we don't
                        // emit 'drain' before the write() consumer gets the 'false' return
                        // value, and has a chance to attach a 'drain' listener.
                        function onwriteDrain(stream, state) {
                            if (state.length === 0 && state.needDrain) {
                                state.needDrain = false;
                                stream.emit("drain");
                            }
                        } // if there's something in the buffer waiting, then process it
                        function clearBuffer(stream, state) {
                            state.bufferProcessing = true;
                            var entry = state.bufferedRequest;
                            if (stream._writev && entry && entry.next) {
                                // Fast case, write everything using _writev()
                                var l = state.bufferedRequestCount;
                                var buffer = new Array(l);
                                var holder = state.corkedRequestsFree;
                                holder.entry = entry;
                                var count = 0;
                                var allBuffers = true;
                                while(entry){
                                    buffer[count] = entry;
                                    if (!entry.isBuf) allBuffers = false;
                                    entry = entry.next;
                                    count += 1;
                                }
                                buffer.allBuffers = allBuffers;
                                doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
                                // as the hot path ends with doWrite
                                state.pendingcb++;
                                state.lastBufferedRequest = null;
                                if (holder.next) {
                                    state.corkedRequestsFree = holder.next;
                                    holder.next = null;
                                } else state.corkedRequestsFree = new CorkedRequest(state);
                                state.bufferedRequestCount = 0;
                            } else {
                                // Slow case, write chunks one-by-one
                                while(entry){
                                    var chunk = entry.chunk;
                                    var encoding = entry.encoding;
                                    var cb = entry.callback;
                                    var len = state.objectMode ? 1 : chunk.length;
                                    doWrite(stream, state, false, len, chunk, encoding, cb);
                                    entry = entry.next;
                                    state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
                                    // it means that we need to wait until it does.
                                    // also, that means that the chunk and cb are currently
                                    // being processed, so move the buffer counter past them.
                                    if (state.writing) break;
                                }
                                if (entry === null) state.lastBufferedRequest = null;
                            }
                            state.bufferedRequest = entry;
                            state.bufferProcessing = false;
                        }
                        Writable.prototype._write = function(chunk, encoding, cb) {
                            cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
                        };
                        Writable.prototype._writev = null;
                        Writable.prototype.end = function(chunk, encoding, cb) {
                            var state = this._writableState;
                            if (typeof chunk === "function") {
                                cb = chunk;
                                chunk = null;
                                encoding = null;
                            } else if (typeof encoding === "function") {
                                cb = encoding;
                                encoding = null;
                            }
                            if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
                            if (state.corked) {
                                state.corked = 1;
                                this.uncork();
                            } // ignore unnecessary end() calls.
                            if (!state.ending) endWritable(this, state, cb);
                            return this;
                        };
                        Object.defineProperty(Writable.prototype, "writableLength", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                return this._writableState.length;
                            }
                        });
                        function needFinish(state) {
                            return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
                        }
                        function callFinal(stream, state) {
                            stream._final(function(err) {
                                state.pendingcb--;
                                if (err) errorOrDestroy(stream, err);
                                state.prefinished = true;
                                stream.emit("prefinish");
                                finishMaybe(stream, state);
                            });
                        }
                        function prefinish(stream, state) {
                            if (!state.prefinished && !state.finalCalled) {
                                if (typeof stream._final === "function" && !state.destroyed) {
                                    state.pendingcb++;
                                    state.finalCalled = true;
                                    process.nextTick(callFinal, stream, state);
                                } else {
                                    state.prefinished = true;
                                    stream.emit("prefinish");
                                }
                            }
                        }
                        function finishMaybe(stream, state) {
                            var need = needFinish(state);
                            if (need) {
                                prefinish(stream, state);
                                if (state.pendingcb === 0) {
                                    state.finished = true;
                                    stream.emit("finish");
                                    if (state.autoDestroy) {
                                        // In case of duplex streams we need a way to detect
                                        // if the readable side is ready for autoDestroy as well
                                        var rState = stream._readableState;
                                        if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
                                    }
                                }
                            }
                            return need;
                        }
                        function endWritable(stream, state, cb) {
                            state.ending = true;
                            finishMaybe(stream, state);
                            if (cb) {
                                if (state.finished) process.nextTick(cb);
                                else stream.once("finish", cb);
                            }
                            state.ended = true;
                            stream.writable = false;
                        }
                        function onCorkedFinish(corkReq, state, err) {
                            var entry = corkReq.entry;
                            corkReq.entry = null;
                            while(entry){
                                var cb = entry.callback;
                                state.pendingcb--;
                                cb(err);
                                entry = entry.next;
                            } // reuse the free corkReq.
                            state.corkedRequestsFree.next = corkReq;
                        }
                        Object.defineProperty(Writable.prototype, "destroyed", {
                            // making it explicit this property is not enumerable
                            // because otherwise some prototype manipulation in
                            // userland will fail
                            enumerable: false,
                            get: function get() {
                                if (this._writableState === undefined) return false;
                                return this._writableState.destroyed;
                            },
                            set: function set(value) {
                                // we ignore the value if the stream
                                // has not been initialized yet
                                if (!this._writableState) return;
                                 // backward compatibility, the user is explicitly
                                // managing destroyed
                                this._writableState.destroyed = value;
                            }
                        });
                        Writable.prototype.destroy = destroyImpl.destroy;
                        Writable.prototype._undestroy = destroyImpl.undestroy;
                        Writable.prototype._destroy = function(err, cb) {
                            cb(err);
                        };
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "../errors": 47,
                "./_stream_duplex": 48,
                "./internal/streams/destroy": 55,
                "./internal/streams/state": 59,
                "./internal/streams/stream": 60,
                "_process": 163,
                "buffer": 63,
                "inherits": 143,
                "util-deprecate": 200
            }
        ],
        53: [
            function(require, module, exports) {
                (function(process) {
                    (function() {
                        "use strict";
                        var _Object$setPrototypeO;
                        function _defineProperty(obj, key, value) {
                            if (key in obj) Object.defineProperty(obj, key, {
                                value: value,
                                enumerable: true,
                                configurable: true,
                                writable: true
                            });
                            else obj[key] = value;
                            return obj;
                        }
                        var finished = require("./end-of-stream");
                        var kLastResolve = Symbol("lastResolve");
                        var kLastReject = Symbol("lastReject");
                        var kError = Symbol("error");
                        var kEnded = Symbol("ended");
                        var kLastPromise = Symbol("lastPromise");
                        var kHandlePromise = Symbol("handlePromise");
                        var kStream = Symbol("stream");
                        function createIterResult(value, done) {
                            return {
                                value: value,
                                done: done
                            };
                        }
                        function readAndResolve(iter) {
                            var resolve = iter[kLastResolve];
                            if (resolve !== null) {
                                var data = iter[kStream].read(); // we defer if data is null
                                // we can be expecting either 'end' or
                                // 'error'
                                if (data !== null) {
                                    iter[kLastPromise] = null;
                                    iter[kLastResolve] = null;
                                    iter[kLastReject] = null;
                                    resolve(createIterResult(data, false));
                                }
                            }
                        }
                        function onReadable(iter) {
                            // we wait for the next tick, because it might
                            // emit an error with process.nextTick
                            process.nextTick(readAndResolve, iter);
                        }
                        function wrapForNext(lastPromise, iter) {
                            return function(resolve, reject) {
                                lastPromise.then(function() {
                                    if (iter[kEnded]) {
                                        resolve(createIterResult(undefined, true));
                                        return;
                                    }
                                    iter[kHandlePromise](resolve, reject);
                                }, reject);
                            };
                        }
                        var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
                        var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
                            get stream () {
                                return this[kStream];
                            },
                            next: function next() {
                                var _this = this; // if we have detected an error in the meanwhile
                                // reject straight away
                                var error = this[kError];
                                if (error !== null) return Promise.reject(error);
                                if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
                                if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
                                // called, the error will be emitted via nextTick, and
                                // we cannot guarantee that there is no error lingering around
                                // waiting to be emitted.
                                return new Promise(function(resolve, reject) {
                                    process.nextTick(function() {
                                        if (_this[kError]) reject(_this[kError]);
                                        else resolve(createIterResult(undefined, true));
                                    });
                                });
                                 // if we have multiple next() calls
                                // we will wait for the previous Promise to finish
                                // this logic is optimized to support for await loops,
                                // where next() is only called once at a time
                                var lastPromise = this[kLastPromise];
                                var promise;
                                if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
                                else {
                                    // fast path needed to support multiple this.push()
                                    // without triggering the next() queue
                                    var data = this[kStream].read();
                                    if (data !== null) return Promise.resolve(createIterResult(data, false));
                                    promise = new Promise(this[kHandlePromise]);
                                }
                                this[kLastPromise] = promise;
                                return promise;
                            }
                        }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
                            return this;
                        }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
                            var _this2 = this; // destroy(err, cb) is a private API
                            // we can guarantee we have that here, because we control the
                            // Readable class this is attached to
                            return new Promise(function(resolve, reject) {
                                _this2[kStream].destroy(null, function(err) {
                                    if (err) {
                                        reject(err);
                                        return;
                                    }
                                    resolve(createIterResult(undefined, true));
                                });
                            });
                        }), _Object$setPrototypeO), AsyncIteratorPrototype);
                        var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
                            var _Object$create;
                            var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
                                value: stream,
                                writable: true
                            }), _defineProperty(_Object$create, kLastResolve, {
                                value: null,
                                writable: true
                            }), _defineProperty(_Object$create, kLastReject, {
                                value: null,
                                writable: true
                            }), _defineProperty(_Object$create, kError, {
                                value: null,
                                writable: true
                            }), _defineProperty(_Object$create, kEnded, {
                                value: stream._readableState.endEmitted,
                                writable: true
                            }), _defineProperty(_Object$create, kHandlePromise, {
                                value: function value(resolve, reject) {
                                    var data = iterator[kStream].read();
                                    if (data) {
                                        iterator[kLastPromise] = null;
                                        iterator[kLastResolve] = null;
                                        iterator[kLastReject] = null;
                                        resolve(createIterResult(data, false));
                                    } else {
                                        iterator[kLastResolve] = resolve;
                                        iterator[kLastReject] = reject;
                                    }
                                },
                                writable: true
                            }), _Object$create));
                            iterator[kLastPromise] = null;
                            finished(stream, function(err) {
                                if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
                                    var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
                                    // returned by next() and store the error
                                    if (reject !== null) {
                                        iterator[kLastPromise] = null;
                                        iterator[kLastResolve] = null;
                                        iterator[kLastReject] = null;
                                        reject(err);
                                    }
                                    iterator[kError] = err;
                                    return;
                                }
                                var resolve = iterator[kLastResolve];
                                if (resolve !== null) {
                                    iterator[kLastPromise] = null;
                                    iterator[kLastResolve] = null;
                                    iterator[kLastReject] = null;
                                    resolve(createIterResult(undefined, true));
                                }
                                iterator[kEnded] = true;
                            });
                            stream.on("readable", onReadable.bind(null, iterator));
                            return iterator;
                        };
                        module.exports = createReadableStreamAsyncIterator;
                    }).call(this);
                }).call(this, require("_process"));
            },
            {
                "./end-of-stream": 56,
                "_process": 163
            }
        ],
        54: [
            function(require, module, exports) {
                "use strict";
                function ownKeys1(object, enumerableOnly) {
                    var keys = Object.keys(object);
                    if (Object.getOwnPropertySymbols) {
                        var symbols = Object.getOwnPropertySymbols(object);
                        if (enumerableOnly) symbols = symbols.filter(function(sym) {
                            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                        });
                        keys.push.apply(keys, symbols);
                    }
                    return keys;
                }
                function _objectSpread(target) {
                    for(var i = 1; i < arguments.length; i++){
                        var source = arguments[i] != null ? arguments[i] : {};
                        if (i % 2) ownKeys1(Object(source), true).forEach(function(key) {
                            _defineProperty(target, key, source[key]);
                        });
                        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                        else ownKeys1(Object(source)).forEach(function(key) {
                            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                        });
                    }
                    return target;
                }
                function _defineProperty(obj, key, value) {
                    if (key in obj) Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                    else obj[key] = value;
                    return obj;
                }
                function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
                }
                function _defineProperties1(target, props) {
                    for(var i = 0; i < props.length; i++){
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }
                function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties1(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties1(Constructor, staticProps);
                    return Constructor;
                }
                var _require = require("buffer"), Buffer = _require.Buffer;
                var _require2 = require("util"), inspect = _require2.inspect;
                var custom = inspect && inspect.custom || "inspect";
                function copyBuffer(src, target, offset) {
                    Buffer.prototype.copy.call(src, target, offset);
                }
                module.exports = /*#__PURE__*/ function() {
                    function BufferList() {
                        _classCallCheck(this, BufferList);
                        this.head = null;
                        this.tail = null;
                        this.length = 0;
                    }
                    _createClass(BufferList, [
                        {
                            key: "push",
                            value: function push(v) {
                                var entry = {
                                    data: v,
                                    next: null
                                };
                                if (this.length > 0) this.tail.next = entry;
                                else this.head = entry;
                                this.tail = entry;
                                ++this.length;
                            }
                        },
                        {
                            key: "unshift",
                            value: function unshift(v) {
                                var entry = {
                                    data: v,
                                    next: this.head
                                };
                                if (this.length === 0) this.tail = entry;
                                this.head = entry;
                                ++this.length;
                            }
                        },
                        {
                            key: "shift",
                            value: function shift() {
                                if (this.length === 0) return;
                                var ret = this.head.data;
                                if (this.length === 1) this.head = this.tail = null;
                                else this.head = this.head.next;
                                --this.length;
                                return ret;
                            }
                        },
                        {
                            key: "clear",
                            value: function clear() {
                                this.head = this.tail = null;
                                this.length = 0;
                            }
                        },
                        {
                            key: "join",
                            value: function join(s) {
                                if (this.length === 0) return "";
                                var p = this.head;
                                var ret = "" + p.data;
                                while(p = p.next)ret += s + p.data;
                                return ret;
                            }
                        },
                        {
                            key: "concat",
                            value: function concat(n) {
                                if (this.length === 0) return Buffer.alloc(0);
                                var ret = Buffer.allocUnsafe(n >>> 0);
                                var p = this.head;
                                var i = 0;
                                while(p){
                                    copyBuffer(p.data, ret, i);
                                    i += p.data.length;
                                    p = p.next;
                                }
                                return ret;
                            } // Consumes a specified amount of bytes or characters from the buffered data.
                        },
                        {
                            key: "consume",
                            value: function consume(n, hasStrings) {
                                var ret;
                                if (n < this.head.data.length) {
                                    // `slice` is the same for buffers and strings.
                                    ret = this.head.data.slice(0, n);
                                    this.head.data = this.head.data.slice(n);
                                } else if (n === this.head.data.length) // First chunk is a perfect match.
                                ret = this.shift();
                                else // Result spans more than one buffer.
                                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                                return ret;
                            }
                        },
                        {
                            key: "first",
                            value: function first() {
                                return this.head.data;
                            } // Consumes a specified amount of characters from the buffered data.
                        },
                        {
                            key: "_getString",
                            value: function _getString(n) {
                                var p = this.head;
                                var c = 1;
                                var ret = p.data;
                                n -= ret.length;
                                while(p = p.next){
                                    var str = p.data;
                                    var nb = n > str.length ? str.length : n;
                                    if (nb === str.length) ret += str;
                                    else ret += str.slice(0, n);
                                    n -= nb;
                                    if (n === 0) {
                                        if (nb === str.length) {
                                            ++c;
                                            if (p.next) this.head = p.next;
                                            else this.head = this.tail = null;
                                        } else {
                                            this.head = p;
                                            p.data = str.slice(nb);
                                        }
                                        break;
                                    }
                                    ++c;
                                }
                                this.length -= c;
                                return ret;
                            } // Consumes a specified amount of bytes from the buffered data.
                        },
                        {
                            key: "_getBuffer",
                            value: function _getBuffer(n) {
                                var ret = Buffer.allocUnsafe(n);
                                var p = this.head;
                                var c = 1;
                                p.data.copy(ret);
                                n -= p.data.length;
                                while(p = p.next){
                                    var buf = p.data;
                                    var nb = n > buf.length ? buf.length : n;
                                    buf.copy(ret, ret.length - n, 0, nb);
                                    n -= nb;
                                    if (n === 0) {
                                        if (nb === buf.length) {
                                            ++c;
                                            if (p.next) this.head = p.next;
                                            else this.head = this.tail = null;
                                        } else {
                                            this.head = p;
                                            p.data = buf.slice(nb);
                                        }
                                        break;
                                    }
                                    ++c;
                                }
                                this.length -= c;
                                return ret;
                            } // Make sure the linked list only shows the minimal necessary information.
                        },
                        {
                            key: custom,
                            value: function value(_, options) {
                                return inspect(this, _objectSpread({}, options, {
                                    // Only inspect one level.
                                    depth: 0,
                                    // It should not recurse.
                                    customInspect: false
                                }));
                            }
                        }
                    ]);
                    return BufferList;
                }();
            },
            {
                "buffer": 63,
                "util": 224
            }
        ],
        55: [
            function(require, module, exports) {
                (function(process) {
                    (function() {
                        "use strict"; // undocumented cb() API, needed for core, not for public API
                        function destroy(err3, cb) {
                            var _this = this;
                            var readableDestroyed = this._readableState && this._readableState.destroyed;
                            var writableDestroyed = this._writableState && this._writableState.destroyed;
                            if (readableDestroyed || writableDestroyed) {
                                if (cb) cb(err3);
                                else if (err3) {
                                    if (!this._writableState) process.nextTick(emitErrorNT, this, err3);
                                    else if (!this._writableState.errorEmitted) {
                                        this._writableState.errorEmitted = true;
                                        process.nextTick(emitErrorNT, this, err3);
                                    }
                                }
                                return this;
                            } // we set destroyed to true before firing error callbacks in order
                            // to make it re-entrance safe in case destroy() is called within callbacks
                            if (this._readableState) this._readableState.destroyed = true;
                             // if this is a duplex stream mark the writable part as destroyed as well
                            if (this._writableState) this._writableState.destroyed = true;
                            this._destroy(err3 || null, function(err) {
                                if (!cb && err) {
                                    if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
                                    else if (!_this._writableState.errorEmitted) {
                                        _this._writableState.errorEmitted = true;
                                        process.nextTick(emitErrorAndCloseNT, _this, err);
                                    } else process.nextTick(emitCloseNT, _this);
                                } else if (cb) {
                                    process.nextTick(emitCloseNT, _this);
                                    cb(err);
                                } else process.nextTick(emitCloseNT, _this);
                            });
                            return this;
                        }
                        function emitErrorAndCloseNT(self, err) {
                            emitErrorNT(self, err);
                            emitCloseNT(self);
                        }
                        function emitCloseNT(self) {
                            if (self._writableState && !self._writableState.emitClose) return;
                            if (self._readableState && !self._readableState.emitClose) return;
                            self.emit("close");
                        }
                        function undestroy() {
                            if (this._readableState) {
                                this._readableState.destroyed = false;
                                this._readableState.reading = false;
                                this._readableState.ended = false;
                                this._readableState.endEmitted = false;
                            }
                            if (this._writableState) {
                                this._writableState.destroyed = false;
                                this._writableState.ended = false;
                                this._writableState.ending = false;
                                this._writableState.finalCalled = false;
                                this._writableState.prefinished = false;
                                this._writableState.finished = false;
                                this._writableState.errorEmitted = false;
                            }
                        }
                        function emitErrorNT(self, err) {
                            self.emit("error", err);
                        }
                        function errorOrDestroy(stream, err) {
                            // We have tests that rely on errors being emitted
                            // in the same tick, so changing this is semver major.
                            // For now when you opt-in to autoDestroy we allow
                            // the error to be emitted nextTick. In a future
                            // semver major update we should change the default to this.
                            var rState = stream._readableState;
                            var wState = stream._writableState;
                            if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
                            else stream.emit("error", err);
                        }
                        module.exports = {
                            destroy: destroy,
                            undestroy: undestroy,
                            errorOrDestroy: errorOrDestroy
                        };
                    }).call(this);
                }).call(this, require("_process"));
            },
            {
                "_process": 163
            }
        ],
        56: [
            function(require, module, exports) {
                // Ported from https://github.com/mafintosh/end-of-stream with
                // permission from the author, Mathias Buus (@mafintosh).
                "use strict";
                var ERR_STREAM_PREMATURE_CLOSE = require("../../../errors").codes.ERR_STREAM_PREMATURE_CLOSE;
                function once(callback) {
                    var called = false;
                    return function() {
                        if (called) return;
                        called = true;
                        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                        callback.apply(this, args);
                    };
                }
                function noop() {}
                function isRequest(stream) {
                    return stream.setHeader && typeof stream.abort === "function";
                }
                function eos(stream, opts, callback) {
                    if (typeof opts === "function") return eos(stream, null, opts);
                    if (!opts) opts = {};
                    callback = once(callback || noop);
                    var readable = opts.readable || opts.readable !== false && stream.readable;
                    var writable = opts.writable || opts.writable !== false && stream.writable;
                    var onlegacyfinish = function onlegacyfinish() {
                        if (!stream.writable) onfinish();
                    };
                    var writableEnded = stream._writableState && stream._writableState.finished;
                    var onfinish = function onfinish() {
                        writable = false;
                        writableEnded = true;
                        if (!readable) callback.call(stream);
                    };
                    var readableEnded = stream._readableState && stream._readableState.endEmitted;
                    var onend = function onend() {
                        readable = false;
                        readableEnded = true;
                        if (!writable) callback.call(stream);
                    };
                    var onerror = function onerror(err) {
                        callback.call(stream, err);
                    };
                    var onclose = function onclose() {
                        var err;
                        if (readable && !readableEnded) {
                            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
                            return callback.call(stream, err);
                        }
                        if (writable && !writableEnded) {
                            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
                            return callback.call(stream, err);
                        }
                    };
                    var onrequest = function onrequest() {
                        stream.req.on("finish", onfinish);
                    };
                    if (isRequest(stream)) {
                        stream.on("complete", onfinish);
                        stream.on("abort", onclose);
                        if (stream.req) onrequest();
                        else stream.on("request", onrequest);
                    } else if (writable && !stream._writableState) {
                        // legacy streams
                        stream.on("end", onlegacyfinish);
                        stream.on("close", onlegacyfinish);
                    }
                    stream.on("end", onend);
                    stream.on("finish", onfinish);
                    if (opts.error !== false) stream.on("error", onerror);
                    stream.on("close", onclose);
                    return function() {
                        stream.removeListener("complete", onfinish);
                        stream.removeListener("abort", onclose);
                        stream.removeListener("request", onrequest);
                        if (stream.req) stream.req.removeListener("finish", onfinish);
                        stream.removeListener("end", onlegacyfinish);
                        stream.removeListener("close", onlegacyfinish);
                        stream.removeListener("finish", onfinish);
                        stream.removeListener("end", onend);
                        stream.removeListener("error", onerror);
                        stream.removeListener("close", onclose);
                    };
                }
                module.exports = eos;
            },
            {
                "../../../errors": 47
            }
        ],
        57: [
            function(require, module, exports) {
                module.exports = function() {
                    throw new Error("Readable.from is not available in the browser");
                };
            },
            {}
        ],
        58: [
            function(require, module, exports) {
                // Ported from https://github.com/mafintosh/pump with
                // permission from the author, Mathias Buus (@mafintosh).
                "use strict";
                var eos;
                function once(callback) {
                    var called = false;
                    return function() {
                        if (called) return;
                        called = true;
                        callback.apply(void 0, arguments);
                    };
                }
                var _require$codes = require("../../../errors").codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
                function noop(err) {
                    // Rethrow the error if it exists to avoid swallowing it
                    if (err) throw err;
                }
                function isRequest(stream) {
                    return stream.setHeader && typeof stream.abort === "function";
                }
                function destroyer(stream, reading, writing, callback) {
                    callback = once(callback);
                    var closed = false;
                    stream.on("close", function() {
                        closed = true;
                    });
                    if (eos === undefined) eos = require("./end-of-stream");
                    eos(stream, {
                        readable: reading,
                        writable: writing
                    }, function(err) {
                        if (err) return callback(err);
                        closed = true;
                        callback();
                    });
                    var destroyed = false;
                    return function(err) {
                        if (closed) return;
                        if (destroyed) return;
                        destroyed = true; // request.destroy just do .end - .abort is what we want
                        if (isRequest(stream)) return stream.abort();
                        if (typeof stream.destroy === "function") return stream.destroy();
                        callback(err || new ERR_STREAM_DESTROYED("pipe"));
                    };
                }
                function call(fn) {
                    fn();
                }
                function pipe(from, to) {
                    return from.pipe(to);
                }
                function popCallback(streams) {
                    if (!streams.length) return noop;
                    if (typeof streams[streams.length - 1] !== "function") return noop;
                    return streams.pop();
                }
                function pipeline() {
                    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
                    var callback = popCallback(streams);
                    if (Array.isArray(streams[0])) streams = streams[0];
                    if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
                    var error;
                    var destroys = streams.map(function(stream, i) {
                        var reading = i < streams.length - 1;
                        var writing = i > 0;
                        return destroyer(stream, reading, writing, function(err) {
                            if (!error) error = err;
                            if (err) destroys.forEach(call);
                            if (reading) return;
                            destroys.forEach(call);
                            callback(error);
                        });
                    });
                    return streams.reduce(pipe);
                }
                module.exports = pipeline;
            },
            {
                "../../../errors": 47,
                "./end-of-stream": 56
            }
        ],
        59: [
            function(require, module, exports) {
                "use strict";
                var ERR_INVALID_OPT_VALUE = require("../../../errors").codes.ERR_INVALID_OPT_VALUE;
                function highWaterMarkFrom(options, isDuplex, duplexKey) {
                    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
                }
                function getHighWaterMark(state, options, duplexKey, isDuplex) {
                    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
                    if (hwm != null) {
                        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
                            var name = isDuplex ? duplexKey : "highWaterMark";
                            throw new ERR_INVALID_OPT_VALUE(name, hwm);
                        }
                        return Math.floor(hwm);
                    } // Default value
                    return state.objectMode ? 16 : 16384;
                }
                module.exports = {
                    getHighWaterMark: getHighWaterMark
                };
            },
            {
                "../../../errors": 47
            }
        ],
        60: [
            function(require, module, exports) {
                module.exports = require("events").EventEmitter;
            },
            {
                "events": 103
            }
        ],
        61: [
            function(require, module, exports) {
                exports = module.exports = require("./lib/_stream_readable.js");
                exports.Stream = exports;
                exports.Readable = exports;
                exports.Writable = require("./lib/_stream_writable.js");
                exports.Duplex = require("./lib/_stream_duplex.js");
                exports.Transform = require("./lib/_stream_transform.js");
                exports.PassThrough = require("./lib/_stream_passthrough.js");
                exports.finished = require("./lib/internal/streams/end-of-stream.js");
                exports.pipeline = require("./lib/internal/streams/pipeline.js");
            },
            {
                "./lib/_stream_duplex.js": 48,
                "./lib/_stream_passthrough.js": 49,
                "./lib/_stream_readable.js": 50,
                "./lib/_stream_transform.js": 51,
                "./lib/_stream_writable.js": 52,
                "./lib/internal/streams/end-of-stream.js": 56,
                "./lib/internal/streams/pipeline.js": 58
            }
        ],
        62: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        module.exports = function xor(a, b) {
                            var length = Math.min(a.length, b.length);
                            var buffer = new Buffer(length);
                            for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
                            return buffer;
                        };
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "buffer": 63
            }
        ],
        63: [
            function(require, module, exports) {
                (function(Buffer1) {
                    (function() {
                        /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <https://feross.org>
           * @license  MIT
           */ /* eslint-disable no-proto */ "use strict";
                        var base64 = require("base64-js");
                        var ieee754 = require("ieee754");
                        exports.Buffer = Buffer;
                        exports.SlowBuffer = SlowBuffer;
                        exports.INSPECT_MAX_BYTES = 50;
                        var K_MAX_LENGTH = 0x7fffffff;
                        exports.kMaxLength = K_MAX_LENGTH;
                        /**
           * If `Buffer.TYPED_ARRAY_SUPPORT`:
           *   === true    Use Uint8Array implementation (fastest)
           *   === false   Print warning and recommend using `buffer` v4.x which has an Object
           *               implementation (most compatible, even IE6)
           *
           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
           * Opera 11.6+, iOS 4.2+.
           *
           * We report that the browser does not support typed arrays if the are not subclassable
           * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
           * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
           * for __proto__ and has a buggy typed array implementation.
           */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
                        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
                        function typedArraySupport() {
                            // Can typed array instances can be augmented?
                            try {
                                var arr = new Uint8Array(1);
                                arr.__proto__ = {
                                    __proto__: Uint8Array.prototype,
                                    foo: function foo() {
                                        return 42;
                                    }
                                };
                                return arr.foo() === 42;
                            } catch (e) {
                                return false;
                            }
                        }
                        Object.defineProperty(Buffer.prototype, "parent", {
                            enumerable: true,
                            get: function get() {
                                if (!Buffer.isBuffer(this)) return undefined;
                                return this.buffer;
                            }
                        });
                        Object.defineProperty(Buffer.prototype, "offset", {
                            enumerable: true,
                            get: function get() {
                                if (!Buffer.isBuffer(this)) return undefined;
                                return this.byteOffset;
                            }
                        });
                        function createBuffer(length) {
                            if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
                             // Return an augmented `Uint8Array` instance
                            var buf = new Uint8Array(length);
                            buf.__proto__ = Buffer.prototype;
                            return buf;
                        }
                        /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */ function Buffer(arg, encodingOrOffset, length) {
                            // Common case.
                            if (typeof arg === "number") {
                                if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
                                return allocUnsafe(arg);
                            }
                            return from(arg, encodingOrOffset, length);
                        } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                        if (typeof Symbol !== "undefined" && Symbol.species != null && Buffer[Symbol.species] === Buffer) Object.defineProperty(Buffer, Symbol.species, {
                            value: null,
                            configurable: true,
                            enumerable: false,
                            writable: false
                        });
                        Buffer.poolSize = 8192; // not used by this implementation
                        function from(value, encodingOrOffset, length) {
                            if (typeof value === "string") return fromString(value, encodingOrOffset);
                            if (ArrayBuffer.isView(value)) return fromArrayLike(value);
                            if (value == null) throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + _typeof(value));
                            if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
                            if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
                            var valueOf = value.valueOf && value.valueOf();
                            if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
                            var b = fromObject(value);
                            if (b) return b;
                            if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
                            throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + _typeof(value));
                        }
                        /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/ Buffer.from = function(value, encodingOrOffset, length) {
                            return from(value, encodingOrOffset, length);
                        }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
                        // https://github.com/feross/buffer/pull/148
                        Buffer.prototype.__proto__ = Uint8Array.prototype;
                        Buffer.__proto__ = Uint8Array;
                        function assertSize(size) {
                            if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
                            else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
                        }
                        function alloc(size, fill, encoding) {
                            assertSize(size);
                            if (size <= 0) return createBuffer(size);
                            if (fill !== undefined) // Only pay attention to encoding if it's a string. This
                            // prevents accidentally sending in a number that would
                            // be interpretted as a start offset.
                            return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                            return createBuffer(size);
                        }
                        /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/ Buffer.alloc = function(size, fill, encoding) {
                            return alloc(size, fill, encoding);
                        };
                        function allocUnsafe(size) {
                            assertSize(size);
                            return createBuffer(size < 0 ? 0 : checked(size) | 0);
                        }
                        /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */ Buffer.allocUnsafe = function(size) {
                            return allocUnsafe(size);
                        };
                        /**
           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
           */ Buffer.allocUnsafeSlow = function(size) {
                            return allocUnsafe(size);
                        };
                        function fromString(string, encoding) {
                            if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
                            if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
                            var length = byteLength1(string, encoding) | 0;
                            var buf = createBuffer(length);
                            var actual = buf.write(string, encoding);
                            if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
                            // cause everything after the first invalid character to be ignored. (e.g.
                            // 'abxxcd' will be treated as 'ab')
                            buf = buf.slice(0, actual);
                            return buf;
                        }
                        function fromArrayLike(array) {
                            var length = array.length < 0 ? 0 : checked(array.length) | 0;
                            var buf = createBuffer(length);
                            for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
                            return buf;
                        }
                        function fromArrayBuffer(array, byteOffset, length) {
                            if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
                            if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
                            var buf;
                            if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
                            else if (length === undefined) buf = new Uint8Array(array, byteOffset);
                            else buf = new Uint8Array(array, byteOffset, length);
                             // Return an augmented `Uint8Array` instance
                            buf.__proto__ = Buffer.prototype;
                            return buf;
                        }
                        function fromObject(obj) {
                            if (Buffer.isBuffer(obj)) {
                                var len = checked(obj.length) | 0;
                                var buf = createBuffer(len);
                                if (buf.length === 0) return buf;
                                obj.copy(buf, 0, 0, len);
                                return buf;
                            }
                            if (obj.length !== undefined) {
                                if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
                                return fromArrayLike(obj);
                            }
                            if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
                        }
                        function checked(length) {
                            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
                            // length is NaN (which is otherwise coerced to zero.)
                            if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
                            return length | 0;
                        }
                        function SlowBuffer(length) {
                            if (+length != length) // eslint-disable-line eqeqeq
                            length = 0;
                            return Buffer.alloc(+length);
                        }
                        Buffer.isBuffer = function isBuffer(b) {
                            return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
                        };
                        Buffer.compare = function compare(a, b) {
                            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
                            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
                            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                            if (a === b) return 0;
                            var x = a.length;
                            var y = b.length;
                            for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
                                x = a[i];
                                y = b[i];
                                break;
                            }
                            if (x < y) return -1;
                            if (y < x) return 1;
                            return 0;
                        };
                        Buffer.isEncoding = function isEncoding(encoding) {
                            switch(String(encoding).toLowerCase()){
                                case "hex":
                                case "utf8":
                                case "utf-8":
                                case "ascii":
                                case "latin1":
                                case "binary":
                                case "base64":
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return true;
                                default:
                                    return false;
                            }
                        };
                        Buffer.concat = function concat(list, length) {
                            if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
                            if (list.length === 0) return Buffer.alloc(0);
                            var i;
                            if (length === undefined) {
                                length = 0;
                                for(i = 0; i < list.length; ++i)length += list[i].length;
                            }
                            var buffer = Buffer.allocUnsafe(length);
                            var pos = 0;
                            for(i = 0; i < list.length; ++i){
                                var buf = list[i];
                                if (isInstance(buf, Uint8Array)) buf = Buffer.from(buf);
                                if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
                                buf.copy(buffer, pos);
                                pos += buf.length;
                            }
                            return buffer;
                        };
                        function byteLength1(string, encoding) {
                            if (Buffer.isBuffer(string)) return string.length;
                            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
                            if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + _typeof(string));
                            var len = string.length;
                            var mustMatch = arguments.length > 2 && arguments[2] === true;
                            if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion
                            var loweredCase = false;
                            for(;;)switch(encoding){
                                case "ascii":
                                case "latin1":
                                case "binary":
                                    return len;
                                case "utf8":
                                case "utf-8":
                                    return utf8ToBytes(string).length;
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return len * 2;
                                case "hex":
                                    return len >>> 1;
                                case "base64":
                                    return base64ToBytes(string).length;
                                default:
                                    if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                                    encoding = ("" + encoding).toLowerCase();
                                    loweredCase = true;
                            }
                        }
                        Buffer.byteLength = byteLength1;
                        function slowToString(encoding, start, end) {
                            var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
                            // property of a typed array.
                            // This behaves neither like String nor Uint8Array in that we set start/end
                            // to their upper/lower bounds if the value passed is out of range.
                            // undefined is handled specially as per ECMA-262 6th Edition,
                            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                            if (start === undefined || start < 0) start = 0;
                             // Return early if start > this.length. Done here to prevent potential uint32
                            // coercion fail below.
                            if (start > this.length) return "";
                            if (end === undefined || end > this.length) end = this.length;
                            if (end <= 0) return "";
                             // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                            end >>>= 0;
                            start >>>= 0;
                            if (end <= start) return "";
                            if (!encoding) encoding = "utf8";
                            while(true)switch(encoding){
                                case "hex":
                                    return hexSlice(this, start, end);
                                case "utf8":
                                case "utf-8":
                                    return utf8Slice(this, start, end);
                                case "ascii":
                                    return asciiSlice(this, start, end);
                                case "latin1":
                                case "binary":
                                    return latin1Slice(this, start, end);
                                case "base64":
                                    return base64Slice(this, start, end);
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return utf16leSlice(this, start, end);
                                default:
                                    if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                                    encoding = (encoding + "").toLowerCase();
                                    loweredCase = true;
                            }
                        } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
                        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
                        // reliably in a browserify context because there could be multiple different
                        // copies of the 'buffer' package in use. This method works even for Buffer
                        // instances that were created from another copy of the `buffer` package.
                        // See: https://github.com/feross/buffer/issues/154
                        Buffer.prototype._isBuffer = true;
                        function swap(b, n, m) {
                            var i = b[n];
                            b[n] = b[m];
                            b[m] = i;
                        }
                        Buffer.prototype.swap16 = function swap16() {
                            var len = this.length;
                            if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
                            for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
                            return this;
                        };
                        Buffer.prototype.swap32 = function swap32() {
                            var len = this.length;
                            if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
                            for(var i = 0; i < len; i += 4){
                                swap(this, i, i + 3);
                                swap(this, i + 1, i + 2);
                            }
                            return this;
                        };
                        Buffer.prototype.swap64 = function swap64() {
                            var len = this.length;
                            if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
                            for(var i = 0; i < len; i += 8){
                                swap(this, i, i + 7);
                                swap(this, i + 1, i + 6);
                                swap(this, i + 2, i + 5);
                                swap(this, i + 3, i + 4);
                            }
                            return this;
                        };
                        Buffer.prototype.toString = function toString() {
                            var length = this.length;
                            if (length === 0) return "";
                            if (arguments.length === 0) return utf8Slice(this, 0, length);
                            return slowToString.apply(this, arguments);
                        };
                        Buffer.prototype.toLocaleString = Buffer.prototype.toString;
                        Buffer.prototype.equals = function equals(b) {
                            if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
                            if (this === b) return true;
                            return Buffer.compare(this, b) === 0;
                        };
                        Buffer.prototype.inspect = function inspect() {
                            var str = "";
                            var max = exports.INSPECT_MAX_BYTES;
                            str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
                            if (this.length > max) str += " ... ";
                            return "<Buffer " + str + ">";
                        };
                        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                            if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
                            if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + _typeof(target));
                            if (start === undefined) start = 0;
                            if (end === undefined) end = target ? target.length : 0;
                            if (thisStart === undefined) thisStart = 0;
                            if (thisEnd === undefined) thisEnd = this.length;
                            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
                            if (thisStart >= thisEnd && start >= end) return 0;
                            if (thisStart >= thisEnd) return -1;
                            if (start >= end) return 1;
                            start >>>= 0;
                            end >>>= 0;
                            thisStart >>>= 0;
                            thisEnd >>>= 0;
                            if (this === target) return 0;
                            var x = thisEnd - thisStart;
                            var y = end - start;
                            var len = Math.min(x, y);
                            var thisCopy = this.slice(thisStart, thisEnd);
                            var targetCopy = target.slice(start, end);
                            for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
                                x = thisCopy[i];
                                y = targetCopy[i];
                                break;
                            }
                            if (x < y) return -1;
                            if (y < x) return 1;
                            return 0;
                        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
                        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
                        //
                        // Arguments:
                        // - buffer - a Buffer to search
                        // - val - a string, Buffer, or number
                        // - byteOffset - an index into `buffer`; will be clamped to an int32
                        // - encoding - an optional encoding, relevant is val is a string
                        // - dir - true for indexOf, false for lastIndexOf
                        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                            // Empty buffer means no match
                            if (buffer.length === 0) return -1; // Normalize byteOffset
                            if (typeof byteOffset === "string") {
                                encoding = byteOffset;
                                byteOffset = 0;
                            } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
                            else if (byteOffset < -2147483648) byteOffset = -2147483648;
                            byteOffset = +byteOffset; // Coerce to Number.
                            if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                            byteOffset = dir ? 0 : buffer.length - 1;
                             // Normalize byteOffset: negative offsets start from the end of the buffer
                            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                            if (byteOffset >= buffer.length) {
                                if (dir) return -1;
                                else byteOffset = buffer.length - 1;
                            } else if (byteOffset < 0) {
                                if (dir) byteOffset = 0;
                                else return -1;
                            } // Normalize val
                            if (typeof val === "string") val = Buffer.from(val, encoding);
                             // Finally, search either indexOf (if dir is true) or lastIndexOf
                            if (Buffer.isBuffer(val)) {
                                // Special case: looking for empty string/buffer always fails
                                if (val.length === 0) return -1;
                                return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                            } else if (typeof val === "number") {
                                val = val & 0xFF; // Search for a byte value [0-255]
                                if (typeof Uint8Array.prototype.indexOf === "function") {
                                    if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                                    else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                                }
                                return arrayIndexOf(buffer, [
                                    val
                                ], byteOffset, encoding, dir);
                            }
                            throw new TypeError("val must be string, number or Buffer");
                        }
                        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                            var indexSize = 1;
                            var arrLength = arr.length;
                            var valLength = val.length;
                            if (encoding !== undefined) {
                                encoding = String(encoding).toLowerCase();
                                if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                                    if (arr.length < 2 || val.length < 2) return -1;
                                    indexSize = 2;
                                    arrLength /= 2;
                                    valLength /= 2;
                                    byteOffset /= 2;
                                }
                            }
                            function read(buf, i) {
                                if (indexSize === 1) return buf[i];
                                else return buf.readUInt16BE(i * indexSize);
                            }
                            var i3;
                            if (dir) {
                                var foundIndex = -1;
                                for(i3 = byteOffset; i3 < arrLength; i3++)if (read(arr, i3) === read(val, foundIndex === -1 ? 0 : i3 - foundIndex)) {
                                    if (foundIndex === -1) foundIndex = i3;
                                    if (i3 - foundIndex + 1 === valLength) return foundIndex * indexSize;
                                } else {
                                    if (foundIndex !== -1) i3 -= i3 - foundIndex;
                                    foundIndex = -1;
                                }
                            } else {
                                if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                                for(i3 = byteOffset; i3 >= 0; i3--){
                                    var found = true;
                                    for(var j = 0; j < valLength; j++)if (read(arr, i3 + j) !== read(val, j)) {
                                        found = false;
                                        break;
                                    }
                                    if (found) return i3;
                                }
                            }
                            return -1;
                        }
                        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                            return this.indexOf(val, byteOffset, encoding) !== -1;
                        };
                        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                        };
                        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                        };
                        function hexWrite(buf, string, offset, length) {
                            offset = Number(offset) || 0;
                            var remaining = buf.length - offset;
                            if (!length) length = remaining;
                            else {
                                length = Number(length);
                                if (length > remaining) length = remaining;
                            }
                            var strLen = string.length;
                            if (length > strLen / 2) length = strLen / 2;
                            for(var i = 0; i < length; ++i){
                                var parsed = parseInt(string.substr(i * 2, 2), 16);
                                if (numberIsNaN(parsed)) return i;
                                buf[offset + i] = parsed;
                            }
                            return i;
                        }
                        function utf8Write(buf, string, offset, length) {
                            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                        }
                        function asciiWrite(buf, string, offset, length) {
                            return blitBuffer(asciiToBytes(string), buf, offset, length);
                        }
                        function latin1Write(buf, string, offset, length) {
                            return asciiWrite(buf, string, offset, length);
                        }
                        function base64Write(buf, string, offset, length) {
                            return blitBuffer(base64ToBytes(string), buf, offset, length);
                        }
                        function ucs2Write(buf, string, offset, length) {
                            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                        }
                        Buffer.prototype.write = function write(string, offset, length, encoding) {
                            // Buffer#write(string)
                            if (offset === undefined) {
                                encoding = "utf8";
                                length = this.length;
                                offset = 0; // Buffer#write(string, encoding)
                            } else if (length === undefined && typeof offset === "string") {
                                encoding = offset;
                                length = this.length;
                                offset = 0; // Buffer#write(string, offset[, length][, encoding])
                            } else if (isFinite(offset)) {
                                offset = offset >>> 0;
                                if (isFinite(length)) {
                                    length = length >>> 0;
                                    if (encoding === undefined) encoding = "utf8";
                                } else {
                                    encoding = length;
                                    length = undefined;
                                }
                            } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                            var remaining = this.length - offset;
                            if (length === undefined || length > remaining) length = remaining;
                            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
                            if (!encoding) encoding = "utf8";
                            var loweredCase = false;
                            for(;;)switch(encoding){
                                case "hex":
                                    return hexWrite(this, string, offset, length);
                                case "utf8":
                                case "utf-8":
                                    return utf8Write(this, string, offset, length);
                                case "ascii":
                                    return asciiWrite(this, string, offset, length);
                                case "latin1":
                                case "binary":
                                    return latin1Write(this, string, offset, length);
                                case "base64":
                                    // Warning: maxLength not taken into account in base64Write
                                    return base64Write(this, string, offset, length);
                                case "ucs2":
                                case "ucs-2":
                                case "utf16le":
                                case "utf-16le":
                                    return ucs2Write(this, string, offset, length);
                                default:
                                    if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                                    encoding = ("" + encoding).toLowerCase();
                                    loweredCase = true;
                            }
                        };
                        Buffer.prototype.toJSON = function toJSON() {
                            return {
                                type: "Buffer",
                                data: Array.prototype.slice.call(this._arr || this, 0)
                            };
                        };
                        function base64Slice(buf, start, end) {
                            if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
                            else return base64.fromByteArray(buf.slice(start, end));
                        }
                        function utf8Slice(buf, start, end) {
                            end = Math.min(buf.length, end);
                            var res = [];
                            var i = start;
                            while(i < end){
                                var firstByte = buf[i];
                                var codePoint = null;
                                var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
                                if (i + bytesPerSequence <= end) {
                                    var secondByte, thirdByte, fourthByte, tempCodePoint;
                                    switch(bytesPerSequence){
                                        case 1:
                                            if (firstByte < 0x80) codePoint = firstByte;
                                            break;
                                        case 2:
                                            secondByte = buf[i + 1];
                                            if ((secondByte & 0xC0) === 0x80) {
                                                tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                                                if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                                            }
                                            break;
                                        case 3:
                                            secondByte = buf[i + 1];
                                            thirdByte = buf[i + 2];
                                            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                                                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                                            }
                                            break;
                                        case 4:
                                            secondByte = buf[i + 1];
                                            thirdByte = buf[i + 2];
                                            fourthByte = buf[i + 3];
                                            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                                                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                                            }
                                    }
                                }
                                if (codePoint === null) {
                                    // we did not generate a valid codePoint so insert a
                                    // replacement char (U+FFFD) and advance only 1 byte
                                    codePoint = 0xFFFD;
                                    bytesPerSequence = 1;
                                } else if (codePoint > 0xFFFF) {
                                    // encode to utf16 (surrogate pair dance)
                                    codePoint -= 0x10000;
                                    res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                                    codePoint = 0xDC00 | codePoint & 0x3FF;
                                }
                                res.push(codePoint);
                                i += bytesPerSequence;
                            }
                            return decodeCodePointsArray(res);
                        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
                        // the lowest limit is Chrome, with 0x10000 args.
                        // We go 1 magnitude less, for safety
                        var MAX_ARGUMENTS_LENGTH = 0x1000;
                        function decodeCodePointsArray(codePoints) {
                            var len = codePoints.length;
                            if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
                             // Decode in chunks to avoid "call stack size exceeded".
                            var res = "";
                            var i = 0;
                            while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                            return res;
                        }
                        function asciiSlice(buf, start, end) {
                            var ret = "";
                            end = Math.min(buf.length, end);
                            for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
                            return ret;
                        }
                        function latin1Slice(buf, start, end) {
                            var ret = "";
                            end = Math.min(buf.length, end);
                            for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
                            return ret;
                        }
                        function hexSlice(buf, start, end) {
                            var len = buf.length;
                            if (!start || start < 0) start = 0;
                            if (!end || end < 0 || end > len) end = len;
                            var out = "";
                            for(var i = start; i < end; ++i)out += toHex(buf[i]);
                            return out;
                        }
                        function utf16leSlice(buf, start, end) {
                            var bytes = buf.slice(start, end);
                            var res = "";
                            for(var i = 0; i < bytes.length; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                            return res;
                        }
                        Buffer.prototype.slice = function slice(start, end) {
                            var len = this.length;
                            start = ~~start;
                            end = end === undefined ? len : ~~end;
                            if (start < 0) {
                                start += len;
                                if (start < 0) start = 0;
                            } else if (start > len) start = len;
                            if (end < 0) {
                                end += len;
                                if (end < 0) end = 0;
                            } else if (end > len) end = len;
                            if (end < start) end = start;
                            var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance
                            newBuf.__proto__ = Buffer.prototype;
                            return newBuf;
                        };
                        /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */ function checkOffset(offset, ext, length) {
                            if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
                            if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
                        }
                        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);
                            var val = this[offset];
                            var mul = 1;
                            var i = 0;
                            while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
                            return val;
                        };
                        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);
                            var val = this[offset + --byteLength];
                            var mul = 1;
                            while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
                            return val;
                        };
                        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 1, this.length);
                            return this[offset];
                        };
                        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            return this[offset] | this[offset + 1] << 8;
                        };
                        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            return this[offset] << 8 | this[offset + 1];
                        };
                        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
                        };
                        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                        };
                        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);
                            var val = this[offset];
                            var mul = 1;
                            var i = 0;
                            while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
                            mul *= 0x80;
                            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                            return val;
                        };
                        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) checkOffset(offset, byteLength, this.length);
                            var i = byteLength;
                            var mul = 1;
                            var val = this[offset + --i];
                            while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
                            mul *= 0x80;
                            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                            return val;
                        };
                        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 1, this.length);
                            if (!(this[offset] & 0x80)) return this[offset];
                            return (0xff - this[offset] + 1) * -1;
                        };
                        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            var val = this[offset] | this[offset + 1] << 8;
                            return val & 0x8000 ? val | 0xFFFF0000 : val;
                        };
                        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 2, this.length);
                            var val = this[offset + 1] | this[offset] << 8;
                            return val & 0x8000 ? val | 0xFFFF0000 : val;
                        };
                        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                        };
                        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                        };
                        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return ieee754.read(this, offset, true, 23, 4);
                        };
                        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 4, this.length);
                            return ieee754.read(this, offset, false, 23, 4);
                        };
                        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 8, this.length);
                            return ieee754.read(this, offset, true, 52, 8);
                        };
                        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                            offset = offset >>> 0;
                            if (!noAssert) checkOffset(offset, 8, this.length);
                            return ieee754.read(this, offset, false, 52, 8);
                        };
                        function checkInt(buf, value, offset, ext, max, min) {
                            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
                            if (offset + ext > buf.length) throw new RangeError("Index out of range");
                        }
                        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) {
                                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                                checkInt(this, value, offset, byteLength, maxBytes, 0);
                            }
                            var mul = 1;
                            var i = 0;
                            this[offset] = value & 0xFF;
                            while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
                            return offset + byteLength;
                        };
                        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            byteLength = byteLength >>> 0;
                            if (!noAssert) {
                                var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                                checkInt(this, value, offset, byteLength, maxBytes, 0);
                            }
                            var i = byteLength - 1;
                            var mul = 1;
                            this[offset + i] = value & 0xFF;
                            while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
                            return offset + byteLength;
                        };
                        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
                            this[offset] = value & 0xff;
                            return offset + 1;
                        };
                        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            return offset + 2;
                        };
                        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 0xff;
                            return offset + 2;
                        };
                        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                            this[offset + 3] = value >>> 24;
                            this[offset + 2] = value >>> 16;
                            this[offset + 1] = value >>> 8;
                            this[offset] = value & 0xff;
                            return offset + 4;
                        };
                        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 0xff;
                            return offset + 4;
                        };
                        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                var limit = Math.pow(2, 8 * byteLength - 1);
                                checkInt(this, value, offset, byteLength, limit - 1, -limit);
                            }
                            var i = 0;
                            var mul = 1;
                            var sub = 0;
                            this[offset] = value & 0xFF;
                            while(++i < byteLength && (mul *= 0x100)){
                                if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
                                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                            }
                            return offset + byteLength;
                        };
                        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) {
                                var limit = Math.pow(2, 8 * byteLength - 1);
                                checkInt(this, value, offset, byteLength, limit - 1, -limit);
                            }
                            var i = byteLength - 1;
                            var mul = 1;
                            var sub = 0;
                            this[offset + i] = value & 0xFF;
                            while(--i >= 0 && (mul *= 0x100)){
                                if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
                                this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                            }
                            return offset + byteLength;
                        };
                        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
                            if (value < 0) value = 0xff + value + 1;
                            this[offset] = value & 0xff;
                            return offset + 1;
                        };
                        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            return offset + 2;
                        };
                        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
                            this[offset] = value >>> 8;
                            this[offset + 1] = value & 0xff;
                            return offset + 2;
                        };
                        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
                            this[offset] = value & 0xff;
                            this[offset + 1] = value >>> 8;
                            this[offset + 2] = value >>> 16;
                            this[offset + 3] = value >>> 24;
                            return offset + 4;
                        };
                        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
                            if (value < 0) value = 0xffffffff + value + 1;
                            this[offset] = value >>> 24;
                            this[offset + 1] = value >>> 16;
                            this[offset + 2] = value >>> 8;
                            this[offset + 3] = value & 0xff;
                            return offset + 4;
                        };
                        function checkIEEE754(buf, value, offset, ext, max, min) {
                            if (offset + ext > buf.length) throw new RangeError("Index out of range");
                            if (offset < 0) throw new RangeError("Index out of range");
                        }
                        function writeFloat(buf, value, offset, littleEndian, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
                            ieee754.write(buf, value, offset, littleEndian, 23, 4);
                            return offset + 4;
                        }
                        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                            return writeFloat(this, value, offset, true, noAssert);
                        };
                        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                            return writeFloat(this, value, offset, false, noAssert);
                        };
                        function writeDouble(buf, value, offset, littleEndian, noAssert) {
                            value = +value;
                            offset = offset >>> 0;
                            if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
                            ieee754.write(buf, value, offset, littleEndian, 52, 8);
                            return offset + 8;
                        }
                        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                            return writeDouble(this, value, offset, true, noAssert);
                        };
                        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                            return writeDouble(this, value, offset, false, noAssert);
                        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                            if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
                            if (!start) start = 0;
                            if (!end && end !== 0) end = this.length;
                            if (targetStart >= target.length) targetStart = target.length;
                            if (!targetStart) targetStart = 0;
                            if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done
                            if (end === start) return 0;
                            if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions
                            if (targetStart < 0) throw new RangeError("targetStart out of bounds");
                            if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
                            if (end < 0) throw new RangeError("sourceEnd out of bounds"); // Are we oob?
                            if (end > this.length) end = this.length;
                            if (target.length - targetStart < end - start) end = target.length - targetStart + start;
                            var len = end - start;
                            if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
                            this.copyWithin(targetStart, start, end);
                            else if (this === target && start < targetStart && targetStart < end) // descending copy from end
                            for(var i = len - 1; i >= 0; --i)target[i + targetStart] = this[i + start];
                            else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
                            return len;
                        }; // Usage:
                        //    buffer.fill(number[, offset[, end]])
                        //    buffer.fill(buffer[, offset[, end]])
                        //    buffer.fill(string[, offset[, end]][, encoding])
                        Buffer.prototype.fill = function fill(val, start, end, encoding) {
                            // Handle string cases:
                            if (typeof val === "string") {
                                if (typeof start === "string") {
                                    encoding = start;
                                    start = 0;
                                    end = this.length;
                                } else if (typeof end === "string") {
                                    encoding = end;
                                    end = this.length;
                                }
                                if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
                                if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
                                if (val.length === 1) {
                                    var code = val.charCodeAt(0);
                                    if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
                                    val = code;
                                }
                            } else if (typeof val === "number") val = val & 255;
                             // Invalid ranges are not set to a default, so can range check early.
                            if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
                            if (end <= start) return this;
                            start = start >>> 0;
                            end = end === undefined ? this.length : end >>> 0;
                            if (!val) val = 0;
                            var i;
                            if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
                            else {
                                var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                                var len = bytes.length;
                                if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                                for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
                            }
                            return this;
                        }; // HELPER FUNCTIONS
                        // ================
                        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
                        function base64clean(str) {
                            // Node takes equal signs as end of the Base64 encoding
                            str = str.split("=")[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not
                            str = str.trim().replace(INVALID_BASE64_RE, ""); // Node converts strings with length < 2 to ''
                            if (str.length < 2) return ""; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                            while(str.length % 4 !== 0)str = str + "=";
                            return str;
                        }
                        function toHex(n) {
                            if (n < 16) return "0" + n.toString(16);
                            return n.toString(16);
                        }
                        function utf8ToBytes(string, units) {
                            units = units || Infinity;
                            var codePoint;
                            var length = string.length;
                            var leadSurrogate = null;
                            var bytes = [];
                            for(var i = 0; i < length; ++i){
                                codePoint = string.charCodeAt(i); // is surrogate component
                                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                                    // last char was a lead
                                    if (!leadSurrogate) {
                                        // no lead yet
                                        if (codePoint > 0xDBFF) {
                                            // unexpected trail
                                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                            continue;
                                        } else if (i + 1 === length) {
                                            // unpaired lead
                                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                            continue;
                                        } // valid lead
                                        leadSurrogate = codePoint;
                                        continue;
                                    } // 2 leads in a row
                                    if (codePoint < 0xDC00) {
                                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                        leadSurrogate = codePoint;
                                        continue;
                                    } // valid surrogate pair
                                    codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                                } else if (leadSurrogate) // valid bmp char, but last char was a lead
                                {
                                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                }
                                leadSurrogate = null; // encode utf8
                                if (codePoint < 0x80) {
                                    if ((units -= 1) < 0) break;
                                    bytes.push(codePoint);
                                } else if (codePoint < 0x800) {
                                    if ((units -= 2) < 0) break;
                                    bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                                } else if (codePoint < 0x10000) {
                                    if ((units -= 3) < 0) break;
                                    bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                                } else if (codePoint < 0x110000) {
                                    if ((units -= 4) < 0) break;
                                    bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                                } else throw new Error("Invalid code point");
                            }
                            return bytes;
                        }
                        function asciiToBytes(str) {
                            var byteArray = [];
                            for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
                            byteArray.push(str.charCodeAt(i) & 0xFF);
                            return byteArray;
                        }
                        function utf16leToBytes(str, units) {
                            var c, hi, lo;
                            var byteArray = [];
                            for(var i = 0; i < str.length; ++i){
                                if ((units -= 2) < 0) break;
                                c = str.charCodeAt(i);
                                hi = c >> 8;
                                lo = c % 256;
                                byteArray.push(lo);
                                byteArray.push(hi);
                            }
                            return byteArray;
                        }
                        function base64ToBytes(str) {
                            return base64.toByteArray(base64clean(str));
                        }
                        function blitBuffer(src, dst, offset, length) {
                            for(var i = 0; i < length; ++i){
                                if (i + offset >= dst.length || i >= src.length) break;
                                dst[i + offset] = src[i];
                            }
                            return i;
                        } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
                        // the `instanceof` check but they should be treated as of that type.
                        // See: https://github.com/feross/buffer/issues/166
                        function isInstance(obj, type) {
                            return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
                        }
                        function numberIsNaN(obj) {
                            // For IE11 support
                            return obj !== obj; // eslint-disable-line no-self-compare
                        }
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "base64-js": 17,
                "buffer": 63,
                "ieee754": 142
            }
        ],
        64: [
            function(require, module, exports) {
                "use strict";
                var GetIntrinsic = require("get-intrinsic");
                var callBind = require("./");
                var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
                module.exports = function callBoundIntrinsic(name, allowMissing) {
                    var intrinsic = GetIntrinsic(name, !!allowMissing);
                    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
                    return intrinsic;
                };
            },
            {
                "./": 65,
                "get-intrinsic": 108
            }
        ],
        65: [
            function(require, module, exports) {
                "use strict";
                var bind = require("function-bind");
                var GetIntrinsic = require("get-intrinsic");
                var $apply = GetIntrinsic("%Function.prototype.apply%");
                var $call = GetIntrinsic("%Function.prototype.call%");
                var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
                var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
                var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
                var $max = GetIntrinsic("%Math.max%");
                if ($defineProperty) try {
                    $defineProperty({}, "a", {
                        value: 1
                    });
                } catch (e) {
                    // IE 8 has a broken defineProperty
                    $defineProperty = null;
                }
                module.exports = function callBind(originalFunction) {
                    var func = $reflectApply(bind, $call, arguments);
                    if ($gOPD && $defineProperty) {
                        var desc = $gOPD(func, "length");
                        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
                        $defineProperty(func, "length", {
                            value: 1 + $max(0, originalFunction.length - (arguments.length - 1))
                        });
                    }
                    return func;
                };
                var applyBind = function applyBind() {
                    return $reflectApply(bind, $apply, arguments);
                };
                if ($defineProperty) $defineProperty(module.exports, "apply", {
                    value: applyBind
                });
                else module.exports.apply = applyBind;
            },
            {
                "function-bind": 107,
                "get-intrinsic": 108
            }
        ],
        66: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                var Transform = require("stream").Transform;
                var StringDecoder = require("string_decoder").StringDecoder;
                var inherits = require("inherits");
                function CipherBase(hashMode) {
                    Transform.call(this);
                    this.hashMode = typeof hashMode === "string";
                    if (this.hashMode) this[hashMode] = this._finalOrDigest;
                    else this["final"] = this._finalOrDigest;
                    if (this._final) {
                        this.__final = this._final;
                        this._final = null;
                    }
                    this._decoder = null;
                    this._encoding = null;
                }
                inherits(CipherBase, Transform);
                CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
                    if (typeof data === "string") data = Buffer.from(data, inputEnc);
                    var outData = this._update(data);
                    if (this.hashMode) return this;
                    if (outputEnc) outData = this._toString(outData, outputEnc);
                    return outData;
                };
                CipherBase.prototype.setAutoPadding = function() {};
                CipherBase.prototype.getAuthTag = function() {
                    throw new Error("trying to get auth tag in unsupported state");
                };
                CipherBase.prototype.setAuthTag = function() {
                    throw new Error("trying to set auth tag in unsupported state");
                };
                CipherBase.prototype.setAAD = function() {
                    throw new Error("trying to set aad in unsupported state");
                };
                CipherBase.prototype._transform = function(data, _, next) {
                    var err;
                    try {
                        if (this.hashMode) this._update(data);
                        else this.push(this._update(data));
                    } catch (e) {
                        err = e;
                    } finally{
                        next(err);
                    }
                };
                CipherBase.prototype._flush = function(done) {
                    var err;
                    try {
                        this.push(this.__final());
                    } catch (e) {
                        err = e;
                    }
                    done(err);
                };
                CipherBase.prototype._finalOrDigest = function(outputEnc) {
                    var outData = this.__final() || Buffer.alloc(0);
                    if (outputEnc) outData = this._toString(outData, outputEnc, true);
                    return outData;
                };
                CipherBase.prototype._toString = function(value, enc, fin) {
                    if (!this._decoder) {
                        this._decoder = new StringDecoder(enc);
                        this._encoding = enc;
                    }
                    if (this._encoding !== enc) throw new Error("can't switch encodings");
                    var out = this._decoder.write(value);
                    if (fin) out += this._decoder.end();
                    return out;
                };
                module.exports = CipherBase;
            },
            {
                "inherits": 143,
                "safe-buffer": 174,
                "stream": 184,
                "string_decoder": 199
            }
        ],
        67: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        var elliptic = require("elliptic");
                        var BN = require("bn.js");
                        module.exports = function createECDH(curve) {
                            return new ECDH(curve);
                        };
                        var aliases = {
                            secp256k1: {
                                name: "secp256k1",
                                byteLength: 32
                            },
                            secp224r1: {
                                name: "p224",
                                byteLength: 28
                            },
                            prime256v1: {
                                name: "p256",
                                byteLength: 32
                            },
                            prime192v1: {
                                name: "p192",
                                byteLength: 24
                            },
                            ed25519: {
                                name: "ed25519",
                                byteLength: 32
                            },
                            secp384r1: {
                                name: "p384",
                                byteLength: 48
                            },
                            secp521r1: {
                                name: "p521",
                                byteLength: 66
                            }
                        };
                        aliases.p224 = aliases.secp224r1;
                        aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
                        aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
                        aliases.p384 = aliases.secp384r1;
                        aliases.p521 = aliases.secp521r1;
                        function ECDH(curve) {
                            this.curveType = aliases[curve];
                            if (!this.curveType) this.curveType = {
                                name: curve
                            };
                            this.curve = new elliptic.ec(this.curveType.name); // eslint-disable-line new-cap
                            this.keys = void 0;
                        }
                        ECDH.prototype.generateKeys = function(enc, format) {
                            this.keys = this.curve.genKeyPair();
                            return this.getPublicKey(enc, format);
                        };
                        ECDH.prototype.computeSecret = function(other, inenc, enc) {
                            inenc = inenc || "utf8";
                            if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
                            var otherPub = this.curve.keyFromPublic(other).getPublic();
                            var out = otherPub.mul(this.keys.getPrivate()).getX();
                            return formatReturnValue(out, enc, this.curveType.byteLength);
                        };
                        ECDH.prototype.getPublicKey = function(enc, format) {
                            var key = this.keys.getPublic(format === "compressed", true);
                            if (format === "hybrid") {
                                if (key[key.length - 1] % 2) key[0] = 7;
                                else key[0] = 6;
                            }
                            return formatReturnValue(key, enc);
                        };
                        ECDH.prototype.getPrivateKey = function(enc) {
                            return formatReturnValue(this.keys.getPrivate(), enc);
                        };
                        ECDH.prototype.setPublicKey = function(pub, enc) {
                            enc = enc || "utf8";
                            if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
                            this.keys._importPublic(pub);
                            return this;
                        };
                        ECDH.prototype.setPrivateKey = function(priv, enc) {
                            enc = enc || "utf8";
                            if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
                            var _priv = new BN(priv);
                            _priv = _priv.toString(16);
                            this.keys = this.curve.genKeyPair();
                            this.keys._importPrivate(_priv);
                            return this;
                        };
                        function formatReturnValue(bn, enc, len) {
                            if (!Array.isArray(bn)) bn = bn.toArray();
                            var buf = new Buffer(bn);
                            if (len && buf.length < len) {
                                var zeros = new Buffer(len - buf.length);
                                zeros.fill(0);
                                buf = Buffer.concat([
                                    zeros,
                                    buf
                                ]);
                            }
                            if (!enc) return buf;
                            else return buf.toString(enc);
                        }
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "bn.js": 68,
                "buffer": 63,
                "elliptic": 85
            }
        ],
        68: [
            function(require, module, exports) {
                arguments[4][15][0].apply(exports, arguments);
            },
            {
                "buffer": 224,
                "dup": 15
            }
        ],
        69: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var MD5 = require("md5.js");
                var RIPEMD160 = require("ripemd160");
                var sha = require("sha.js");
                var Base = require("cipher-base");
                function Hash(hash) {
                    Base.call(this, "digest");
                    this._hash = hash;
                }
                inherits(Hash, Base);
                Hash.prototype._update = function(data) {
                    this._hash.update(data);
                };
                Hash.prototype._final = function() {
                    return this._hash.digest();
                };
                module.exports = function createHash(alg) {
                    alg = alg.toLowerCase();
                    if (alg === "md5") return new MD5();
                    if (alg === "rmd160" || alg === "ripemd160") return new RIPEMD160();
                    return new Hash(sha(alg));
                };
            },
            {
                "cipher-base": 66,
                "inherits": 143,
                "md5.js": 147,
                "ripemd160": 173,
                "sha.js": 177
            }
        ],
        70: [
            function(require, module, exports) {
                var MD5 = require("md5.js");
                module.exports = function(buffer) {
                    return new MD5().update(buffer).digest();
                };
            },
            {
                "md5.js": 147
            }
        ],
        71: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var Legacy = require("./legacy");
                var Base = require("cipher-base");
                var Buffer = require("safe-buffer").Buffer;
                var md5 = require("create-hash/md5");
                var RIPEMD160 = require("ripemd160");
                var sha = require("sha.js");
                var ZEROS = Buffer.alloc(128);
                function Hmac(alg, key) {
                    Base.call(this, "digest");
                    if (typeof key === "string") key = Buffer.from(key);
                    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
                    this._alg = alg;
                    this._key = key;
                    if (key.length > blocksize) {
                        var hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
                        key = hash.update(key).digest();
                    } else if (key.length < blocksize) key = Buffer.concat([
                        key,
                        ZEROS
                    ], blocksize);
                    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
                    var opad = this._opad = Buffer.allocUnsafe(blocksize);
                    for(var i = 0; i < blocksize; i++){
                        ipad[i] = key[i] ^ 0x36;
                        opad[i] = key[i] ^ 0x5C;
                    }
                    this._hash = alg === "rmd160" ? new RIPEMD160() : sha(alg);
                    this._hash.update(ipad);
                }
                inherits(Hmac, Base);
                Hmac.prototype._update = function(data) {
                    this._hash.update(data);
                };
                Hmac.prototype._final = function() {
                    var h = this._hash.digest();
                    var hash = this._alg === "rmd160" ? new RIPEMD160() : sha(this._alg);
                    return hash.update(this._opad).update(h).digest();
                };
                module.exports = function createHmac(alg, key) {
                    alg = alg.toLowerCase();
                    if (alg === "rmd160" || alg === "ripemd160") return new Hmac("rmd160", key);
                    if (alg === "md5") return new Legacy(md5, key);
                    return new Hmac(alg, key);
                };
            },
            {
                "./legacy": 72,
                "cipher-base": 66,
                "create-hash/md5": 70,
                "inherits": 143,
                "ripemd160": 173,
                "safe-buffer": 174,
                "sha.js": 177
            }
        ],
        72: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var Buffer = require("safe-buffer").Buffer;
                var Base = require("cipher-base");
                var ZEROS = Buffer.alloc(128);
                var blocksize = 64;
                function Hmac(alg, key) {
                    Base.call(this, "digest");
                    if (typeof key === "string") key = Buffer.from(key);
                    this._alg = alg;
                    this._key = key;
                    if (key.length > blocksize) key = alg(key);
                    else if (key.length < blocksize) key = Buffer.concat([
                        key,
                        ZEROS
                    ], blocksize);
                    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
                    var opad = this._opad = Buffer.allocUnsafe(blocksize);
                    for(var i = 0; i < blocksize; i++){
                        ipad[i] = key[i] ^ 0x36;
                        opad[i] = key[i] ^ 0x5C;
                    }
                    this._hash = [
                        ipad
                    ];
                }
                inherits(Hmac, Base);
                Hmac.prototype._update = function(data) {
                    this._hash.push(data);
                };
                Hmac.prototype._final = function() {
                    var h = this._alg(Buffer.concat(this._hash));
                    return this._alg(Buffer.concat([
                        this._opad,
                        h
                    ]));
                };
                module.exports = Hmac;
            },
            {
                "cipher-base": 66,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        73: [
            function(require, module, exports) {
                "use strict";
                exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require("randombytes");
                exports.createHash = exports.Hash = require("create-hash");
                exports.createHmac = exports.Hmac = require("create-hmac");
                var algos = require("browserify-sign/algos");
                var algoKeys = Object.keys(algos);
                var hashes = [
                    "sha1",
                    "sha224",
                    "sha256",
                    "sha384",
                    "sha512",
                    "md5",
                    "rmd160"
                ].concat(algoKeys);
                exports.getHashes = function() {
                    return hashes;
                };
                var p = require("pbkdf2");
                exports.pbkdf2 = p.pbkdf2;
                exports.pbkdf2Sync = p.pbkdf2Sync;
                var aes = require("browserify-cipher");
                exports.Cipher = aes.Cipher;
                exports.createCipher = aes.createCipher;
                exports.Cipheriv = aes.Cipheriv;
                exports.createCipheriv = aes.createCipheriv;
                exports.Decipher = aes.Decipher;
                exports.createDecipher = aes.createDecipher;
                exports.Decipheriv = aes.Decipheriv;
                exports.createDecipheriv = aes.createDecipheriv;
                exports.getCiphers = aes.getCiphers;
                exports.listCiphers = aes.listCiphers;
                var dh = require("diffie-hellman");
                exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
                exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
                exports.getDiffieHellman = dh.getDiffieHellman;
                exports.createDiffieHellman = dh.createDiffieHellman;
                exports.DiffieHellman = dh.DiffieHellman;
                var sign = require("browserify-sign");
                exports.createSign = sign.createSign;
                exports.Sign = sign.Sign;
                exports.createVerify = sign.createVerify;
                exports.Verify = sign.Verify;
                exports.createECDH = require("create-ecdh");
                var publicEncrypt = require("public-encrypt");
                exports.publicEncrypt = publicEncrypt.publicEncrypt;
                exports.privateEncrypt = publicEncrypt.privateEncrypt;
                exports.publicDecrypt = publicEncrypt.publicDecrypt;
                exports.privateDecrypt = publicEncrypt.privateDecrypt; // the least I can do is make error messages for the rest of the node.js/crypto api.
                // ;[
                //   'createCredentials'
                // ].forEach(function (name) {
                //   exports[name] = function () {
                //     throw new Error([
                //       'sorry, ' + name + ' is not implemented yet',
                //       'we accept pull requests',
                //       'https://github.com/crypto-browserify/crypto-browserify'
                //     ].join('\n'))
                //   }
                // })
                var rf = require("randomfill");
                exports.randomFill = rf.randomFill;
                exports.randomFillSync = rf.randomFillSync;
                exports.createCredentials = function() {
                    throw new Error([
                        "sorry, createCredentials is not implemented yet",
                        "we accept pull requests",
                        "https://github.com/crypto-browserify/crypto-browserify"
                    ].join("\n"));
                };
                exports.constants = {
                    "DH_CHECK_P_NOT_SAFE_PRIME": 2,
                    "DH_CHECK_P_NOT_PRIME": 1,
                    "DH_UNABLE_TO_CHECK_GENERATOR": 4,
                    "DH_NOT_SUITABLE_GENERATOR": 8,
                    "NPN_ENABLED": 1,
                    "ALPN_ENABLED": 1,
                    "RSA_PKCS1_PADDING": 1,
                    "RSA_SSLV23_PADDING": 2,
                    "RSA_NO_PADDING": 3,
                    "RSA_PKCS1_OAEP_PADDING": 4,
                    "RSA_X931_PADDING": 5,
                    "RSA_PKCS1_PSS_PADDING": 6,
                    "POINT_CONVERSION_COMPRESSED": 2,
                    "POINT_CONVERSION_UNCOMPRESSED": 4,
                    "POINT_CONVERSION_HYBRID": 6
                };
            },
            {
                "browserify-cipher": 37,
                "browserify-sign": 44,
                "browserify-sign/algos": 41,
                "create-ecdh": 67,
                "create-hash": 69,
                "create-hmac": 71,
                "diffie-hellman": 80,
                "pbkdf2": 157,
                "public-encrypt": 164,
                "randombytes": 171,
                "randomfill": 172
            }
        ],
        74: [
            function(require, module, exports) {
                "use strict";
                exports.utils = require("./des/utils");
                exports.Cipher = require("./des/cipher");
                exports.DES = require("./des/des");
                exports.CBC = require("./des/cbc");
                exports.EDE = require("./des/ede");
            },
            {
                "./des/cbc": 75,
                "./des/cipher": 76,
                "./des/des": 77,
                "./des/ede": 78,
                "./des/utils": 79
            }
        ],
        75: [
            function(require, module, exports) {
                "use strict";
                var assert = require("minimalistic-assert");
                var inherits = require("inherits");
                var proto = {};
                function CBCState(iv) {
                    assert.equal(iv.length, 8, "Invalid IV length");
                    this.iv = new Array(8);
                    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
                }
                function instantiate(Base) {
                    function CBC(options) {
                        Base.call(this, options);
                        this._cbcInit();
                    }
                    inherits(CBC, Base);
                    var keys = Object.keys(proto);
                    for(var i = 0; i < keys.length; i++){
                        var key = keys[i];
                        CBC.prototype[key] = proto[key];
                    }
                    CBC.create = function create(options) {
                        return new CBC(options);
                    };
                    return CBC;
                }
                exports.instantiate = instantiate;
                proto._cbcInit = function _cbcInit() {
                    var state = new CBCState(this.options.iv);
                    this._cbcState = state;
                };
                proto._update = function _update(inp, inOff, out, outOff) {
                    var state = this._cbcState;
                    var superProto = this.constructor.super_.prototype;
                    var iv = state.iv;
                    if (this.type === "encrypt") {
                        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
                        superProto._update.call(this, iv, 0, out, outOff);
                        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
                    } else {
                        superProto._update.call(this, inp, inOff, out, outOff);
                        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
                        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
                    }
                };
            },
            {
                "inherits": 143,
                "minimalistic-assert": 150
            }
        ],
        76: [
            function(require, module, exports) {
                "use strict";
                var assert = require("minimalistic-assert");
                function Cipher(options) {
                    this.options = options;
                    this.type = this.options.type;
                    this.blockSize = 8;
                    this._init();
                    this.buffer = new Array(this.blockSize);
                    this.bufferOff = 0;
                }
                module.exports = Cipher;
                Cipher.prototype._init = function _init() {};
                Cipher.prototype.update = function update(data) {
                    if (data.length === 0) return [];
                    if (this.type === "decrypt") return this._updateDecrypt(data);
                    else return this._updateEncrypt(data);
                };
                Cipher.prototype._buffer = function _buffer(data, off) {
                    // Append data to buffer
                    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
                    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
                    this.bufferOff += min; // Shift next
                    return min;
                };
                Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
                    this._update(this.buffer, 0, out, off);
                    this.bufferOff = 0;
                    return this.blockSize;
                };
                Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
                    var inputOff = 0;
                    var outputOff = 0;
                    var count = (this.bufferOff + data.length) / this.blockSize | 0;
                    var out = new Array(count * this.blockSize);
                    if (this.bufferOff !== 0) {
                        inputOff += this._buffer(data, inputOff);
                        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
                    } // Write blocks
                    var max = data.length - (data.length - inputOff) % this.blockSize;
                    for(; inputOff < max; inputOff += this.blockSize){
                        this._update(data, inputOff, out, outputOff);
                        outputOff += this.blockSize;
                    } // Queue rest
                    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
                    return out;
                };
                Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
                    var inputOff = 0;
                    var outputOff = 0;
                    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
                    var out = new Array(count * this.blockSize); // TODO(indutny): optimize it, this is far from optimal
                    for(; count > 0; count--){
                        inputOff += this._buffer(data, inputOff);
                        outputOff += this._flushBuffer(out, outputOff);
                    } // Buffer rest of the input
                    inputOff += this._buffer(data, inputOff);
                    return out;
                };
                Cipher.prototype["final"] = function _final(buffer) {
                    var first;
                    if (buffer) first = this.update(buffer);
                    var last;
                    if (this.type === "encrypt") last = this._finalEncrypt();
                    else last = this._finalDecrypt();
                    if (first) return first.concat(last);
                    else return last;
                };
                Cipher.prototype._pad = function _pad(buffer, off) {
                    if (off === 0) return false;
                    while(off < buffer.length)buffer[off++] = 0;
                    return true;
                };
                Cipher.prototype._finalEncrypt = function _finalEncrypt() {
                    if (!this._pad(this.buffer, this.bufferOff)) return [];
                    var out = new Array(this.blockSize);
                    this._update(this.buffer, 0, out, 0);
                    return out;
                };
                Cipher.prototype._unpad = function _unpad(buffer) {
                    return buffer;
                };
                Cipher.prototype._finalDecrypt = function _finalDecrypt() {
                    assert.equal(this.bufferOff, this.blockSize, "Not enough data to decrypt");
                    var out = new Array(this.blockSize);
                    this._flushBuffer(out, 0);
                    return this._unpad(out);
                };
            },
            {
                "minimalistic-assert": 150
            }
        ],
        77: [
            function(require, module, exports) {
                "use strict";
                var assert = require("minimalistic-assert");
                var inherits = require("inherits");
                var utils = require("./utils");
                var Cipher = require("./cipher");
                function DESState() {
                    this.tmp = new Array(2);
                    this.keys = null;
                }
                function DES(options) {
                    Cipher.call(this, options);
                    var state = new DESState();
                    this._desState = state;
                    this.deriveKeys(state, options.key);
                }
                inherits(DES, Cipher);
                module.exports = DES;
                DES.create = function create(options) {
                    return new DES(options);
                };
                var shiftTable = [
                    1,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1
                ];
                DES.prototype.deriveKeys = function deriveKeys(state, key) {
                    state.keys = new Array(32);
                    assert.equal(key.length, this.blockSize, "Invalid key length");
                    var kL = utils.readUInt32BE(key, 0);
                    var kR = utils.readUInt32BE(key, 4);
                    utils.pc1(kL, kR, state.tmp, 0);
                    kL = state.tmp[0];
                    kR = state.tmp[1];
                    for(var i = 0; i < state.keys.length; i += 2){
                        var shift = shiftTable[i >>> 1];
                        kL = utils.r28shl(kL, shift);
                        kR = utils.r28shl(kR, shift);
                        utils.pc2(kL, kR, state.keys, i);
                    }
                };
                DES.prototype._update = function _update(inp, inOff, out, outOff) {
                    var state = this._desState;
                    var l = utils.readUInt32BE(inp, inOff);
                    var r = utils.readUInt32BE(inp, inOff + 4); // Initial Permutation
                    utils.ip(l, r, state.tmp, 0);
                    l = state.tmp[0];
                    r = state.tmp[1];
                    if (this.type === "encrypt") this._encrypt(state, l, r, state.tmp, 0);
                    else this._decrypt(state, l, r, state.tmp, 0);
                    l = state.tmp[0];
                    r = state.tmp[1];
                    utils.writeUInt32BE(out, l, outOff);
                    utils.writeUInt32BE(out, r, outOff + 4);
                };
                DES.prototype._pad = function _pad(buffer, off) {
                    var value = buffer.length - off;
                    for(var i = off; i < buffer.length; i++)buffer[i] = value;
                    return true;
                };
                DES.prototype._unpad = function _unpad(buffer) {
                    var pad = buffer[buffer.length - 1];
                    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
                    return buffer.slice(0, buffer.length - pad);
                };
                DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
                    var l = lStart;
                    var r = rStart; // Apply f() x16 times
                    for(var i = 0; i < state.keys.length; i += 2){
                        var keyL = state.keys[i];
                        var keyR = state.keys[i + 1]; // f(r, k)
                        utils.expand(r, state.tmp, 0);
                        keyL ^= state.tmp[0];
                        keyR ^= state.tmp[1];
                        var s = utils.substitute(keyL, keyR);
                        var f = utils.permute(s);
                        var t = r;
                        r = (l ^ f) >>> 0;
                        l = t;
                    } // Reverse Initial Permutation
                    utils.rip(r, l, out, off);
                };
                DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
                    var l = rStart;
                    var r = lStart; // Apply f() x16 times
                    for(var i = state.keys.length - 2; i >= 0; i -= 2){
                        var keyL = state.keys[i];
                        var keyR = state.keys[i + 1]; // f(r, k)
                        utils.expand(l, state.tmp, 0);
                        keyL ^= state.tmp[0];
                        keyR ^= state.tmp[1];
                        var s = utils.substitute(keyL, keyR);
                        var f = utils.permute(s);
                        var t = l;
                        l = (r ^ f) >>> 0;
                        r = t;
                    } // Reverse Initial Permutation
                    utils.rip(l, r, out, off);
                };
            },
            {
                "./cipher": 76,
                "./utils": 79,
                "inherits": 143,
                "minimalistic-assert": 150
            }
        ],
        78: [
            function(require, module, exports) {
                "use strict";
                var assert = require("minimalistic-assert");
                var inherits = require("inherits");
                var Cipher = require("./cipher");
                var DES = require("./des");
                function EDEState(type, key) {
                    assert.equal(key.length, 24, "Invalid key length");
                    var k1 = key.slice(0, 8);
                    var k2 = key.slice(8, 16);
                    var k3 = key.slice(16, 24);
                    if (type === "encrypt") this.ciphers = [
                        DES.create({
                            type: "encrypt",
                            key: k1
                        }),
                        DES.create({
                            type: "decrypt",
                            key: k2
                        }),
                        DES.create({
                            type: "encrypt",
                            key: k3
                        })
                    ];
                    else this.ciphers = [
                        DES.create({
                            type: "decrypt",
                            key: k3
                        }),
                        DES.create({
                            type: "encrypt",
                            key: k2
                        }),
                        DES.create({
                            type: "decrypt",
                            key: k1
                        })
                    ];
                }
                function EDE(options) {
                    Cipher.call(this, options);
                    var state = new EDEState(this.type, this.options.key);
                    this._edeState = state;
                }
                inherits(EDE, Cipher);
                module.exports = EDE;
                EDE.create = function create(options) {
                    return new EDE(options);
                };
                EDE.prototype._update = function _update(inp, inOff, out, outOff) {
                    var state = this._edeState;
                    state.ciphers[0]._update(inp, inOff, out, outOff);
                    state.ciphers[1]._update(out, outOff, out, outOff);
                    state.ciphers[2]._update(out, outOff, out, outOff);
                };
                EDE.prototype._pad = DES.prototype._pad;
                EDE.prototype._unpad = DES.prototype._unpad;
            },
            {
                "./cipher": 76,
                "./des": 77,
                "inherits": 143,
                "minimalistic-assert": 150
            }
        ],
        79: [
            function(require, module, exports) {
                "use strict";
                exports.readUInt32BE = function readUInt32BE(bytes, off) {
                    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
                    return res >>> 0;
                };
                exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
                    bytes[0 + off] = value >>> 24;
                    bytes[1 + off] = value >>> 16 & 0xff;
                    bytes[2 + off] = value >>> 8 & 0xff;
                    bytes[3 + off] = value & 0xff;
                };
                exports.ip = function ip(inL, inR, out, off) {
                    var outL = 0;
                    var outR = 0;
                    for(var i = 6; i >= 0; i -= 2){
                        for(var j = 0; j <= 24; j += 8){
                            outL <<= 1;
                            outL |= inR >>> j + i & 1;
                        }
                        for(var j = 0; j <= 24; j += 8){
                            outL <<= 1;
                            outL |= inL >>> j + i & 1;
                        }
                    }
                    for(var i = 6; i >= 0; i -= 2){
                        for(var j = 1; j <= 25; j += 8){
                            outR <<= 1;
                            outR |= inR >>> j + i & 1;
                        }
                        for(var j = 1; j <= 25; j += 8){
                            outR <<= 1;
                            outR |= inL >>> j + i & 1;
                        }
                    }
                    out[off + 0] = outL >>> 0;
                    out[off + 1] = outR >>> 0;
                };
                exports.rip = function rip(inL, inR, out, off) {
                    var outL = 0;
                    var outR = 0;
                    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
                        outL <<= 1;
                        outL |= inR >>> j + i & 1;
                        outL <<= 1;
                        outL |= inL >>> j + i & 1;
                    }
                    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
                        outR <<= 1;
                        outR |= inR >>> j + i & 1;
                        outR <<= 1;
                        outR |= inL >>> j + i & 1;
                    }
                    out[off + 0] = outL >>> 0;
                    out[off + 1] = outR >>> 0;
                };
                exports.pc1 = function pc1(inL, inR, out, off) {
                    var outL = 0;
                    var outR = 0; // 7, 15, 23, 31, 39, 47, 55, 63
                    // 6, 14, 22, 30, 39, 47, 55, 63
                    // 5, 13, 21, 29, 39, 47, 55, 63
                    // 4, 12, 20, 28
                    for(var i = 7; i >= 5; i--){
                        for(var j = 0; j <= 24; j += 8){
                            outL <<= 1;
                            outL |= inR >> j + i & 1;
                        }
                        for(var j = 0; j <= 24; j += 8){
                            outL <<= 1;
                            outL |= inL >> j + i & 1;
                        }
                    }
                    for(var j = 0; j <= 24; j += 8){
                        outL <<= 1;
                        outL |= inR >> j + i & 1;
                    } // 1, 9, 17, 25, 33, 41, 49, 57
                    // 2, 10, 18, 26, 34, 42, 50, 58
                    // 3, 11, 19, 27, 35, 43, 51, 59
                    // 36, 44, 52, 60
                    for(var i = 1; i <= 3; i++){
                        for(var j = 0; j <= 24; j += 8){
                            outR <<= 1;
                            outR |= inR >> j + i & 1;
                        }
                        for(var j = 0; j <= 24; j += 8){
                            outR <<= 1;
                            outR |= inL >> j + i & 1;
                        }
                    }
                    for(var j = 0; j <= 24; j += 8){
                        outR <<= 1;
                        outR |= inL >> j + i & 1;
                    }
                    out[off + 0] = outL >>> 0;
                    out[off + 1] = outR >>> 0;
                };
                exports.r28shl = function r28shl(num, shift) {
                    return num << shift & 0xfffffff | num >>> 28 - shift;
                };
                var pc2table = [
                    14,
                    11,
                    17,
                    4,
                    27,
                    23,
                    25,
                    0,
                    13,
                    22,
                    7,
                    18,
                    5,
                    9,
                    16,
                    24,
                    2,
                    20,
                    12,
                    21,
                    1,
                    8,
                    15,
                    26,
                    15,
                    4,
                    25,
                    19,
                    9,
                    1,
                    26,
                    16,
                    5,
                    11,
                    23,
                    8,
                    12,
                    7,
                    17,
                    0,
                    22,
                    3,
                    10,
                    14,
                    6,
                    20,
                    27,
                    24
                ];
                exports.pc2 = function pc2(inL, inR, out, off) {
                    var outL = 0;
                    var outR = 0;
                    var len = pc2table.length >>> 1;
                    for(var i = 0; i < len; i++){
                        outL <<= 1;
                        outL |= inL >>> pc2table[i] & 0x1;
                    }
                    for(var i = len; i < pc2table.length; i++){
                        outR <<= 1;
                        outR |= inR >>> pc2table[i] & 0x1;
                    }
                    out[off + 0] = outL >>> 0;
                    out[off + 1] = outR >>> 0;
                };
                exports.expand = function expand(r, out, off) {
                    var outL = 0;
                    var outR = 0;
                    outL = (r & 1) << 5 | r >>> 27;
                    for(var i = 23; i >= 15; i -= 4){
                        outL <<= 6;
                        outL |= r >>> i & 0x3f;
                    }
                    for(var i = 11; i >= 3; i -= 4){
                        outR |= r >>> i & 0x3f;
                        outR <<= 6;
                    }
                    outR |= (r & 0x1f) << 1 | r >>> 31;
                    out[off + 0] = outL >>> 0;
                    out[off + 1] = outR >>> 0;
                };
                var sTable = [
                    14,
                    0,
                    4,
                    15,
                    13,
                    7,
                    1,
                    4,
                    2,
                    14,
                    15,
                    2,
                    11,
                    13,
                    8,
                    1,
                    3,
                    10,
                    10,
                    6,
                    6,
                    12,
                    12,
                    11,
                    5,
                    9,
                    9,
                    5,
                    0,
                    3,
                    7,
                    8,
                    4,
                    15,
                    1,
                    12,
                    14,
                    8,
                    8,
                    2,
                    13,
                    4,
                    6,
                    9,
                    2,
                    1,
                    11,
                    7,
                    15,
                    5,
                    12,
                    11,
                    9,
                    3,
                    7,
                    14,
                    3,
                    10,
                    10,
                    0,
                    5,
                    6,
                    0,
                    13,
                    15,
                    3,
                    1,
                    13,
                    8,
                    4,
                    14,
                    7,
                    6,
                    15,
                    11,
                    2,
                    3,
                    8,
                    4,
                    14,
                    9,
                    12,
                    7,
                    0,
                    2,
                    1,
                    13,
                    10,
                    12,
                    6,
                    0,
                    9,
                    5,
                    11,
                    10,
                    5,
                    0,
                    13,
                    14,
                    8,
                    7,
                    10,
                    11,
                    1,
                    10,
                    3,
                    4,
                    15,
                    13,
                    4,
                    1,
                    2,
                    5,
                    11,
                    8,
                    6,
                    12,
                    7,
                    6,
                    12,
                    9,
                    0,
                    3,
                    5,
                    2,
                    14,
                    15,
                    9,
                    10,
                    13,
                    0,
                    7,
                    9,
                    0,
                    14,
                    9,
                    6,
                    3,
                    3,
                    4,
                    15,
                    6,
                    5,
                    10,
                    1,
                    2,
                    13,
                    8,
                    12,
                    5,
                    7,
                    14,
                    11,
                    12,
                    4,
                    11,
                    2,
                    15,
                    8,
                    1,
                    13,
                    1,
                    6,
                    10,
                    4,
                    13,
                    9,
                    0,
                    8,
                    6,
                    15,
                    9,
                    3,
                    8,
                    0,
                    7,
                    11,
                    4,
                    1,
                    15,
                    2,
                    14,
                    12,
                    3,
                    5,
                    11,
                    10,
                    5,
                    14,
                    2,
                    7,
                    12,
                    7,
                    13,
                    13,
                    8,
                    14,
                    11,
                    3,
                    5,
                    0,
                    6,
                    6,
                    15,
                    9,
                    0,
                    10,
                    3,
                    1,
                    4,
                    2,
                    7,
                    8,
                    2,
                    5,
                    12,
                    11,
                    1,
                    12,
                    10,
                    4,
                    14,
                    15,
                    9,
                    10,
                    3,
                    6,
                    15,
                    9,
                    0,
                    0,
                    6,
                    12,
                    10,
                    11,
                    1,
                    7,
                    13,
                    13,
                    8,
                    15,
                    9,
                    1,
                    4,
                    3,
                    5,
                    14,
                    11,
                    5,
                    12,
                    2,
                    7,
                    8,
                    2,
                    4,
                    14,
                    2,
                    14,
                    12,
                    11,
                    4,
                    2,
                    1,
                    12,
                    7,
                    4,
                    10,
                    7,
                    11,
                    13,
                    6,
                    1,
                    8,
                    5,
                    5,
                    0,
                    3,
                    15,
                    15,
                    10,
                    13,
                    3,
                    0,
                    9,
                    14,
                    8,
                    9,
                    6,
                    4,
                    11,
                    2,
                    8,
                    1,
                    12,
                    11,
                    7,
                    10,
                    1,
                    13,
                    14,
                    7,
                    2,
                    8,
                    13,
                    15,
                    6,
                    9,
                    15,
                    12,
                    0,
                    5,
                    9,
                    6,
                    10,
                    3,
                    4,
                    0,
                    5,
                    14,
                    3,
                    12,
                    10,
                    1,
                    15,
                    10,
                    4,
                    15,
                    2,
                    9,
                    7,
                    2,
                    12,
                    6,
                    9,
                    8,
                    5,
                    0,
                    6,
                    13,
                    1,
                    3,
                    13,
                    4,
                    14,
                    14,
                    0,
                    7,
                    11,
                    5,
                    3,
                    11,
                    8,
                    9,
                    4,
                    14,
                    3,
                    15,
                    2,
                    5,
                    12,
                    2,
                    9,
                    8,
                    5,
                    12,
                    15,
                    3,
                    10,
                    7,
                    11,
                    0,
                    14,
                    4,
                    1,
                    10,
                    7,
                    1,
                    6,
                    13,
                    0,
                    11,
                    8,
                    6,
                    13,
                    4,
                    13,
                    11,
                    0,
                    2,
                    11,
                    14,
                    7,
                    15,
                    4,
                    0,
                    9,
                    8,
                    1,
                    13,
                    10,
                    3,
                    14,
                    12,
                    3,
                    9,
                    5,
                    7,
                    12,
                    5,
                    2,
                    10,
                    15,
                    6,
                    8,
                    1,
                    6,
                    1,
                    6,
                    4,
                    11,
                    11,
                    13,
                    13,
                    8,
                    12,
                    1,
                    3,
                    4,
                    7,
                    10,
                    14,
                    7,
                    10,
                    9,
                    15,
                    5,
                    6,
                    0,
                    8,
                    15,
                    0,
                    14,
                    5,
                    2,
                    9,
                    3,
                    2,
                    12,
                    13,
                    1,
                    2,
                    15,
                    8,
                    13,
                    4,
                    8,
                    6,
                    10,
                    15,
                    3,
                    11,
                    7,
                    1,
                    4,
                    10,
                    12,
                    9,
                    5,
                    3,
                    6,
                    14,
                    11,
                    5,
                    0,
                    0,
                    14,
                    12,
                    9,
                    7,
                    2,
                    7,
                    2,
                    11,
                    1,
                    4,
                    14,
                    1,
                    7,
                    9,
                    4,
                    12,
                    10,
                    14,
                    8,
                    2,
                    13,
                    0,
                    15,
                    6,
                    12,
                    10,
                    9,
                    13,
                    0,
                    15,
                    3,
                    3,
                    5,
                    5,
                    6,
                    8,
                    11
                ];
                exports.substitute = function substitute(inL, inR) {
                    var out = 0;
                    for(var i = 0; i < 4; i++){
                        var b = inL >>> 18 - i * 6 & 0x3f;
                        var sb = sTable[i * 0x40 + b];
                        out <<= 4;
                        out |= sb;
                    }
                    for(var i = 0; i < 4; i++){
                        var b = inR >>> 18 - i * 6 & 0x3f;
                        var sb = sTable[256 + i * 0x40 + b];
                        out <<= 4;
                        out |= sb;
                    }
                    return out >>> 0;
                };
                var permuteTable = [
                    16,
                    25,
                    12,
                    11,
                    3,
                    20,
                    4,
                    15,
                    31,
                    17,
                    9,
                    6,
                    27,
                    14,
                    1,
                    22,
                    30,
                    24,
                    8,
                    18,
                    0,
                    5,
                    29,
                    23,
                    13,
                    19,
                    2,
                    26,
                    10,
                    21,
                    28,
                    7
                ];
                exports.permute = function permute(num) {
                    var out = 0;
                    for(var i = 0; i < permuteTable.length; i++){
                        out <<= 1;
                        out |= num >>> permuteTable[i] & 0x1;
                    }
                    return out >>> 0;
                };
                exports.padSplit = function padSplit(num, size, group) {
                    var str = num.toString(2);
                    while(str.length < size)str = "0" + str;
                    var out = [];
                    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
                    return out.join(" ");
                };
            },
            {}
        ],
        80: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        var generatePrime = require("./lib/generatePrime");
                        var primes = require("./lib/primes.json");
                        var DH = require("./lib/dh");
                        function getDiffieHellman(mod) {
                            var prime = new Buffer(primes[mod].prime, "hex");
                            var gen = new Buffer(primes[mod].gen, "hex");
                            return new DH(prime, gen);
                        }
                        var ENCODINGS = {
                            "binary": true,
                            "hex": true,
                            "base64": true
                        };
                        function createDiffieHellman(prime, enc, generator, genc) {
                            if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, "binary", enc, generator);
                            enc = enc || "binary";
                            genc = genc || "binary";
                            generator = generator || new Buffer([
                                2
                            ]);
                            if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
                            if (typeof prime === "number") return new DH(generatePrime(prime, generator), generator, true);
                            if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
                            return new DH(prime, generator, true);
                        }
                        exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
                        exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "./lib/dh": 81,
                "./lib/generatePrime": 82,
                "./lib/primes.json": 83,
                "buffer": 63
            }
        ],
        81: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        var BN = require("bn.js");
                        var MillerRabin = require("miller-rabin");
                        var millerRabin = new MillerRabin();
                        var TWENTYFOUR = new BN(24);
                        var ELEVEN = new BN(11);
                        var TEN = new BN(10);
                        var THREE = new BN(3);
                        var SEVEN = new BN(7);
                        var primes = require("./generatePrime");
                        var randomBytes = require("randombytes");
                        module.exports = DH;
                        function setPublicKey(pub, enc) {
                            enc = enc || "utf8";
                            if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
                            this._pub = new BN(pub);
                            return this;
                        }
                        function setPrivateKey(priv, enc) {
                            enc = enc || "utf8";
                            if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
                            this._priv = new BN(priv);
                            return this;
                        }
                        var primeCache = {};
                        function checkPrime(prime, generator) {
                            var gen = generator.toString("hex");
                            var hex = [
                                gen,
                                prime.toString(16)
                            ].join("_");
                            if (hex in primeCache) return primeCache[hex];
                            var error = 0;
                            if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
                                //not a prime so +1
                                error += 1;
                                if (gen === "02" || gen === "05") // we'd be able to check the generator
                                // it would fail so +8
                                error += 8;
                                else //we wouldn't be able to test the generator
                                // so +4
                                error += 4;
                                primeCache[hex] = error;
                                return error;
                            }
                            if (!millerRabin.test(prime.shrn(1))) //not a safe prime
                            error += 2;
                            var rem;
                            switch(gen){
                                case "02":
                                    if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
                                    error += 8;
                                    break;
                                case "05":
                                    rem = prime.mod(TEN);
                                    if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
                                    error += 8;
                                    break;
                                default:
                                    error += 4;
                            }
                            primeCache[hex] = error;
                            return error;
                        }
                        function DH(prime, generator, malleable) {
                            this.setGenerator(generator);
                            this.__prime = new BN(prime);
                            this._prime = BN.mont(this.__prime);
                            this._primeLen = prime.length;
                            this._pub = undefined;
                            this._priv = undefined;
                            this._primeCode = undefined;
                            if (malleable) {
                                this.setPublicKey = setPublicKey;
                                this.setPrivateKey = setPrivateKey;
                            } else this._primeCode = 8;
                        }
                        Object.defineProperty(DH.prototype, "verifyError", {
                            enumerable: true,
                            get: function get() {
                                if (typeof this._primeCode !== "number") this._primeCode = checkPrime(this.__prime, this.__gen);
                                return this._primeCode;
                            }
                        });
                        DH.prototype.generateKeys = function() {
                            if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
                            this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
                            return this.getPublicKey();
                        };
                        DH.prototype.computeSecret = function(other) {
                            other = new BN(other);
                            other = other.toRed(this._prime);
                            var secret = other.redPow(this._priv).fromRed();
                            var out = new Buffer(secret.toArray());
                            var prime = this.getPrime();
                            if (out.length < prime.length) {
                                var front = new Buffer(prime.length - out.length);
                                front.fill(0);
                                out = Buffer.concat([
                                    front,
                                    out
                                ]);
                            }
                            return out;
                        };
                        DH.prototype.getPublicKey = function getPublicKey(enc) {
                            return formatReturnValue(this._pub, enc);
                        };
                        DH.prototype.getPrivateKey = function getPrivateKey(enc) {
                            return formatReturnValue(this._priv, enc);
                        };
                        DH.prototype.getPrime = function(enc) {
                            return formatReturnValue(this.__prime, enc);
                        };
                        DH.prototype.getGenerator = function(enc) {
                            return formatReturnValue(this._gen, enc);
                        };
                        DH.prototype.setGenerator = function(gen, enc) {
                            enc = enc || "utf8";
                            if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
                            this.__gen = gen;
                            this._gen = new BN(gen);
                            return this;
                        };
                        function formatReturnValue(bn, enc) {
                            var buf = new Buffer(bn.toArray());
                            if (!enc) return buf;
                            else return buf.toString(enc);
                        }
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "./generatePrime": 82,
                "bn.js": 84,
                "buffer": 63,
                "miller-rabin": 148,
                "randombytes": 171
            }
        ],
        82: [
            function(require, module, exports) {
                var randomBytes = require("randombytes");
                module.exports = findPrime;
                findPrime.simpleSieve = simpleSieve;
                findPrime.fermatTest = fermatTest;
                var BN = require("bn.js");
                var TWENTYFOUR = new BN(24);
                var MillerRabin = require("miller-rabin");
                var millerRabin = new MillerRabin();
                var ONE = new BN(1);
                var TWO = new BN(2);
                var FIVE = new BN(5);
                var SIXTEEN = new BN(16);
                var EIGHT = new BN(8);
                var TEN = new BN(10);
                var THREE = new BN(3);
                var SEVEN = new BN(7);
                var ELEVEN = new BN(11);
                var FOUR = new BN(4);
                var TWELVE = new BN(12);
                var primes1 = null;
                function _getPrimes() {
                    if (primes1 !== null) return primes1;
                    var limit = 0x100000;
                    var res = [];
                    res[0] = 2;
                    for(var i = 1, k = 3; k < limit; k += 2){
                        var sqrt = Math.ceil(Math.sqrt(k));
                        for(var j = 0; j < i && res[j] <= sqrt; j++){
                            if (k % res[j] === 0) break;
                        }
                        if (i !== j && res[j] <= sqrt) continue;
                        res[i++] = k;
                    }
                    primes1 = res;
                    return res;
                }
                function simpleSieve(p) {
                    var primes = _getPrimes();
                    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
                        if (p.cmpn(primes[i]) === 0) return true;
                        else return false;
                    }
                    return true;
                }
                function fermatTest(p) {
                    var red = BN.mont(p);
                    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
                }
                function findPrime(bits, gen) {
                    if (bits < 16) {
                        // this is what openssl does
                        if (gen === 2 || gen === 5) return new BN([
                            0x8c,
                            0x7b
                        ]);
                        else return new BN([
                            0x8c,
                            0x27
                        ]);
                    }
                    gen = new BN(gen);
                    var num, n2;
                    while(true){
                        num = new BN(randomBytes(Math.ceil(bits / 8)));
                        while(num.bitLength() > bits)num.ishrn(1);
                        if (num.isEven()) num.iadd(ONE);
                        if (!num.testn(1)) num.iadd(TWO);
                        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
                        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
                        n2 = num.shrn(1);
                        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
                    }
                }
            },
            {
                "bn.js": 84,
                "miller-rabin": 148,
                "randombytes": 171
            }
        ],
        83: [
            function(require, module, exports) {
                module.exports = {
                    "modp1": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
                    },
                    "modp2": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
                    },
                    "modp5": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
                    },
                    "modp14": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
                    },
                    "modp15": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
                    },
                    "modp16": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
                    },
                    "modp17": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
                    },
                    "modp18": {
                        "gen": "02",
                        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
                    }
                };
            },
            {}
        ],
        84: [
            function(require, module, exports) {
                arguments[4][15][0].apply(exports, arguments);
            },
            {
                "buffer": 224,
                "dup": 15
            }
        ],
        85: [
            function(require, module, exports) {
                "use strict";
                var elliptic = exports;
                elliptic.version = require("../package.json").version;
                elliptic.utils = require("./elliptic/utils");
                elliptic.rand = require("brorand");
                elliptic.curve = require("./elliptic/curve");
                elliptic.curves = require("./elliptic/curves"); // Protocols
                elliptic.ec = require("./elliptic/ec");
                elliptic.eddsa = require("./elliptic/eddsa");
            },
            {
                "../package.json": 101,
                "./elliptic/curve": 88,
                "./elliptic/curves": 91,
                "./elliptic/ec": 92,
                "./elliptic/eddsa": 95,
                "./elliptic/utils": 99,
                "brorand": 19
            }
        ],
        86: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var getNAF = utils.getNAF;
                var getJSF = utils.getJSF;
                var assert = utils.assert;
                function BaseCurve(type, conf) {
                    this.type = type;
                    this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime
                    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves
                    this.zero = new BN(0).toRed(this.red);
                    this.one = new BN(1).toRed(this.red);
                    this.two = new BN(2).toRed(this.red); // Curve configuration, optional
                    this.n = conf.n && new BN(conf.n, 16);
                    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays
                    this._wnafT1 = new Array(4);
                    this._wnafT2 = new Array(4);
                    this._wnafT3 = new Array(4);
                    this._wnafT4 = new Array(4);
                    this._bitLength = this.n ? this.n.bitLength() : 0; // Generalized Greg Maxwell's trick
                    var adjustCount = this.n && this.p.div(this.n);
                    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
                    else {
                        this._maxwellTrick = true;
                        this.redN = this.n.toRed(this.red);
                    }
                }
                module.exports = BaseCurve;
                BaseCurve.prototype.point = function point() {
                    throw new Error("Not implemented");
                };
                BaseCurve.prototype.validate = function validate() {
                    throw new Error("Not implemented");
                };
                BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
                    assert(p.precomputed);
                    var doubles = p._getDoubles();
                    var naf = getNAF(k, 1, this._bitLength);
                    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
                    I /= 3; // Translate into more windowed form
                    var repr = [];
                    var j;
                    var nafW;
                    for(j = 0; j < naf.length; j += doubles.step){
                        nafW = 0;
                        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
                        repr.push(nafW);
                    }
                    var a = this.jpoint(null, null, null);
                    var b = this.jpoint(null, null, null);
                    for(var i = I; i > 0; i--){
                        for(j = 0; j < repr.length; j++){
                            nafW = repr[j];
                            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
                            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
                        }
                        a = a.add(b);
                    }
                    return a.toP();
                };
                BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
                    var w = 4; // Precompute window
                    var nafPoints = p._getNAFPoints(w);
                    w = nafPoints.wnd;
                    var wnd = nafPoints.points; // Get NAF form
                    var naf = getNAF(k, w, this._bitLength); // Add `this`*(N+1) for every w-NAF index
                    var acc = this.jpoint(null, null, null);
                    for(var i = naf.length - 1; i >= 0; i--){
                        // Count zeroes
                        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
                        if (i >= 0) l++;
                        acc = acc.dblp(l);
                        if (i < 0) break;
                        var z = naf[i];
                        assert(z !== 0);
                        if (p.type === "affine") {
                            // J +- P
                            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
                            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
                        } else // J +- J
                        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
                        else acc = acc.add(wnd[-z - 1 >> 1].neg());
                    }
                    return p.type === "affine" ? acc.toP() : acc;
                };
                BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
                    var wndWidth = this._wnafT1;
                    var wnd = this._wnafT2;
                    var naf = this._wnafT3; // Fill all arrays
                    var max = 0;
                    var i;
                    var j;
                    var p;
                    for(i = 0; i < len; i++){
                        p = points[i];
                        var nafPoints = p._getNAFPoints(defW);
                        wndWidth[i] = nafPoints.wnd;
                        wnd[i] = nafPoints.points;
                    } // Comb small window NAFs
                    for(i = len - 1; i >= 1; i -= 2){
                        var a = i - 1;
                        var b = i;
                        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                            max = Math.max(naf[a].length, max);
                            max = Math.max(naf[b].length, max);
                            continue;
                        }
                        var comb = [
                            points[a],
                            /* 1 */ null,
                            /* 3 */ null,
                            /* 5 */ points[b]
                        ]; // Try to avoid Projective points, if possible
                        if (points[a].y.cmp(points[b].y) === 0) {
                            comb[1] = points[a].add(points[b]);
                            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                            comb[1] = points[a].toJ().mixedAdd(points[b]);
                            comb[2] = points[a].add(points[b].neg());
                        } else {
                            comb[1] = points[a].toJ().mixedAdd(points[b]);
                            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                        }
                        var index = [
                            -3,
                            /* -1 -1 */ -1,
                            /* -1 0 */ -5,
                            /* -1 1 */ -7,
                            /* 0 -1 */ 0,
                            /* 0 0 */ 7,
                            /* 0 1 */ 5,
                            /* 1 -1 */ 1,
                            /* 1 0 */ 3
                        ];
                        var jsf = getJSF(coeffs[a], coeffs[b]);
                        max = Math.max(jsf[0].length, max);
                        naf[a] = new Array(max);
                        naf[b] = new Array(max);
                        for(j = 0; j < max; j++){
                            var ja = jsf[0][j] | 0;
                            var jb = jsf[1][j] | 0;
                            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                            naf[b][j] = 0;
                            wnd[a] = comb;
                        }
                    }
                    var acc = this.jpoint(null, null, null);
                    var tmp = this._wnafT4;
                    for(i = max; i >= 0; i--){
                        var k = 0;
                        while(i >= 0){
                            var zero = true;
                            for(j = 0; j < len; j++){
                                tmp[j] = naf[j][i] | 0;
                                if (tmp[j] !== 0) zero = false;
                            }
                            if (!zero) break;
                            k++;
                            i--;
                        }
                        if (i >= 0) k++;
                        acc = acc.dblp(k);
                        if (i < 0) break;
                        for(j = 0; j < len; j++){
                            var z = tmp[j];
                            p;
                            if (z === 0) continue;
                            else if (z > 0) p = wnd[j][z - 1 >> 1];
                            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
                            if (p.type === "affine") acc = acc.mixedAdd(p);
                            else acc = acc.add(p);
                        }
                    } // Zeroify references
                    for(i = 0; i < len; i++)wnd[i] = null;
                    if (jacobianResult) return acc;
                    else return acc.toP();
                };
                function BasePoint(curve, type) {
                    this.curve = curve;
                    this.type = type;
                    this.precomputed = null;
                }
                BaseCurve.BasePoint = BasePoint;
                BasePoint.prototype.eq = function /*other*/ eq() {
                    throw new Error("Not implemented");
                };
                BasePoint.prototype.validate = function validate() {
                    return this.curve.validate(this);
                };
                BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                    bytes = utils.toArray(bytes, enc);
                    var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even
                    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
                        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
                        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
                        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
                        return res;
                    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
                    throw new Error("Unknown point format");
                };
                BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
                    return this.encode(enc, true);
                };
                BasePoint.prototype._encode = function _encode(compact) {
                    var len = this.curve.p.byteLength();
                    var x = this.getX().toArray("be", len);
                    if (compact) return [
                        this.getY().isEven() ? 0x02 : 0x03
                    ].concat(x);
                    return [
                        0x04
                    ].concat(x, this.getY().toArray("be", len));
                };
                BasePoint.prototype.encode = function encode(enc, compact) {
                    return utils.encode(this._encode(compact), enc);
                };
                BasePoint.prototype.precompute = function precompute(power) {
                    if (this.precomputed) return this;
                    var precomputed = {
                        doubles: null,
                        naf: null,
                        beta: null
                    };
                    precomputed.naf = this._getNAFPoints(8);
                    precomputed.doubles = this._getDoubles(4, power);
                    precomputed.beta = this._getBeta();
                    this.precomputed = precomputed;
                    return this;
                };
                BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
                    if (!this.precomputed) return false;
                    var doubles = this.precomputed.doubles;
                    if (!doubles) return false;
                    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
                };
                BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
                    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                    var doubles = [
                        this
                    ];
                    var acc = this;
                    for(var i = 0; i < power; i += step){
                        for(var j = 0; j < step; j++)acc = acc.dbl();
                        doubles.push(acc);
                    }
                    return {
                        step: step,
                        points: doubles
                    };
                };
                BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
                    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                    var res = [
                        this
                    ];
                    var max = (1 << wnd) - 1;
                    var dbl = max === 1 ? null : this.dbl();
                    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
                    return {
                        wnd: wnd,
                        points: res
                    };
                };
                BasePoint.prototype._getBeta = function _getBeta() {
                    return null;
                };
                BasePoint.prototype.dblp = function dblp(k) {
                    var r = this;
                    for(var i = 0; i < k; i++)r = r.dbl();
                    return r;
                };
            },
            {
                "../utils": 99,
                "bn.js": 100
            }
        ],
        87: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var BN = require("bn.js");
                var inherits = require("inherits");
                var Base = require("./base");
                var assert = utils.assert;
                function EdwardsCurve(conf) {
                    // NOTE: Important as we are creating point in Base.call()
                    this.twisted = (conf.a | 0) !== 1;
                    this.mOneA = this.twisted && (conf.a | 0) === -1;
                    this.extended = this.mOneA;
                    Base.call(this, "edwards", conf);
                    this.a = new BN(conf.a, 16).umod(this.red.m);
                    this.a = this.a.toRed(this.red);
                    this.c = new BN(conf.c, 16).toRed(this.red);
                    this.c2 = this.c.redSqr();
                    this.d = new BN(conf.d, 16).toRed(this.red);
                    this.dd = this.d.redAdd(this.d);
                    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
                    this.oneC = (conf.c | 0) === 1;
                }
                inherits(EdwardsCurve, Base);
                module.exports = EdwardsCurve;
                EdwardsCurve.prototype._mulA = function _mulA(num) {
                    if (this.mOneA) return num.redNeg();
                    else return this.a.redMul(num);
                };
                EdwardsCurve.prototype._mulC = function _mulC(num) {
                    if (this.oneC) return num;
                    else return this.c.redMul(num);
                }; // Just for compatibility with Short curve
                EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
                    return this.point(x, y, z, t);
                };
                EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
                    x = new BN(x, 16);
                    if (!x.red) x = x.toRed(this.red);
                    var x2 = x.redSqr();
                    var rhs = this.c2.redSub(this.a.redMul(x2));
                    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
                    var y2 = rhs.redMul(lhs.redInvm());
                    var y = y2.redSqrt();
                    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");
                    var isOdd = y.fromRed().isOdd();
                    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
                    return this.point(x, y);
                };
                EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
                    y = new BN(y, 16);
                    if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
                    var y2 = y.redSqr();
                    var lhs = y2.redSub(this.c2);
                    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
                    var x2 = lhs.redMul(rhs.redInvm());
                    if (x2.cmp(this.zero) === 0) {
                        if (odd) throw new Error("invalid point");
                        else return this.point(this.zero, y);
                    }
                    var x = x2.redSqrt();
                    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");
                    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
                    return this.point(x, y);
                };
                EdwardsCurve.prototype.validate = function validate(point) {
                    if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
                    point.normalize();
                    var x2 = point.x.redSqr();
                    var y2 = point.y.redSqr();
                    var lhs = x2.redMul(this.a).redAdd(y2);
                    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
                    return lhs.cmp(rhs) === 0;
                };
                function Point(curve, x, y, z, t) {
                    Base.BasePoint.call(this, curve, "projective");
                    if (x === null && y === null && z === null) {
                        this.x = this.curve.zero;
                        this.y = this.curve.one;
                        this.z = this.curve.one;
                        this.t = this.curve.zero;
                        this.zOne = true;
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16);
                        this.z = z ? new BN(z, 16) : this.curve.one;
                        this.t = t && new BN(t, 16);
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
                        this.zOne = this.z === this.curve.one; // Use extended coordinates
                        if (this.curve.extended && !this.t) {
                            this.t = this.x.redMul(this.y);
                            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
                        }
                    }
                }
                inherits(Point, Base.BasePoint);
                EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                    return Point.fromJSON(this, obj);
                };
                EdwardsCurve.prototype.point = function point(x, y, z, t) {
                    return new Point(this, x, y, z, t);
                };
                Point.fromJSON = function fromJSON(curve, obj) {
                    return new Point(curve, obj[0], obj[1], obj[2]);
                };
                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
                };
                Point.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
                };
                Point.prototype._extDbl = function _extDbl() {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                    //     #doubling-dbl-2008-hwcd
                    // 4M + 4S
                    // A = X1^2
                    var a = this.x.redSqr(); // B = Y1^2
                    var b = this.y.redSqr(); // C = 2 * Z1^2
                    var c = this.z.redSqr();
                    c = c.redIAdd(c); // D = a * A
                    var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B
                    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B
                    var g = d.redAdd(b); // F = G - C
                    var f = g.redSub(c); // H = D - B
                    var h = d.redSub(b); // X3 = E * F
                    var nx = e.redMul(f); // Y3 = G * H
                    var ny = g.redMul(h); // T3 = E * H
                    var nt = e.redMul(h); // Z3 = F * G
                    var nz = f.redMul(g);
                    return this.curve.point(nx, ny, nz, nt);
                };
                Point.prototype._projDbl = function _projDbl() {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                    //     #doubling-dbl-2008-bbjlp
                    //     #doubling-dbl-2007-bl
                    // and others
                    // Generally 3M + 4S or 2M + 4S
                    // B = (X1 + Y1)^2
                    var b = this.x.redAdd(this.y).redSqr(); // C = X1^2
                    var c = this.x.redSqr(); // D = Y1^2
                    var d = this.y.redSqr();
                    var nx;
                    var ny;
                    var nz;
                    var e;
                    var h;
                    var j;
                    if (this.curve.twisted) {
                        // E = a * C
                        e = this.curve._mulA(c); // F = E + D
                        var f = e.redAdd(d);
                        if (this.zOne) {
                            // X3 = (B - C - D) * (F - 2)
                            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)
                            ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F
                            nz = f.redSqr().redSub(f).redSub(f);
                        } else {
                            // H = Z1^2
                            h = this.z.redSqr(); // J = F - 2 * H
                            j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J
                            nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)
                            ny = f.redMul(e.redSub(d)); // Z3 = F * J
                            nz = f.redMul(j);
                        }
                    } else {
                        // E = C + D
                        e = c.redAdd(d); // H = (c * Z1)^2
                        h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H
                        j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J
                        nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)
                        ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J
                        nz = e.redMul(j);
                    }
                    return this.curve.point(nx, ny, nz);
                };
                Point.prototype.dbl = function dbl() {
                    if (this.isInfinity()) return this; // Double in extended coordinates
                    if (this.curve.extended) return this._extDbl();
                    else return this._projDbl();
                };
                Point.prototype._extAdd = function _extAdd(p) {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
                    //     #addition-add-2008-hwcd-3
                    // 8M
                    // A = (Y1 - X1) * (Y2 - X2)
                    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)
                    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2
                    var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2
                    var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A
                    var e = b.redSub(a); // F = D - C
                    var f = d.redSub(c); // G = D + C
                    var g = d.redAdd(c); // H = B + A
                    var h = b.redAdd(a); // X3 = E * F
                    var nx = e.redMul(f); // Y3 = G * H
                    var ny = g.redMul(h); // T3 = E * H
                    var nt = e.redMul(h); // Z3 = F * G
                    var nz = f.redMul(g);
                    return this.curve.point(nx, ny, nz, nt);
                };
                Point.prototype._projAdd = function _projAdd(p) {
                    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
                    //     #addition-add-2008-bbjlp
                    //     #addition-add-2007-bl
                    // 10M + 1S
                    // A = Z1 * Z2
                    var a = this.z.redMul(p.z); // B = A^2
                    var b = a.redSqr(); // C = X1 * X2
                    var c = this.x.redMul(p.x); // D = Y1 * Y2
                    var d = this.y.redMul(p.y); // E = d * C * D
                    var e = this.curve.d.redMul(c).redMul(d); // F = B - E
                    var f = b.redSub(e); // G = B + E
                    var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
                    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
                    var nx = a.redMul(f).redMul(tmp);
                    var ny;
                    var nz;
                    if (this.curve.twisted) {
                        // Y3 = A * G * (D - a * C)
                        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G
                        nz = f.redMul(g);
                    } else {
                        // Y3 = A * G * (D - C)
                        ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G
                        nz = this.curve._mulC(f).redMul(g);
                    }
                    return this.curve.point(nx, ny, nz);
                };
                Point.prototype.add = function add(p) {
                    if (this.isInfinity()) return p;
                    if (p.isInfinity()) return this;
                    if (this.curve.extended) return this._extAdd(p);
                    else return this._projAdd(p);
                };
                Point.prototype.mul = function mul(k) {
                    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
                    else return this.curve._wnafMul(this, k);
                };
                Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
                    return this.curve._wnafMulAdd(1, [
                        this,
                        p
                    ], [
                        k1,
                        k2
                    ], 2, false);
                };
                Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
                    return this.curve._wnafMulAdd(1, [
                        this,
                        p
                    ], [
                        k1,
                        k2
                    ], 2, true);
                };
                Point.prototype.normalize = function normalize() {
                    if (this.zOne) return this; // Normalize coordinates
                    var zi = this.z.redInvm();
                    this.x = this.x.redMul(zi);
                    this.y = this.y.redMul(zi);
                    if (this.t) this.t = this.t.redMul(zi);
                    this.z = this.curve.one;
                    this.zOne = true;
                    return this;
                };
                Point.prototype.neg = function neg() {
                    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
                };
                Point.prototype.getX = function getX() {
                    this.normalize();
                    return this.x.fromRed();
                };
                Point.prototype.getY = function getY() {
                    this.normalize();
                    return this.y.fromRed();
                };
                Point.prototype.eq = function eq(other) {
                    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
                };
                Point.prototype.eqXToP = function eqXToP(x) {
                    var rx = x.toRed(this.curve.red).redMul(this.z);
                    if (this.x.cmp(rx) === 0) return true;
                    var xc = x.clone();
                    var t = this.curve.redN.redMul(this.z);
                    for(;;){
                        xc.iadd(this.curve.n);
                        if (xc.cmp(this.curve.p) >= 0) return false;
                        rx.redIAdd(t);
                        if (this.x.cmp(rx) === 0) return true;
                    }
                }; // Compatibility with BaseCurve
                Point.prototype.toP = Point.prototype.normalize;
                Point.prototype.mixedAdd = Point.prototype.add;
            },
            {
                "../utils": 99,
                "./base": 86,
                "bn.js": 100,
                "inherits": 143
            }
        ],
        88: [
            function(require, module, exports) {
                "use strict";
                var curve = exports;
                curve.base = require("./base");
                curve["short"] = require("./short");
                curve.mont = require("./mont");
                curve.edwards = require("./edwards");
            },
            {
                "./base": 86,
                "./edwards": 87,
                "./mont": 89,
                "./short": 90
            }
        ],
        89: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var inherits = require("inherits");
                var Base = require("./base");
                var utils = require("../utils");
                function MontCurve(conf) {
                    Base.call(this, "mont", conf);
                    this.a = new BN(conf.a, 16).toRed(this.red);
                    this.b = new BN(conf.b, 16).toRed(this.red);
                    this.i4 = new BN(4).toRed(this.red).redInvm();
                    this.two = new BN(2).toRed(this.red);
                    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
                }
                inherits(MontCurve, Base);
                module.exports = MontCurve;
                MontCurve.prototype.validate = function validate(point) {
                    var x = point.normalize().x;
                    var x2 = x.redSqr();
                    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
                    var y = rhs.redSqrt();
                    return y.redSqr().cmp(rhs) === 0;
                };
                function Point(curve, x, z) {
                    Base.BasePoint.call(this, curve, "projective");
                    if (x === null && z === null) {
                        this.x = this.curve.one;
                        this.z = this.curve.zero;
                    } else {
                        this.x = new BN(x, 16);
                        this.z = new BN(z, 16);
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                    }
                }
                inherits(Point, Base.BasePoint);
                MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                    return this.point(utils.toArray(bytes, enc), 1);
                };
                MontCurve.prototype.point = function point(x, z) {
                    return new Point(this, x, z);
                };
                MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
                    return Point.fromJSON(this, obj);
                };
                Point.prototype.precompute = function precompute() {};
                Point.prototype._encode = function _encode() {
                    return this.getX().toArray("be", this.curve.p.byteLength());
                };
                Point.fromJSON = function fromJSON(curve, obj) {
                    return new Point(curve, obj[0], obj[1] || curve.one);
                };
                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
                };
                Point.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.z.cmpn(0) === 0;
                };
                Point.prototype.dbl = function dbl() {
                    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
                    // 2M + 2S + 4A
                    // A = X1 + Z1
                    var a = this.x.redAdd(this.z); // AA = A^2
                    var aa = a.redSqr(); // B = X1 - Z1
                    var b = this.x.redSub(this.z); // BB = B^2
                    var bb = b.redSqr(); // C = AA - BB
                    var c = aa.redSub(bb); // X3 = AA * BB
                    var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)
                    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
                    return this.curve.point(nx, nz);
                };
                Point.prototype.add = function add() {
                    throw new Error("Not supported on Montgomery curve");
                };
                Point.prototype.diffAdd = function diffAdd(p, diff) {
                    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
                    // 4M + 2S + 6A
                    // A = X2 + Z2
                    var a = this.x.redAdd(this.z); // B = X2 - Z2
                    var b = this.x.redSub(this.z); // C = X3 + Z3
                    var c = p.x.redAdd(p.z); // D = X3 - Z3
                    var d = p.x.redSub(p.z); // DA = D * A
                    var da = d.redMul(a); // CB = C * B
                    var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2
                    var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2
                    var nz = diff.x.redMul(da.redISub(cb).redSqr());
                    return this.curve.point(nx, nz);
                };
                Point.prototype.mul = function mul(k) {
                    var t = k.clone();
                    var a = this; // (N / 2) * Q + Q
                    var b = this.curve.point(null, null); // (N / 2) * Q
                    var c = this; // Q
                    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
                    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
                        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
                        a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))
                        b = b.dbl();
                    } else {
                        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
                        b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)
                        a = a.dbl();
                    }
                    return b;
                };
                Point.prototype.mulAdd = function mulAdd() {
                    throw new Error("Not supported on Montgomery curve");
                };
                Point.prototype.jumlAdd = function jumlAdd() {
                    throw new Error("Not supported on Montgomery curve");
                };
                Point.prototype.eq = function eq(other) {
                    return this.getX().cmp(other.getX()) === 0;
                };
                Point.prototype.normalize = function normalize() {
                    this.x = this.x.redMul(this.z.redInvm());
                    this.z = this.curve.one;
                    return this;
                };
                Point.prototype.getX = function getX() {
                    // Normalize coordinates
                    this.normalize();
                    return this.x.fromRed();
                };
            },
            {
                "../utils": 99,
                "./base": 86,
                "bn.js": 100,
                "inherits": 143
            }
        ],
        90: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var BN = require("bn.js");
                var inherits = require("inherits");
                var Base = require("./base");
                var assert = utils.assert;
                function ShortCurve(conf) {
                    Base.call(this, "short", conf);
                    this.a = new BN(conf.a, 16).toRed(this.red);
                    this.b = new BN(conf.b, 16).toRed(this.red);
                    this.tinv = this.two.redInvm();
                    this.zeroA = this.a.fromRed().cmpn(0) === 0;
                    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda
                    this.endo = this._getEndomorphism(conf);
                    this._endoWnafT1 = new Array(4);
                    this._endoWnafT2 = new Array(4);
                }
                inherits(ShortCurve, Base);
                module.exports = ShortCurve;
                ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
                    // No efficient endomorphism
                    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)
                    var beta;
                    var lambda;
                    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
                    else {
                        var betas = this._getEndoRoots(this.p); // Choose the smallest beta
                        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                        beta = beta.toRed(this.red);
                    }
                    if (conf.lambda) lambda = new BN(conf.lambda, 16);
                    else {
                        // Choose the lambda that is matching selected beta
                        var lambdas = this._getEndoRoots(this.n);
                        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
                        else {
                            lambda = lambdas[1];
                            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                        }
                    } // Get basis vectors, used for balanced length-two representation
                    var basis;
                    if (conf.basis) basis = conf.basis.map(function(vec) {
                        return {
                            a: new BN(vec.a, 16),
                            b: new BN(vec.b, 16)
                        };
                    });
                    else basis = this._getEndoBasis(lambda);
                    return {
                        beta: beta,
                        lambda: lambda,
                        basis: basis
                    };
                };
                ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
                    // Find roots of for x^2 + x + 1 in F
                    // Root = (-1 +- Sqrt(-3)) / 2
                    //
                    var red = num === this.p ? this.red : BN.mont(num);
                    var tinv = new BN(2).toRed(red).redInvm();
                    var ntinv = tinv.redNeg();
                    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
                    var l1 = ntinv.redAdd(s).fromRed();
                    var l2 = ntinv.redSub(s).fromRed();
                    return [
                        l1,
                        l2
                    ];
                };
                ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
                    // aprxSqrt >= sqrt(this.n)
                    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
                    // Run EGCD, until r(L + 1) < aprxSqrt
                    var u = lambda;
                    var v = this.n.clone();
                    var x1 = new BN(1);
                    var y1 = new BN(0);
                    var x2 = new BN(0);
                    var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
                    var a0;
                    var b0; // First vector
                    var a1;
                    var b1; // Second vector
                    var a2;
                    var b2;
                    var prevR;
                    var i = 0;
                    var r;
                    var x;
                    while(u.cmpn(0) !== 0){
                        var q = v.div(u);
                        r = v.sub(q.mul(u));
                        x = x2.sub(q.mul(x1));
                        var y = y2.sub(q.mul(y1));
                        if (!a1 && r.cmp(aprxSqrt) < 0) {
                            a0 = prevR.neg();
                            b0 = x1;
                            a1 = r.neg();
                            b1 = x;
                        } else if (a1 && ++i === 2) break;
                        prevR = r;
                        v = u;
                        u = r;
                        x2 = x1;
                        x1 = x;
                        y2 = y1;
                        y1 = y;
                    }
                    a2 = r.neg();
                    b2 = x;
                    var len1 = a1.sqr().add(b1.sqr());
                    var len2 = a2.sqr().add(b2.sqr());
                    if (len2.cmp(len1) >= 0) {
                        a2 = a0;
                        b2 = b0;
                    } // Normalize signs
                    if (a1.negative) {
                        a1 = a1.neg();
                        b1 = b1.neg();
                    }
                    if (a2.negative) {
                        a2 = a2.neg();
                        b2 = b2.neg();
                    }
                    return [
                        {
                            a: a1,
                            b: b1
                        },
                        {
                            a: a2,
                            b: b2
                        }
                    ];
                };
                ShortCurve.prototype._endoSplit = function _endoSplit(k) {
                    var basis = this.endo.basis;
                    var v1 = basis[0];
                    var v2 = basis[1];
                    var c1 = v2.b.mul(k).divRound(this.n);
                    var c2 = v1.b.neg().mul(k).divRound(this.n);
                    var p1 = c1.mul(v1.a);
                    var p2 = c2.mul(v2.a);
                    var q1 = c1.mul(v1.b);
                    var q2 = c2.mul(v2.b); // Calculate answer
                    var k1 = k.sub(p1).sub(p2);
                    var k2 = q1.add(q2).neg();
                    return {
                        k1: k1,
                        k2: k2
                    };
                };
                ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
                    x = new BN(x, 16);
                    if (!x.red) x = x.toRed(this.red);
                    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
                    var y = y2.redSqrt();
                    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point"); // XXX Is there any way to tell if the number is odd without converting it
                    // to non-red form?
                    var isOdd = y.fromRed().isOdd();
                    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
                    return this.point(x, y);
                };
                ShortCurve.prototype.validate = function validate(point) {
                    if (point.inf) return true;
                    var x = point.x;
                    var y = point.y;
                    var ax = this.a.redMul(x);
                    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
                    return y.redSqr().redISub(rhs).cmpn(0) === 0;
                };
                ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                    var npoints = this._endoWnafT1;
                    var ncoeffs = this._endoWnafT2;
                    for(var i = 0; i < points.length; i++){
                        var split = this._endoSplit(coeffs[i]);
                        var p = points[i];
                        var beta = p._getBeta();
                        if (split.k1.negative) {
                            split.k1.ineg();
                            p = p.neg(true);
                        }
                        if (split.k2.negative) {
                            split.k2.ineg();
                            beta = beta.neg(true);
                        }
                        npoints[i * 2] = p;
                        npoints[i * 2 + 1] = beta;
                        ncoeffs[i * 2] = split.k1;
                        ncoeffs[i * 2 + 1] = split.k2;
                    }
                    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients
                    for(var j = 0; j < i * 2; j++){
                        npoints[j] = null;
                        ncoeffs[j] = null;
                    }
                    return res;
                };
                function Point(curve, x, y, isRed) {
                    Base.BasePoint.call(this, curve, "affine");
                    if (x === null && y === null) {
                        this.x = null;
                        this.y = null;
                        this.inf = true;
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16); // Force redgomery representation when loading from JSON
                        if (isRed) {
                            this.x.forceRed(this.curve.red);
                            this.y.forceRed(this.curve.red);
                        }
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                        this.inf = false;
                    }
                }
                inherits(Point, Base.BasePoint);
                ShortCurve.prototype.point = function point(x, y, isRed) {
                    return new Point(this, x, y, isRed);
                };
                ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
                    return Point.fromJSON(this, obj, red);
                };
                Point.prototype._getBeta = function _getBeta() {
                    if (!this.curve.endo) return;
                    var pre = this.precomputed;
                    if (pre && pre.beta) return pre.beta;
                    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                    if (pre) {
                        var curve = this.curve;
                        var endoMul = function endoMul(p) {
                            return curve.point(p.x.redMul(curve.endo.beta), p.y);
                        };
                        pre.beta = beta;
                        beta.precomputed = {
                            beta: null,
                            naf: pre.naf && {
                                wnd: pre.naf.wnd,
                                points: pre.naf.points.map(endoMul)
                            },
                            doubles: pre.doubles && {
                                step: pre.doubles.step,
                                points: pre.doubles.points.map(endoMul)
                            }
                        };
                    }
                    return beta;
                };
                Point.prototype.toJSON = function toJSON() {
                    if (!this.precomputed) return [
                        this.x,
                        this.y
                    ];
                    return [
                        this.x,
                        this.y,
                        this.precomputed && {
                            doubles: this.precomputed.doubles && {
                                step: this.precomputed.doubles.step,
                                points: this.precomputed.doubles.points.slice(1)
                            },
                            naf: this.precomputed.naf && {
                                wnd: this.precomputed.naf.wnd,
                                points: this.precomputed.naf.points.slice(1)
                            }
                        }
                    ];
                };
                Point.fromJSON = function fromJSON(curve, obj2, red) {
                    if (typeof obj2 === "string") obj2 = JSON.parse(obj2);
                    var res = curve.point(obj2[0], obj2[1], red);
                    if (!obj2[2]) return res;
                    function obj2point(obj) {
                        return curve.point(obj[0], obj[1], red);
                    }
                    var pre = obj2[2];
                    res.precomputed = {
                        beta: null,
                        doubles: pre.doubles && {
                            step: pre.doubles.step,
                            points: [
                                res
                            ].concat(pre.doubles.points.map(obj2point))
                        },
                        naf: pre.naf && {
                            wnd: pre.naf.wnd,
                            points: [
                                res
                            ].concat(pre.naf.points.map(obj2point))
                        }
                    };
                    return res;
                };
                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
                };
                Point.prototype.isInfinity = function isInfinity() {
                    return this.inf;
                };
                Point.prototype.add = function add(p) {
                    // O + P = P
                    if (this.inf) return p; // P + O = P
                    if (p.inf) return this; // P + P = 2P
                    if (this.eq(p)) return this.dbl(); // P + (-P) = O
                    if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O
                    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
                    var c = this.y.redSub(p.y);
                    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
                    var nx = c.redSqr().redISub(this.x).redISub(p.x);
                    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                    return this.curve.point(nx, ny);
                };
                Point.prototype.dbl = function dbl() {
                    if (this.inf) return this; // 2P = O
                    var ys1 = this.y.redAdd(this.y);
                    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
                    var a = this.curve.a;
                    var x2 = this.x.redSqr();
                    var dyinv = ys1.redInvm();
                    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
                    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
                    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                    return this.curve.point(nx, ny);
                };
                Point.prototype.getX = function getX() {
                    return this.x.fromRed();
                };
                Point.prototype.getY = function getY() {
                    return this.y.fromRed();
                };
                Point.prototype.mul = function mul(k) {
                    k = new BN(k, 16);
                    if (this.isInfinity()) return this;
                    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
                    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
                        this
                    ], [
                        k
                    ]);
                    else return this.curve._wnafMul(this, k);
                };
                Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
                    var points = [
                        this,
                        p2
                    ];
                    var coeffs = [
                        k1,
                        k2
                    ];
                    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
                    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
                };
                Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
                    var points = [
                        this,
                        p2
                    ];
                    var coeffs = [
                        k1,
                        k2
                    ];
                    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
                    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
                };
                Point.prototype.eq = function eq(p) {
                    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
                };
                Point.prototype.neg = function neg(_precompute) {
                    if (this.inf) return this;
                    var res = this.curve.point(this.x, this.y.redNeg());
                    if (_precompute && this.precomputed) {
                        var pre = this.precomputed;
                        var negate = function negate(p) {
                            return p.neg();
                        };
                        res.precomputed = {
                            naf: pre.naf && {
                                wnd: pre.naf.wnd,
                                points: pre.naf.points.map(negate)
                            },
                            doubles: pre.doubles && {
                                step: pre.doubles.step,
                                points: pre.doubles.points.map(negate)
                            }
                        };
                    }
                    return res;
                };
                Point.prototype.toJ = function toJ() {
                    if (this.inf) return this.curve.jpoint(null, null, null);
                    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
                    return res;
                };
                function JPoint(curve, x, y, z) {
                    Base.BasePoint.call(this, curve, "jacobian");
                    if (x === null && y === null && z === null) {
                        this.x = this.curve.one;
                        this.y = this.curve.one;
                        this.z = new BN(0);
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16);
                        this.z = new BN(z, 16);
                    }
                    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                    this.zOne = this.z === this.curve.one;
                }
                inherits(JPoint, Base.BasePoint);
                ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
                    return new JPoint(this, x, y, z);
                };
                JPoint.prototype.toP = function toP() {
                    if (this.isInfinity()) return this.curve.point(null, null);
                    var zinv = this.z.redInvm();
                    var zinv2 = zinv.redSqr();
                    var ax = this.x.redMul(zinv2);
                    var ay = this.y.redMul(zinv2).redMul(zinv);
                    return this.curve.point(ax, ay);
                };
                JPoint.prototype.neg = function neg() {
                    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                };
                JPoint.prototype.add = function add(p) {
                    // O + P = P
                    if (this.isInfinity()) return p; // P + O = P
                    if (p.isInfinity()) return this; // 12M + 4S + 7A
                    var pz2 = p.z.redSqr();
                    var z2 = this.z.redSqr();
                    var u1 = this.x.redMul(pz2);
                    var u2 = p.x.redMul(z2);
                    var s1 = this.y.redMul(pz2.redMul(p.z));
                    var s2 = p.y.redMul(z2.redMul(this.z));
                    var h = u1.redSub(u2);
                    var r = s1.redSub(s2);
                    if (h.cmpn(0) === 0) {
                        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
                        else return this.dbl();
                    }
                    var h2 = h.redSqr();
                    var h3 = h2.redMul(h);
                    var v = u1.redMul(h2);
                    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                    var nz = this.z.redMul(p.z).redMul(h);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.mixedAdd = function mixedAdd(p) {
                    // O + P = P
                    if (this.isInfinity()) return p.toJ(); // P + O = P
                    if (p.isInfinity()) return this; // 8M + 3S + 7A
                    var z2 = this.z.redSqr();
                    var u1 = this.x;
                    var u2 = p.x.redMul(z2);
                    var s1 = this.y;
                    var s2 = p.y.redMul(z2).redMul(this.z);
                    var h = u1.redSub(u2);
                    var r = s1.redSub(s2);
                    if (h.cmpn(0) === 0) {
                        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
                        else return this.dbl();
                    }
                    var h2 = h.redSqr();
                    var h3 = h2.redMul(h);
                    var v = u1.redMul(h2);
                    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                    var nz = this.z.redMul(h);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.dblp = function dblp(pow) {
                    if (pow === 0) return this;
                    if (this.isInfinity()) return this;
                    if (!pow) return this.dbl();
                    var i;
                    if (this.curve.zeroA || this.curve.threeA) {
                        var r = this;
                        for(i = 0; i < pow; i++)r = r.dbl();
                        return r;
                    } // 1M + 2S + 1A + N * (4S + 5M + 8A)
                    // N = 1 => 6M + 6S + 9A
                    var a = this.curve.a;
                    var tinv = this.curve.tinv;
                    var jx = this.x;
                    var jy = this.y;
                    var jz = this.z;
                    var jz4 = jz.redSqr().redSqr(); // Reuse results
                    var jyd = jy.redAdd(jy);
                    for(i = 0; i < pow; i++){
                        var jx2 = jx.redSqr();
                        var jyd2 = jyd.redSqr();
                        var jyd4 = jyd2.redSqr();
                        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                        var t1 = jx.redMul(jyd2);
                        var nx = c.redSqr().redISub(t1.redAdd(t1));
                        var t2 = t1.redISub(nx);
                        var dny = c.redMul(t2);
                        dny = dny.redIAdd(dny).redISub(jyd4);
                        var nz = jyd.redMul(jz);
                        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
                        jx = nx;
                        jz = nz;
                        jyd = dny;
                    }
                    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
                };
                JPoint.prototype.dbl = function dbl() {
                    if (this.isInfinity()) return this;
                    if (this.curve.zeroA) return this._zeroDbl();
                    else if (this.curve.threeA) return this._threeDbl();
                    else return this._dbl();
                };
                JPoint.prototype._zeroDbl = function _zeroDbl() {
                    var nx;
                    var ny;
                    var nz; // Z = 1
                    if (this.zOne) {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                        //     #doubling-mdbl-2007-bl
                        // 1M + 5S + 14A
                        // XX = X1^2
                        var xx = this.x.redSqr(); // YY = Y1^2
                        var yy = this.y.redSqr(); // YYYY = YY^2
                        var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                        s = s.redIAdd(s); // M = 3 * XX + a; a = 0
                        var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S
                        var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY
                        var yyyy8 = yyyy.redIAdd(yyyy);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T
                        nx = t; // Y3 = M * (S - T) - 8 * YYYY
                        ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1
                        nz = this.y.redAdd(this.y);
                    } else {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                        //     #doubling-dbl-2009-l
                        // 2M + 5S + 13A
                        // A = X1^2
                        var a = this.x.redSqr(); // B = Y1^2
                        var b = this.y.redSqr(); // C = B^2
                        var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)
                        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                        d = d.redIAdd(d); // E = 3 * A
                        var e = a.redAdd(a).redIAdd(a); // F = E^2
                        var f = e.redSqr(); // 8 * C
                        var c8 = c.redIAdd(c);
                        c8 = c8.redIAdd(c8);
                        c8 = c8.redIAdd(c8); // X3 = F - 2 * D
                        nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C
                        ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1
                        nz = this.y.redMul(this.z);
                        nz = nz.redIAdd(nz);
                    }
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype._threeDbl = function _threeDbl() {
                    var nx;
                    var ny;
                    var nz; // Z = 1
                    if (this.zOne) {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                        //     #doubling-mdbl-2007-bl
                        // 1M + 5S + 15A
                        // XX = X1^2
                        var xx = this.x.redSqr(); // YY = Y1^2
                        var yy = this.y.redSqr(); // YYYY = YY^2
                        var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                        s = s.redIAdd(s); // M = 3 * XX + a
                        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S
                        var t = m.redSqr().redISub(s).redISub(s); // X3 = T
                        nx = t; // Y3 = M * (S - T) - 8 * YYYY
                        var yyyy8 = yyyy.redIAdd(yyyy);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1
                        nz = this.y.redAdd(this.y);
                    } else {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                        // 3M + 5S
                        // delta = Z1^2
                        var delta = this.z.redSqr(); // gamma = Y1^2
                        var gamma = this.y.redSqr(); // beta = X1 * gamma
                        var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)
                        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                        alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta
                        var beta4 = beta.redIAdd(beta);
                        beta4 = beta4.redIAdd(beta4);
                        var beta8 = beta4.redAdd(beta4);
                        nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta
                        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                        var ggamma8 = gamma.redSqr();
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
                    }
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype._dbl = function _dbl() {
                    var a = this.curve.a; // 4M + 6S + 10A
                    var jx = this.x;
                    var jy = this.y;
                    var jz = this.z;
                    var jz4 = jz.redSqr().redSqr();
                    var jx2 = jx.redSqr();
                    var jy2 = jy.redSqr();
                    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                    var jxd4 = jx.redAdd(jx);
                    jxd4 = jxd4.redIAdd(jxd4);
                    var t1 = jxd4.redMul(jy2);
                    var nx = c.redSqr().redISub(t1.redAdd(t1));
                    var t2 = t1.redISub(nx);
                    var jyd8 = jy2.redSqr();
                    jyd8 = jyd8.redIAdd(jyd8);
                    jyd8 = jyd8.redIAdd(jyd8);
                    jyd8 = jyd8.redIAdd(jyd8);
                    var ny = c.redMul(t2).redISub(jyd8);
                    var nz = jy.redAdd(jy).redMul(jz);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.trpl = function trpl() {
                    if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
                    // 5M + 10S + ...
                    // XX = X1^2
                    var xx = this.x.redSqr(); // YY = Y1^2
                    var yy = this.y.redSqr(); // ZZ = Z1^2
                    var zz = this.z.redSqr(); // YYYY = YY^2
                    var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0
                    var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2
                    var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
                    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                    e = e.redIAdd(e);
                    e = e.redAdd(e).redIAdd(e);
                    e = e.redISub(mm); // EE = E^2
                    var ee = e.redSqr(); // T = 16*YYYY
                    var t = yyyy.redIAdd(yyyy);
                    t = t.redIAdd(t);
                    t = t.redIAdd(t);
                    t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T
                    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)
                    var yyu4 = yy.redMul(u);
                    yyu4 = yyu4.redIAdd(yyu4);
                    yyu4 = yyu4.redIAdd(yyu4);
                    var nx = this.x.redMul(ee).redISub(yyu4);
                    nx = nx.redIAdd(nx);
                    nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
                    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
                    ny = ny.redIAdd(ny);
                    ny = ny.redIAdd(ny);
                    ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE
                    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.mul = function mul(k, kbase) {
                    k = new BN(k, kbase);
                    return this.curve._wnafMul(this, k);
                };
                JPoint.prototype.eq = function eq(p) {
                    if (p.type === "affine") return this.eq(p.toJ());
                    if (this === p) return true; // x1 * z2^2 == x2 * z1^2
                    var z2 = this.z.redSqr();
                    var pz2 = p.z.redSqr();
                    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3
                    var z3 = z2.redMul(this.z);
                    var pz3 = pz2.redMul(p.z);
                    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
                };
                JPoint.prototype.eqXToP = function eqXToP(x) {
                    var zs = this.z.redSqr();
                    var rx = x.toRed(this.curve.red).redMul(zs);
                    if (this.x.cmp(rx) === 0) return true;
                    var xc = x.clone();
                    var t = this.curve.redN.redMul(zs);
                    for(;;){
                        xc.iadd(this.curve.n);
                        if (xc.cmp(this.curve.p) >= 0) return false;
                        rx.redIAdd(t);
                        if (this.x.cmp(rx) === 0) return true;
                    }
                };
                JPoint.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC JPoint Infinity>";
                    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
                };
                JPoint.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.z.cmpn(0) === 0;
                };
            },
            {
                "../utils": 99,
                "./base": 86,
                "bn.js": 100,
                "inherits": 143
            }
        ],
        91: [
            function(require, module, exports) {
                "use strict";
                var curves = exports;
                var hash = require("hash.js");
                var curve1 = require("./curve");
                var utils = require("./utils");
                var assert = utils.assert;
                function PresetCurve(options) {
                    if (options.type === "short") this.curve = new curve1["short"](options);
                    else if (options.type === "edwards") this.curve = new curve1.edwards(options);
                    else this.curve = new curve1.mont(options);
                    this.g = this.curve.g;
                    this.n = this.curve.n;
                    this.hash = options.hash;
                    assert(this.g.validate(), "Invalid curve");
                    assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                }
                curves.PresetCurve = PresetCurve;
                function defineCurve(name, options) {
                    Object.defineProperty(curves, name, {
                        configurable: true,
                        enumerable: true,
                        get: function get() {
                            var curve = new PresetCurve(options);
                            Object.defineProperty(curves, name, {
                                configurable: true,
                                enumerable: true,
                                value: curve
                            });
                            return curve;
                        }
                    });
                }
                defineCurve("p192", {
                    type: "short",
                    prime: "p192",
                    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                    hash: hash.sha256,
                    gRed: false,
                    g: [
                        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
                        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
                    ]
                });
                defineCurve("p224", {
                    type: "short",
                    prime: "p224",
                    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                    hash: hash.sha256,
                    gRed: false,
                    g: [
                        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
                        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
                    ]
                });
                defineCurve("p256", {
                    type: "short",
                    prime: null,
                    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                    hash: hash.sha256,
                    gRed: false,
                    g: [
                        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
                    ]
                });
                defineCurve("p384", {
                    type: "short",
                    prime: null,
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                    hash: hash.sha384,
                    gRed: false,
                    g: [
                        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
                        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
                    ]
                });
                defineCurve("p521", {
                    type: "short",
                    prime: null,
                    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                    hash: hash.sha512,
                    gRed: false,
                    g: [
                        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
                    ]
                });
                defineCurve("curve25519", {
                    type: "mont",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "76d06",
                    b: "1",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: hash.sha256,
                    gRed: false,
                    g: [
                        "9"
                    ]
                });
                defineCurve("ed25519", {
                    type: "edwards",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "-1",
                    c: "1",
                    // -121665 * (121666^(-1)) (mod P)
                    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: hash.sha256,
                    gRed: false,
                    g: [
                        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
                        "6666666666666666666666666666666666666666666666666666666666666658"
                    ]
                });
                var pre;
                try {
                    pre = require("./precomputed/secp256k1");
                } catch (e) {
                    pre = undefined;
                }
                defineCurve("secp256k1", {
                    type: "short",
                    prime: "k256",
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                    a: "0",
                    b: "7",
                    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                    h: "1",
                    hash: hash.sha256,
                    // Precomputed endomorphism
                    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                    basis: [
                        {
                            a: "3086d221a7d46bcde86c90e49284eb15",
                            b: "-e4437ed6010e88286f547fa90abfe4c3"
                        },
                        {
                            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                            b: "3086d221a7d46bcde86c90e49284eb15"
                        }
                    ],
                    gRed: false,
                    g: [
                        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                        pre
                    ]
                });
            },
            {
                "./curve": 88,
                "./precomputed/secp256k1": 98,
                "./utils": 99,
                "hash.js": 129
            }
        ],
        92: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var HmacDRBG = require("hmac-drbg");
                var utils = require("../utils");
                var curves = require("../curves");
                var rand = require("brorand");
                var assert = utils.assert;
                var KeyPair = require("./key");
                var Signature = require("./signature");
                function EC(options) {
                    if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`
                    if (typeof options === "string") {
                        assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);
                        options = curves[options];
                    } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
                    if (options instanceof curves.PresetCurve) options = {
                        curve: options
                    };
                    this.curve = options.curve.curve;
                    this.n = this.curve.n;
                    this.nh = this.n.ushrn(1);
                    this.g = this.curve.g; // Point on curve
                    this.g = options.curve.g;
                    this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG
                    this.hash = options.hash || options.curve.hash;
                }
                module.exports = EC;
                EC.prototype.keyPair = function keyPair(options) {
                    return new KeyPair(this, options);
                };
                EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
                    return KeyPair.fromPrivate(this, priv, enc);
                };
                EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
                    return KeyPair.fromPublic(this, pub, enc);
                };
                EC.prototype.genKeyPair = function genKeyPair(options) {
                    if (!options) options = {}; // Instantiate Hmac_DRBG
                    var drbg = new HmacDRBG({
                        hash: this.hash,
                        pers: options.pers,
                        persEnc: options.persEnc || "utf8",
                        entropy: options.entropy || rand(this.hash.hmacStrength),
                        entropyEnc: options.entropy && options.entropyEnc || "utf8",
                        nonce: this.n.toArray()
                    });
                    var bytes = this.n.byteLength();
                    var ns2 = this.n.sub(new BN(2));
                    for(;;){
                        var priv = new BN(drbg.generate(bytes));
                        if (priv.cmp(ns2) > 0) continue;
                        priv.iaddn(1);
                        return this.keyFromPrivate(priv);
                    }
                };
                EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
                    var delta = msg.byteLength() * 8 - this.n.bitLength();
                    if (delta > 0) msg = msg.ushrn(delta);
                    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
                    else return msg;
                };
                EC.prototype.sign = function sign(msg, key, enc, options) {
                    if (_typeof(enc) === "object") {
                        options = enc;
                        enc = null;
                    }
                    if (!options) options = {};
                    key = this.keyFromPrivate(key, enc);
                    msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy
                    var bytes = this.n.byteLength();
                    var bkey = key.getPrivate().toArray("be", bytes); // Zero-extend nonce to have the same byte size as N
                    var nonce = msg.toArray("be", bytes); // Instantiate Hmac_DRBG
                    var drbg = new HmacDRBG({
                        hash: this.hash,
                        entropy: bkey,
                        nonce: nonce,
                        pers: options.pers,
                        persEnc: options.persEnc || "utf8"
                    }); // Number of bytes to generate
                    var ns1 = this.n.sub(new BN(1));
                    for(var iter = 0;; iter++){
                        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
                        k = this._truncateToN(k, true);
                        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
                        var kp = this.g.mul(k);
                        if (kp.isInfinity()) continue;
                        var kpX = kp.getX();
                        var r = kpX.umod(this.n);
                        if (r.cmpn(0) === 0) continue;
                        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                        s = s.umod(this.n);
                        if (s.cmpn(0) === 0) continue;
                        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`
                        if (options.canonical && s.cmp(this.nh) > 0) {
                            s = this.n.sub(s);
                            recoveryParam ^= 1;
                        }
                        return new Signature({
                            r: r,
                            s: s,
                            recoveryParam: recoveryParam
                        });
                    }
                };
                EC.prototype.verify = function verify(msg, signature, key, enc) {
                    msg = this._truncateToN(new BN(msg, 16));
                    key = this.keyFromPublic(key, enc);
                    signature = new Signature(signature, "hex"); // Perform primitive values validation
                    var r = signature.r;
                    var s = signature.s;
                    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
                    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature
                    var sinv = s.invm(this.n);
                    var u1 = sinv.mul(msg).umod(this.n);
                    var u2 = sinv.mul(r).umod(this.n);
                    var p;
                    if (!this.curve._maxwellTrick) {
                        p = this.g.mulAdd(u1, key.getPublic(), u2);
                        if (p.isInfinity()) return false;
                        return p.getX().umod(this.n).cmp(r) === 0;
                    } // NOTE: Greg Maxwell's trick, inspired by:
                    // https://git.io/vad3K
                    p = this.g.jmulAdd(u1, key.getPublic(), u2);
                    if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
                    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
                    // inverse of `p.z^2`
                    return p.eqXToP(r);
                };
                EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
                    assert((3 & j) === j, "The recovery param is more than two bits");
                    signature = new Signature(signature, enc);
                    var n = this.n;
                    var e = new BN(msg);
                    var r = signature.r;
                    var s = signature.s; // A set LSB signifies that the y-coordinate is odd
                    var isYOdd = j & 1;
                    var isSecondKey = j >> 1;
                    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate"); // 1.1. Let x = r + jn.
                    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
                    else r = this.curve.pointFromX(r, isYOdd);
                    var rInv = signature.r.invm(n);
                    var s1 = n.sub(e).mul(rInv).umod(n);
                    var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
                    //               Q = r^-1 (sR + -eG)
                    return this.g.mulAdd(s1, r, s2);
                };
                EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
                    signature = new Signature(signature, enc);
                    if (signature.recoveryParam !== null) return signature.recoveryParam;
                    for(var i = 0; i < 4; i++){
                        var Qprime;
                        try {
                            Qprime = this.recoverPubKey(e, signature, i);
                        } catch (e) {
                            continue;
                        }
                        if (Qprime.eq(Q)) return i;
                    }
                    throw new Error("Unable to find valid recovery factor");
                };
            },
            {
                "../curves": 91,
                "../utils": 99,
                "./key": 93,
                "./signature": 94,
                "bn.js": 100,
                "brorand": 19,
                "hmac-drbg": 141
            }
        ],
        93: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var assert = utils.assert;
                function KeyPair(ec, options) {
                    this.ec = ec;
                    this.priv = null;
                    this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })
                    if (options.priv) this._importPrivate(options.priv, options.privEnc);
                    if (options.pub) this._importPublic(options.pub, options.pubEnc);
                }
                module.exports = KeyPair;
                KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
                    if (pub instanceof KeyPair) return pub;
                    return new KeyPair(ec, {
                        pub: pub,
                        pubEnc: enc
                    });
                };
                KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
                    if (priv instanceof KeyPair) return priv;
                    return new KeyPair(ec, {
                        priv: priv,
                        privEnc: enc
                    });
                };
                KeyPair.prototype.validate = function validate() {
                    var pub = this.getPublic();
                    if (pub.isInfinity()) return {
                        result: false,
                        reason: "Invalid public key"
                    };
                    if (!pub.validate()) return {
                        result: false,
                        reason: "Public key is not a point"
                    };
                    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
                        result: false,
                        reason: "Public key * N != O"
                    };
                    return {
                        result: true,
                        reason: null
                    };
                };
                KeyPair.prototype.getPublic = function getPublic(compact, enc) {
                    // compact is optional argument
                    if (typeof compact === "string") {
                        enc = compact;
                        compact = null;
                    }
                    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
                    if (!enc) return this.pub;
                    return this.pub.encode(enc, compact);
                };
                KeyPair.prototype.getPrivate = function getPrivate(enc) {
                    if (enc === "hex") return this.priv.toString(16, 2);
                    else return this.priv;
                };
                KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
                    this.priv = new BN(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
                    // in fixed multiplication method
                    this.priv = this.priv.umod(this.ec.curve.n);
                };
                KeyPair.prototype._importPublic = function _importPublic(key, enc) {
                    if (key.x || key.y) {
                        // Montgomery points only have an `x` coordinate.
                        // Weierstrass/Edwards points on the other hand have both `x` and
                        // `y` coordinates.
                        if (this.ec.curve.type === "mont") assert(key.x, "Need x coordinate");
                        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert(key.x && key.y, "Need both x and y coordinate");
                        this.pub = this.ec.curve.point(key.x, key.y);
                        return;
                    }
                    this.pub = this.ec.curve.decodePoint(key, enc);
                }; // ECDH
                KeyPair.prototype.derive = function derive(pub) {
                    if (!pub.validate()) assert(pub.validate(), "public point not validated");
                    return pub.mul(this.priv).getX();
                }; // ECDSA
                KeyPair.prototype.sign = function sign(msg, enc, options) {
                    return this.ec.sign(msg, this, enc, options);
                };
                KeyPair.prototype.verify = function verify(msg, signature) {
                    return this.ec.verify(msg, signature, this);
                };
                KeyPair.prototype.inspect = function inspect() {
                    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
                };
            },
            {
                "../utils": 99,
                "bn.js": 100
            }
        ],
        94: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var assert = utils.assert;
                function Signature(options, enc) {
                    if (options instanceof Signature) return options;
                    if (this._importDER(options, enc)) return;
                    assert(options.r && options.s, "Signature without r or s");
                    this.r = new BN(options.r, 16);
                    this.s = new BN(options.s, 16);
                    if (options.recoveryParam === undefined) this.recoveryParam = null;
                    else this.recoveryParam = options.recoveryParam;
                }
                module.exports = Signature;
                function Position() {
                    this.place = 0;
                }
                function getLength(buf, p) {
                    var initial = buf[p.place++];
                    if (!(initial & 0x80)) return initial;
                    var octetLen = initial & 0xf; // Indefinite length or overflow
                    if (octetLen === 0 || octetLen > 4) return false;
                    var val = 0;
                    for(var i = 0, off = p.place; i < octetLen; i++, off++){
                        val <<= 8;
                        val |= buf[off];
                        val >>>= 0;
                    } // Leading zeroes
                    if (val <= 0x7f) return false;
                    p.place = off;
                    return val;
                }
                function rmPadding(buf) {
                    var i = 0;
                    var len = buf.length - 1;
                    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
                    if (i === 0) return buf;
                    return buf.slice(i);
                }
                Signature.prototype._importDER = function _importDER(data, enc) {
                    data = utils.toArray(data, enc);
                    var p = new Position();
                    if (data[p.place++] !== 0x30) return false;
                    var len = getLength(data, p);
                    if (len === false) return false;
                    if (len + p.place !== data.length) return false;
                    if (data[p.place++] !== 0x02) return false;
                    var rlen = getLength(data, p);
                    if (rlen === false) return false;
                    var r = data.slice(p.place, rlen + p.place);
                    p.place += rlen;
                    if (data[p.place++] !== 0x02) return false;
                    var slen = getLength(data, p);
                    if (slen === false) return false;
                    if (data.length !== slen + p.place) return false;
                    var s = data.slice(p.place, slen + p.place);
                    if (r[0] === 0) {
                        if (r[1] & 0x80) r = r.slice(1);
                        else // Leading zeroes
                        return false;
                    }
                    if (s[0] === 0) {
                        if (s[1] & 0x80) s = s.slice(1);
                        else // Leading zeroes
                        return false;
                    }
                    this.r = new BN(r);
                    this.s = new BN(s);
                    this.recoveryParam = null;
                    return true;
                };
                function constructLength(arr, len) {
                    if (len < 0x80) {
                        arr.push(len);
                        return;
                    }
                    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
                    arr.push(octets | 0x80);
                    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
                    arr.push(len);
                }
                Signature.prototype.toDER = function toDER(enc) {
                    var r = this.r.toArray();
                    var s = this.s.toArray(); // Pad values
                    if (r[0] & 0x80) r = [
                        0
                    ].concat(r); // Pad values
                    if (s[0] & 0x80) s = [
                        0
                    ].concat(s);
                    r = rmPadding(r);
                    s = rmPadding(s);
                    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
                    var arr = [
                        0x02
                    ];
                    constructLength(arr, r.length);
                    arr = arr.concat(r);
                    arr.push(0x02);
                    constructLength(arr, s.length);
                    var backHalf = arr.concat(s);
                    var res = [
                        0x30
                    ];
                    constructLength(res, backHalf.length);
                    res = res.concat(backHalf);
                    return utils.encode(res, enc);
                };
            },
            {
                "../utils": 99,
                "bn.js": 100
            }
        ],
        95: [
            function(require, module, exports) {
                "use strict";
                var hash1 = require("hash.js");
                var curves = require("../curves");
                var utils = require("../utils");
                var assert = utils.assert;
                var parseBytes = utils.parseBytes;
                var KeyPair = require("./key");
                var Signature = require("./signature");
                function EDDSA(curve) {
                    assert(curve === "ed25519", "only tested with ed25519 so far");
                    if (!(this instanceof EDDSA)) return new EDDSA(curve);
                    curve = curves[curve].curve;
                    this.curve = curve;
                    this.g = curve.g;
                    this.g.precompute(curve.n.bitLength() + 1);
                    this.pointClass = curve.point().constructor;
                    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
                    this.hash = hash1.sha512;
                }
                module.exports = EDDSA;
                /**
      * @param {Array|String} message - message bytes
      * @param {Array|String|KeyPair} secret - secret bytes or a keypair
      * @returns {Signature} - signature
      */ EDDSA.prototype.sign = function sign(message, secret) {
                    message = parseBytes(message);
                    var key = this.keyFromSecret(secret);
                    var r = this.hashInt(key.messagePrefix(), message);
                    var R = this.g.mul(r);
                    var Rencoded = this.encodePoint(R);
                    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
                    var S = r.add(s_).umod(this.curve.n);
                    return this.makeSignature({
                        R: R,
                        S: S,
                        Rencoded: Rencoded
                    });
                };
                /**
      * @param {Array} message - message bytes
      * @param {Array|String|Signature} sig - sig bytes
      * @param {Array|String|Point|KeyPair} pub - public key
      * @returns {Boolean} - true if public key matches sig of message
      */ EDDSA.prototype.verify = function verify(message, sig, pub) {
                    message = parseBytes(message);
                    sig = this.makeSignature(sig);
                    var key = this.keyFromPublic(pub);
                    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
                    var SG = this.g.mul(sig.S());
                    var RplusAh = sig.R().add(key.pub().mul(h));
                    return RplusAh.eq(SG);
                };
                EDDSA.prototype.hashInt = function hashInt() {
                    var hash = this.hash();
                    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
                    return utils.intFromLE(hash.digest()).umod(this.curve.n);
                };
                EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
                    return KeyPair.fromPublic(this, pub);
                };
                EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
                    return KeyPair.fromSecret(this, secret);
                };
                EDDSA.prototype.makeSignature = function makeSignature(sig) {
                    if (sig instanceof Signature) return sig;
                    return new Signature(this, sig);
                };
                /**
      * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
      *
      * EDDSA defines methods for encoding and decoding points and integers. These are
      * helper convenience methods, that pass along to utility functions implied
      * parameters.
      *
      */ EDDSA.prototype.encodePoint = function encodePoint(point) {
                    var enc = point.getY().toArray("le", this.encodingLength);
                    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
                    return enc;
                };
                EDDSA.prototype.decodePoint = function decodePoint(bytes) {
                    bytes = utils.parseBytes(bytes);
                    var lastIx = bytes.length - 1;
                    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
                    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
                    var y = utils.intFromLE(normed);
                    return this.curve.pointFromY(y, xIsOdd);
                };
                EDDSA.prototype.encodeInt = function encodeInt(num) {
                    return num.toArray("le", this.encodingLength);
                };
                EDDSA.prototype.decodeInt = function decodeInt(bytes) {
                    return utils.intFromLE(bytes);
                };
                EDDSA.prototype.isPoint = function isPoint(val) {
                    return val instanceof this.pointClass;
                };
            },
            {
                "../curves": 91,
                "../utils": 99,
                "./key": 96,
                "./signature": 97,
                "hash.js": 129
            }
        ],
        96: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var assert = utils.assert;
                var parseBytes = utils.parseBytes;
                var cachedProperty = utils.cachedProperty;
                /**
      * @param {EDDSA} eddsa - instance
      * @param {Object} params - public/private key parameters
      *
      * @param {Array<Byte>} [params.secret] - secret seed bytes
      * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
      * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
      *
      */ function KeyPair(eddsa, params) {
                    this.eddsa = eddsa;
                    this._secret = parseBytes(params.secret);
                    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
                    else this._pubBytes = parseBytes(params.pub);
                }
                KeyPair.fromPublic = function fromPublic(eddsa, pub) {
                    if (pub instanceof KeyPair) return pub;
                    return new KeyPair(eddsa, {
                        pub: pub
                    });
                };
                KeyPair.fromSecret = function fromSecret(eddsa, secret) {
                    if (secret instanceof KeyPair) return secret;
                    return new KeyPair(eddsa, {
                        secret: secret
                    });
                };
                KeyPair.prototype.secret = function secret() {
                    return this._secret;
                };
                cachedProperty(KeyPair, "pubBytes", function pubBytes() {
                    return this.eddsa.encodePoint(this.pub());
                });
                cachedProperty(KeyPair, "pub", function pub() {
                    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
                    return this.eddsa.g.mul(this.priv());
                });
                cachedProperty(KeyPair, "privBytes", function privBytes() {
                    var eddsa = this.eddsa;
                    var hash = this.hash();
                    var lastIx = eddsa.encodingLength - 1;
                    var a = hash.slice(0, eddsa.encodingLength);
                    a[0] &= 248;
                    a[lastIx] &= 127;
                    a[lastIx] |= 64;
                    return a;
                });
                cachedProperty(KeyPair, "priv", function priv() {
                    return this.eddsa.decodeInt(this.privBytes());
                });
                cachedProperty(KeyPair, "hash", function hash() {
                    return this.eddsa.hash().update(this.secret()).digest();
                });
                cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
                    return this.hash().slice(this.eddsa.encodingLength);
                });
                KeyPair.prototype.sign = function sign(message) {
                    assert(this._secret, "KeyPair can only verify");
                    return this.eddsa.sign(message, this);
                };
                KeyPair.prototype.verify = function verify(message, sig) {
                    return this.eddsa.verify(message, sig, this);
                };
                KeyPair.prototype.getSecret = function getSecret(enc) {
                    assert(this._secret, "KeyPair is public only");
                    return utils.encode(this.secret(), enc);
                };
                KeyPair.prototype.getPublic = function getPublic(enc) {
                    return utils.encode(this.pubBytes(), enc);
                };
                module.exports = KeyPair;
            },
            {
                "../utils": 99
            }
        ],
        97: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var assert = utils.assert;
                var cachedProperty = utils.cachedProperty;
                var parseBytes = utils.parseBytes;
                /**
      * @param {EDDSA} eddsa - eddsa instance
      * @param {Array<Bytes>|Object} sig -
      * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
      * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
      * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
      * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
      */ function Signature(eddsa, sig) {
                    this.eddsa = eddsa;
                    if (_typeof(sig) !== "object") sig = parseBytes(sig);
                    if (Array.isArray(sig)) sig = {
                        R: sig.slice(0, eddsa.encodingLength),
                        S: sig.slice(eddsa.encodingLength)
                    };
                    assert(sig.R && sig.S, "Signature without R or S");
                    if (eddsa.isPoint(sig.R)) this._R = sig.R;
                    if (sig.S instanceof BN) this._S = sig.S;
                    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
                    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
                }
                cachedProperty(Signature, "S", function S() {
                    return this.eddsa.decodeInt(this.Sencoded());
                });
                cachedProperty(Signature, "R", function R() {
                    return this.eddsa.decodePoint(this.Rencoded());
                });
                cachedProperty(Signature, "Rencoded", function Rencoded() {
                    return this.eddsa.encodePoint(this.R());
                });
                cachedProperty(Signature, "Sencoded", function Sencoded() {
                    return this.eddsa.encodeInt(this.S());
                });
                Signature.prototype.toBytes = function toBytes() {
                    return this.Rencoded().concat(this.Sencoded());
                };
                Signature.prototype.toHex = function toHex() {
                    return utils.encode(this.toBytes(), "hex").toUpperCase();
                };
                module.exports = Signature;
            },
            {
                "../utils": 99,
                "bn.js": 100
            }
        ],
        98: [
            function(require, module, exports) {
                module.exports = {
                    doubles: {
                        step: 4,
                        points: [
                            [
                                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
                            ],
                            [
                                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
                            ],
                            [
                                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
                            ],
                            [
                                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
                            ],
                            [
                                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
                            ],
                            [
                                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
                            ],
                            [
                                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
                            ],
                            [
                                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
                            ],
                            [
                                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
                            ],
                            [
                                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
                            ],
                            [
                                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
                            ],
                            [
                                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
                            ],
                            [
                                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
                            ],
                            [
                                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
                            ],
                            [
                                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
                            ],
                            [
                                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
                            ],
                            [
                                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
                            ],
                            [
                                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
                            ],
                            [
                                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
                            ],
                            [
                                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
                            ],
                            [
                                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
                            ],
                            [
                                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
                            ],
                            [
                                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
                            ],
                            [
                                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
                            ],
                            [
                                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
                            ],
                            [
                                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
                            ],
                            [
                                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
                            ],
                            [
                                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
                            ],
                            [
                                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
                            ],
                            [
                                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
                            ],
                            [
                                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
                            ],
                            [
                                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
                            ],
                            [
                                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
                            ],
                            [
                                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
                            ],
                            [
                                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
                            ],
                            [
                                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
                            ],
                            [
                                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
                            ],
                            [
                                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
                            ],
                            [
                                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
                            ],
                            [
                                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
                            ],
                            [
                                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
                            ],
                            [
                                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
                            ],
                            [
                                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
                            ],
                            [
                                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
                            ],
                            [
                                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
                            ],
                            [
                                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
                            ],
                            [
                                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
                            ],
                            [
                                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
                            ],
                            [
                                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
                            ],
                            [
                                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
                            ],
                            [
                                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
                            ],
                            [
                                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
                            ],
                            [
                                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
                            ],
                            [
                                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
                            ],
                            [
                                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
                            ],
                            [
                                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
                            ],
                            [
                                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
                            ],
                            [
                                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
                            ],
                            [
                                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
                            ],
                            [
                                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
                            ],
                            [
                                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
                            ],
                            [
                                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
                            ],
                            [
                                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
                            ],
                            [
                                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
                            ],
                            [
                                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
                            ]
                        ]
                    },
                    naf: {
                        wnd: 7,
                        points: [
                            [
                                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
                            ],
                            [
                                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
                            ],
                            [
                                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
                            ],
                            [
                                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
                            ],
                            [
                                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
                            ],
                            [
                                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
                            ],
                            [
                                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
                            ],
                            [
                                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
                            ],
                            [
                                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
                            ],
                            [
                                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
                            ],
                            [
                                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
                            ],
                            [
                                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
                            ],
                            [
                                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
                            ],
                            [
                                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
                            ],
                            [
                                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
                            ],
                            [
                                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
                            ],
                            [
                                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
                            ],
                            [
                                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
                            ],
                            [
                                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
                            ],
                            [
                                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
                            ],
                            [
                                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
                            ],
                            [
                                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
                            ],
                            [
                                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
                            ],
                            [
                                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
                            ],
                            [
                                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
                            ],
                            [
                                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
                            ],
                            [
                                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
                            ],
                            [
                                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
                            ],
                            [
                                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
                            ],
                            [
                                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
                            ],
                            [
                                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
                            ],
                            [
                                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
                            ],
                            [
                                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
                            ],
                            [
                                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
                            ],
                            [
                                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
                            ],
                            [
                                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
                            ],
                            [
                                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
                            ],
                            [
                                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
                            ],
                            [
                                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
                            ],
                            [
                                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
                            ],
                            [
                                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
                            ],
                            [
                                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
                            ],
                            [
                                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
                            ],
                            [
                                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
                            ],
                            [
                                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
                            ],
                            [
                                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
                            ],
                            [
                                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
                            ],
                            [
                                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
                            ],
                            [
                                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
                            ],
                            [
                                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
                            ],
                            [
                                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
                            ],
                            [
                                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
                            ],
                            [
                                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
                            ],
                            [
                                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
                            ],
                            [
                                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
                            ],
                            [
                                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
                            ],
                            [
                                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
                            ],
                            [
                                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
                            ],
                            [
                                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
                            ],
                            [
                                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
                            ],
                            [
                                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
                            ],
                            [
                                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
                            ],
                            [
                                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
                            ],
                            [
                                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
                            ],
                            [
                                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
                            ],
                            [
                                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
                            ],
                            [
                                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
                            ],
                            [
                                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
                            ],
                            [
                                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
                            ],
                            [
                                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
                            ],
                            [
                                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
                            ],
                            [
                                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
                            ],
                            [
                                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
                            ],
                            [
                                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
                            ],
                            [
                                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
                            ],
                            [
                                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
                            ],
                            [
                                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
                            ],
                            [
                                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
                            ],
                            [
                                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
                            ],
                            [
                                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
                            ],
                            [
                                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
                            ],
                            [
                                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
                            ],
                            [
                                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
                            ],
                            [
                                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
                            ],
                            [
                                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
                            ],
                            [
                                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
                            ],
                            [
                                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
                            ],
                            [
                                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
                            ],
                            [
                                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
                            ],
                            [
                                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
                            ],
                            [
                                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
                            ],
                            [
                                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
                            ],
                            [
                                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
                            ],
                            [
                                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
                            ],
                            [
                                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
                            ],
                            [
                                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
                            ],
                            [
                                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
                            ],
                            [
                                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
                            ],
                            [
                                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
                            ],
                            [
                                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
                            ],
                            [
                                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
                            ],
                            [
                                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
                            ],
                            [
                                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
                            ],
                            [
                                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
                            ],
                            [
                                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
                            ],
                            [
                                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
                            ],
                            [
                                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
                            ],
                            [
                                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
                            ],
                            [
                                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
                            ],
                            [
                                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
                            ],
                            [
                                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
                            ],
                            [
                                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
                            ],
                            [
                                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
                            ],
                            [
                                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
                            ],
                            [
                                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
                            ],
                            [
                                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
                            ],
                            [
                                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
                            ],
                            [
                                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
                            ],
                            [
                                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
                            ],
                            [
                                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
                            ],
                            [
                                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
                            ],
                            [
                                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
                            ],
                            [
                                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
                            ],
                            [
                                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
                            ],
                            [
                                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
                            ],
                            [
                                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
                            ],
                            [
                                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
                            ]
                        ]
                    }
                };
            },
            {}
        ],
        99: [
            function(require, module, exports) {
                "use strict";
                var utils = exports;
                var BN = require("bn.js");
                var minAssert = require("minimalistic-assert");
                var minUtils = require("minimalistic-crypto-utils");
                utils.assert = minAssert;
                utils.toArray = minUtils.toArray;
                utils.zero2 = minUtils.zero2;
                utils.toHex = minUtils.toHex;
                utils.encode = minUtils.encode; // Represent num in a w-NAF form
                function getNAF(num, w, bits) {
                    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
                    naf.fill(0);
                    var ws = 1 << w + 1;
                    var k = num.clone();
                    for(var i = 0; i < naf.length; i++){
                        var z;
                        var mod = k.andln(ws - 1);
                        if (k.isOdd()) {
                            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                            else z = mod;
                            k.isubn(z);
                        } else z = 0;
                        naf[i] = z;
                        k.iushrn(1);
                    }
                    return naf;
                }
                utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form
                function getJSF(k1, k2) {
                    var jsf = [
                        [],
                        []
                    ];
                    k1 = k1.clone();
                    k2 = k2.clone();
                    var d1 = 0;
                    var d2 = 0;
                    var m8;
                    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
                        // First phase
                        var m14 = k1.andln(3) + d1 & 3;
                        var m24 = k2.andln(3) + d2 & 3;
                        if (m14 === 3) m14 = -1;
                        if (m24 === 3) m24 = -1;
                        var u1;
                        if ((m14 & 1) === 0) u1 = 0;
                        else {
                            m8 = k1.andln(7) + d1 & 7;
                            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                            else u1 = m14;
                        }
                        jsf[0].push(u1);
                        var u2;
                        if ((m24 & 1) === 0) u2 = 0;
                        else {
                            m8 = k2.andln(7) + d2 & 7;
                            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                            else u2 = m24;
                        }
                        jsf[1].push(u2); // Second phase
                        if (2 * d1 === u1 + 1) d1 = 1 - d1;
                        if (2 * d2 === u2 + 1) d2 = 1 - d2;
                        k1.iushrn(1);
                        k2.iushrn(1);
                    }
                    return jsf;
                }
                utils.getJSF = getJSF;
                function cachedProperty(obj, name, computer) {
                    var key = "_" + name;
                    obj.prototype[name] = function cachedProperty() {
                        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
                    };
                }
                utils.cachedProperty = cachedProperty;
                function parseBytes(bytes) {
                    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
                }
                utils.parseBytes = parseBytes;
                function intFromLE(bytes) {
                    return new BN(bytes, "hex", "le");
                }
                utils.intFromLE = intFromLE;
            },
            {
                "bn.js": 100,
                "minimalistic-assert": 150,
                "minimalistic-crypto-utils": 151
            }
        ],
        100: [
            function(require, module, exports) {
                arguments[4][15][0].apply(exports, arguments);
            },
            {
                "buffer": 224,
                "dup": 15
            }
        ],
        101: [
            function(require, module, exports) {
                module.exports = {
                    "name": "elliptic",
                    "version": "6.5.4",
                    "description": "EC cryptography",
                    "main": "lib/elliptic.js",
                    "files": [
                        "lib"
                    ],
                    "scripts": {
                        "lint": "eslint lib test",
                        "lint:fix": "npm run lint -- --fix",
                        "unit": "istanbul test _mocha --reporter=spec test/index.js",
                        "test": "npm run lint && npm run unit",
                        "version": "grunt dist && git add dist/"
                    },
                    "repository": {
                        "type": "git",
                        "url": "git@github.com:indutny/elliptic"
                    },
                    "keywords": [
                        "EC",
                        "Elliptic",
                        "curve",
                        "Cryptography"
                    ],
                    "author": "Fedor Indutny <fedor@indutny.com>",
                    "license": "MIT",
                    "bugs": {
                        "url": "https://github.com/indutny/elliptic/issues"
                    },
                    "homepage": "https://github.com/indutny/elliptic",
                    "devDependencies": {
                        "brfs": "^2.0.2",
                        "coveralls": "^3.1.0",
                        "eslint": "^7.6.0",
                        "grunt": "^1.2.1",
                        "grunt-browserify": "^5.3.0",
                        "grunt-cli": "^1.3.2",
                        "grunt-contrib-connect": "^3.0.0",
                        "grunt-contrib-copy": "^1.0.0",
                        "grunt-contrib-uglify": "^5.0.0",
                        "grunt-mocha-istanbul": "^5.0.2",
                        "grunt-saucelabs": "^9.0.1",
                        "istanbul": "^0.4.5",
                        "mocha": "^8.0.1"
                    },
                    "dependencies": {
                        "bn.js": "^4.11.9",
                        "brorand": "^1.1.0",
                        "hash.js": "^1.0.0",
                        "hmac-drbg": "^1.0.1",
                        "inherits": "^2.0.4",
                        "minimalistic-assert": "^1.0.1",
                        "minimalistic-crypto-utils": "^1.0.1"
                    }
                };
            },
            {}
        ],
        102: [
            function(require, module, exports) {
                "use strict";
                var GetIntrinsic = require("get-intrinsic");
                var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
                if ($gOPD) try {
                    $gOPD([], "length");
                } catch (e) {
                    // IE 8 has a broken gOPD
                    $gOPD = null;
                }
                module.exports = $gOPD;
            },
            {
                "get-intrinsic": 108
            }
        ],
        103: [
            function(require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                "use strict";
                var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === "object" ? Reflect : null;
                var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
                    return Function.prototype.apply.call(target, receiver, args);
                };
                var ReflectOwnKeys;
                if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
                else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
                    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
                };
                else ReflectOwnKeys = function ReflectOwnKeys(target) {
                    return Object.getOwnPropertyNames(target);
                };
                function ProcessEmitWarning(warning) {
                    if (console && console.warn) console.warn(warning);
                }
                var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
                    return value !== value;
                };
                function EventEmitter() {
                    EventEmitter.init.call(this);
                }
                module.exports = EventEmitter;
                module.exports.once = once; // Backwards-compat with node 0.10.x
                EventEmitter.EventEmitter = EventEmitter;
                EventEmitter.prototype._events = undefined;
                EventEmitter.prototype._eventsCount = 0;
                EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
                // added to it. This is a useful default which helps finding memory leaks.
                var defaultMaxListeners = 10;
                function checkListener(listener) {
                    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
                }
                Object.defineProperty(EventEmitter, "defaultMaxListeners", {
                    enumerable: true,
                    get: function get() {
                        return defaultMaxListeners;
                    },
                    set: function set(arg) {
                        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
                        defaultMaxListeners = arg;
                    }
                });
                EventEmitter.init = function() {
                    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                    }
                    this._maxListeners = this._maxListeners || undefined;
                }; // Obviously not all Emitters should be limited to 10. This function allows
                // that to be increased. Set to zero for unlimited.
                EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
                    this._maxListeners = n;
                    return this;
                };
                function _getMaxListeners(that) {
                    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                    return that._maxListeners;
                }
                EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                    return _getMaxListeners(this);
                };
                EventEmitter.prototype.emit = function emit(type) {
                    var args = [];
                    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
                    var doError = type === "error";
                    var events = this._events;
                    if (events !== undefined) doError = doError && events.error === undefined;
                    else if (!doError) return false; // If there is no 'error' event listener then throw.
                    if (doError) {
                        var er;
                        if (args.length > 0) er = args[0];
                        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
                        // up in Node's output if this results in an unhandled exception.
                        throw er; // Unhandled 'error' event
                         // At least give some kind of context to the user
                        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
                        err.context = er;
                        throw err; // Unhandled 'error' event
                    }
                    var handler = events[type];
                    if (handler === undefined) return false;
                    if (typeof handler === "function") ReflectApply(handler, this, args);
                    else {
                        var len = handler.length;
                        var listeners = arrayClone(handler, len);
                        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
                    }
                    return true;
                };
                function _addListener(target, type, listener, prepend) {
                    var m;
                    var events;
                    var existing;
                    checkListener(listener);
                    events = target._events;
                    if (events === undefined) {
                        events = target._events = Object.create(null);
                        target._eventsCount = 0;
                    } else {
                        // To avoid recursion in the case that type === "newListener"! Before
                        // adding it to the listeners, first emit "newListener".
                        if (events.newListener !== undefined) {
                            target.emit("newListener", type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
                            // this._events to be assigned to a new object
                            events = target._events;
                        }
                        existing = events[type];
                    }
                    if (existing === undefined) {
                        // Optimize the case of one listener. Don't need the extra array object.
                        existing = events[type] = listener;
                        ++target._eventsCount;
                    } else {
                        if (typeof existing === "function") // Adding the second element, need to change to array.
                        existing = events[type] = prepend ? [
                            listener,
                            existing
                        ] : [
                            existing,
                            listener
                        ]; // If we've already got an array, just append.
                        else if (prepend) existing.unshift(listener);
                        else existing.push(listener);
                         // Check for listener leak
                        m = _getMaxListeners(target);
                        if (m > 0 && existing.length > m && !existing.warned) {
                            existing.warned = true; // No error code for this since it is a Warning
                            // eslint-disable-next-line no-restricted-syntax
                            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
                            w.name = "MaxListenersExceededWarning";
                            w.emitter = target;
                            w.type = type;
                            w.count = existing.length;
                            ProcessEmitWarning(w);
                        }
                    }
                    return target;
                }
                EventEmitter.prototype.addListener = function addListener(type, listener) {
                    return _addListener(this, type, listener, false);
                };
                EventEmitter.prototype.on = EventEmitter.prototype.addListener;
                EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                    return _addListener(this, type, listener, true);
                };
                function onceWrapper() {
                    if (!this.fired) {
                        this.target.removeListener(this.type, this.wrapFn);
                        this.fired = true;
                        if (arguments.length === 0) return this.listener.call(this.target);
                        return this.listener.apply(this.target, arguments);
                    }
                }
                function _onceWrap(target, type, listener) {
                    var state = {
                        fired: false,
                        wrapFn: undefined,
                        target: target,
                        type: type,
                        listener: listener
                    };
                    var wrapped = onceWrapper.bind(state);
                    wrapped.listener = listener;
                    state.wrapFn = wrapped;
                    return wrapped;
                }
                EventEmitter.prototype.once = function once(type, listener) {
                    checkListener(listener);
                    this.on(type, _onceWrap(this, type, listener));
                    return this;
                };
                EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
                    checkListener(listener);
                    this.prependListener(type, _onceWrap(this, type, listener));
                    return this;
                }; // Emits a 'removeListener' event if and only if the listener was removed.
                EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                    var list, events, position, i, originalListener;
                    checkListener(listener);
                    events = this._events;
                    if (events === undefined) return this;
                    list = events[type];
                    if (list === undefined) return this;
                    if (list === listener || list.listener === listener) {
                        if (--this._eventsCount === 0) this._events = Object.create(null);
                        else {
                            delete events[type];
                            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
                        }
                    } else if (typeof list !== "function") {
                        position = -1;
                        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
                            originalListener = list[i].listener;
                            position = i;
                            break;
                        }
                        if (position < 0) return this;
                        if (position === 0) list.shift();
                        else spliceOne(list, position);
                        if (list.length === 1) events[type] = list[0];
                        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
                    }
                    return this;
                };
                EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
                EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                    var listeners, events, i;
                    events = this._events;
                    if (events === undefined) return this; // not listening for removeListener, no need to emit
                    if (events.removeListener === undefined) {
                        if (arguments.length === 0) {
                            this._events = Object.create(null);
                            this._eventsCount = 0;
                        } else if (events[type] !== undefined) {
                            if (--this._eventsCount === 0) this._events = Object.create(null);
                            else delete events[type];
                        }
                        return this;
                    } // emit removeListener for all listeners on all events
                    if (arguments.length === 0) {
                        var keys = Object.keys(events);
                        var key;
                        for(i = 0; i < keys.length; ++i){
                            key = keys[i];
                            if (key === "removeListener") continue;
                            this.removeAllListeners(key);
                        }
                        this.removeAllListeners("removeListener");
                        this._events = Object.create(null);
                        this._eventsCount = 0;
                        return this;
                    }
                    listeners = events[type];
                    if (typeof listeners === "function") this.removeListener(type, listeners);
                    else if (listeners !== undefined) // LIFO order
                    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
                    return this;
                };
                function _listeners(target, type, unwrap) {
                    var events = target._events;
                    if (events === undefined) return [];
                    var evlistener = events[type];
                    if (evlistener === undefined) return [];
                    if (typeof evlistener === "function") return unwrap ? [
                        evlistener.listener || evlistener
                    ] : [
                        evlistener
                    ];
                    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
                }
                EventEmitter.prototype.listeners = function listeners(type) {
                    return _listeners(this, type, true);
                };
                EventEmitter.prototype.rawListeners = function rawListeners(type) {
                    return _listeners(this, type, false);
                };
                EventEmitter.listenerCount = function(emitter, type) {
                    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
                    else return listenerCount.call(emitter, type);
                };
                EventEmitter.prototype.listenerCount = listenerCount;
                function listenerCount(type) {
                    var events = this._events;
                    if (events !== undefined) {
                        var evlistener = events[type];
                        if (typeof evlistener === "function") return 1;
                        else if (evlistener !== undefined) return evlistener.length;
                    }
                    return 0;
                }
                EventEmitter.prototype.eventNames = function eventNames() {
                    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
                };
                function arrayClone(arr, n) {
                    var copy = new Array(n);
                    for(var i = 0; i < n; ++i)copy[i] = arr[i];
                    return copy;
                }
                function spliceOne(list, index) {
                    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
                    list.pop();
                }
                function unwrapListeners(arr) {
                    var ret = new Array(arr.length);
                    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
                    return ret;
                }
                function once(emitter, name) {
                    return new Promise(function(resolve, reject) {
                        function errorListener(err) {
                            emitter.removeListener(name, resolver);
                            reject(err);
                        }
                        function resolver() {
                            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
                            resolve([].slice.call(arguments));
                        }
                        eventTargetAgnosticAddListener(emitter, name, resolver, {
                            once: true
                        });
                        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
                            once: true
                        });
                    });
                }
                function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
                    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
                }
                function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
                    if (typeof emitter.on === "function") {
                        if (flags.once) emitter.once(name, listener);
                        else emitter.on(name, listener);
                    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
                    // EventEmitters, we do not listen for `error` events here.
                    emitter.addEventListener(name, function wrapListener(arg) {
                        // IE does not have builtin `{ once: true }` support so we
                        // have to do it manually.
                        if (flags.once) emitter.removeEventListener(name, wrapListener);
                        listener(arg);
                    });
                    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + _typeof(emitter));
                }
            },
            {}
        ],
        104: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                var MD5 = require("md5.js");
                /* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
                    if (!Buffer.isBuffer(password)) password = Buffer.from(password, "binary");
                    if (salt) {
                        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, "binary");
                        if (salt.length !== 8) throw new RangeError("salt should be Buffer with 8 byte length");
                    }
                    var keyLen = keyBits / 8;
                    var key = Buffer.alloc(keyLen);
                    var iv = Buffer.alloc(ivLen || 0);
                    var tmp = Buffer.alloc(0);
                    while(keyLen > 0 || ivLen > 0){
                        var hash = new MD5();
                        hash.update(tmp);
                        hash.update(password);
                        if (salt) hash.update(salt);
                        tmp = hash.digest();
                        var used = 0;
                        if (keyLen > 0) {
                            var keyStart = key.length - keyLen;
                            used = Math.min(keyLen, tmp.length);
                            tmp.copy(key, keyStart, 0, used);
                            keyLen -= used;
                        }
                        if (used < tmp.length && ivLen > 0) {
                            var ivStart = iv.length - ivLen;
                            var length = Math.min(ivLen, tmp.length - used);
                            tmp.copy(iv, ivStart, used, used + length);
                            ivLen -= length;
                        }
                    }
                    tmp.fill(0);
                    return {
                        key: key,
                        iv: iv
                    };
                }
                module.exports = EVP_BytesToKey;
            },
            {
                "md5.js": 147,
                "safe-buffer": 174
            }
        ],
        105: [
            function(require, module, exports) {
                var hasOwn = Object.prototype.hasOwnProperty;
                var toString = Object.prototype.toString;
                module.exports = function forEach(obj, fn, ctx) {
                    if (toString.call(fn) !== "[object Function]") throw new TypeError("iterator must be a function");
                    var l = obj.length;
                    if (l === +l) for(var i = 0; i < l; i++)fn.call(ctx, obj[i], i, obj);
                    else {
                        for(var k in obj)if (hasOwn.call(obj, k)) fn.call(ctx, obj[k], k, obj);
                    }
                };
            },
            {}
        ],
        106: [
            function(require, module, exports) {
                "use strict";
                /* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
                var slice = Array.prototype.slice;
                var toStr = Object.prototype.toString;
                var funcType = "[object Function]";
                module.exports = function bind(that) {
                    var target = this;
                    if (typeof target !== "function" || toStr.call(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
                    var args = slice.call(arguments, 1);
                    var bound;
                    var binder = function binder() {
                        if (this instanceof bound) {
                            var result = target.apply(this, args.concat(slice.call(arguments)));
                            if (Object(result) === result) return result;
                            return this;
                        } else return target.apply(that, args.concat(slice.call(arguments)));
                    };
                    var boundLength = Math.max(0, target.length - args.length);
                    var boundArgs = [];
                    for(var i = 0; i < boundLength; i++)boundArgs.push("$" + i);
                    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
                    if (target.prototype) {
                        var Empty = function Empty() {};
                        Empty.prototype = target.prototype;
                        bound.prototype = new Empty();
                        Empty.prototype = null;
                    }
                    return bound;
                };
            },
            {}
        ],
        107: [
            function(require, module, exports) {
                "use strict";
                var implementation = require("./implementation");
                module.exports = Function.prototype.bind || implementation;
            },
            {
                "./implementation": 106
            }
        ],
        108: [
            function(require, module, exports) {
                "use strict";
                var undefined;
                var $SyntaxError = SyntaxError;
                var $Function = Function;
                var $TypeError = TypeError; // eslint-disable-next-line consistent-return
                var getEvalledConstructor = function getEvalledConstructor(expressionSyntax) {
                    try {
                        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
                    } catch (e) {}
                };
                var $gOPD = Object.getOwnPropertyDescriptor;
                if ($gOPD) try {
                    $gOPD({}, "");
                } catch (e) {
                    $gOPD = null; // this is IE 8, which has a broken gOPD
                }
                var throwTypeError = function throwTypeError() {
                    throw new $TypeError();
                };
                var ThrowTypeError = $gOPD ? function() {
                    try {
                        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
                        arguments.callee; // IE 8 does not throw here
                        return throwTypeError;
                    } catch (calleeThrows) {
                        try {
                            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                            return $gOPD(arguments, "callee").get;
                        } catch (gOPDthrows) {
                            return throwTypeError;
                        }
                    }
                }() : throwTypeError;
                var hasSymbols = require("has-symbols")();
                var getProto = Object.getPrototypeOf || function(x) {
                    return x.__proto__;
                }; // eslint-disable-line no-proto
                var needsEval = {};
                var TypedArray = typeof Uint8Array === "undefined" ? undefined : getProto(Uint8Array);
                var INTRINSICS = {
                    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
                    "%Array%": Array,
                    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
                    "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
                    "%AsyncFromSyncIteratorPrototype%": undefined,
                    "%AsyncFunction%": needsEval,
                    "%AsyncGenerator%": needsEval,
                    "%AsyncGeneratorFunction%": needsEval,
                    "%AsyncIteratorPrototype%": needsEval,
                    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
                    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
                    "%Boolean%": Boolean,
                    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
                    "%Date%": Date,
                    "%decodeURI%": decodeURI,
                    "%decodeURIComponent%": decodeURIComponent,
                    "%encodeURI%": encodeURI,
                    "%encodeURIComponent%": encodeURIComponent,
                    "%Error%": Error,
                    "%eval%": eval,
                    // eslint-disable-line no-eval
                    "%EvalError%": EvalError,
                    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
                    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
                    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
                    "%Function%": $Function,
                    "%GeneratorFunction%": needsEval,
                    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
                    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
                    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
                    "%isFinite%": isFinite,
                    "%isNaN%": isNaN,
                    "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
                    "%JSON%": (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === "object" ? JSON : undefined,
                    "%Map%": typeof Map === "undefined" ? undefined : Map,
                    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
                    "%Math%": Math,
                    "%Number%": Number,
                    "%Object%": Object,
                    "%parseFloat%": parseFloat,
                    "%parseInt%": parseInt,
                    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
                    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
                    "%RangeError%": RangeError,
                    "%ReferenceError%": ReferenceError,
                    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
                    "%RegExp%": RegExp,
                    "%Set%": typeof Set === "undefined" ? undefined : Set,
                    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
                    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
                    "%String%": String,
                    "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined,
                    "%Symbol%": hasSymbols ? Symbol : undefined,
                    "%SyntaxError%": $SyntaxError,
                    "%ThrowTypeError%": ThrowTypeError,
                    "%TypedArray%": TypedArray,
                    "%TypeError%": $TypeError,
                    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
                    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
                    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
                    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
                    "%URIError%": URIError,
                    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
                    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
                    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
                };
                var doEval1 = function doEval(name) {
                    var value;
                    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
                    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
                    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
                    else if (name === "%AsyncGenerator%") {
                        var fn = doEval("%AsyncGeneratorFunction%");
                        if (fn) value = fn.prototype;
                    } else if (name === "%AsyncIteratorPrototype%") {
                        var gen = doEval("%AsyncGenerator%");
                        if (gen) value = getProto(gen.prototype);
                    }
                    INTRINSICS[name] = value;
                    return value;
                };
                var LEGACY_ALIASES = {
                    "%ArrayBufferPrototype%": [
                        "ArrayBuffer",
                        "prototype"
                    ],
                    "%ArrayPrototype%": [
                        "Array",
                        "prototype"
                    ],
                    "%ArrayProto_entries%": [
                        "Array",
                        "prototype",
                        "entries"
                    ],
                    "%ArrayProto_forEach%": [
                        "Array",
                        "prototype",
                        "forEach"
                    ],
                    "%ArrayProto_keys%": [
                        "Array",
                        "prototype",
                        "keys"
                    ],
                    "%ArrayProto_values%": [
                        "Array",
                        "prototype",
                        "values"
                    ],
                    "%AsyncFunctionPrototype%": [
                        "AsyncFunction",
                        "prototype"
                    ],
                    "%AsyncGenerator%": [
                        "AsyncGeneratorFunction",
                        "prototype"
                    ],
                    "%AsyncGeneratorPrototype%": [
                        "AsyncGeneratorFunction",
                        "prototype",
                        "prototype"
                    ],
                    "%BooleanPrototype%": [
                        "Boolean",
                        "prototype"
                    ],
                    "%DataViewPrototype%": [
                        "DataView",
                        "prototype"
                    ],
                    "%DatePrototype%": [
                        "Date",
                        "prototype"
                    ],
                    "%ErrorPrototype%": [
                        "Error",
                        "prototype"
                    ],
                    "%EvalErrorPrototype%": [
                        "EvalError",
                        "prototype"
                    ],
                    "%Float32ArrayPrototype%": [
                        "Float32Array",
                        "prototype"
                    ],
                    "%Float64ArrayPrototype%": [
                        "Float64Array",
                        "prototype"
                    ],
                    "%FunctionPrototype%": [
                        "Function",
                        "prototype"
                    ],
                    "%Generator%": [
                        "GeneratorFunction",
                        "prototype"
                    ],
                    "%GeneratorPrototype%": [
                        "GeneratorFunction",
                        "prototype",
                        "prototype"
                    ],
                    "%Int8ArrayPrototype%": [
                        "Int8Array",
                        "prototype"
                    ],
                    "%Int16ArrayPrototype%": [
                        "Int16Array",
                        "prototype"
                    ],
                    "%Int32ArrayPrototype%": [
                        "Int32Array",
                        "prototype"
                    ],
                    "%JSONParse%": [
                        "JSON",
                        "parse"
                    ],
                    "%JSONStringify%": [
                        "JSON",
                        "stringify"
                    ],
                    "%MapPrototype%": [
                        "Map",
                        "prototype"
                    ],
                    "%NumberPrototype%": [
                        "Number",
                        "prototype"
                    ],
                    "%ObjectPrototype%": [
                        "Object",
                        "prototype"
                    ],
                    "%ObjProto_toString%": [
                        "Object",
                        "prototype",
                        "toString"
                    ],
                    "%ObjProto_valueOf%": [
                        "Object",
                        "prototype",
                        "valueOf"
                    ],
                    "%PromisePrototype%": [
                        "Promise",
                        "prototype"
                    ],
                    "%PromiseProto_then%": [
                        "Promise",
                        "prototype",
                        "then"
                    ],
                    "%Promise_all%": [
                        "Promise",
                        "all"
                    ],
                    "%Promise_reject%": [
                        "Promise",
                        "reject"
                    ],
                    "%Promise_resolve%": [
                        "Promise",
                        "resolve"
                    ],
                    "%RangeErrorPrototype%": [
                        "RangeError",
                        "prototype"
                    ],
                    "%ReferenceErrorPrototype%": [
                        "ReferenceError",
                        "prototype"
                    ],
                    "%RegExpPrototype%": [
                        "RegExp",
                        "prototype"
                    ],
                    "%SetPrototype%": [
                        "Set",
                        "prototype"
                    ],
                    "%SharedArrayBufferPrototype%": [
                        "SharedArrayBuffer",
                        "prototype"
                    ],
                    "%StringPrototype%": [
                        "String",
                        "prototype"
                    ],
                    "%SymbolPrototype%": [
                        "Symbol",
                        "prototype"
                    ],
                    "%SyntaxErrorPrototype%": [
                        "SyntaxError",
                        "prototype"
                    ],
                    "%TypedArrayPrototype%": [
                        "TypedArray",
                        "prototype"
                    ],
                    "%TypeErrorPrototype%": [
                        "TypeError",
                        "prototype"
                    ],
                    "%Uint8ArrayPrototype%": [
                        "Uint8Array",
                        "prototype"
                    ],
                    "%Uint8ClampedArrayPrototype%": [
                        "Uint8ClampedArray",
                        "prototype"
                    ],
                    "%Uint16ArrayPrototype%": [
                        "Uint16Array",
                        "prototype"
                    ],
                    "%Uint32ArrayPrototype%": [
                        "Uint32Array",
                        "prototype"
                    ],
                    "%URIErrorPrototype%": [
                        "URIError",
                        "prototype"
                    ],
                    "%WeakMapPrototype%": [
                        "WeakMap",
                        "prototype"
                    ],
                    "%WeakSetPrototype%": [
                        "WeakSet",
                        "prototype"
                    ]
                };
                var bind = require("function-bind");
                var hasOwn = require("has");
                var $concat = bind.call(Function.call, Array.prototype.concat);
                var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
                var $replace = bind.call(Function.call, String.prototype.replace);
                var $strSlice = bind.call(Function.call, String.prototype.slice);
                /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
                var reEscapeChar = /\\(\\)?/g;
                /** Used to match backslashes in property paths. */ var stringToPath = function stringToPath(string) {
                    var first = $strSlice(string, 0, 1);
                    var last = $strSlice(string, -1);
                    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
                    else if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
                    var result = [];
                    $replace(string, rePropName, function(match, number, quote, subString) {
                        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
                    });
                    return result;
                };
                /* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
                    var intrinsicName = name;
                    var alias;
                    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
                        alias = LEGACY_ALIASES[intrinsicName];
                        intrinsicName = "%" + alias[0] + "%";
                    }
                    if (hasOwn(INTRINSICS, intrinsicName)) {
                        var value = INTRINSICS[intrinsicName];
                        if (value === needsEval) value = doEval1(intrinsicName);
                        if (typeof value === "undefined" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
                        return {
                            alias: alias,
                            name: intrinsicName,
                            value: value
                        };
                    }
                    throw new $SyntaxError("intrinsic " + name + " does not exist!");
                };
                module.exports = function GetIntrinsic(name, allowMissing) {
                    if (typeof name !== "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
                    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
                    var parts = stringToPath(name);
                    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
                    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
                    var intrinsicRealName = intrinsic.name;
                    var value = intrinsic.value;
                    var skipFurtherCaching = false;
                    var alias = intrinsic.alias;
                    if (alias) {
                        intrinsicBaseName = alias[0];
                        $spliceApply(parts, $concat([
                            0,
                            1
                        ], alias));
                    }
                    for(var i = 1, isOwn = true; i < parts.length; i += 1){
                        var part = parts[i];
                        var first = $strSlice(part, 0, 1);
                        var last = $strSlice(part, -1);
                        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
                        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
                        intrinsicBaseName += "." + part;
                        intrinsicRealName = "%" + intrinsicBaseName + "%";
                        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
                        else if (value != null) {
                            if (!(part in value)) {
                                if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                                return void 0;
                            }
                            if ($gOPD && i + 1 >= parts.length) {
                                var desc = $gOPD(value, part);
                                isOwn = !!desc; // By convention, when a data property is converted to an accessor
                                // property to emulate a data property that does not suffer from
                                // the override mistake, that accessor's getter is marked with
                                // an `originalValue` property. Here, when we detect this, we
                                // uphold the illusion by pretending to see that original data
                                // property, i.e., returning the value rather than the getter
                                // itself.
                                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                                else value = value[part];
                            } else {
                                isOwn = hasOwn(value, part);
                                value = value[part];
                            }
                            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
                        }
                    }
                    return value;
                };
            },
            {
                "function-bind": 107,
                "has": 112,
                "has-symbols": 109
            }
        ],
        109: [
            function(require, module, exports) {
                "use strict";
                var origSymbol = typeof Symbol !== "undefined" && Symbol;
                var hasSymbolSham = require("./shams");
                module.exports = function hasNativeSymbols() {
                    if (typeof origSymbol !== "function") return false;
                    if (typeof Symbol !== "function") return false;
                    if (_typeof(origSymbol("foo")) !== "symbol") return false;
                    if (_typeof(Symbol("bar")) !== "symbol") return false;
                    return hasSymbolSham();
                };
            },
            {
                "./shams": 110
            }
        ],
        110: [
            function(require, module, exports) {
                "use strict";
                /* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
                    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
                    if (_typeof(Symbol.iterator) === "symbol") return true;
                    var obj = {};
                    var sym = Symbol("test");
                    var symObj = Object(sym);
                    if (typeof sym === "string") return false;
                    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
                    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
                     // temp disabled per https://github.com/ljharb/object.assign/issues/17
                    // if (sym instanceof Symbol) { return false; }
                    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
                    // if (!(symObj instanceof Symbol)) { return false; }
                    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
                    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
                    var symVal = 42;
                    obj[sym] = symVal;
                    for(sym in obj)return false;
                     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
                    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
                    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
                    var syms = Object.getOwnPropertySymbols(obj);
                    if (syms.length !== 1 || syms[0] !== sym) return false;
                    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
                    if (typeof Object.getOwnPropertyDescriptor === "function") {
                        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
                        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
                    }
                    return true;
                };
            },
            {}
        ],
        111: [
            function(require, module, exports) {
                "use strict";
                var hasSymbols = require("has-symbols/shams");
                module.exports = function hasToStringTagShams() {
                    return hasSymbols() && !!Symbol.toStringTag;
                };
            },
            {
                "has-symbols/shams": 110
            }
        ],
        112: [
            function(require, module, exports) {
                "use strict";
                var bind = require("function-bind");
                module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
            },
            {
                "function-bind": 107
            }
        ],
        113: [
            function(require, module, exports) {
                "use strict";
                var Buffer = require("safe-buffer").Buffer;
                var Transform = require("readable-stream").Transform;
                var inherits = require("inherits");
                function throwIfNotStringOrBuffer(val, prefix) {
                    if (!Buffer.isBuffer(val) && typeof val !== "string") throw new TypeError(prefix + " must be a string or a buffer");
                }
                function HashBase(blockSize) {
                    Transform.call(this);
                    this._block = Buffer.allocUnsafe(blockSize);
                    this._blockSize = blockSize;
                    this._blockOffset = 0;
                    this._length = [
                        0,
                        0,
                        0,
                        0
                    ];
                    this._finalized = false;
                }
                inherits(HashBase, Transform);
                HashBase.prototype._transform = function(chunk, encoding, callback) {
                    var error = null;
                    try {
                        this.update(chunk, encoding);
                    } catch (err) {
                        error = err;
                    }
                    callback(error);
                };
                HashBase.prototype._flush = function(callback) {
                    var error = null;
                    try {
                        this.push(this.digest());
                    } catch (err) {
                        error = err;
                    }
                    callback(error);
                };
                HashBase.prototype.update = function(data, encoding) {
                    throwIfNotStringOrBuffer(data, "Data");
                    if (this._finalized) throw new Error("Digest already called");
                    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding); // consume data
                    var block = this._block;
                    var offset = 0;
                    while(this._blockOffset + data.length - offset >= this._blockSize){
                        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
                        this._update();
                        this._blockOffset = 0;
                    }
                    while(offset < data.length)block[this._blockOffset++] = data[offset++];
                     // update length
                    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
                        this._length[j] += carry;
                        carry = this._length[j] / 0x0100000000 | 0;
                        if (carry > 0) this._length[j] -= 0x0100000000 * carry;
                    }
                    return this;
                };
                HashBase.prototype._update = function() {
                    throw new Error("_update is not implemented");
                };
                HashBase.prototype.digest = function(encoding) {
                    if (this._finalized) throw new Error("Digest already called");
                    this._finalized = true;
                    var digest = this._digest();
                    if (encoding !== undefined) digest = digest.toString(encoding); // reset state
                    this._block.fill(0);
                    this._blockOffset = 0;
                    for(var i = 0; i < 4; ++i)this._length[i] = 0;
                    return digest;
                };
                HashBase.prototype._digest = function() {
                    throw new Error("_digest is not implemented");
                };
                module.exports = HashBase;
            },
            {
                "inherits": 143,
                "readable-stream": 128,
                "safe-buffer": 174
            }
        ],
        114: [
            function(require, module, exports) {
                arguments[4][47][0].apply(exports, arguments);
            },
            {
                "dup": 47
            }
        ],
        115: [
            function(require, module, exports) {
                arguments[4][48][0].apply(exports, arguments);
            },
            {
                "./_stream_readable": 117,
                "./_stream_writable": 119,
                "_process": 163,
                "dup": 48,
                "inherits": 143
            }
        ],
        116: [
            function(require, module, exports) {
                arguments[4][49][0].apply(exports, arguments);
            },
            {
                "./_stream_transform": 118,
                "dup": 49,
                "inherits": 143
            }
        ],
        117: [
            function(require, module, exports) {
                arguments[4][50][0].apply(exports, arguments);
            },
            {
                "../errors": 114,
                "./_stream_duplex": 115,
                "./internal/streams/async_iterator": 120,
                "./internal/streams/buffer_list": 121,
                "./internal/streams/destroy": 122,
                "./internal/streams/from": 124,
                "./internal/streams/state": 126,
                "./internal/streams/stream": 127,
                "_process": 163,
                "buffer": 63,
                "dup": 50,
                "events": 103,
                "inherits": 143,
                "string_decoder/": 199,
                "util": 224
            }
        ],
        118: [
            function(require, module, exports) {
                arguments[4][51][0].apply(exports, arguments);
            },
            {
                "../errors": 114,
                "./_stream_duplex": 115,
                "dup": 51,
                "inherits": 143
            }
        ],
        119: [
            function(require, module, exports) {
                arguments[4][52][0].apply(exports, arguments);
            },
            {
                "../errors": 114,
                "./_stream_duplex": 115,
                "./internal/streams/destroy": 122,
                "./internal/streams/state": 126,
                "./internal/streams/stream": 127,
                "_process": 163,
                "buffer": 63,
                "dup": 52,
                "inherits": 143,
                "util-deprecate": 200
            }
        ],
        120: [
            function(require, module, exports) {
                arguments[4][53][0].apply(exports, arguments);
            },
            {
                "./end-of-stream": 123,
                "_process": 163,
                "dup": 53
            }
        ],
        121: [
            function(require, module, exports) {
                arguments[4][54][0].apply(exports, arguments);
            },
            {
                "buffer": 63,
                "dup": 54,
                "util": 224
            }
        ],
        122: [
            function(require, module, exports) {
                arguments[4][55][0].apply(exports, arguments);
            },
            {
                "_process": 163,
                "dup": 55
            }
        ],
        123: [
            function(require, module, exports) {
                arguments[4][56][0].apply(exports, arguments);
            },
            {
                "../../../errors": 114,
                "dup": 56
            }
        ],
        124: [
            function(require, module, exports) {
                arguments[4][57][0].apply(exports, arguments);
            },
            {
                "dup": 57
            }
        ],
        125: [
            function(require, module, exports) {
                arguments[4][58][0].apply(exports, arguments);
            },
            {
                "../../../errors": 114,
                "./end-of-stream": 123,
                "dup": 58
            }
        ],
        126: [
            function(require, module, exports) {
                arguments[4][59][0].apply(exports, arguments);
            },
            {
                "../../../errors": 114,
                "dup": 59
            }
        ],
        127: [
            function(require, module, exports) {
                arguments[4][60][0].apply(exports, arguments);
            },
            {
                "dup": 60,
                "events": 103
            }
        ],
        128: [
            function(require, module, exports) {
                arguments[4][61][0].apply(exports, arguments);
            },
            {
                "./lib/_stream_duplex.js": 115,
                "./lib/_stream_passthrough.js": 116,
                "./lib/_stream_readable.js": 117,
                "./lib/_stream_transform.js": 118,
                "./lib/_stream_writable.js": 119,
                "./lib/internal/streams/end-of-stream.js": 123,
                "./lib/internal/streams/pipeline.js": 125,
                "dup": 61
            }
        ],
        129: [
            function(require, module, exports) {
                var hash = exports;
                hash.utils = require("./hash/utils");
                hash.common = require("./hash/common");
                hash.sha = require("./hash/sha");
                hash.ripemd = require("./hash/ripemd");
                hash.hmac = require("./hash/hmac"); // Proxy hash functions to the main object
                hash.sha1 = hash.sha.sha1;
                hash.sha256 = hash.sha.sha256;
                hash.sha224 = hash.sha.sha224;
                hash.sha384 = hash.sha.sha384;
                hash.sha512 = hash.sha.sha512;
                hash.ripemd160 = hash.ripemd.ripemd160;
            },
            {
                "./hash/common": 130,
                "./hash/hmac": 131,
                "./hash/ripemd": 132,
                "./hash/sha": 133,
                "./hash/utils": 140
            }
        ],
        130: [
            function(require, module, exports) {
                "use strict";
                var utils = require("./utils");
                var assert = require("minimalistic-assert");
                function BlockHash() {
                    this.pending = null;
                    this.pendingTotal = 0;
                    this.blockSize = this.constructor.blockSize;
                    this.outSize = this.constructor.outSize;
                    this.hmacStrength = this.constructor.hmacStrength;
                    this.padLength = this.constructor.padLength / 8;
                    this.endian = "big";
                    this._delta8 = this.blockSize / 8;
                    this._delta32 = this.blockSize / 32;
                }
                exports.BlockHash = BlockHash;
                BlockHash.prototype.update = function update(msg, enc) {
                    // Convert message to array, pad it, and join into 32bit blocks
                    msg = utils.toArray(msg, enc);
                    if (!this.pending) this.pending = msg;
                    else this.pending = this.pending.concat(msg);
                    this.pendingTotal += msg.length; // Enough data, try updating
                    if (this.pending.length >= this._delta8) {
                        msg = this.pending; // Process pending data in blocks
                        var r = msg.length % this._delta8;
                        this.pending = msg.slice(msg.length - r, msg.length);
                        if (this.pending.length === 0) this.pending = null;
                        msg = utils.join32(msg, 0, msg.length - r, this.endian);
                        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
                    }
                    return this;
                };
                BlockHash.prototype.digest = function digest(enc) {
                    this.update(this._pad());
                    assert(this.pending === null);
                    return this._digest(enc);
                };
                BlockHash.prototype._pad = function pad() {
                    var len = this.pendingTotal;
                    var bytes = this._delta8;
                    var k = bytes - (len + this.padLength) % bytes;
                    var res = new Array(k + this.padLength);
                    res[0] = 0x80;
                    for(var i = 1; i < k; i++)res[i] = 0;
                     // Append length
                    len <<= 3;
                    if (this.endian === "big") {
                        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
                        res[i++] = 0;
                        res[i++] = 0;
                        res[i++] = 0;
                        res[i++] = 0;
                        res[i++] = len >>> 24 & 0xff;
                        res[i++] = len >>> 16 & 0xff;
                        res[i++] = len >>> 8 & 0xff;
                        res[i++] = len & 0xff;
                    } else {
                        res[i++] = len & 0xff;
                        res[i++] = len >>> 8 & 0xff;
                        res[i++] = len >>> 16 & 0xff;
                        res[i++] = len >>> 24 & 0xff;
                        res[i++] = 0;
                        res[i++] = 0;
                        res[i++] = 0;
                        res[i++] = 0;
                        for(t = 8; t < this.padLength; t++)res[i++] = 0;
                    }
                    return res;
                };
            },
            {
                "./utils": 140,
                "minimalistic-assert": 150
            }
        ],
        131: [
            function(require, module, exports) {
                "use strict";
                var utils = require("./utils");
                var assert = require("minimalistic-assert");
                function Hmac(hash, key, enc) {
                    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
                    this.Hash = hash;
                    this.blockSize = hash.blockSize / 8;
                    this.outSize = hash.outSize / 8;
                    this.inner = null;
                    this.outer = null;
                    this._init(utils.toArray(key, enc));
                }
                module.exports = Hmac;
                Hmac.prototype._init = function init(key) {
                    // Shorten key, if needed
                    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
                    assert(key.length <= this.blockSize); // Add padding to key
                    for(var i = key.length; i < this.blockSize; i++)key.push(0);
                    for(i = 0; i < key.length; i++)key[i] ^= 0x36;
                    this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a
                    for(i = 0; i < key.length; i++)key[i] ^= 0x6a;
                    this.outer = new this.Hash().update(key);
                };
                Hmac.prototype.update = function update(msg, enc) {
                    this.inner.update(msg, enc);
                    return this;
                };
                Hmac.prototype.digest = function digest(enc) {
                    this.outer.update(this.inner.digest());
                    return this.outer.digest(enc);
                };
            },
            {
                "./utils": 140,
                "minimalistic-assert": 150
            }
        ],
        132: [
            function(require, module, exports) {
                "use strict";
                var utils = require("./utils");
                var common = require("./common");
                var rotl32 = utils.rotl32;
                var sum32 = utils.sum32;
                var sum32_3 = utils.sum32_3;
                var sum32_4 = utils.sum32_4;
                var BlockHash = common.BlockHash;
                function RIPEMD160() {
                    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
                    BlockHash.call(this);
                    this.h = [
                        0x67452301,
                        0xefcdab89,
                        0x98badcfe,
                        0x10325476,
                        0xc3d2e1f0
                    ];
                    this.endian = "little";
                }
                utils.inherits(RIPEMD160, BlockHash);
                exports.ripemd160 = RIPEMD160;
                RIPEMD160.blockSize = 512;
                RIPEMD160.outSize = 160;
                RIPEMD160.hmacStrength = 192;
                RIPEMD160.padLength = 64;
                RIPEMD160.prototype._update = function update(msg, start) {
                    var A = this.h[0];
                    var B = this.h[1];
                    var C = this.h[2];
                    var D = this.h[3];
                    var E = this.h[4];
                    var Ah = A;
                    var Bh = B;
                    var Ch = C;
                    var Dh = D;
                    var Eh = E;
                    for(var j = 0; j < 80; j++){
                        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
                        A = E;
                        E = D;
                        D = rotl32(C, 10);
                        C = B;
                        B = T;
                        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
                        Ah = Eh;
                        Eh = Dh;
                        Dh = rotl32(Ch, 10);
                        Ch = Bh;
                        Bh = T;
                    }
                    T = sum32_3(this.h[1], C, Dh);
                    this.h[1] = sum32_3(this.h[2], D, Eh);
                    this.h[2] = sum32_3(this.h[3], E, Ah);
                    this.h[3] = sum32_3(this.h[4], A, Bh);
                    this.h[4] = sum32_3(this.h[0], B, Ch);
                    this.h[0] = T;
                };
                RIPEMD160.prototype._digest = function digest(enc) {
                    if (enc === "hex") return utils.toHex32(this.h, "little");
                    else return utils.split32(this.h, "little");
                };
                function f(j, x, y, z) {
                    if (j <= 15) return x ^ y ^ z;
                    else if (j <= 31) return x & y | ~x & z;
                    else if (j <= 47) return (x | ~y) ^ z;
                    else if (j <= 63) return x & z | y & ~z;
                    else return x ^ (y | ~z);
                }
                function K(j) {
                    if (j <= 15) return 0x00000000;
                    else if (j <= 31) return 0x5a827999;
                    else if (j <= 47) return 0x6ed9eba1;
                    else if (j <= 63) return 0x8f1bbcdc;
                    else return 0xa953fd4e;
                }
                function Kh(j) {
                    if (j <= 15) return 0x50a28be6;
                    else if (j <= 31) return 0x5c4dd124;
                    else if (j <= 47) return 0x6d703ef3;
                    else if (j <= 63) return 0x7a6d76e9;
                    else return 0x00000000;
                }
                var r = [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7,
                    4,
                    13,
                    1,
                    10,
                    6,
                    15,
                    3,
                    12,
                    0,
                    9,
                    5,
                    2,
                    14,
                    11,
                    8,
                    3,
                    10,
                    14,
                    4,
                    9,
                    15,
                    8,
                    1,
                    2,
                    7,
                    0,
                    6,
                    13,
                    11,
                    5,
                    12,
                    1,
                    9,
                    11,
                    10,
                    0,
                    8,
                    12,
                    4,
                    13,
                    3,
                    7,
                    15,
                    14,
                    5,
                    6,
                    2,
                    4,
                    0,
                    5,
                    9,
                    7,
                    12,
                    2,
                    10,
                    14,
                    1,
                    3,
                    8,
                    11,
                    6,
                    15,
                    13
                ];
                var rh = [
                    5,
                    14,
                    7,
                    0,
                    9,
                    2,
                    11,
                    4,
                    13,
                    6,
                    15,
                    8,
                    1,
                    10,
                    3,
                    12,
                    6,
                    11,
                    3,
                    7,
                    0,
                    13,
                    5,
                    10,
                    14,
                    15,
                    8,
                    12,
                    4,
                    9,
                    1,
                    2,
                    15,
                    5,
                    1,
                    3,
                    7,
                    14,
                    6,
                    9,
                    11,
                    8,
                    12,
                    2,
                    10,
                    0,
                    4,
                    13,
                    8,
                    6,
                    4,
                    1,
                    3,
                    11,
                    15,
                    0,
                    5,
                    12,
                    2,
                    13,
                    9,
                    7,
                    10,
                    14,
                    12,
                    15,
                    10,
                    4,
                    1,
                    5,
                    8,
                    7,
                    6,
                    2,
                    13,
                    14,
                    0,
                    3,
                    9,
                    11
                ];
                var s = [
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8,
                    7,
                    6,
                    8,
                    13,
                    11,
                    9,
                    7,
                    15,
                    7,
                    12,
                    15,
                    9,
                    11,
                    7,
                    13,
                    12,
                    11,
                    13,
                    6,
                    7,
                    14,
                    9,
                    13,
                    15,
                    14,
                    8,
                    13,
                    6,
                    5,
                    12,
                    7,
                    5,
                    11,
                    12,
                    14,
                    15,
                    14,
                    15,
                    9,
                    8,
                    9,
                    14,
                    5,
                    6,
                    8,
                    6,
                    5,
                    12,
                    9,
                    15,
                    5,
                    11,
                    6,
                    8,
                    13,
                    12,
                    5,
                    12,
                    13,
                    14,
                    11,
                    8,
                    5,
                    6
                ];
                var sh = [
                    8,
                    9,
                    9,
                    11,
                    13,
                    15,
                    15,
                    5,
                    7,
                    7,
                    8,
                    11,
                    14,
                    14,
                    12,
                    6,
                    9,
                    13,
                    15,
                    7,
                    12,
                    8,
                    9,
                    11,
                    7,
                    7,
                    12,
                    7,
                    6,
                    15,
                    13,
                    11,
                    9,
                    7,
                    15,
                    11,
                    8,
                    6,
                    6,
                    14,
                    12,
                    13,
                    5,
                    14,
                    13,
                    13,
                    7,
                    5,
                    15,
                    5,
                    8,
                    11,
                    14,
                    14,
                    6,
                    14,
                    6,
                    9,
                    12,
                    9,
                    12,
                    5,
                    15,
                    8,
                    8,
                    5,
                    12,
                    9,
                    12,
                    5,
                    14,
                    6,
                    8,
                    13,
                    6,
                    5,
                    15,
                    13,
                    11,
                    11
                ];
            },
            {
                "./common": 130,
                "./utils": 140
            }
        ],
        133: [
            function(require, module, exports) {
                "use strict";
                exports.sha1 = require("./sha/1");
                exports.sha224 = require("./sha/224");
                exports.sha256 = require("./sha/256");
                exports.sha384 = require("./sha/384");
                exports.sha512 = require("./sha/512");
            },
            {
                "./sha/1": 134,
                "./sha/224": 135,
                "./sha/256": 136,
                "./sha/384": 137,
                "./sha/512": 138
            }
        ],
        134: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var common = require("../common");
                var shaCommon = require("./common");
                var rotl32 = utils.rotl32;
                var sum32 = utils.sum32;
                var sum32_5 = utils.sum32_5;
                var ft_1 = shaCommon.ft_1;
                var BlockHash = common.BlockHash;
                var sha1_K = [
                    0x5A827999,
                    0x6ED9EBA1,
                    0x8F1BBCDC,
                    0xCA62C1D6
                ];
                function SHA1() {
                    if (!(this instanceof SHA1)) return new SHA1();
                    BlockHash.call(this);
                    this.h = [
                        0x67452301,
                        0xefcdab89,
                        0x98badcfe,
                        0x10325476,
                        0xc3d2e1f0
                    ];
                    this.W = new Array(80);
                }
                utils.inherits(SHA1, BlockHash);
                module.exports = SHA1;
                SHA1.blockSize = 512;
                SHA1.outSize = 160;
                SHA1.hmacStrength = 80;
                SHA1.padLength = 64;
                SHA1.prototype._update = function _update(msg, start) {
                    var W = this.W;
                    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
                    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
                    var a = this.h[0];
                    var b = this.h[1];
                    var c = this.h[2];
                    var d = this.h[3];
                    var e = this.h[4];
                    for(i = 0; i < W.length; i++){
                        var s = ~~(i / 20);
                        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
                        e = d;
                        d = c;
                        c = rotl32(b, 30);
                        b = a;
                        a = t;
                    }
                    this.h[0] = sum32(this.h[0], a);
                    this.h[1] = sum32(this.h[1], b);
                    this.h[2] = sum32(this.h[2], c);
                    this.h[3] = sum32(this.h[3], d);
                    this.h[4] = sum32(this.h[4], e);
                };
                SHA1.prototype._digest = function digest(enc) {
                    if (enc === "hex") return utils.toHex32(this.h, "big");
                    else return utils.split32(this.h, "big");
                };
            },
            {
                "../common": 130,
                "../utils": 140,
                "./common": 139
            }
        ],
        135: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var SHA256 = require("./256");
                function SHA224() {
                    if (!(this instanceof SHA224)) return new SHA224();
                    SHA256.call(this);
                    this.h = [
                        0xc1059ed8,
                        0x367cd507,
                        0x3070dd17,
                        0xf70e5939,
                        0xffc00b31,
                        0x68581511,
                        0x64f98fa7,
                        0xbefa4fa4
                    ];
                }
                utils.inherits(SHA224, SHA256);
                module.exports = SHA224;
                SHA224.blockSize = 512;
                SHA224.outSize = 224;
                SHA224.hmacStrength = 192;
                SHA224.padLength = 64;
                SHA224.prototype._digest = function digest(enc) {
                    // Just truncate output
                    if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
                    else return utils.split32(this.h.slice(0, 7), "big");
                };
            },
            {
                "../utils": 140,
                "./256": 136
            }
        ],
        136: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var common = require("../common");
                var shaCommon = require("./common");
                var assert = require("minimalistic-assert");
                var sum32 = utils.sum32;
                var sum32_4 = utils.sum32_4;
                var sum32_5 = utils.sum32_5;
                var ch32 = shaCommon.ch32;
                var maj32 = shaCommon.maj32;
                var s0_256 = shaCommon.s0_256;
                var s1_256 = shaCommon.s1_256;
                var g0_256 = shaCommon.g0_256;
                var g1_256 = shaCommon.g1_256;
                var BlockHash = common.BlockHash;
                var sha256_K = [
                    0x428a2f98,
                    0x71374491,
                    0xb5c0fbcf,
                    0xe9b5dba5,
                    0x3956c25b,
                    0x59f111f1,
                    0x923f82a4,
                    0xab1c5ed5,
                    0xd807aa98,
                    0x12835b01,
                    0x243185be,
                    0x550c7dc3,
                    0x72be5d74,
                    0x80deb1fe,
                    0x9bdc06a7,
                    0xc19bf174,
                    0xe49b69c1,
                    0xefbe4786,
                    0x0fc19dc6,
                    0x240ca1cc,
                    0x2de92c6f,
                    0x4a7484aa,
                    0x5cb0a9dc,
                    0x76f988da,
                    0x983e5152,
                    0xa831c66d,
                    0xb00327c8,
                    0xbf597fc7,
                    0xc6e00bf3,
                    0xd5a79147,
                    0x06ca6351,
                    0x14292967,
                    0x27b70a85,
                    0x2e1b2138,
                    0x4d2c6dfc,
                    0x53380d13,
                    0x650a7354,
                    0x766a0abb,
                    0x81c2c92e,
                    0x92722c85,
                    0xa2bfe8a1,
                    0xa81a664b,
                    0xc24b8b70,
                    0xc76c51a3,
                    0xd192e819,
                    0xd6990624,
                    0xf40e3585,
                    0x106aa070,
                    0x19a4c116,
                    0x1e376c08,
                    0x2748774c,
                    0x34b0bcb5,
                    0x391c0cb3,
                    0x4ed8aa4a,
                    0x5b9cca4f,
                    0x682e6ff3,
                    0x748f82ee,
                    0x78a5636f,
                    0x84c87814,
                    0x8cc70208,
                    0x90befffa,
                    0xa4506ceb,
                    0xbef9a3f7,
                    0xc67178f2
                ];
                function SHA256() {
                    if (!(this instanceof SHA256)) return new SHA256();
                    BlockHash.call(this);
                    this.h = [
                        0x6a09e667,
                        0xbb67ae85,
                        0x3c6ef372,
                        0xa54ff53a,
                        0x510e527f,
                        0x9b05688c,
                        0x1f83d9ab,
                        0x5be0cd19
                    ];
                    this.k = sha256_K;
                    this.W = new Array(64);
                }
                utils.inherits(SHA256, BlockHash);
                module.exports = SHA256;
                SHA256.blockSize = 512;
                SHA256.outSize = 256;
                SHA256.hmacStrength = 192;
                SHA256.padLength = 64;
                SHA256.prototype._update = function _update(msg, start) {
                    var W = this.W;
                    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
                    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
                    var a = this.h[0];
                    var b = this.h[1];
                    var c = this.h[2];
                    var d = this.h[3];
                    var e = this.h[4];
                    var f = this.h[5];
                    var g = this.h[6];
                    var h = this.h[7];
                    assert(this.k.length === W.length);
                    for(i = 0; i < W.length; i++){
                        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
                        var T2 = sum32(s0_256(a), maj32(a, b, c));
                        h = g;
                        g = f;
                        f = e;
                        e = sum32(d, T1);
                        d = c;
                        c = b;
                        b = a;
                        a = sum32(T1, T2);
                    }
                    this.h[0] = sum32(this.h[0], a);
                    this.h[1] = sum32(this.h[1], b);
                    this.h[2] = sum32(this.h[2], c);
                    this.h[3] = sum32(this.h[3], d);
                    this.h[4] = sum32(this.h[4], e);
                    this.h[5] = sum32(this.h[5], f);
                    this.h[6] = sum32(this.h[6], g);
                    this.h[7] = sum32(this.h[7], h);
                };
                SHA256.prototype._digest = function digest(enc) {
                    if (enc === "hex") return utils.toHex32(this.h, "big");
                    else return utils.split32(this.h, "big");
                };
            },
            {
                "../common": 130,
                "../utils": 140,
                "./common": 139,
                "minimalistic-assert": 150
            }
        ],
        137: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var SHA512 = require("./512");
                function SHA384() {
                    if (!(this instanceof SHA384)) return new SHA384();
                    SHA512.call(this);
                    this.h = [
                        0xcbbb9d5d,
                        0xc1059ed8,
                        0x629a292a,
                        0x367cd507,
                        0x9159015a,
                        0x3070dd17,
                        0x152fecd8,
                        0xf70e5939,
                        0x67332667,
                        0xffc00b31,
                        0x8eb44a87,
                        0x68581511,
                        0xdb0c2e0d,
                        0x64f98fa7,
                        0x47b5481d,
                        0xbefa4fa4
                    ];
                }
                utils.inherits(SHA384, SHA512);
                module.exports = SHA384;
                SHA384.blockSize = 1024;
                SHA384.outSize = 384;
                SHA384.hmacStrength = 192;
                SHA384.padLength = 128;
                SHA384.prototype._digest = function digest(enc) {
                    if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
                    else return utils.split32(this.h.slice(0, 12), "big");
                };
            },
            {
                "../utils": 140,
                "./512": 138
            }
        ],
        138: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var common = require("../common");
                var assert = require("minimalistic-assert");
                var rotr64_hi = utils.rotr64_hi;
                var rotr64_lo = utils.rotr64_lo;
                var shr64_hi = utils.shr64_hi;
                var shr64_lo = utils.shr64_lo;
                var sum64 = utils.sum64;
                var sum64_hi = utils.sum64_hi;
                var sum64_lo = utils.sum64_lo;
                var sum64_4_hi = utils.sum64_4_hi;
                var sum64_4_lo = utils.sum64_4_lo;
                var sum64_5_hi = utils.sum64_5_hi;
                var sum64_5_lo = utils.sum64_5_lo;
                var BlockHash = common.BlockHash;
                var sha512_K = [
                    0x428a2f98,
                    0xd728ae22,
                    0x71374491,
                    0x23ef65cd,
                    0xb5c0fbcf,
                    0xec4d3b2f,
                    0xe9b5dba5,
                    0x8189dbbc,
                    0x3956c25b,
                    0xf348b538,
                    0x59f111f1,
                    0xb605d019,
                    0x923f82a4,
                    0xaf194f9b,
                    0xab1c5ed5,
                    0xda6d8118,
                    0xd807aa98,
                    0xa3030242,
                    0x12835b01,
                    0x45706fbe,
                    0x243185be,
                    0x4ee4b28c,
                    0x550c7dc3,
                    0xd5ffb4e2,
                    0x72be5d74,
                    0xf27b896f,
                    0x80deb1fe,
                    0x3b1696b1,
                    0x9bdc06a7,
                    0x25c71235,
                    0xc19bf174,
                    0xcf692694,
                    0xe49b69c1,
                    0x9ef14ad2,
                    0xefbe4786,
                    0x384f25e3,
                    0x0fc19dc6,
                    0x8b8cd5b5,
                    0x240ca1cc,
                    0x77ac9c65,
                    0x2de92c6f,
                    0x592b0275,
                    0x4a7484aa,
                    0x6ea6e483,
                    0x5cb0a9dc,
                    0xbd41fbd4,
                    0x76f988da,
                    0x831153b5,
                    0x983e5152,
                    0xee66dfab,
                    0xa831c66d,
                    0x2db43210,
                    0xb00327c8,
                    0x98fb213f,
                    0xbf597fc7,
                    0xbeef0ee4,
                    0xc6e00bf3,
                    0x3da88fc2,
                    0xd5a79147,
                    0x930aa725,
                    0x06ca6351,
                    0xe003826f,
                    0x14292967,
                    0x0a0e6e70,
                    0x27b70a85,
                    0x46d22ffc,
                    0x2e1b2138,
                    0x5c26c926,
                    0x4d2c6dfc,
                    0x5ac42aed,
                    0x53380d13,
                    0x9d95b3df,
                    0x650a7354,
                    0x8baf63de,
                    0x766a0abb,
                    0x3c77b2a8,
                    0x81c2c92e,
                    0x47edaee6,
                    0x92722c85,
                    0x1482353b,
                    0xa2bfe8a1,
                    0x4cf10364,
                    0xa81a664b,
                    0xbc423001,
                    0xc24b8b70,
                    0xd0f89791,
                    0xc76c51a3,
                    0x0654be30,
                    0xd192e819,
                    0xd6ef5218,
                    0xd6990624,
                    0x5565a910,
                    0xf40e3585,
                    0x5771202a,
                    0x106aa070,
                    0x32bbd1b8,
                    0x19a4c116,
                    0xb8d2d0c8,
                    0x1e376c08,
                    0x5141ab53,
                    0x2748774c,
                    0xdf8eeb99,
                    0x34b0bcb5,
                    0xe19b48a8,
                    0x391c0cb3,
                    0xc5c95a63,
                    0x4ed8aa4a,
                    0xe3418acb,
                    0x5b9cca4f,
                    0x7763e373,
                    0x682e6ff3,
                    0xd6b2b8a3,
                    0x748f82ee,
                    0x5defb2fc,
                    0x78a5636f,
                    0x43172f60,
                    0x84c87814,
                    0xa1f0ab72,
                    0x8cc70208,
                    0x1a6439ec,
                    0x90befffa,
                    0x23631e28,
                    0xa4506ceb,
                    0xde82bde9,
                    0xbef9a3f7,
                    0xb2c67915,
                    0xc67178f2,
                    0xe372532b,
                    0xca273ece,
                    0xea26619c,
                    0xd186b8c7,
                    0x21c0c207,
                    0xeada7dd6,
                    0xcde0eb1e,
                    0xf57d4f7f,
                    0xee6ed178,
                    0x06f067aa,
                    0x72176fba,
                    0x0a637dc5,
                    0xa2c898a6,
                    0x113f9804,
                    0xbef90dae,
                    0x1b710b35,
                    0x131c471b,
                    0x28db77f5,
                    0x23047d84,
                    0x32caab7b,
                    0x40c72493,
                    0x3c9ebe0a,
                    0x15c9bebc,
                    0x431d67c4,
                    0x9c100d4c,
                    0x4cc5d4be,
                    0xcb3e42b6,
                    0x597f299c,
                    0xfc657e2a,
                    0x5fcb6fab,
                    0x3ad6faec,
                    0x6c44198c,
                    0x4a475817
                ];
                function SHA512() {
                    if (!(this instanceof SHA512)) return new SHA512();
                    BlockHash.call(this);
                    this.h = [
                        0x6a09e667,
                        0xf3bcc908,
                        0xbb67ae85,
                        0x84caa73b,
                        0x3c6ef372,
                        0xfe94f82b,
                        0xa54ff53a,
                        0x5f1d36f1,
                        0x510e527f,
                        0xade682d1,
                        0x9b05688c,
                        0x2b3e6c1f,
                        0x1f83d9ab,
                        0xfb41bd6b,
                        0x5be0cd19,
                        0x137e2179
                    ];
                    this.k = sha512_K;
                    this.W = new Array(160);
                }
                utils.inherits(SHA512, BlockHash);
                module.exports = SHA512;
                SHA512.blockSize = 1024;
                SHA512.outSize = 512;
                SHA512.hmacStrength = 192;
                SHA512.padLength = 128;
                SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
                    var W = this.W; // 32 x 32bit words
                    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
                    for(; i < W.length; i += 2){
                        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
                        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
                        var c1_hi = W[i - 14]; // i - 7
                        var c1_lo = W[i - 13];
                        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
                        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
                        var c3_hi = W[i - 32]; // i - 16
                        var c3_lo = W[i - 31];
                        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
                        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
                    }
                };
                SHA512.prototype._update = function _update(msg, start) {
                    this._prepareBlock(msg, start);
                    var W = this.W;
                    var ah = this.h[0];
                    var al = this.h[1];
                    var bh = this.h[2];
                    var bl = this.h[3];
                    var ch = this.h[4];
                    var cl = this.h[5];
                    var dh = this.h[6];
                    var dl = this.h[7];
                    var eh = this.h[8];
                    var el = this.h[9];
                    var fh = this.h[10];
                    var fl = this.h[11];
                    var gh = this.h[12];
                    var gl = this.h[13];
                    var hh = this.h[14];
                    var hl = this.h[15];
                    assert(this.k.length === W.length);
                    for(var i = 0; i < W.length; i += 2){
                        var c0_hi = hh;
                        var c0_lo = hl;
                        var c1_hi = s1_512_hi(eh, el);
                        var c1_lo = s1_512_lo(eh, el);
                        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                        var c3_hi = this.k[i];
                        var c3_lo = this.k[i + 1];
                        var c4_hi = W[i];
                        var c4_lo = W[i + 1];
                        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
                        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
                        c0_hi = s0_512_hi(ah, al);
                        c0_lo = s0_512_lo(ah, al);
                        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
                        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
                        hh = gh;
                        hl = gl;
                        gh = fh;
                        gl = fl;
                        fh = eh;
                        fl = el;
                        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                        el = sum64_lo(dl, dl, T1_hi, T1_lo);
                        dh = ch;
                        dl = cl;
                        ch = bh;
                        cl = bl;
                        bh = ah;
                        bl = al;
                        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
                    }
                    sum64(this.h, 0, ah, al);
                    sum64(this.h, 2, bh, bl);
                    sum64(this.h, 4, ch, cl);
                    sum64(this.h, 6, dh, dl);
                    sum64(this.h, 8, eh, el);
                    sum64(this.h, 10, fh, fl);
                    sum64(this.h, 12, gh, gl);
                    sum64(this.h, 14, hh, hl);
                };
                SHA512.prototype._digest = function digest(enc) {
                    if (enc === "hex") return utils.toHex32(this.h, "big");
                    else return utils.split32(this.h, "big");
                };
                function ch64_hi(xh, xl, yh, yl, zh) {
                    var r = xh & yh ^ ~xh & zh;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function ch64_lo(xh, xl, yh, yl, zh, zl) {
                    var r = xl & yl ^ ~xl & zl;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function maj64_hi(xh, xl, yh, yl, zh) {
                    var r = xh & yh ^ xh & zh ^ yh & zh;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function maj64_lo(xh, xl, yh, yl, zh, zl) {
                    var r = xl & yl ^ xl & zl ^ yl & zl;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function s0_512_hi(xh, xl) {
                    var c0_hi = rotr64_hi(xh, xl, 28);
                    var c1_hi = rotr64_hi(xl, xh, 2); // 34
                    var c2_hi = rotr64_hi(xl, xh, 7); // 39
                    var r = c0_hi ^ c1_hi ^ c2_hi;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function s0_512_lo(xh, xl) {
                    var c0_lo = rotr64_lo(xh, xl, 28);
                    var c1_lo = rotr64_lo(xl, xh, 2); // 34
                    var c2_lo = rotr64_lo(xl, xh, 7); // 39
                    var r = c0_lo ^ c1_lo ^ c2_lo;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function s1_512_hi(xh, xl) {
                    var c0_hi = rotr64_hi(xh, xl, 14);
                    var c1_hi = rotr64_hi(xh, xl, 18);
                    var c2_hi = rotr64_hi(xl, xh, 9); // 41
                    var r = c0_hi ^ c1_hi ^ c2_hi;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function s1_512_lo(xh, xl) {
                    var c0_lo = rotr64_lo(xh, xl, 14);
                    var c1_lo = rotr64_lo(xh, xl, 18);
                    var c2_lo = rotr64_lo(xl, xh, 9); // 41
                    var r = c0_lo ^ c1_lo ^ c2_lo;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function g0_512_hi(xh, xl) {
                    var c0_hi = rotr64_hi(xh, xl, 1);
                    var c1_hi = rotr64_hi(xh, xl, 8);
                    var c2_hi = shr64_hi(xh, xl, 7);
                    var r = c0_hi ^ c1_hi ^ c2_hi;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function g0_512_lo(xh, xl) {
                    var c0_lo = rotr64_lo(xh, xl, 1);
                    var c1_lo = rotr64_lo(xh, xl, 8);
                    var c2_lo = shr64_lo(xh, xl, 7);
                    var r = c0_lo ^ c1_lo ^ c2_lo;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function g1_512_hi(xh, xl) {
                    var c0_hi = rotr64_hi(xh, xl, 19);
                    var c1_hi = rotr64_hi(xl, xh, 29); // 61
                    var c2_hi = shr64_hi(xh, xl, 6);
                    var r = c0_hi ^ c1_hi ^ c2_hi;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
                function g1_512_lo(xh, xl) {
                    var c0_lo = rotr64_lo(xh, xl, 19);
                    var c1_lo = rotr64_lo(xl, xh, 29); // 61
                    var c2_lo = shr64_lo(xh, xl, 6);
                    var r = c0_lo ^ c1_lo ^ c2_lo;
                    if (r < 0) r += 0x100000000;
                    return r;
                }
            },
            {
                "../common": 130,
                "../utils": 140,
                "minimalistic-assert": 150
            }
        ],
        139: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var rotr32 = utils.rotr32;
                function ft_1(s, x, y, z) {
                    if (s === 0) return ch32(x, y, z);
                    if (s === 1 || s === 3) return p32(x, y, z);
                    if (s === 2) return maj32(x, y, z);
                }
                exports.ft_1 = ft_1;
                function ch32(x, y, z) {
                    return x & y ^ ~x & z;
                }
                exports.ch32 = ch32;
                function maj32(x, y, z) {
                    return x & y ^ x & z ^ y & z;
                }
                exports.maj32 = maj32;
                function p32(x, y, z) {
                    return x ^ y ^ z;
                }
                exports.p32 = p32;
                function s0_256(x) {
                    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
                }
                exports.s0_256 = s0_256;
                function s1_256(x) {
                    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
                }
                exports.s1_256 = s1_256;
                function g0_256(x) {
                    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
                }
                exports.g0_256 = g0_256;
                function g1_256(x) {
                    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
                }
                exports.g1_256 = g1_256;
            },
            {
                "../utils": 140
            }
        ],
        140: [
            function(require, module, exports) {
                "use strict";
                var assert = require("minimalistic-assert");
                var inherits = require("inherits");
                exports.inherits = inherits;
                function isSurrogatePair(msg, i) {
                    if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) return false;
                    if (i < 0 || i + 1 >= msg.length) return false;
                    return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
                }
                function toArray(msg, enc) {
                    if (Array.isArray(msg)) return msg.slice();
                    if (!msg) return [];
                    var res = [];
                    if (typeof msg === "string") {
                        if (!enc) {
                            // Inspired by stringToUtf8ByteArray() in closure-library by Google
                            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
                            // Apache License 2.0
                            // https://github.com/google/closure-library/blob/master/LICENSE
                            var p = 0;
                            for(var i = 0; i < msg.length; i++){
                                var c = msg.charCodeAt(i);
                                if (c < 128) res[p++] = c;
                                else if (c < 2048) {
                                    res[p++] = c >> 6 | 192;
                                    res[p++] = c & 63 | 128;
                                } else if (isSurrogatePair(msg, i)) {
                                    c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
                                    res[p++] = c >> 18 | 240;
                                    res[p++] = c >> 12 & 63 | 128;
                                    res[p++] = c >> 6 & 63 | 128;
                                    res[p++] = c & 63 | 128;
                                } else {
                                    res[p++] = c >> 12 | 224;
                                    res[p++] = c >> 6 & 63 | 128;
                                    res[p++] = c & 63 | 128;
                                }
                            }
                        } else if (enc === "hex") {
                            msg = msg.replace(/[^a-z0-9]+/ig, "");
                            if (msg.length % 2 !== 0) msg = "0" + msg;
                            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
                        }
                    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
                    return res;
                }
                exports.toArray = toArray;
                function toHex(msg) {
                    var res = "";
                    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
                    return res;
                }
                exports.toHex = toHex;
                function htonl(w) {
                    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
                    return res >>> 0;
                }
                exports.htonl = htonl;
                function toHex32(msg, endian) {
                    var res = "";
                    for(var i = 0; i < msg.length; i++){
                        var w = msg[i];
                        if (endian === "little") w = htonl(w);
                        res += zero8(w.toString(16));
                    }
                    return res;
                }
                exports.toHex32 = toHex32;
                function zero2(word) {
                    if (word.length === 1) return "0" + word;
                    else return word;
                }
                exports.zero2 = zero2;
                function zero8(word) {
                    if (word.length === 7) return "0" + word;
                    else if (word.length === 6) return "00" + word;
                    else if (word.length === 5) return "000" + word;
                    else if (word.length === 4) return "0000" + word;
                    else if (word.length === 3) return "00000" + word;
                    else if (word.length === 2) return "000000" + word;
                    else if (word.length === 1) return "0000000" + word;
                    else return word;
                }
                exports.zero8 = zero8;
                function join32(msg, start, end, endian) {
                    var len = end - start;
                    assert(len % 4 === 0);
                    var res = new Array(len / 4);
                    for(var i = 0, k = start; i < res.length; i++, k += 4){
                        var w;
                        if (endian === "big") w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
                        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
                        res[i] = w >>> 0;
                    }
                    return res;
                }
                exports.join32 = join32;
                function split32(msg, endian) {
                    var res = new Array(msg.length * 4);
                    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
                        var m = msg[i];
                        if (endian === "big") {
                            res[k] = m >>> 24;
                            res[k + 1] = m >>> 16 & 0xff;
                            res[k + 2] = m >>> 8 & 0xff;
                            res[k + 3] = m & 0xff;
                        } else {
                            res[k + 3] = m >>> 24;
                            res[k + 2] = m >>> 16 & 0xff;
                            res[k + 1] = m >>> 8 & 0xff;
                            res[k] = m & 0xff;
                        }
                    }
                    return res;
                }
                exports.split32 = split32;
                function rotr32(w, b) {
                    return w >>> b | w << 32 - b;
                }
                exports.rotr32 = rotr32;
                function rotl32(w, b) {
                    return w << b | w >>> 32 - b;
                }
                exports.rotl32 = rotl32;
                function sum32(a, b) {
                    return a + b >>> 0;
                }
                exports.sum32 = sum32;
                function sum32_3(a, b, c) {
                    return a + b + c >>> 0;
                }
                exports.sum32_3 = sum32_3;
                function sum32_4(a, b, c, d) {
                    return a + b + c + d >>> 0;
                }
                exports.sum32_4 = sum32_4;
                function sum32_5(a, b, c, d, e) {
                    return a + b + c + d + e >>> 0;
                }
                exports.sum32_5 = sum32_5;
                function sum64(buf, pos, ah, al) {
                    var bh = buf[pos];
                    var bl = buf[pos + 1];
                    var lo = al + bl >>> 0;
                    var hi = (lo < al ? 1 : 0) + ah + bh;
                    buf[pos] = hi >>> 0;
                    buf[pos + 1] = lo;
                }
                exports.sum64 = sum64;
                function sum64_hi(ah, al, bh, bl) {
                    var lo = al + bl >>> 0;
                    var hi = (lo < al ? 1 : 0) + ah + bh;
                    return hi >>> 0;
                }
                exports.sum64_hi = sum64_hi;
                function sum64_lo(ah, al, bh, bl) {
                    var lo = al + bl;
                    return lo >>> 0;
                }
                exports.sum64_lo = sum64_lo;
                function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
                    var carry = 0;
                    var lo = al;
                    lo = lo + bl >>> 0;
                    carry += lo < al ? 1 : 0;
                    lo = lo + cl >>> 0;
                    carry += lo < cl ? 1 : 0;
                    lo = lo + dl >>> 0;
                    carry += lo < dl ? 1 : 0;
                    var hi = ah + bh + ch + dh + carry;
                    return hi >>> 0;
                }
                exports.sum64_4_hi = sum64_4_hi;
                function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
                    var lo = al + bl + cl + dl;
                    return lo >>> 0;
                }
                exports.sum64_4_lo = sum64_4_lo;
                function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                    var carry = 0;
                    var lo = al;
                    lo = lo + bl >>> 0;
                    carry += lo < al ? 1 : 0;
                    lo = lo + cl >>> 0;
                    carry += lo < cl ? 1 : 0;
                    lo = lo + dl >>> 0;
                    carry += lo < dl ? 1 : 0;
                    lo = lo + el >>> 0;
                    carry += lo < el ? 1 : 0;
                    var hi = ah + bh + ch + dh + eh + carry;
                    return hi >>> 0;
                }
                exports.sum64_5_hi = sum64_5_hi;
                function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
                    var lo = al + bl + cl + dl + el;
                    return lo >>> 0;
                }
                exports.sum64_5_lo = sum64_5_lo;
                function rotr64_hi(ah, al, num) {
                    var r = al << 32 - num | ah >>> num;
                    return r >>> 0;
                }
                exports.rotr64_hi = rotr64_hi;
                function rotr64_lo(ah, al, num) {
                    var r = ah << 32 - num | al >>> num;
                    return r >>> 0;
                }
                exports.rotr64_lo = rotr64_lo;
                function shr64_hi(ah, al, num) {
                    return ah >>> num;
                }
                exports.shr64_hi = shr64_hi;
                function shr64_lo(ah, al, num) {
                    var r = ah << 32 - num | al >>> num;
                    return r >>> 0;
                }
                exports.shr64_lo = shr64_lo;
            },
            {
                "inherits": 143,
                "minimalistic-assert": 150
            }
        ],
        141: [
            function(require, module, exports) {
                "use strict";
                var hash = require("hash.js");
                var utils = require("minimalistic-crypto-utils");
                var assert = require("minimalistic-assert");
                function HmacDRBG(options) {
                    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
                    this.hash = options.hash;
                    this.predResist = !!options.predResist;
                    this.outLen = this.hash.outSize;
                    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
                    this._reseed = null;
                    this.reseedInterval = null;
                    this.K = null;
                    this.V = null;
                    var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
                    var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
                    var pers = utils.toArray(options.pers, options.persEnc || "hex");
                    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
                    this._init(entropy, nonce, pers);
                }
                module.exports = HmacDRBG;
                HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
                    var seed = entropy.concat(nonce).concat(pers);
                    this.K = new Array(this.outLen / 8);
                    this.V = new Array(this.outLen / 8);
                    for(var i = 0; i < this.V.length; i++){
                        this.K[i] = 0x00;
                        this.V[i] = 0x01;
                    }
                    this._update(seed);
                    this._reseed = 1;
                    this.reseedInterval = 0x1000000000000; // 2^48
                };
                HmacDRBG.prototype._hmac = function hmac() {
                    return new hash.hmac(this.hash, this.K);
                };
                HmacDRBG.prototype._update = function update(seed) {
                    var kmac = this._hmac().update(this.V).update([
                        0x00
                    ]);
                    if (seed) kmac = kmac.update(seed);
                    this.K = kmac.digest();
                    this.V = this._hmac().update(this.V).digest();
                    if (!seed) return;
                    this.K = this._hmac().update(this.V).update([
                        0x01
                    ]).update(seed).digest();
                    this.V = this._hmac().update(this.V).digest();
                };
                HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
                    // Optional entropy enc
                    if (typeof entropyEnc !== "string") {
                        addEnc = add;
                        add = entropyEnc;
                        entropyEnc = null;
                    }
                    entropy = utils.toArray(entropy, entropyEnc);
                    add = utils.toArray(add, addEnc);
                    assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
                    this._update(entropy.concat(add || []));
                    this._reseed = 1;
                };
                HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
                    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required"); // Optional encoding
                    if (typeof enc !== "string") {
                        addEnc = add;
                        add = enc;
                        enc = null;
                    } // Optional additional data
                    if (add) {
                        add = utils.toArray(add, addEnc || "hex");
                        this._update(add);
                    }
                    var temp = [];
                    while(temp.length < len){
                        this.V = this._hmac().update(this.V).digest();
                        temp = temp.concat(this.V);
                    }
                    var res = temp.slice(0, len);
                    this._update(add);
                    this._reseed++;
                    return utils.encode(res, enc);
                };
            },
            {
                "hash.js": 129,
                "minimalistic-assert": 150,
                "minimalistic-crypto-utils": 151
            }
        ],
        142: [
            function(require, module, exports) {
                /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
                    var e, m;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var nBits = -7;
                    var i = isLE ? nBytes - 1 : 0;
                    var d = isLE ? -1 : 1;
                    var s = buffer[offset + i];
                    i += d;
                    e = s & (1 << -nBits) - 1;
                    s >>= -nBits;
                    nBits += eLen;
                    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
                    m = e & (1 << -nBits) - 1;
                    e >>= -nBits;
                    nBits += mLen;
                    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
                    if (e === 0) e = 1 - eBias;
                    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
                    else {
                        m = m + Math.pow(2, mLen);
                        e = e - eBias;
                    }
                    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                };
                exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
                    var e, m, c;
                    var eLen = nBytes * 8 - mLen - 1;
                    var eMax = (1 << eLen) - 1;
                    var eBias = eMax >> 1;
                    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                    var i = isLE ? 0 : nBytes - 1;
                    var d = isLE ? 1 : -1;
                    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                    value = Math.abs(value);
                    if (isNaN(value) || value === Infinity) {
                        m = isNaN(value) ? 1 : 0;
                        e = eMax;
                    } else {
                        e = Math.floor(Math.log(value) / Math.LN2);
                        if (value * (c = Math.pow(2, -e)) < 1) {
                            e--;
                            c *= 2;
                        }
                        if (e + eBias >= 1) value += rt / c;
                        else value += rt * Math.pow(2, 1 - eBias);
                        if (value * c >= 2) {
                            e++;
                            c /= 2;
                        }
                        if (e + eBias >= eMax) {
                            m = 0;
                            e = eMax;
                        } else if (e + eBias >= 1) {
                            m = (value * c - 1) * Math.pow(2, mLen);
                            e = e + eBias;
                        } else {
                            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                            e = 0;
                        }
                    }
                    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
                    e = e << mLen | m;
                    eLen += mLen;
                    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
                    buffer[offset + i - d] |= s * 128;
                };
            },
            {}
        ],
        143: [
            function(require, module, exports) {
                if (typeof Object.create === "function") // implementation from standard node.js 'util' module
                module.exports = function inherits(ctor, superCtor) {
                    if (superCtor) {
                        ctor.super_ = superCtor;
                        ctor.prototype = Object.create(superCtor.prototype, {
                            constructor: {
                                value: ctor,
                                enumerable: false,
                                writable: true,
                                configurable: true
                            }
                        });
                    }
                };
                else // old school shim for old browsers
                module.exports = function inherits(ctor, superCtor) {
                    if (superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function TempCtor() {};
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    }
                };
            },
            {}
        ],
        144: [
            function(require, module, exports) {
                "use strict";
                var hasToStringTag = require("has-tostringtag/shams")();
                var callBound = require("call-bind/callBound");
                var $toString = callBound("Object.prototype.toString");
                var isStandardArguments = function isArguments(value) {
                    if (hasToStringTag && value && _typeof(value) === "object" && Symbol.toStringTag in value) return false;
                    return $toString(value) === "[object Arguments]";
                };
                var isLegacyArguments = function isArguments(value) {
                    if (isStandardArguments(value)) return true;
                    return value !== null && _typeof(value) === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
                };
                var supportsStandardArguments = function() {
                    return isStandardArguments(arguments);
                }();
                isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests
                module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
            },
            {
                "call-bind/callBound": 64,
                "has-tostringtag/shams": 111
            }
        ],
        145: [
            function(require, module, exports) {
                "use strict";
                var toStr = Object.prototype.toString;
                var fnToStr = Function.prototype.toString;
                var isFnRegex = /^\s*(?:function)?\*/;
                var hasToStringTag = require("has-tostringtag/shams")();
                var getProto = Object.getPrototypeOf;
                var getGeneratorFunc = function getGeneratorFunc() {
                    // eslint-disable-line consistent-return
                    if (!hasToStringTag) return false;
                    try {
                        return Function("return function*() {}")();
                    } catch (e) {}
                };
                var GeneratorFunction;
                module.exports = function isGeneratorFunction(fn) {
                    if (typeof fn !== "function") return false;
                    if (isFnRegex.test(fnToStr.call(fn))) return true;
                    if (!hasToStringTag) {
                        var str = toStr.call(fn);
                        return str === "[object GeneratorFunction]";
                    }
                    if (!getProto) return false;
                    if (typeof GeneratorFunction === "undefined") {
                        var generatorFunc = getGeneratorFunc();
                        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
                    }
                    return getProto(fn) === GeneratorFunction;
                };
            },
            {
                "has-tostringtag/shams": 111
            }
        ],
        146: [
            function(require, module, exports) {
                (function(global) {
                    (function() {
                        "use strict";
                        var forEach = require("foreach");
                        var availableTypedArrays = require("available-typed-arrays");
                        var callBound = require("call-bind/callBound");
                        var $toString = callBound("Object.prototype.toString");
                        var hasToStringTag = require("has-tostringtag/shams")();
                        var g = typeof globalThis === "undefined" ? global : globalThis;
                        var typedArrays = availableTypedArrays();
                        var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
                            for(var i = 0; i < array.length; i += 1){
                                if (array[i] === value) return i;
                            }
                            return -1;
                        };
                        var $slice = callBound("String.prototype.slice");
                        var toStrTags = {};
                        var gOPD = require("es-abstract/helpers/getOwnPropertyDescriptor");
                        var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
                        if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
                            var arr = new g[typedArray]();
                            if (Symbol.toStringTag in arr) {
                                var proto = getPrototypeOf(arr);
                                var descriptor = gOPD(proto, Symbol.toStringTag);
                                if (!descriptor) {
                                    var superProto = getPrototypeOf(proto);
                                    descriptor = gOPD(superProto, Symbol.toStringTag);
                                }
                                toStrTags[typedArray] = descriptor.get;
                            }
                        });
                        var tryTypedArrays = function tryAllTypedArrays(value) {
                            var anyTrue = false;
                            forEach(toStrTags, function(getter, typedArray) {
                                if (!anyTrue) try {
                                    anyTrue = getter.call(value) === typedArray;
                                } catch (e) {
                                /**/ }
                            });
                            return anyTrue;
                        };
                        module.exports = function isTypedArray(value) {
                            if (!value || _typeof(value) !== "object") return false;
                            if (!hasToStringTag || !(Symbol.toStringTag in value)) {
                                var tag = $slice($toString(value), 8, -1);
                                return $indexOf(typedArrays, tag) > -1;
                            }
                            if (!gOPD) return false;
                            return tryTypedArrays(value);
                        };
                    }).call(this);
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "available-typed-arrays": 16,
                "call-bind/callBound": 64,
                "es-abstract/helpers/getOwnPropertyDescriptor": 102,
                "foreach": 105,
                "has-tostringtag/shams": 111
            }
        ],
        147: [
            function(require, module, exports) {
                "use strict";
                var inherits = require("inherits");
                var HashBase = require("hash-base");
                var Buffer = require("safe-buffer").Buffer;
                var ARRAY16 = new Array(16);
                function MD5() {
                    HashBase.call(this, 64); // state
                    this._a = 0x67452301;
                    this._b = 0xefcdab89;
                    this._c = 0x98badcfe;
                    this._d = 0x10325476;
                }
                inherits(MD5, HashBase);
                MD5.prototype._update = function() {
                    var M = ARRAY16;
                    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
                    var a = this._a;
                    var b = this._b;
                    var c = this._c;
                    var d = this._d;
                    a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
                    d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
                    c = fnF(c, d, a, b, M[2], 0x242070db, 17);
                    b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
                    a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
                    d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
                    c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
                    b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
                    a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
                    d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
                    c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
                    b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
                    a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
                    d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
                    c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
                    b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
                    a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
                    d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
                    c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
                    b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
                    a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
                    d = fnG(d, a, b, c, M[10], 0x02441453, 9);
                    c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
                    b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
                    a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
                    d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
                    c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
                    b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
                    a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
                    d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
                    c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
                    b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
                    a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
                    d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
                    c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
                    b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
                    a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
                    d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
                    c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
                    b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
                    a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
                    d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
                    c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
                    b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
                    a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
                    d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
                    c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
                    b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
                    a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
                    d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
                    c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
                    b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
                    a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
                    d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
                    c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
                    b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
                    a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
                    d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
                    c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
                    b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
                    a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
                    d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
                    c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
                    b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
                    this._a = this._a + a | 0;
                    this._b = this._b + b | 0;
                    this._c = this._c + c | 0;
                    this._d = this._d + d | 0;
                };
                MD5.prototype._digest = function() {
                    // create padding and handle blocks
                    this._block[this._blockOffset++] = 0x80;
                    if (this._blockOffset > 56) {
                        this._block.fill(0, this._blockOffset, 64);
                        this._update();
                        this._blockOffset = 0;
                    }
                    this._block.fill(0, this._blockOffset, 56);
                    this._block.writeUInt32LE(this._length[0], 56);
                    this._block.writeUInt32LE(this._length[1], 60);
                    this._update(); // produce result
                    var buffer = Buffer.allocUnsafe(16);
                    buffer.writeInt32LE(this._a, 0);
                    buffer.writeInt32LE(this._b, 4);
                    buffer.writeInt32LE(this._c, 8);
                    buffer.writeInt32LE(this._d, 12);
                    return buffer;
                };
                function rotl(x, n) {
                    return x << n | x >>> 32 - n;
                }
                function fnF(a, b, c, d, m, k, s) {
                    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
                }
                function fnG(a, b, c, d, m, k, s) {
                    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
                }
                function fnH(a, b, c, d, m, k, s) {
                    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
                }
                function fnI(a, b, c, d, m, k, s) {
                    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
                }
                module.exports = MD5;
            },
            {
                "hash-base": 113,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        148: [
            function(require, module, exports) {
                var bn = require("bn.js");
                var brorand = require("brorand");
                function MillerRabin(rand) {
                    this.rand = rand || new brorand.Rand();
                }
                module.exports = MillerRabin;
                MillerRabin.create = function create(rand) {
                    return new MillerRabin(rand);
                };
                MillerRabin.prototype._randbelow = function _randbelow(n) {
                    var len = n.bitLength();
                    var min_bytes = Math.ceil(len / 8); // Generage random bytes until a number less than n is found.
                    // This ensures that 0..n-1 have an equal probability of being selected.
                    do var a = new bn(this.rand.generate(min_bytes));
                    while (a.cmp(n) >= 0);
                    return a;
                };
                MillerRabin.prototype._randrange = function _randrange(start, stop) {
                    // Generate a random number greater than or equal to start and less than stop.
                    var size = stop.sub(start);
                    return start.add(this._randbelow(size));
                };
                MillerRabin.prototype.test = function test(n, k, cb) {
                    var len = n.bitLength();
                    var red = bn.mont(n);
                    var rone = new bn(1).toRed(red);
                    if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;
                    var n1 = n.subn(1);
                    for(var s = 0; !n1.testn(s); s++);
                    var d = n.shrn(s);
                    var rn1 = n1.toRed(red);
                    var prime = true;
                    for(; k > 0; k--){
                        var a = this._randrange(new bn(2), n1);
                        if (cb) cb(a);
                        var x = a.toRed(red).redPow(d);
                        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
                        for(var i = 1; i < s; i++){
                            x = x.redSqr();
                            if (x.cmp(rone) === 0) return false;
                            if (x.cmp(rn1) === 0) break;
                        }
                        if (i === s) return false;
                    }
                    return prime;
                };
                MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
                    var len = n.bitLength();
                    var red = bn.mont(n);
                    var rone = new bn(1).toRed(red);
                    if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;
                    var n1 = n.subn(1);
                    for(var s = 0; !n1.testn(s); s++);
                    var d = n.shrn(s);
                    var rn1 = n1.toRed(red);
                    for(; k > 0; k--){
                        var a = this._randrange(new bn(2), n1);
                        var g = n.gcd(a);
                        if (g.cmpn(1) !== 0) return g;
                        var x = a.toRed(red).redPow(d);
                        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
                        for(var i = 1; i < s; i++){
                            x = x.redSqr();
                            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
                            if (x.cmp(rn1) === 0) break;
                        }
                        if (i === s) {
                            x = x.redSqr();
                            return x.fromRed().subn(1).gcd(n);
                        }
                    }
                    return false;
                };
            },
            {
                "bn.js": 149,
                "brorand": 19
            }
        ],
        149: [
            function(require, module, exports) {
                arguments[4][15][0].apply(exports, arguments);
            },
            {
                "buffer": 224,
                "dup": 15
            }
        ],
        150: [
            function(require, module, exports) {
                module.exports = assert;
                function assert(val, msg) {
                    if (!val) throw new Error(msg || "Assertion failed");
                }
                assert.equal = function assertEqual(l, r, msg) {
                    if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
                };
            },
            {}
        ],
        151: [
            function(require, module, exports) {
                "use strict";
                var utils = exports;
                function toArray(msg, enc) {
                    if (Array.isArray(msg)) return msg.slice();
                    if (!msg) return [];
                    var res = [];
                    if (typeof msg !== "string") {
                        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
                        return res;
                    }
                    if (enc === "hex") {
                        msg = msg.replace(/[^a-z0-9]+/ig, "");
                        if (msg.length % 2 !== 0) msg = "0" + msg;
                        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
                    } else for(var i = 0; i < msg.length; i++){
                        var c = msg.charCodeAt(i);
                        var hi = c >> 8;
                        var lo = c & 0xff;
                        if (hi) res.push(hi, lo);
                        else res.push(lo);
                    }
                    return res;
                }
                utils.toArray = toArray;
                function zero2(word) {
                    if (word.length === 1) return "0" + word;
                    else return word;
                }
                utils.zero2 = zero2;
                function toHex(msg) {
                    var res = "";
                    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
                    return res;
                }
                utils.toHex = toHex;
                utils.encode = function encode(arr, enc) {
                    if (enc === "hex") return toHex(arr);
                    else return arr;
                };
            },
            {}
        ],
        152: [
            function(require, module, exports) {
                module.exports = {
                    "2.16.840.1.101.3.4.1.1": "aes-128-ecb",
                    "2.16.840.1.101.3.4.1.2": "aes-128-cbc",
                    "2.16.840.1.101.3.4.1.3": "aes-128-ofb",
                    "2.16.840.1.101.3.4.1.4": "aes-128-cfb",
                    "2.16.840.1.101.3.4.1.21": "aes-192-ecb",
                    "2.16.840.1.101.3.4.1.22": "aes-192-cbc",
                    "2.16.840.1.101.3.4.1.23": "aes-192-ofb",
                    "2.16.840.1.101.3.4.1.24": "aes-192-cfb",
                    "2.16.840.1.101.3.4.1.41": "aes-256-ecb",
                    "2.16.840.1.101.3.4.1.42": "aes-256-cbc",
                    "2.16.840.1.101.3.4.1.43": "aes-256-ofb",
                    "2.16.840.1.101.3.4.1.44": "aes-256-cfb"
                };
            },
            {}
        ],
        153: [
            function(require, module, exports) {
                // from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
                // Fedor, you are amazing.
                "use strict";
                var asn1 = require("asn1.js");
                exports.certificate = require("./certificate");
                var RSAPrivateKey = asn1.define("RSAPrivateKey", function() {
                    this.seq().obj(this.key("version")["int"](), this.key("modulus")["int"](), this.key("publicExponent")["int"](), this.key("privateExponent")["int"](), this.key("prime1")["int"](), this.key("prime2")["int"](), this.key("exponent1")["int"](), this.key("exponent2")["int"](), this.key("coefficient")["int"]());
                });
                exports.RSAPrivateKey = RSAPrivateKey;
                var RSAPublicKey = asn1.define("RSAPublicKey", function() {
                    this.seq().obj(this.key("modulus")["int"](), this.key("publicExponent")["int"]());
                });
                exports.RSAPublicKey = RSAPublicKey;
                var PublicKey = asn1.define("SubjectPublicKeyInfo", function() {
                    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
                });
                exports.PublicKey = PublicKey;
                var AlgorithmIdentifier = asn1.define("AlgorithmIdentifier", function() {
                    this.seq().obj(this.key("algorithm").objid(), this.key("none").null_().optional(), this.key("curve").objid().optional(), this.key("params").seq().obj(this.key("p")["int"](), this.key("q")["int"](), this.key("g")["int"]()).optional());
                });
                var PrivateKeyInfo = asn1.define("PrivateKeyInfo", function() {
                    this.seq().obj(this.key("version")["int"](), this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPrivateKey").octstr());
                });
                exports.PrivateKey = PrivateKeyInfo;
                var EncryptedPrivateKeyInfo = asn1.define("EncryptedPrivateKeyInfo", function() {
                    this.seq().obj(this.key("algorithm").seq().obj(this.key("id").objid(), this.key("decrypt").seq().obj(this.key("kde").seq().obj(this.key("id").objid(), this.key("kdeparams").seq().obj(this.key("salt").octstr(), this.key("iters")["int"]())), this.key("cipher").seq().obj(this.key("algo").objid(), this.key("iv").octstr()))), this.key("subjectPrivateKey").octstr());
                });
                exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
                var DSAPrivateKey = asn1.define("DSAPrivateKey", function() {
                    this.seq().obj(this.key("version")["int"](), this.key("p")["int"](), this.key("q")["int"](), this.key("g")["int"](), this.key("pub_key")["int"](), this.key("priv_key")["int"]());
                });
                exports.DSAPrivateKey = DSAPrivateKey;
                exports.DSAparam = asn1.define("DSAparam", function() {
                    this["int"]();
                });
                var ECPrivateKey = asn1.define("ECPrivateKey", function() {
                    this.seq().obj(this.key("version")["int"](), this.key("privateKey").octstr(), this.key("parameters").optional().explicit(0).use(ECParameters), this.key("publicKey").optional().explicit(1).bitstr());
                });
                exports.ECPrivateKey = ECPrivateKey;
                var ECParameters = asn1.define("ECParameters", function() {
                    this.choice({
                        namedCurve: this.objid()
                    });
                });
                exports.signature = asn1.define("signature", function() {
                    this.seq().obj(this.key("r")["int"](), this.key("s")["int"]());
                });
            },
            {
                "./certificate": 154,
                "asn1.js": 1
            }
        ],
        154: [
            function(require, module, exports) {
                // from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
                // thanks to @Rantanen
                "use strict";
                var asn = require("asn1.js");
                var Time = asn.define("Time", function() {
                    this.choice({
                        utcTime: this.utctime(),
                        generalTime: this.gentime()
                    });
                });
                var AttributeTypeValue = asn.define("AttributeTypeValue", function() {
                    this.seq().obj(this.key("type").objid(), this.key("value").any());
                });
                var AlgorithmIdentifier = asn.define("AlgorithmIdentifier", function() {
                    this.seq().obj(this.key("algorithm").objid(), this.key("parameters").optional(), this.key("curve").objid().optional());
                });
                var SubjectPublicKeyInfo = asn.define("SubjectPublicKeyInfo", function() {
                    this.seq().obj(this.key("algorithm").use(AlgorithmIdentifier), this.key("subjectPublicKey").bitstr());
                });
                var RelativeDistinguishedName = asn.define("RelativeDistinguishedName", function() {
                    this.setof(AttributeTypeValue);
                });
                var RDNSequence = asn.define("RDNSequence", function() {
                    this.seqof(RelativeDistinguishedName);
                });
                var Name = asn.define("Name", function() {
                    this.choice({
                        rdnSequence: this.use(RDNSequence)
                    });
                });
                var Validity = asn.define("Validity", function() {
                    this.seq().obj(this.key("notBefore").use(Time), this.key("notAfter").use(Time));
                });
                var Extension = asn.define("Extension", function() {
                    this.seq().obj(this.key("extnID").objid(), this.key("critical").bool().def(false), this.key("extnValue").octstr());
                });
                var TBSCertificate = asn.define("TBSCertificate", function() {
                    this.seq().obj(this.key("version").explicit(0)["int"]().optional(), this.key("serialNumber")["int"](), this.key("signature").use(AlgorithmIdentifier), this.key("issuer").use(Name), this.key("validity").use(Validity), this.key("subject").use(Name), this.key("subjectPublicKeyInfo").use(SubjectPublicKeyInfo), this.key("issuerUniqueID").implicit(1).bitstr().optional(), this.key("subjectUniqueID").implicit(2).bitstr().optional(), this.key("extensions").explicit(3).seqof(Extension).optional());
                });
                var X509Certificate = asn.define("X509Certificate", function() {
                    this.seq().obj(this.key("tbsCertificate").use(TBSCertificate), this.key("signatureAlgorithm").use(AlgorithmIdentifier), this.key("signatureValue").bitstr());
                });
                module.exports = X509Certificate;
            },
            {
                "asn1.js": 1
            }
        ],
        155: [
            function(require, module, exports) {
                // adapted from https://github.com/apatil/pemstrip
                var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
                var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
                var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
                var evp = require("evp_bytestokey");
                var ciphers = require("browserify-aes");
                var Buffer = require("safe-buffer").Buffer;
                module.exports = function(okey, password) {
                    var key = okey.toString();
                    var match = key.match(findProc);
                    var decrypted;
                    if (!match) {
                        var match2 = key.match(fullRegex);
                        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ""), "base64");
                    } else {
                        var suite = "aes" + match[1];
                        var iv = Buffer.from(match[2], "hex");
                        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ""), "base64");
                        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
                        var out = [];
                        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
                        out.push(cipher.update(cipherText));
                        out.push(cipher["final"]());
                        decrypted = Buffer.concat(out);
                    }
                    var tag = key.match(startRegex)[1];
                    return {
                        tag: tag,
                        data: decrypted
                    };
                };
            },
            {
                "browserify-aes": 22,
                "evp_bytestokey": 104,
                "safe-buffer": 174
            }
        ],
        156: [
            function(require, module, exports) {
                var asn1 = require("./asn1");
                var aesid = require("./aesid.json");
                var fixProc = require("./fixProc");
                var ciphers = require("browserify-aes");
                var compat = require("pbkdf2");
                var Buffer = require("safe-buffer").Buffer;
                module.exports = parseKeys;
                function parseKeys(buffer) {
                    var password;
                    if (_typeof(buffer) === "object" && !Buffer.isBuffer(buffer)) {
                        password = buffer.passphrase;
                        buffer = buffer.key;
                    }
                    if (typeof buffer === "string") buffer = Buffer.from(buffer);
                    var stripped = fixProc(buffer, password);
                    var type = stripped.tag;
                    var data = stripped.data;
                    var subtype, ndata;
                    switch(type){
                        case "CERTIFICATE":
                            ndata = asn1.certificate.decode(data, "der").tbsCertificate.subjectPublicKeyInfo;
                        // falls through
                        case "PUBLIC KEY":
                            if (!ndata) ndata = asn1.PublicKey.decode(data, "der");
                            subtype = ndata.algorithm.algorithm.join(".");
                            switch(subtype){
                                case "1.2.840.113549.1.1.1":
                                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, "der");
                                case "1.2.840.10045.2.1":
                                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                                    return {
                                        type: "ec",
                                        data: ndata
                                    };
                                case "1.2.840.10040.4.1":
                                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, "der");
                                    return {
                                        type: "dsa",
                                        data: ndata.algorithm.params
                                    };
                                default:
                                    throw new Error("unknown key id " + subtype);
                            }
                        // throw new Error('unknown key type ' + type)
                        case "ENCRYPTED PRIVATE KEY":
                            data = asn1.EncryptedPrivateKey.decode(data, "der");
                            data = decrypt(data, password);
                        // falls through
                        case "PRIVATE KEY":
                            ndata = asn1.PrivateKey.decode(data, "der");
                            subtype = ndata.algorithm.algorithm.join(".");
                            switch(subtype){
                                case "1.2.840.113549.1.1.1":
                                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, "der");
                                case "1.2.840.10045.2.1":
                                    return {
                                        curve: ndata.algorithm.curve,
                                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, "der").privateKey
                                    };
                                case "1.2.840.10040.4.1":
                                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, "der");
                                    return {
                                        type: "dsa",
                                        params: ndata.algorithm.params
                                    };
                                default:
                                    throw new Error("unknown key id " + subtype);
                            }
                        // throw new Error('unknown key type ' + type)
                        case "RSA PUBLIC KEY":
                            return asn1.RSAPublicKey.decode(data, "der");
                        case "RSA PRIVATE KEY":
                            return asn1.RSAPrivateKey.decode(data, "der");
                        case "DSA PRIVATE KEY":
                            return {
                                type: "dsa",
                                params: asn1.DSAPrivateKey.decode(data, "der")
                            };
                        case "EC PRIVATE KEY":
                            data = asn1.ECPrivateKey.decode(data, "der");
                            return {
                                curve: data.parameters.value,
                                privateKey: data.privateKey
                            };
                        default:
                            throw new Error("unknown key type " + type);
                    }
                }
                parseKeys.signature = asn1.signature;
                function decrypt(data, password) {
                    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
                    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
                    var algo = aesid[data.algorithm.decrypt.cipher.algo.join(".")];
                    var iv = data.algorithm.decrypt.cipher.iv;
                    var cipherText = data.subjectPrivateKey;
                    var keylen = parseInt(algo.split("-")[1], 10) / 8;
                    var key = compat.pbkdf2Sync(password, salt, iters, keylen, "sha1");
                    var cipher = ciphers.createDecipheriv(algo, key, iv);
                    var out = [];
                    out.push(cipher.update(cipherText));
                    out.push(cipher["final"]());
                    return Buffer.concat(out);
                }
            },
            {
                "./aesid.json": 152,
                "./asn1": 153,
                "./fixProc": 155,
                "browserify-aes": 22,
                "pbkdf2": 157,
                "safe-buffer": 174
            }
        ],
        157: [
            function(require, module, exports) {
                exports.pbkdf2 = require("./lib/async");
                exports.pbkdf2Sync = require("./lib/sync");
            },
            {
                "./lib/async": 158,
                "./lib/sync": 161
            }
        ],
        158: [
            function(require, module, exports) {
                (function(global) {
                    (function() {
                        var Buffer = require("safe-buffer").Buffer;
                        var checkParameters = require("./precondition");
                        var defaultEncoding = require("./default-encoding");
                        var sync = require("./sync");
                        var toBuffer = require("./to-buffer");
                        var ZERO_BUF;
                        var subtle = global.crypto && global.crypto.subtle;
                        var toBrowser = {
                            sha: "SHA-1",
                            "sha-1": "SHA-1",
                            sha1: "SHA-1",
                            sha256: "SHA-256",
                            "sha-256": "SHA-256",
                            sha384: "SHA-384",
                            "sha-384": "SHA-384",
                            "sha-512": "SHA-512",
                            sha512: "SHA-512"
                        };
                        var checks = [];
                        function checkNative(algo) {
                            if (global.process && !global.process.browser) return Promise.resolve(false);
                            if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
                            if (checks[algo] !== undefined) return checks[algo];
                            ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
                            var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
                                return true;
                            })["catch"](function() {
                                return false;
                            });
                            checks[algo] = prom;
                            return prom;
                        }
                        var nextTick;
                        function getNextTick() {
                            if (nextTick) return nextTick;
                            if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
                            else if (global.queueMicrotask) nextTick = global.queueMicrotask;
                            else if (global.setImmediate) nextTick = global.setImmediate;
                            else nextTick = global.setTimeout;
                            return nextTick;
                        }
                        function browserPbkdf2(password, salt, iterations, length, algo) {
                            return subtle.importKey("raw", password, {
                                name: "PBKDF2"
                            }, false, [
                                "deriveBits"
                            ]).then(function(key) {
                                return subtle.deriveBits({
                                    name: "PBKDF2",
                                    salt: salt,
                                    iterations: iterations,
                                    hash: {
                                        name: algo
                                    }
                                }, key, length << 3);
                            }).then(function(res) {
                                return Buffer.from(res);
                            });
                        }
                        function resolvePromise(promise, callback) {
                            promise.then(function(out) {
                                getNextTick()(function() {
                                    callback(null, out);
                                });
                            }, function(e) {
                                getNextTick()(function() {
                                    callback(e);
                                });
                            });
                        }
                        module.exports = function(password, salt, iterations, keylen, digest, callback) {
                            if (typeof digest === "function") {
                                callback = digest;
                                digest = undefined;
                            }
                            digest = digest || "sha1";
                            var algo = toBrowser[digest.toLowerCase()];
                            if (!algo || typeof global.Promise !== "function") {
                                getNextTick()(function() {
                                    var out;
                                    try {
                                        out = sync(password, salt, iterations, keylen, digest);
                                    } catch (e) {
                                        return callback(e);
                                    }
                                    callback(null, out);
                                });
                                return;
                            }
                            checkParameters(iterations, keylen);
                            password = toBuffer(password, defaultEncoding, "Password");
                            salt = toBuffer(salt, defaultEncoding, "Salt");
                            if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
                            resolvePromise(checkNative(algo).then(function(resp) {
                                if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
                                return sync(password, salt, iterations, keylen, digest);
                            }), callback);
                        };
                    }).call(this);
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "./default-encoding": 159,
                "./precondition": 160,
                "./sync": 161,
                "./to-buffer": 162,
                "safe-buffer": 174
            }
        ],
        159: [
            function(require, module, exports) {
                (function(process, global) {
                    (function() {
                        var defaultEncoding;
                        /* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = "utf-8";
                        else if (global.process && global.process.version) {
                            var pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
                            defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
                        } else defaultEncoding = "utf-8";
                        module.exports = defaultEncoding;
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "_process": 163
            }
        ],
        160: [
            function(require, module, exports) {
                var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs
                module.exports = function(iterations, keylen) {
                    if (typeof iterations !== "number") throw new TypeError("Iterations not a number");
                    if (iterations < 0) throw new TypeError("Bad iterations");
                    if (typeof keylen !== "number") throw new TypeError("Key length not a number");
                    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) /* eslint no-self-compare: 0 */ throw new TypeError("Bad key length");
                };
            },
            {}
        ],
        161: [
            function(require, module, exports) {
                var md5 = require("create-hash/md5");
                var RIPEMD160 = require("ripemd160");
                var sha = require("sha.js");
                var Buffer = require("safe-buffer").Buffer;
                var checkParameters = require("./precondition");
                var defaultEncoding = require("./default-encoding");
                var toBuffer = require("./to-buffer");
                var ZEROS = Buffer.alloc(128);
                var sizes = {
                    md5: 16,
                    sha1: 20,
                    sha224: 28,
                    sha256: 32,
                    sha384: 48,
                    sha512: 64,
                    rmd160: 20,
                    ripemd160: 20
                };
                function Hmac(alg, key, saltLen) {
                    var hash = getDigest(alg);
                    var blocksize = alg === "sha512" || alg === "sha384" ? 128 : 64;
                    if (key.length > blocksize) key = hash(key);
                    else if (key.length < blocksize) key = Buffer.concat([
                        key,
                        ZEROS
                    ], blocksize);
                    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
                    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
                    for(var i = 0; i < blocksize; i++){
                        ipad[i] = key[i] ^ 0x36;
                        opad[i] = key[i] ^ 0x5C;
                    }
                    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
                    ipad.copy(ipad1, 0, 0, blocksize);
                    this.ipad1 = ipad1;
                    this.ipad2 = ipad;
                    this.opad = opad;
                    this.alg = alg;
                    this.blocksize = blocksize;
                    this.hash = hash;
                    this.size = sizes[alg];
                }
                Hmac.prototype.run = function(data, ipad) {
                    data.copy(ipad, this.blocksize);
                    var h = this.hash(ipad);
                    h.copy(this.opad, this.blocksize);
                    return this.hash(this.opad);
                };
                function getDigest(alg) {
                    function shaFunc(data) {
                        return sha(alg).update(data).digest();
                    }
                    function rmd160Func(data) {
                        return new RIPEMD160().update(data).digest();
                    }
                    if (alg === "rmd160" || alg === "ripemd160") return rmd160Func;
                    if (alg === "md5") return md5;
                    return shaFunc;
                }
                function pbkdf2(password, salt, iterations, keylen, digest) {
                    checkParameters(iterations, keylen);
                    password = toBuffer(password, defaultEncoding, "Password");
                    salt = toBuffer(salt, defaultEncoding, "Salt");
                    digest = digest || "sha1";
                    var hmac = new Hmac(digest, password, salt.length);
                    var DK = Buffer.allocUnsafe(keylen);
                    var block1 = Buffer.allocUnsafe(salt.length + 4);
                    salt.copy(block1, 0, 0, salt.length);
                    var destPos = 0;
                    var hLen = sizes[digest];
                    var l = Math.ceil(keylen / hLen);
                    for(var i = 1; i <= l; i++){
                        block1.writeUInt32BE(i, salt.length);
                        var T = hmac.run(block1, hmac.ipad1);
                        var U = T;
                        for(var j = 1; j < iterations; j++){
                            U = hmac.run(U, hmac.ipad2);
                            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
                        }
                        T.copy(DK, destPos);
                        destPos += hLen;
                    }
                    return DK;
                }
                module.exports = pbkdf2;
            },
            {
                "./default-encoding": 159,
                "./precondition": 160,
                "./to-buffer": 162,
                "create-hash/md5": 70,
                "ripemd160": 173,
                "safe-buffer": 174,
                "sha.js": 177
            }
        ],
        162: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer;
                module.exports = function(thing, encoding, name) {
                    if (Buffer.isBuffer(thing)) return thing;
                    else if (typeof thing === "string") return Buffer.from(thing, encoding);
                    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
                    else throw new TypeError(name + " must be a string, a Buffer, a typed array or a DataView");
                };
            },
            {
                "safe-buffer": 174
            }
        ],
        163: [
            function(require, module, exports) {
                // shim for using process in browser
                var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
                // don't break things.  But we need to wrap it in a try catch in case it is
                // wrapped in strict mode code which doesn't define any globals.  It's inside a
                // function because try/catches deoptimize in certain engines.
                var cachedSetTimeout;
                var cachedClearTimeout;
                function defaultSetTimout() {
                    throw new Error("setTimeout has not been defined");
                }
                function defaultClearTimeout() {
                    throw new Error("clearTimeout has not been defined");
                }
                (function() {
                    try {
                        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
                        else cachedSetTimeout = defaultSetTimout;
                    } catch (e) {
                        cachedSetTimeout = defaultSetTimout;
                    }
                    try {
                        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
                        else cachedClearTimeout = defaultClearTimeout;
                    } catch (e2) {
                        cachedClearTimeout = defaultClearTimeout;
                    }
                })();
                function runTimeout(fun) {
                    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
                    return setTimeout(fun, 0);
                     // if setTimeout wasn't available but was latter defined
                    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                        cachedSetTimeout = setTimeout;
                        return setTimeout(fun, 0);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedSetTimeout(fun, 0);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                            return cachedSetTimeout.call(null, fun, 0);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                            return cachedSetTimeout.call(this, fun, 0);
                        }
                    }
                }
                function runClearTimeout(marker) {
                    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
                    return clearTimeout(marker);
                     // if clearTimeout wasn't available but was latter defined
                    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                        cachedClearTimeout = clearTimeout;
                        return clearTimeout(marker);
                    }
                    try {
                        // when when somebody has screwed with setTimeout but no I.E. maddness
                        return cachedClearTimeout(marker);
                    } catch (e) {
                        try {
                            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                            return cachedClearTimeout.call(null, marker);
                        } catch (e) {
                            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                            return cachedClearTimeout.call(this, marker);
                        }
                    }
                }
                var queue = [];
                var draining = false;
                var currentQueue;
                var queueIndex = -1;
                function cleanUpNextTick() {
                    if (!draining || !currentQueue) return;
                    draining = false;
                    if (currentQueue.length) queue = currentQueue.concat(queue);
                    else queueIndex = -1;
                    if (queue.length) drainQueue();
                }
                function drainQueue() {
                    if (draining) return;
                    var timeout = runTimeout(cleanUpNextTick);
                    draining = true;
                    var len = queue.length;
                    while(len){
                        currentQueue = queue;
                        queue = [];
                        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
                        queueIndex = -1;
                        len = queue.length;
                    }
                    currentQueue = null;
                    draining = false;
                    runClearTimeout(timeout);
                }
                process.nextTick = function(fun) {
                    var args = new Array(arguments.length - 1);
                    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
                    queue.push(new Item(fun, args));
                    if (queue.length === 1 && !draining) runTimeout(drainQueue);
                }; // v8 likes predictible objects
                function Item(fun, array) {
                    this.fun = fun;
                    this.array = array;
                }
                Item.prototype.run = function() {
                    this.fun.apply(null, this.array);
                };
                process.title = "browser";
                process.browser = true;
                process.env = {};
                process.argv = [];
                process.version = ""; // empty string to avoid regexp issues
                process.versions = {};
                function noop() {}
                process.on = noop;
                process.addListener = noop;
                process.once = noop;
                process.off = noop;
                process.removeListener = noop;
                process.removeAllListeners = noop;
                process.emit = noop;
                process.prependListener = noop;
                process.prependOnceListener = noop;
                process.listeners = function(name) {
                    return [];
                };
                process.binding = function(name) {
                    throw new Error("process.binding is not supported");
                };
                process.cwd = function() {
                    return "/";
                };
                process.chdir = function(dir) {
                    throw new Error("process.chdir is not supported");
                };
                process.umask = function() {
                    return 0;
                };
            },
            {}
        ],
        164: [
            function(require, module, exports) {
                exports.publicEncrypt = require("./publicEncrypt");
                exports.privateDecrypt = require("./privateDecrypt");
                exports.privateEncrypt = function privateEncrypt(key, buf) {
                    return exports.publicEncrypt(key, buf, true);
                };
                exports.publicDecrypt = function publicDecrypt(key, buf) {
                    return exports.privateDecrypt(key, buf, true);
                };
            },
            {
                "./privateDecrypt": 167,
                "./publicEncrypt": 168
            }
        ],
        165: [
            function(require, module, exports) {
                var createHash = require("create-hash");
                var Buffer = require("safe-buffer").Buffer;
                module.exports = function(seed, len) {
                    var t = Buffer.alloc(0);
                    var i = 0;
                    var c;
                    while(t.length < len){
                        c = i2ops(i++);
                        t = Buffer.concat([
                            t,
                            createHash("sha1").update(seed).update(c).digest()
                        ]);
                    }
                    return t.slice(0, len);
                };
                function i2ops(c) {
                    var out = Buffer.allocUnsafe(4);
                    out.writeUInt32BE(c, 0);
                    return out;
                }
            },
            {
                "create-hash": 69,
                "safe-buffer": 174
            }
        ],
        166: [
            function(require, module, exports) {
                arguments[4][15][0].apply(exports, arguments);
            },
            {
                "buffer": 224,
                "dup": 15
            }
        ],
        167: [
            function(require, module, exports) {
                var parseKeys = require("parse-asn1");
                var mgf = require("./mgf");
                var xor = require("./xor");
                var BN = require("bn.js");
                var crt = require("browserify-rsa");
                var createHash = require("create-hash");
                var withPublic = require("./withPublic");
                var Buffer = require("safe-buffer").Buffer;
                module.exports = function privateDecrypt(privateKey, enc, reverse) {
                    var padding;
                    if (privateKey.padding) padding = privateKey.padding;
                    else if (reverse) padding = 1;
                    else padding = 4;
                    var key = parseKeys(privateKey);
                    var k = key.modulus.byteLength();
                    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error("decryption error");
                    var msg;
                    if (reverse) msg = withPublic(new BN(enc), key);
                    else msg = crt(enc, key);
                    var zBuffer = Buffer.alloc(k - msg.length);
                    msg = Buffer.concat([
                        zBuffer,
                        msg
                    ], k);
                    if (padding === 4) return oaep(key, msg);
                    else if (padding === 1) return pkcs1(key, msg, reverse);
                    else if (padding === 3) return msg;
                    else throw new Error("unknown padding");
                };
                function oaep(key, msg) {
                    var k = key.modulus.byteLength();
                    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
                    var hLen = iHash.length;
                    if (msg[0] !== 0) throw new Error("decryption error");
                    var maskedSeed = msg.slice(1, hLen + 1);
                    var maskedDb = msg.slice(hLen + 1);
                    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
                    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
                    if (compare(iHash, db.slice(0, hLen))) throw new Error("decryption error");
                    var i = hLen;
                    while(db[i] === 0)i++;
                    if (db[i++] !== 1) throw new Error("decryption error");
                    return db.slice(i);
                }
                function pkcs1(key, msg, reverse) {
                    var p1 = msg.slice(0, 2);
                    var i = 2;
                    var status = 0;
                    while(msg[i++] !== 0)if (i >= msg.length) {
                        status++;
                        break;
                    }
                    var ps = msg.slice(2, i - 1);
                    if (p1.toString("hex") !== "0002" && !reverse || p1.toString("hex") !== "0001" && reverse) status++;
                    if (ps.length < 8) status++;
                    if (status) throw new Error("decryption error");
                    return msg.slice(i);
                }
                function compare(a, b) {
                    a = Buffer.from(a);
                    b = Buffer.from(b);
                    var dif = 0;
                    var len = a.length;
                    if (a.length !== b.length) {
                        dif++;
                        len = Math.min(a.length, b.length);
                    }
                    var i = -1;
                    while(++i < len)dif += a[i] ^ b[i];
                    return dif;
                }
            },
            {
                "./mgf": 165,
                "./withPublic": 169,
                "./xor": 170,
                "bn.js": 166,
                "browserify-rsa": 40,
                "create-hash": 69,
                "parse-asn1": 156,
                "safe-buffer": 174
            }
        ],
        168: [
            function(require, module, exports) {
                var parseKeys = require("parse-asn1");
                var randomBytes = require("randombytes");
                var createHash = require("create-hash");
                var mgf = require("./mgf");
                var xor = require("./xor");
                var BN = require("bn.js");
                var withPublic = require("./withPublic");
                var crt = require("browserify-rsa");
                var Buffer = require("safe-buffer").Buffer;
                module.exports = function publicEncrypt(publicKey, msg, reverse) {
                    var padding;
                    if (publicKey.padding) padding = publicKey.padding;
                    else if (reverse) padding = 1;
                    else padding = 4;
                    var key = parseKeys(publicKey);
                    var paddedMsg;
                    if (padding === 4) paddedMsg = oaep(key, msg);
                    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
                    else if (padding === 3) {
                        paddedMsg = new BN(msg);
                        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error("data too long for modulus");
                    } else throw new Error("unknown padding");
                    if (reverse) return crt(paddedMsg, key);
                    else return withPublic(paddedMsg, key);
                };
                function oaep(key, msg) {
                    var k = key.modulus.byteLength();
                    var mLen = msg.length;
                    var iHash = createHash("sha1").update(Buffer.alloc(0)).digest();
                    var hLen = iHash.length;
                    var hLen2 = 2 * hLen;
                    if (mLen > k - hLen2 - 2) throw new Error("message too long");
                    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
                    var dblen = k - hLen - 1;
                    var seed = randomBytes(hLen);
                    var maskedDb = xor(Buffer.concat([
                        iHash,
                        ps,
                        Buffer.alloc(1, 1),
                        msg
                    ], dblen), mgf(seed, dblen));
                    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
                    return new BN(Buffer.concat([
                        Buffer.alloc(1),
                        maskedSeed,
                        maskedDb
                    ], k));
                }
                function pkcs1(key, msg, reverse) {
                    var mLen = msg.length;
                    var k = key.modulus.byteLength();
                    if (mLen > k - 11) throw new Error("message too long");
                    var ps;
                    if (reverse) ps = Buffer.alloc(k - mLen - 3, 0xff);
                    else ps = nonZero(k - mLen - 3);
                    return new BN(Buffer.concat([
                        Buffer.from([
                            0,
                            reverse ? 1 : 2
                        ]),
                        ps,
                        Buffer.alloc(1),
                        msg
                    ], k));
                }
                function nonZero(len) {
                    var out = Buffer.allocUnsafe(len);
                    var i = 0;
                    var cache = randomBytes(len * 2);
                    var cur = 0;
                    var num;
                    while(i < len){
                        if (cur === cache.length) {
                            cache = randomBytes(len * 2);
                            cur = 0;
                        }
                        num = cache[cur++];
                        if (num) out[i++] = num;
                    }
                    return out;
                }
            },
            {
                "./mgf": 165,
                "./withPublic": 169,
                "./xor": 170,
                "bn.js": 166,
                "browserify-rsa": 40,
                "create-hash": 69,
                "parse-asn1": 156,
                "randombytes": 171,
                "safe-buffer": 174
            }
        ],
        169: [
            function(require, module, exports) {
                var BN = require("bn.js");
                var Buffer = require("safe-buffer").Buffer;
                function withPublic(paddedMsg, key) {
                    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
                }
                module.exports = withPublic;
            },
            {
                "bn.js": 166,
                "safe-buffer": 174
            }
        ],
        170: [
            function(require, module, exports) {
                module.exports = function xor(a, b) {
                    var len = a.length;
                    var i = -1;
                    while(++i < len)a[i] ^= b[i];
                    return a;
                };
            },
            {}
        ],
        171: [
            function(require, module, exports) {
                (function(process, global) {
                    (function() {
                        "use strict"; // limit of Crypto.getRandomValues()
                        // https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
                        var MAX_BYTES = 65536; // Node supports requesting up to this number of bytes
                        // https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
                        var MAX_UINT32 = 4294967295;
                        function oldBrowser() {
                            throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11");
                        }
                        var Buffer = require("safe-buffer").Buffer;
                        var crypto = global.crypto || global.msCrypto;
                        if (crypto && crypto.getRandomValues) module.exports = randomBytes;
                        else module.exports = oldBrowser;
                        function randomBytes(size, cb) {
                            // phantomjs needs to throw
                            if (size > MAX_UINT32) throw new RangeError("requested too many random bytes");
                            var bytes = Buffer.allocUnsafe(size);
                            if (size > 0) {
                                // getRandomValues fails on IE if size == 0
                                if (size > MAX_BYTES) // this is the max bytes crypto.getRandomValues
                                // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
                                for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
                                // the buffer so we don't have to here
                                crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
                                else crypto.getRandomValues(bytes);
                            }
                            if (typeof cb === "function") return process.nextTick(function() {
                                cb(null, bytes);
                            });
                            return bytes;
                        }
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "_process": 163,
                "safe-buffer": 174
            }
        ],
        172: [
            function(require, module, exports) {
                (function(process, global) {
                    (function() {
                        "use strict";
                        function oldBrowser() {
                            throw new Error("secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11");
                        }
                        var safeBuffer = require("safe-buffer");
                        var randombytes = require("randombytes");
                        var Buffer = safeBuffer.Buffer;
                        var kBufferMaxLength = safeBuffer.kMaxLength;
                        var crypto = global.crypto || global.msCrypto;
                        var kMaxUint32 = Math.pow(2, 32) - 1;
                        function assertOffset(offset, length) {
                            if (typeof offset !== "number" || offset !== offset) // eslint-disable-line no-self-compare
                            throw new TypeError("offset must be a number");
                            if (offset > kMaxUint32 || offset < 0) throw new TypeError("offset must be a uint32");
                            if (offset > kBufferMaxLength || offset > length) throw new RangeError("offset out of range");
                        }
                        function assertSize(size, offset, length) {
                            if (typeof size !== "number" || size !== size) // eslint-disable-line no-self-compare
                            throw new TypeError("size must be a number");
                            if (size > kMaxUint32 || size < 0) throw new TypeError("size must be a uint32");
                            if (size + offset > length || size > kBufferMaxLength) throw new RangeError("buffer too small");
                        }
                        if (crypto && crypto.getRandomValues || !process.browser) {
                            exports.randomFill = randomFill;
                            exports.randomFillSync = randomFillSync;
                        } else {
                            exports.randomFill = oldBrowser;
                            exports.randomFillSync = oldBrowser;
                        }
                        function randomFill(buf, offset, size, cb) {
                            if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
                            if (typeof offset === "function") {
                                cb = offset;
                                offset = 0;
                                size = buf.length;
                            } else if (typeof size === "function") {
                                cb = size;
                                size = buf.length - offset;
                            } else if (typeof cb !== "function") throw new TypeError('"cb" argument must be a function');
                            assertOffset(offset, buf.length);
                            assertSize(size, offset, buf.length);
                            return actualFill(buf, offset, size, cb);
                        }
                        function actualFill(buf, offset, size, cb) {
                            if (process.browser) {
                                var ourBuf = buf.buffer;
                                var uint = new Uint8Array(ourBuf, offset, size);
                                crypto.getRandomValues(uint);
                                if (cb) {
                                    process.nextTick(function() {
                                        cb(null, buf);
                                    });
                                    return;
                                }
                                return buf;
                            }
                            if (cb) {
                                randombytes(size, function(err, bytes) {
                                    if (err) return cb(err);
                                    bytes.copy(buf, offset);
                                    cb(null, buf);
                                });
                                return;
                            }
                            var bytes1 = randombytes(size);
                            bytes1.copy(buf, offset);
                            return buf;
                        }
                        function randomFillSync(buf, offset, size) {
                            if (typeof offset === "undefined") offset = 0;
                            if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
                            assertOffset(offset, buf.length);
                            if (size === undefined) size = buf.length - offset;
                            assertSize(size, offset, buf.length);
                            return actualFill(buf, offset, size);
                        }
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "_process": 163,
                "randombytes": 171,
                "safe-buffer": 174
            }
        ],
        173: [
            function(require, module, exports) {
                "use strict";
                var Buffer = require("buffer").Buffer;
                var inherits = require("inherits");
                var HashBase = require("hash-base");
                var ARRAY16 = new Array(16);
                var zl = [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7,
                    4,
                    13,
                    1,
                    10,
                    6,
                    15,
                    3,
                    12,
                    0,
                    9,
                    5,
                    2,
                    14,
                    11,
                    8,
                    3,
                    10,
                    14,
                    4,
                    9,
                    15,
                    8,
                    1,
                    2,
                    7,
                    0,
                    6,
                    13,
                    11,
                    5,
                    12,
                    1,
                    9,
                    11,
                    10,
                    0,
                    8,
                    12,
                    4,
                    13,
                    3,
                    7,
                    15,
                    14,
                    5,
                    6,
                    2,
                    4,
                    0,
                    5,
                    9,
                    7,
                    12,
                    2,
                    10,
                    14,
                    1,
                    3,
                    8,
                    11,
                    6,
                    15,
                    13
                ];
                var zr = [
                    5,
                    14,
                    7,
                    0,
                    9,
                    2,
                    11,
                    4,
                    13,
                    6,
                    15,
                    8,
                    1,
                    10,
                    3,
                    12,
                    6,
                    11,
                    3,
                    7,
                    0,
                    13,
                    5,
                    10,
                    14,
                    15,
                    8,
                    12,
                    4,
                    9,
                    1,
                    2,
                    15,
                    5,
                    1,
                    3,
                    7,
                    14,
                    6,
                    9,
                    11,
                    8,
                    12,
                    2,
                    10,
                    0,
                    4,
                    13,
                    8,
                    6,
                    4,
                    1,
                    3,
                    11,
                    15,
                    0,
                    5,
                    12,
                    2,
                    13,
                    9,
                    7,
                    10,
                    14,
                    12,
                    15,
                    10,
                    4,
                    1,
                    5,
                    8,
                    7,
                    6,
                    2,
                    13,
                    14,
                    0,
                    3,
                    9,
                    11
                ];
                var sl = [
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8,
                    7,
                    6,
                    8,
                    13,
                    11,
                    9,
                    7,
                    15,
                    7,
                    12,
                    15,
                    9,
                    11,
                    7,
                    13,
                    12,
                    11,
                    13,
                    6,
                    7,
                    14,
                    9,
                    13,
                    15,
                    14,
                    8,
                    13,
                    6,
                    5,
                    12,
                    7,
                    5,
                    11,
                    12,
                    14,
                    15,
                    14,
                    15,
                    9,
                    8,
                    9,
                    14,
                    5,
                    6,
                    8,
                    6,
                    5,
                    12,
                    9,
                    15,
                    5,
                    11,
                    6,
                    8,
                    13,
                    12,
                    5,
                    12,
                    13,
                    14,
                    11,
                    8,
                    5,
                    6
                ];
                var sr = [
                    8,
                    9,
                    9,
                    11,
                    13,
                    15,
                    15,
                    5,
                    7,
                    7,
                    8,
                    11,
                    14,
                    14,
                    12,
                    6,
                    9,
                    13,
                    15,
                    7,
                    12,
                    8,
                    9,
                    11,
                    7,
                    7,
                    12,
                    7,
                    6,
                    15,
                    13,
                    11,
                    9,
                    7,
                    15,
                    11,
                    8,
                    6,
                    6,
                    14,
                    12,
                    13,
                    5,
                    14,
                    13,
                    13,
                    7,
                    5,
                    15,
                    5,
                    8,
                    11,
                    14,
                    14,
                    6,
                    14,
                    6,
                    9,
                    12,
                    9,
                    12,
                    5,
                    15,
                    8,
                    8,
                    5,
                    12,
                    9,
                    12,
                    5,
                    14,
                    6,
                    8,
                    13,
                    6,
                    5,
                    15,
                    13,
                    11,
                    11
                ];
                var hl = [
                    0x00000000,
                    0x5a827999,
                    0x6ed9eba1,
                    0x8f1bbcdc,
                    0xa953fd4e
                ];
                var hr = [
                    0x50a28be6,
                    0x5c4dd124,
                    0x6d703ef3,
                    0x7a6d76e9,
                    0x00000000
                ];
                function RIPEMD160() {
                    HashBase.call(this, 64); // state
                    this._a = 0x67452301;
                    this._b = 0xefcdab89;
                    this._c = 0x98badcfe;
                    this._d = 0x10325476;
                    this._e = 0xc3d2e1f0;
                }
                inherits(RIPEMD160, HashBase);
                RIPEMD160.prototype._update = function() {
                    var words = ARRAY16;
                    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
                    var al = this._a | 0;
                    var bl = this._b | 0;
                    var cl = this._c | 0;
                    var dl = this._d | 0;
                    var el = this._e | 0;
                    var ar = this._a | 0;
                    var br = this._b | 0;
                    var cr = this._c | 0;
                    var dr = this._d | 0;
                    var er = this._e | 0; // computation
                    for(var i = 0; i < 80; i += 1){
                        var tl;
                        var tr;
                        if (i < 16) {
                            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
                            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
                        } else if (i < 32) {
                            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
                            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
                        } else if (i < 48) {
                            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
                            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
                        } else if (i < 64) {
                            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
                            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
                        } else {
                            // if (i<80) {
                            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
                            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
                        }
                        al = el;
                        el = dl;
                        dl = rotl(cl, 10);
                        cl = bl;
                        bl = tl;
                        ar = er;
                        er = dr;
                        dr = rotl(cr, 10);
                        cr = br;
                        br = tr;
                    } // update state
                    var t = this._b + cl + dr | 0;
                    this._b = this._c + dl + er | 0;
                    this._c = this._d + el + ar | 0;
                    this._d = this._e + al + br | 0;
                    this._e = this._a + bl + cr | 0;
                    this._a = t;
                };
                RIPEMD160.prototype._digest = function() {
                    // create padding and handle blocks
                    this._block[this._blockOffset++] = 0x80;
                    if (this._blockOffset > 56) {
                        this._block.fill(0, this._blockOffset, 64);
                        this._update();
                        this._blockOffset = 0;
                    }
                    this._block.fill(0, this._blockOffset, 56);
                    this._block.writeUInt32LE(this._length[0], 56);
                    this._block.writeUInt32LE(this._length[1], 60);
                    this._update(); // produce result
                    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
                    buffer.writeInt32LE(this._a, 0);
                    buffer.writeInt32LE(this._b, 4);
                    buffer.writeInt32LE(this._c, 8);
                    buffer.writeInt32LE(this._d, 12);
                    buffer.writeInt32LE(this._e, 16);
                    return buffer;
                };
                function rotl(x, n) {
                    return x << n | x >>> 32 - n;
                }
                function fn1(a, b, c, d, e, m, k, s) {
                    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
                }
                function fn2(a, b, c, d, e, m, k, s) {
                    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
                }
                function fn3(a, b, c, d, e, m, k, s) {
                    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
                }
                function fn4(a, b, c, d, e, m, k, s) {
                    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
                }
                function fn5(a, b, c, d, e, m, k, s) {
                    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
                }
                module.exports = RIPEMD160;
            },
            {
                "buffer": 63,
                "hash-base": 113,
                "inherits": 143
            }
        ],
        174: [
            function(require, module, exports) {
                /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require("buffer");
                var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers
                function copyProps(src, dst) {
                    for(var key in src)dst[key] = src[key];
                }
                if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
                else {
                    // Copy properties from require('buffer')
                    copyProps(buffer, exports);
                    exports.Buffer = SafeBuffer;
                }
                function SafeBuffer(arg, encodingOrOffset, length) {
                    return Buffer(arg, encodingOrOffset, length);
                }
                SafeBuffer.prototype = Object.create(Buffer.prototype); // Copy static methods from Buffer
                copyProps(Buffer, SafeBuffer);
                SafeBuffer.from = function(arg, encodingOrOffset, length) {
                    if (typeof arg === "number") throw new TypeError("Argument must not be a number");
                    return Buffer(arg, encodingOrOffset, length);
                };
                SafeBuffer.alloc = function(size, fill, encoding) {
                    if (typeof size !== "number") throw new TypeError("Argument must be a number");
                    var buf = Buffer(size);
                    if (fill !== undefined) {
                        if (typeof encoding === "string") buf.fill(fill, encoding);
                        else buf.fill(fill);
                    } else buf.fill(0);
                    return buf;
                };
                SafeBuffer.allocUnsafe = function(size) {
                    if (typeof size !== "number") throw new TypeError("Argument must be a number");
                    return Buffer(size);
                };
                SafeBuffer.allocUnsafeSlow = function(size) {
                    if (typeof size !== "number") throw new TypeError("Argument must be a number");
                    return buffer.SlowBuffer(size);
                };
            },
            {
                "buffer": 63
            }
        ],
        175: [
            function(require, module, exports) {
                (function(process) {
                    (function() {
                        /* eslint-disable node/no-deprecated-api */ "use strict";
                        var buffer = require("buffer");
                        var Buffer = buffer.Buffer;
                        var safer = {};
                        var key;
                        for(key in buffer){
                            if (!buffer.hasOwnProperty(key)) continue;
                            if (key === "SlowBuffer" || key === "Buffer") continue;
                            safer[key] = buffer[key];
                        }
                        var Safer = safer.Buffer = {};
                        for(key in Buffer){
                            if (!Buffer.hasOwnProperty(key)) continue;
                            if (key === "allocUnsafe" || key === "allocUnsafeSlow") continue;
                            Safer[key] = Buffer[key];
                        }
                        safer.Buffer.prototype = Buffer.prototype;
                        if (!Safer.from || Safer.from === Uint8Array.from) Safer.from = function(value, encodingOrOffset, length) {
                            if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type ' + _typeof(value));
                            if (value && typeof value.length === "undefined") throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + _typeof(value));
                            return Buffer(value, encodingOrOffset, length);
                        };
                        if (!Safer.alloc) Safer.alloc = function(size, fill, encoding) {
                            if (typeof size !== "number") throw new TypeError('The "size" argument must be of type number. Received type ' + _typeof(size));
                            if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
                            var buf = Buffer(size);
                            if (!fill || fill.length === 0) buf.fill(0);
                            else if (typeof encoding === "string") buf.fill(fill, encoding);
                            else buf.fill(fill);
                            return buf;
                        };
                        if (!safer.kStringMaxLength) try {
                            safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
                        } catch (e) {
                        // is unsupported, so let's not set it
                        }
                        if (!safer.constants) {
                            safer.constants = {
                                MAX_LENGTH: safer.kMaxLength
                            };
                            if (safer.kStringMaxLength) safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
                        }
                        module.exports = safer;
                    }).call(this);
                }).call(this, require("_process"));
            },
            {
                "_process": 163,
                "buffer": 63
            }
        ],
        176: [
            function(require, module, exports) {
                var Buffer = require("safe-buffer").Buffer; // prototype class for hash functions
                function Hash(blockSize, finalSize) {
                    this._block = Buffer.alloc(blockSize);
                    this._finalSize = finalSize;
                    this._blockSize = blockSize;
                    this._len = 0;
                }
                Hash.prototype.update = function(data, enc) {
                    if (typeof data === "string") {
                        enc = enc || "utf8";
                        data = Buffer.from(data, enc);
                    }
                    var block = this._block;
                    var blockSize = this._blockSize;
                    var length = data.length;
                    var accum = this._len;
                    for(var offset = 0; offset < length;){
                        var assigned = accum % blockSize;
                        var remainder = Math.min(length - offset, blockSize - assigned);
                        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
                        accum += remainder;
                        offset += remainder;
                        if (accum % blockSize === 0) this._update(block);
                    }
                    this._len += length;
                    return this;
                };
                Hash.prototype.digest = function(enc) {
                    var rem = this._len % this._blockSize;
                    this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
                    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
                    this._block.fill(0, rem + 1);
                    if (rem >= this._finalSize) {
                        this._update(this._block);
                        this._block.fill(0);
                    }
                    var bits = this._len * 8; // uint32
                    if (bits <= 0xffffffff) this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64
                    else {
                        var lowBits = (bits & 0xffffffff) >>> 0;
                        var highBits = (bits - lowBits) / 0x100000000;
                        this._block.writeUInt32BE(highBits, this._blockSize - 8);
                        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
                    }
                    this._update(this._block);
                    var hash = this._hash();
                    return enc ? hash.toString(enc) : hash;
                };
                Hash.prototype._update = function() {
                    throw new Error("_update must be implemented by subclass");
                };
                module.exports = Hash;
            },
            {
                "safe-buffer": 174
            }
        ],
        177: [
            function(require, module, exports) {
                var exports = module.exports = function SHA(algorithm) {
                    algorithm = algorithm.toLowerCase();
                    var Algorithm = exports[algorithm];
                    if (!Algorithm) throw new Error(algorithm + " is not supported (we accept pull requests)");
                    return new Algorithm();
                };
                exports.sha = require("./sha");
                exports.sha1 = require("./sha1");
                exports.sha224 = require("./sha224");
                exports.sha256 = require("./sha256");
                exports.sha384 = require("./sha384");
                exports.sha512 = require("./sha512");
            },
            {
                "./sha": 178,
                "./sha1": 179,
                "./sha224": 180,
                "./sha256": 181,
                "./sha384": 182,
                "./sha512": 183
            }
        ],
        178: [
            function(require, module, exports) {
                /*
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
       * in FIPS PUB 180-1
       * This source code is derived from sha1.js of the same repository.
       * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
       * operation was added.
       */ var inherits = require("inherits");
                var Hash = require("./hash");
                var Buffer = require("safe-buffer").Buffer;
                var K = [
                    0x5a827999,
                    0x6ed9eba1,
                    -1894007588,
                    -899497514
                ];
                var W1 = new Array(80);
                function Sha() {
                    this.init();
                    this._w = W1;
                    Hash.call(this, 64, 56);
                }
                inherits(Sha, Hash);
                Sha.prototype.init = function() {
                    this._a = 0x67452301;
                    this._b = 0xefcdab89;
                    this._c = 0x98badcfe;
                    this._d = 0x10325476;
                    this._e = 0xc3d2e1f0;
                    return this;
                };
                function rotl5(num) {
                    return num << 5 | num >>> 27;
                }
                function rotl30(num) {
                    return num << 30 | num >>> 2;
                }
                function ft(s, b, c, d) {
                    if (s === 0) return b & c | ~b & d;
                    if (s === 2) return b & c | b & d | c & d;
                    return b ^ c ^ d;
                }
                Sha.prototype._update = function(M) {
                    var W = this._w;
                    var a = this._a | 0;
                    var b = this._b | 0;
                    var c = this._c | 0;
                    var d = this._d | 0;
                    var e = this._e | 0;
                    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
                    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                    for(var j = 0; j < 80; ++j){
                        var s = ~~(j / 20);
                        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
                        e = d;
                        d = c;
                        c = rotl30(b);
                        b = a;
                        a = t;
                    }
                    this._a = a + this._a | 0;
                    this._b = b + this._b | 0;
                    this._c = c + this._c | 0;
                    this._d = d + this._d | 0;
                    this._e = e + this._e | 0;
                };
                Sha.prototype._hash = function() {
                    var H = Buffer.allocUnsafe(20);
                    H.writeInt32BE(this._a | 0, 0);
                    H.writeInt32BE(this._b | 0, 4);
                    H.writeInt32BE(this._c | 0, 8);
                    H.writeInt32BE(this._d | 0, 12);
                    H.writeInt32BE(this._e | 0, 16);
                    return H;
                };
                module.exports = Sha;
            },
            {
                "./hash": 176,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        179: [
            function(require, module, exports) {
                /*
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
       * in FIPS PUB 180-1
       * Version 2.1a Copyright Paul Johnston 2000 - 2002.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       * Distributed under the BSD License
       * See http://pajhome.org.uk/crypt/md5 for details.
       */ var inherits = require("inherits");
                var Hash = require("./hash");
                var Buffer = require("safe-buffer").Buffer;
                var K = [
                    0x5a827999,
                    0x6ed9eba1,
                    -1894007588,
                    -899497514
                ];
                var W2 = new Array(80);
                function Sha1() {
                    this.init();
                    this._w = W2;
                    Hash.call(this, 64, 56);
                }
                inherits(Sha1, Hash);
                Sha1.prototype.init = function() {
                    this._a = 0x67452301;
                    this._b = 0xefcdab89;
                    this._c = 0x98badcfe;
                    this._d = 0x10325476;
                    this._e = 0xc3d2e1f0;
                    return this;
                };
                function rotl1(num) {
                    return num << 1 | num >>> 31;
                }
                function rotl5(num) {
                    return num << 5 | num >>> 27;
                }
                function rotl30(num) {
                    return num << 30 | num >>> 2;
                }
                function ft(s, b, c, d) {
                    if (s === 0) return b & c | ~b & d;
                    if (s === 2) return b & c | b & d | c & d;
                    return b ^ c ^ d;
                }
                Sha1.prototype._update = function(M) {
                    var W = this._w;
                    var a = this._a | 0;
                    var b = this._b | 0;
                    var c = this._c | 0;
                    var d = this._d | 0;
                    var e = this._e | 0;
                    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
                    for(; i < 80; ++i)W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
                    for(var j = 0; j < 80; ++j){
                        var s = ~~(j / 20);
                        var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
                        e = d;
                        d = c;
                        c = rotl30(b);
                        b = a;
                        a = t;
                    }
                    this._a = a + this._a | 0;
                    this._b = b + this._b | 0;
                    this._c = c + this._c | 0;
                    this._d = d + this._d | 0;
                    this._e = e + this._e | 0;
                };
                Sha1.prototype._hash = function() {
                    var H = Buffer.allocUnsafe(20);
                    H.writeInt32BE(this._a | 0, 0);
                    H.writeInt32BE(this._b | 0, 4);
                    H.writeInt32BE(this._c | 0, 8);
                    H.writeInt32BE(this._d | 0, 12);
                    H.writeInt32BE(this._e | 0, 16);
                    return H;
                };
                module.exports = Sha1;
            },
            {
                "./hash": 176,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        180: [
            function(require, module, exports) {
                /**
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
       * in FIPS 180-2
       * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       *
       */ var inherits = require("inherits");
                var Sha256 = require("./sha256");
                var Hash = require("./hash");
                var Buffer = require("safe-buffer").Buffer;
                var W = new Array(64);
                function Sha224() {
                    this.init();
                    this._w = W; // new Array(64)
                    Hash.call(this, 64, 56);
                }
                inherits(Sha224, Sha256);
                Sha224.prototype.init = function() {
                    this._a = 0xc1059ed8;
                    this._b = 0x367cd507;
                    this._c = 0x3070dd17;
                    this._d = 0xf70e5939;
                    this._e = 0xffc00b31;
                    this._f = 0x68581511;
                    this._g = 0x64f98fa7;
                    this._h = 0xbefa4fa4;
                    return this;
                };
                Sha224.prototype._hash = function() {
                    var H = Buffer.allocUnsafe(28);
                    H.writeInt32BE(this._a, 0);
                    H.writeInt32BE(this._b, 4);
                    H.writeInt32BE(this._c, 8);
                    H.writeInt32BE(this._d, 12);
                    H.writeInt32BE(this._e, 16);
                    H.writeInt32BE(this._f, 20);
                    H.writeInt32BE(this._g, 24);
                    return H;
                };
                module.exports = Sha224;
            },
            {
                "./hash": 176,
                "./sha256": 181,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        181: [
            function(require, module, exports) {
                /**
       * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
       * in FIPS 180-2
       * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
       *
       */ var inherits = require("inherits");
                var Hash = require("./hash");
                var Buffer = require("safe-buffer").Buffer;
                var K = [
                    0x428A2F98,
                    0x71374491,
                    0xB5C0FBCF,
                    0xE9B5DBA5,
                    0x3956C25B,
                    0x59F111F1,
                    0x923F82A4,
                    0xAB1C5ED5,
                    0xD807AA98,
                    0x12835B01,
                    0x243185BE,
                    0x550C7DC3,
                    0x72BE5D74,
                    0x80DEB1FE,
                    0x9BDC06A7,
                    0xC19BF174,
                    0xE49B69C1,
                    0xEFBE4786,
                    0x0FC19DC6,
                    0x240CA1CC,
                    0x2DE92C6F,
                    0x4A7484AA,
                    0x5CB0A9DC,
                    0x76F988DA,
                    0x983E5152,
                    0xA831C66D,
                    0xB00327C8,
                    0xBF597FC7,
                    0xC6E00BF3,
                    0xD5A79147,
                    0x06CA6351,
                    0x14292967,
                    0x27B70A85,
                    0x2E1B2138,
                    0x4D2C6DFC,
                    0x53380D13,
                    0x650A7354,
                    0x766A0ABB,
                    0x81C2C92E,
                    0x92722C85,
                    0xA2BFE8A1,
                    0xA81A664B,
                    0xC24B8B70,
                    0xC76C51A3,
                    0xD192E819,
                    0xD6990624,
                    0xF40E3585,
                    0x106AA070,
                    0x19A4C116,
                    0x1E376C08,
                    0x2748774C,
                    0x34B0BCB5,
                    0x391C0CB3,
                    0x4ED8AA4A,
                    0x5B9CCA4F,
                    0x682E6FF3,
                    0x748F82EE,
                    0x78A5636F,
                    0x84C87814,
                    0x8CC70208,
                    0x90BEFFFA,
                    0xA4506CEB,
                    0xBEF9A3F7,
                    0xC67178F2
                ];
                var W3 = new Array(64);
                function Sha256() {
                    this.init();
                    this._w = W3; // new Array(64)
                    Hash.call(this, 64, 56);
                }
                inherits(Sha256, Hash);
                Sha256.prototype.init = function() {
                    this._a = 0x6a09e667;
                    this._b = 0xbb67ae85;
                    this._c = 0x3c6ef372;
                    this._d = 0xa54ff53a;
                    this._e = 0x510e527f;
                    this._f = 0x9b05688c;
                    this._g = 0x1f83d9ab;
                    this._h = 0x5be0cd19;
                    return this;
                };
                function ch(x, y, z) {
                    return z ^ x & (y ^ z);
                }
                function maj(x, y, z) {
                    return x & y | z & (x | y);
                }
                function sigma0(x) {
                    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
                }
                function sigma1(x) {
                    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
                }
                function gamma0(x) {
                    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
                }
                function gamma1(x) {
                    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
                }
                Sha256.prototype._update = function(M) {
                    var W = this._w;
                    var a = this._a | 0;
                    var b = this._b | 0;
                    var c = this._c | 0;
                    var d = this._d | 0;
                    var e = this._e | 0;
                    var f = this._f | 0;
                    var g = this._g | 0;
                    var h = this._h | 0;
                    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
                    for(; i < 64; ++i)W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
                    for(var j = 0; j < 64; ++j){
                        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
                        var T2 = sigma0(a) + maj(a, b, c) | 0;
                        h = g;
                        g = f;
                        f = e;
                        e = d + T1 | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = T1 + T2 | 0;
                    }
                    this._a = a + this._a | 0;
                    this._b = b + this._b | 0;
                    this._c = c + this._c | 0;
                    this._d = d + this._d | 0;
                    this._e = e + this._e | 0;
                    this._f = f + this._f | 0;
                    this._g = g + this._g | 0;
                    this._h = h + this._h | 0;
                };
                Sha256.prototype._hash = function() {
                    var H = Buffer.allocUnsafe(32);
                    H.writeInt32BE(this._a, 0);
                    H.writeInt32BE(this._b, 4);
                    H.writeInt32BE(this._c, 8);
                    H.writeInt32BE(this._d, 12);
                    H.writeInt32BE(this._e, 16);
                    H.writeInt32BE(this._f, 20);
                    H.writeInt32BE(this._g, 24);
                    H.writeInt32BE(this._h, 28);
                    return H;
                };
                module.exports = Sha256;
            },
            {
                "./hash": 176,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        182: [
            function(require, module, exports) {
                var inherits = require("inherits");
                var SHA512 = require("./sha512");
                var Hash = require("./hash");
                var Buffer = require("safe-buffer").Buffer;
                var W = new Array(160);
                function Sha384() {
                    this.init();
                    this._w = W;
                    Hash.call(this, 128, 112);
                }
                inherits(Sha384, SHA512);
                Sha384.prototype.init = function() {
                    this._ah = 0xcbbb9d5d;
                    this._bh = 0x629a292a;
                    this._ch = 0x9159015a;
                    this._dh = 0x152fecd8;
                    this._eh = 0x67332667;
                    this._fh = 0x8eb44a87;
                    this._gh = 0xdb0c2e0d;
                    this._hh = 0x47b5481d;
                    this._al = 0xc1059ed8;
                    this._bl = 0x367cd507;
                    this._cl = 0x3070dd17;
                    this._dl = 0xf70e5939;
                    this._el = 0xffc00b31;
                    this._fl = 0x68581511;
                    this._gl = 0x64f98fa7;
                    this._hl = 0xbefa4fa4;
                    return this;
                };
                Sha384.prototype._hash = function() {
                    var H = Buffer.allocUnsafe(48);
                    function writeInt64BE(h, l, offset) {
                        H.writeInt32BE(h, offset);
                        H.writeInt32BE(l, offset + 4);
                    }
                    writeInt64BE(this._ah, this._al, 0);
                    writeInt64BE(this._bh, this._bl, 8);
                    writeInt64BE(this._ch, this._cl, 16);
                    writeInt64BE(this._dh, this._dl, 24);
                    writeInt64BE(this._eh, this._el, 32);
                    writeInt64BE(this._fh, this._fl, 40);
                    return H;
                };
                module.exports = Sha384;
            },
            {
                "./hash": 176,
                "./sha512": 183,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        183: [
            function(require, module, exports) {
                var inherits = require("inherits");
                var Hash = require("./hash");
                var Buffer = require("safe-buffer").Buffer;
                var K = [
                    0x428a2f98,
                    0xd728ae22,
                    0x71374491,
                    0x23ef65cd,
                    0xb5c0fbcf,
                    0xec4d3b2f,
                    0xe9b5dba5,
                    0x8189dbbc,
                    0x3956c25b,
                    0xf348b538,
                    0x59f111f1,
                    0xb605d019,
                    0x923f82a4,
                    0xaf194f9b,
                    0xab1c5ed5,
                    0xda6d8118,
                    0xd807aa98,
                    0xa3030242,
                    0x12835b01,
                    0x45706fbe,
                    0x243185be,
                    0x4ee4b28c,
                    0x550c7dc3,
                    0xd5ffb4e2,
                    0x72be5d74,
                    0xf27b896f,
                    0x80deb1fe,
                    0x3b1696b1,
                    0x9bdc06a7,
                    0x25c71235,
                    0xc19bf174,
                    0xcf692694,
                    0xe49b69c1,
                    0x9ef14ad2,
                    0xefbe4786,
                    0x384f25e3,
                    0x0fc19dc6,
                    0x8b8cd5b5,
                    0x240ca1cc,
                    0x77ac9c65,
                    0x2de92c6f,
                    0x592b0275,
                    0x4a7484aa,
                    0x6ea6e483,
                    0x5cb0a9dc,
                    0xbd41fbd4,
                    0x76f988da,
                    0x831153b5,
                    0x983e5152,
                    0xee66dfab,
                    0xa831c66d,
                    0x2db43210,
                    0xb00327c8,
                    0x98fb213f,
                    0xbf597fc7,
                    0xbeef0ee4,
                    0xc6e00bf3,
                    0x3da88fc2,
                    0xd5a79147,
                    0x930aa725,
                    0x06ca6351,
                    0xe003826f,
                    0x14292967,
                    0x0a0e6e70,
                    0x27b70a85,
                    0x46d22ffc,
                    0x2e1b2138,
                    0x5c26c926,
                    0x4d2c6dfc,
                    0x5ac42aed,
                    0x53380d13,
                    0x9d95b3df,
                    0x650a7354,
                    0x8baf63de,
                    0x766a0abb,
                    0x3c77b2a8,
                    0x81c2c92e,
                    0x47edaee6,
                    0x92722c85,
                    0x1482353b,
                    0xa2bfe8a1,
                    0x4cf10364,
                    0xa81a664b,
                    0xbc423001,
                    0xc24b8b70,
                    0xd0f89791,
                    0xc76c51a3,
                    0x0654be30,
                    0xd192e819,
                    0xd6ef5218,
                    0xd6990624,
                    0x5565a910,
                    0xf40e3585,
                    0x5771202a,
                    0x106aa070,
                    0x32bbd1b8,
                    0x19a4c116,
                    0xb8d2d0c8,
                    0x1e376c08,
                    0x5141ab53,
                    0x2748774c,
                    0xdf8eeb99,
                    0x34b0bcb5,
                    0xe19b48a8,
                    0x391c0cb3,
                    0xc5c95a63,
                    0x4ed8aa4a,
                    0xe3418acb,
                    0x5b9cca4f,
                    0x7763e373,
                    0x682e6ff3,
                    0xd6b2b8a3,
                    0x748f82ee,
                    0x5defb2fc,
                    0x78a5636f,
                    0x43172f60,
                    0x84c87814,
                    0xa1f0ab72,
                    0x8cc70208,
                    0x1a6439ec,
                    0x90befffa,
                    0x23631e28,
                    0xa4506ceb,
                    0xde82bde9,
                    0xbef9a3f7,
                    0xb2c67915,
                    0xc67178f2,
                    0xe372532b,
                    0xca273ece,
                    0xea26619c,
                    0xd186b8c7,
                    0x21c0c207,
                    0xeada7dd6,
                    0xcde0eb1e,
                    0xf57d4f7f,
                    0xee6ed178,
                    0x06f067aa,
                    0x72176fba,
                    0x0a637dc5,
                    0xa2c898a6,
                    0x113f9804,
                    0xbef90dae,
                    0x1b710b35,
                    0x131c471b,
                    0x28db77f5,
                    0x23047d84,
                    0x32caab7b,
                    0x40c72493,
                    0x3c9ebe0a,
                    0x15c9bebc,
                    0x431d67c4,
                    0x9c100d4c,
                    0x4cc5d4be,
                    0xcb3e42b6,
                    0x597f299c,
                    0xfc657e2a,
                    0x5fcb6fab,
                    0x3ad6faec,
                    0x6c44198c,
                    0x4a475817
                ];
                var W4 = new Array(160);
                function Sha512() {
                    this.init();
                    this._w = W4;
                    Hash.call(this, 128, 112);
                }
                inherits(Sha512, Hash);
                Sha512.prototype.init = function() {
                    this._ah = 0x6a09e667;
                    this._bh = 0xbb67ae85;
                    this._ch = 0x3c6ef372;
                    this._dh = 0xa54ff53a;
                    this._eh = 0x510e527f;
                    this._fh = 0x9b05688c;
                    this._gh = 0x1f83d9ab;
                    this._hh = 0x5be0cd19;
                    this._al = 0xf3bcc908;
                    this._bl = 0x84caa73b;
                    this._cl = 0xfe94f82b;
                    this._dl = 0x5f1d36f1;
                    this._el = 0xade682d1;
                    this._fl = 0x2b3e6c1f;
                    this._gl = 0xfb41bd6b;
                    this._hl = 0x137e2179;
                    return this;
                };
                function Ch(x, y, z) {
                    return z ^ x & (y ^ z);
                }
                function maj(x, y, z) {
                    return x & y | z & (x | y);
                }
                function sigma0(x, xl) {
                    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
                }
                function sigma1(x, xl) {
                    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
                }
                function Gamma0(x, xl) {
                    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
                }
                function Gamma0l(x, xl) {
                    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
                }
                function Gamma1(x, xl) {
                    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
                }
                function Gamma1l(x, xl) {
                    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
                }
                function getCarry(a, b) {
                    return a >>> 0 < b >>> 0 ? 1 : 0;
                }
                Sha512.prototype._update = function(M) {
                    var W = this._w;
                    var ah = this._ah | 0;
                    var bh = this._bh | 0;
                    var ch = this._ch | 0;
                    var dh = this._dh | 0;
                    var eh = this._eh | 0;
                    var fh = this._fh | 0;
                    var gh = this._gh | 0;
                    var hh = this._hh | 0;
                    var al = this._al | 0;
                    var bl = this._bl | 0;
                    var cl = this._cl | 0;
                    var dl = this._dl | 0;
                    var el = this._el | 0;
                    var fl = this._fl | 0;
                    var gl = this._gl | 0;
                    var hl = this._hl | 0;
                    for(var i = 0; i < 32; i += 2){
                        W[i] = M.readInt32BE(i * 4);
                        W[i + 1] = M.readInt32BE(i * 4 + 4);
                    }
                    for(; i < 160; i += 2){
                        var xh = W[i - 30];
                        var xl = W[i - 30 + 1];
                        var gamma0 = Gamma0(xh, xl);
                        var gamma0l = Gamma0l(xl, xh);
                        xh = W[i - 4];
                        xl = W[i - 4 + 1];
                        var gamma1 = Gamma1(xh, xl);
                        var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
                        var Wi7h = W[i - 14];
                        var Wi7l = W[i - 14 + 1];
                        var Wi16h = W[i - 32];
                        var Wi16l = W[i - 32 + 1];
                        var Wil = gamma0l + Wi7l | 0;
                        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
                        Wil = Wil + gamma1l | 0;
                        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
                        Wil = Wil + Wi16l | 0;
                        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
                        W[i] = Wih;
                        W[i + 1] = Wil;
                    }
                    for(var j = 0; j < 160; j += 2){
                        Wih = W[j];
                        Wil = W[j + 1];
                        var majh = maj(ah, bh, ch);
                        var majl = maj(al, bl, cl);
                        var sigma0h = sigma0(ah, al);
                        var sigma0l = sigma0(al, ah);
                        var sigma1h = sigma1(eh, el);
                        var sigma1l = sigma1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]
                        var Kih = K[j];
                        var Kil = K[j + 1];
                        var chh = Ch(eh, fh, gh);
                        var chl = Ch(el, fl, gl);
                        var t1l = hl + sigma1l | 0;
                        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
                        t1l = t1l + chl | 0;
                        t1h = t1h + chh + getCarry(t1l, chl) | 0;
                        t1l = t1l + Kil | 0;
                        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
                        t1l = t1l + Wil | 0;
                        t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj
                        var t2l = sigma0l + majl | 0;
                        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
                        hh = gh;
                        hl = gl;
                        gh = fh;
                        gl = fl;
                        fh = eh;
                        fl = el;
                        el = dl + t1l | 0;
                        eh = dh + t1h + getCarry(el, dl) | 0;
                        dh = ch;
                        dl = cl;
                        ch = bh;
                        cl = bl;
                        bh = ah;
                        bl = al;
                        al = t1l + t2l | 0;
                        ah = t1h + t2h + getCarry(al, t1l) | 0;
                    }
                    this._al = this._al + al | 0;
                    this._bl = this._bl + bl | 0;
                    this._cl = this._cl + cl | 0;
                    this._dl = this._dl + dl | 0;
                    this._el = this._el + el | 0;
                    this._fl = this._fl + fl | 0;
                    this._gl = this._gl + gl | 0;
                    this._hl = this._hl + hl | 0;
                    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
                    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
                    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
                    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
                    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
                    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
                    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
                    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
                };
                Sha512.prototype._hash = function() {
                    var H = Buffer.allocUnsafe(64);
                    function writeInt64BE(h, l, offset) {
                        H.writeInt32BE(h, offset);
                        H.writeInt32BE(l, offset + 4);
                    }
                    writeInt64BE(this._ah, this._al, 0);
                    writeInt64BE(this._bh, this._bl, 8);
                    writeInt64BE(this._ch, this._cl, 16);
                    writeInt64BE(this._dh, this._dl, 24);
                    writeInt64BE(this._eh, this._el, 32);
                    writeInt64BE(this._fh, this._fl, 40);
                    writeInt64BE(this._gh, this._gl, 48);
                    writeInt64BE(this._hh, this._hl, 56);
                    return H;
                };
                module.exports = Sha512;
            },
            {
                "./hash": 176,
                "inherits": 143,
                "safe-buffer": 174
            }
        ],
        184: [
            function(require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                module.exports = Stream;
                var EE = require("events").EventEmitter;
                var inherits = require("inherits");
                inherits(Stream, EE);
                Stream.Readable = require("readable-stream/lib/_stream_readable.js");
                Stream.Writable = require("readable-stream/lib/_stream_writable.js");
                Stream.Duplex = require("readable-stream/lib/_stream_duplex.js");
                Stream.Transform = require("readable-stream/lib/_stream_transform.js");
                Stream.PassThrough = require("readable-stream/lib/_stream_passthrough.js");
                Stream.finished = require("readable-stream/lib/internal/streams/end-of-stream.js");
                Stream.pipeline = require("readable-stream/lib/internal/streams/pipeline.js"); // Backwards-compat with node 0.4.x
                Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
                // part of this class) is overridden in the Readable class.
                function Stream() {
                    EE.call(this);
                }
                Stream.prototype.pipe = function(dest, options) {
                    var source = this;
                    function ondata(chunk) {
                        if (dest.writable) {
                            if (false === dest.write(chunk) && source.pause) source.pause();
                        }
                    }
                    source.on("data", ondata);
                    function ondrain() {
                        if (source.readable && source.resume) source.resume();
                    }
                    dest.on("drain", ondrain); // If the 'end' option is not supplied, dest.end() will be called when
                    // source gets the 'end' or 'close' events.  Only dest.end() once.
                    if (!dest._isStdio && (!options || options.end !== false)) {
                        source.on("end", onend);
                        source.on("close", onclose);
                    }
                    var didOnEnd = false;
                    function onend() {
                        if (didOnEnd) return;
                        didOnEnd = true;
                        dest.end();
                    }
                    function onclose() {
                        if (didOnEnd) return;
                        didOnEnd = true;
                        if (typeof dest.destroy === "function") dest.destroy();
                    } // don't leave dangling pipes when there are errors.
                    function onerror(er) {
                        cleanup();
                        if (EE.listenerCount(this, "error") === 0) throw er; // Unhandled stream error in pipe.
                    }
                    source.on("error", onerror);
                    dest.on("error", onerror); // remove all the event listeners that were added.
                    function cleanup() {
                        source.removeListener("data", ondata);
                        dest.removeListener("drain", ondrain);
                        source.removeListener("end", onend);
                        source.removeListener("close", onclose);
                        source.removeListener("error", onerror);
                        dest.removeListener("error", onerror);
                        source.removeListener("end", cleanup);
                        source.removeListener("close", cleanup);
                        dest.removeListener("close", cleanup);
                    }
                    source.on("end", cleanup);
                    source.on("close", cleanup);
                    dest.on("close", cleanup);
                    dest.emit("pipe", source); // Allow for unix-like usage: A.pipe(B).pipe(C)
                    return dest;
                };
            },
            {
                "events": 103,
                "inherits": 143,
                "readable-stream/lib/_stream_duplex.js": 186,
                "readable-stream/lib/_stream_passthrough.js": 187,
                "readable-stream/lib/_stream_readable.js": 188,
                "readable-stream/lib/_stream_transform.js": 189,
                "readable-stream/lib/_stream_writable.js": 190,
                "readable-stream/lib/internal/streams/end-of-stream.js": 194,
                "readable-stream/lib/internal/streams/pipeline.js": 196
            }
        ],
        185: [
            function(require, module, exports) {
                arguments[4][47][0].apply(exports, arguments);
            },
            {
                "dup": 47
            }
        ],
        186: [
            function(require, module, exports) {
                arguments[4][48][0].apply(exports, arguments);
            },
            {
                "./_stream_readable": 188,
                "./_stream_writable": 190,
                "_process": 163,
                "dup": 48,
                "inherits": 143
            }
        ],
        187: [
            function(require, module, exports) {
                arguments[4][49][0].apply(exports, arguments);
            },
            {
                "./_stream_transform": 189,
                "dup": 49,
                "inherits": 143
            }
        ],
        188: [
            function(require, module, exports) {
                arguments[4][50][0].apply(exports, arguments);
            },
            {
                "../errors": 185,
                "./_stream_duplex": 186,
                "./internal/streams/async_iterator": 191,
                "./internal/streams/buffer_list": 192,
                "./internal/streams/destroy": 193,
                "./internal/streams/from": 195,
                "./internal/streams/state": 197,
                "./internal/streams/stream": 198,
                "_process": 163,
                "buffer": 63,
                "dup": 50,
                "events": 103,
                "inherits": 143,
                "string_decoder/": 199,
                "util": 224
            }
        ],
        189: [
            function(require, module, exports) {
                arguments[4][51][0].apply(exports, arguments);
            },
            {
                "../errors": 185,
                "./_stream_duplex": 186,
                "dup": 51,
                "inherits": 143
            }
        ],
        190: [
            function(require, module, exports) {
                arguments[4][52][0].apply(exports, arguments);
            },
            {
                "../errors": 185,
                "./_stream_duplex": 186,
                "./internal/streams/destroy": 193,
                "./internal/streams/state": 197,
                "./internal/streams/stream": 198,
                "_process": 163,
                "buffer": 63,
                "dup": 52,
                "inherits": 143,
                "util-deprecate": 200
            }
        ],
        191: [
            function(require, module, exports) {
                arguments[4][53][0].apply(exports, arguments);
            },
            {
                "./end-of-stream": 194,
                "_process": 163,
                "dup": 53
            }
        ],
        192: [
            function(require, module, exports) {
                arguments[4][54][0].apply(exports, arguments);
            },
            {
                "buffer": 63,
                "dup": 54,
                "util": 224
            }
        ],
        193: [
            function(require, module, exports) {
                arguments[4][55][0].apply(exports, arguments);
            },
            {
                "_process": 163,
                "dup": 55
            }
        ],
        194: [
            function(require, module, exports) {
                arguments[4][56][0].apply(exports, arguments);
            },
            {
                "../../../errors": 185,
                "dup": 56
            }
        ],
        195: [
            function(require, module, exports) {
                arguments[4][57][0].apply(exports, arguments);
            },
            {
                "dup": 57
            }
        ],
        196: [
            function(require, module, exports) {
                arguments[4][58][0].apply(exports, arguments);
            },
            {
                "../../../errors": 185,
                "./end-of-stream": 194,
                "dup": 58
            }
        ],
        197: [
            function(require, module, exports) {
                arguments[4][59][0].apply(exports, arguments);
            },
            {
                "../../../errors": 185,
                "dup": 59
            }
        ],
        198: [
            function(require, module, exports) {
                arguments[4][60][0].apply(exports, arguments);
            },
            {
                "dup": 60,
                "events": 103
            }
        ],
        199: [
            function(require, module, exports) {
                // Copyright Joyent, Inc. and other Node contributors.
                //
                // Permission is hereby granted, free of charge, to any person obtaining a
                // copy of this software and associated documentation files (the
                // "Software"), to deal in the Software without restriction, including
                // without limitation the rights to use, copy, modify, merge, publish,
                // distribute, sublicense, and/or sell copies of the Software, and to permit
                // persons to whom the Software is furnished to do so, subject to the
                // following conditions:
                //
                // The above copyright notice and this permission notice shall be included
                // in all copies or substantial portions of the Software.
                //
                // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                // USE OR OTHER DEALINGS IN THE SOFTWARE.
                "use strict";
                /*<replacement>*/ var Buffer = require("safe-buffer").Buffer;
                /*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
                    encoding = "" + encoding;
                    switch(encoding && encoding.toLowerCase()){
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                        case "raw":
                            return true;
                        default:
                            return false;
                    }
                };
                function _normalizeEncoding(enc) {
                    if (!enc) return "utf8";
                    var retried;
                    while(true)switch(enc){
                        case "utf8":
                        case "utf-8":
                            return "utf8";
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return "utf16le";
                        case "latin1":
                        case "binary":
                            return "latin1";
                        case "base64":
                        case "ascii":
                        case "hex":
                            return enc;
                        default:
                            if (retried) return; // undefined
                            enc = ("" + enc).toLowerCase();
                            retried = true;
                    }
                }
                // modules monkey-patch it to support additional encodings
                function normalizeEncoding(enc) {
                    var nenc = _normalizeEncoding(enc);
                    if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
                    return nenc || enc;
                } // StringDecoder provides an interface for efficiently splitting a series of
                // buffers into a series of JS strings without breaking apart multi-byte
                // characters.
                exports.StringDecoder = StringDecoder;
                function StringDecoder(encoding) {
                    this.encoding = normalizeEncoding(encoding);
                    var nb;
                    switch(this.encoding){
                        case "utf16le":
                            this.text = utf16Text;
                            this.end = utf16End;
                            nb = 4;
                            break;
                        case "utf8":
                            this.fillLast = utf8FillLast;
                            nb = 4;
                            break;
                        case "base64":
                            this.text = base64Text;
                            this.end = base64End;
                            nb = 3;
                            break;
                        default:
                            this.write = simpleWrite;
                            this.end = simpleEnd;
                            return;
                    }
                    this.lastNeed = 0;
                    this.lastTotal = 0;
                    this.lastChar = Buffer.allocUnsafe(nb);
                }
                StringDecoder.prototype.write = function(buf) {
                    if (buf.length === 0) return "";
                    var r;
                    var i;
                    if (this.lastNeed) {
                        r = this.fillLast(buf);
                        if (r === undefined) return "";
                        i = this.lastNeed;
                        this.lastNeed = 0;
                    } else i = 0;
                    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
                    return r || "";
                };
                StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer
                StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
                StringDecoder.prototype.fillLast = function(buf) {
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
                        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    }
                    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
                    this.lastNeed -= buf.length;
                }; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
                // continuation byte. If an invalid byte is detected, -2 is returned.
                function utf8CheckByte(_byte) {
                    if (_byte <= 0x7F) return 0;
                    else if (_byte >> 5 === 0x06) return 2;
                    else if (_byte >> 4 === 0x0E) return 3;
                    else if (_byte >> 3 === 0x1E) return 4;
                    return _byte >> 6 === 0x02 ? -1 : -2;
                } // Checks at most 3 bytes at the end of a Buffer in order to detect an
                // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
                // needed to complete the UTF-8 character (if applicable) are returned.
                function utf8CheckIncomplete(self, buf, i) {
                    var j = buf.length - 1;
                    if (j < i) return 0;
                    var nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) self.lastNeed = nb - 1;
                        return nb;
                    }
                    if (--j < i || nb === -2) return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) self.lastNeed = nb - 2;
                        return nb;
                    }
                    if (--j < i || nb === -2) return 0;
                    nb = utf8CheckByte(buf[j]);
                    if (nb >= 0) {
                        if (nb > 0) {
                            if (nb === 2) nb = 0;
                            else self.lastNeed = nb - 3;
                        }
                        return nb;
                    }
                    return 0;
                } // Validates as many continuation bytes for a multi-byte UTF-8 character as
                // needed or are available. If we see a non-continuation byte where we expect
                // one, we "replace" the validated continuation bytes we've seen so far with
                // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
                // behavior. The continuation byte check is included three times in the case
                // where all of the continuation bytes for a character exist in the same buffer.
                // It is also done this way as a slight performance increase instead of using a
                // loop.
                function utf8CheckExtraBytes(self, buf, p) {
                    if ((buf[0] & 0xC0) !== 0x80) {
                        self.lastNeed = 0;
                        return "\uFFFD";
                    }
                    if (self.lastNeed > 1 && buf.length > 1) {
                        if ((buf[1] & 0xC0) !== 0x80) {
                            self.lastNeed = 1;
                            return "\uFFFD";
                        }
                        if (self.lastNeed > 2 && buf.length > 2) {
                            if ((buf[2] & 0xC0) !== 0x80) {
                                self.lastNeed = 2;
                                return "\uFFFD";
                            }
                        }
                    }
                } // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
                function utf8FillLast(buf) {
                    var p = this.lastTotal - this.lastNeed;
                    var r = utf8CheckExtraBytes(this, buf, p);
                    if (r !== undefined) return r;
                    if (this.lastNeed <= buf.length) {
                        buf.copy(this.lastChar, p, 0, this.lastNeed);
                        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
                    }
                    buf.copy(this.lastChar, p, 0, buf.length);
                    this.lastNeed -= buf.length;
                } // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
                // partial character, the character's bytes are buffered until the required
                // number of bytes are available.
                function utf8Text(buf, i) {
                    var total = utf8CheckIncomplete(this, buf, i);
                    if (!this.lastNeed) return buf.toString("utf8", i);
                    this.lastTotal = total;
                    var end = buf.length - (total - this.lastNeed);
                    buf.copy(this.lastChar, 0, end);
                    return buf.toString("utf8", i, end);
                } // For UTF-8, a replacement character is added when ending on a partial
                // character.
                function utf8End(buf) {
                    var r = buf && buf.length ? this.write(buf) : "";
                    if (this.lastNeed) return r + "\uFFFD";
                    return r;
                } // UTF-16LE typically needs two bytes per character, but even if we have an even
                // number of bytes available, we need to check if we end on a leading/high
                // surrogate. In that case, we need to wait for the next two bytes in order to
                // decode the last character properly.
                function utf16Text(buf, i) {
                    if ((buf.length - i) % 2 === 0) {
                        var r = buf.toString("utf16le", i);
                        if (r) {
                            var c = r.charCodeAt(r.length - 1);
                            if (c >= 0xD800 && c <= 0xDBFF) {
                                this.lastNeed = 2;
                                this.lastTotal = 4;
                                this.lastChar[0] = buf[buf.length - 2];
                                this.lastChar[1] = buf[buf.length - 1];
                                return r.slice(0, -1);
                            }
                        }
                        return r;
                    }
                    this.lastNeed = 1;
                    this.lastTotal = 2;
                    this.lastChar[0] = buf[buf.length - 1];
                    return buf.toString("utf16le", i, buf.length - 1);
                } // For UTF-16LE we do not explicitly append special replacement characters if we
                // end on a partial character, we simply let v8 handle that.
                function utf16End(buf) {
                    var r = buf && buf.length ? this.write(buf) : "";
                    if (this.lastNeed) {
                        var end = this.lastTotal - this.lastNeed;
                        return r + this.lastChar.toString("utf16le", 0, end);
                    }
                    return r;
                }
                function base64Text(buf, i) {
                    var n = (buf.length - i) % 3;
                    if (n === 0) return buf.toString("base64", i);
                    this.lastNeed = 3 - n;
                    this.lastTotal = 3;
                    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
                    else {
                        this.lastChar[0] = buf[buf.length - 2];
                        this.lastChar[1] = buf[buf.length - 1];
                    }
                    return buf.toString("base64", i, buf.length - n);
                }
                function base64End(buf) {
                    var r = buf && buf.length ? this.write(buf) : "";
                    if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
                    return r;
                } // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
                function simpleWrite(buf) {
                    return buf.toString(this.encoding);
                }
                function simpleEnd(buf) {
                    return buf && buf.length ? this.write(buf) : "";
                }
            },
            {
                "safe-buffer": 174
            }
        ],
        200: [
            function(require, module, exports) {
                (function(global) {
                    (function() {
                        /**
           * Module exports.
           */ module.exports = deprecate;
                        /**
           * Mark that a method should not be used.
           * Returns a modified function which warns once by default.
           *
           * If `localStorage.noDeprecation = true` is set, then it is a no-op.
           *
           * If `localStorage.throwDeprecation = true` is set, then deprecated functions
           * will throw an Error when invoked.
           *
           * If `localStorage.traceDeprecation = true` is set, then deprecated functions
           * will invoke `console.trace()` instead of `console.error()`.
           *
           * @param {Function} fn - the function to deprecate
           * @param {String} msg - the string to print to the console when `fn` is invoked
           * @returns {Function} a new "deprecated" version of `fn`
           * @api public
           */ function deprecate(fn, msg) {
                            if (config("noDeprecation")) return fn;
                            var warned = false;
                            function deprecated() {
                                if (!warned) {
                                    if (config("throwDeprecation")) throw new Error(msg);
                                    else if (config("traceDeprecation")) console.trace(msg);
                                    else console.warn(msg);
                                    warned = true;
                                }
                                return fn.apply(this, arguments);
                            }
                            return deprecated;
                        }
                        /**
           * Checks `localStorage` for boolean values for the given `name`.
           *
           * @param {String} name
           * @returns {Boolean}
           * @api private
           */ function config(name) {
                            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
                            try {
                                if (!global.localStorage) return false;
                            } catch (_) {
                                return false;
                            }
                            var val = global.localStorage[name];
                            if (null == val) return false;
                            return String(val).toLowerCase() === "true";
                        }
                    }).call(this);
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {}
        ],
        201: [
            function(require, module, exports) {
                module.exports = function isBuffer(arg) {
                    return arg && _typeof(arg) === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
                };
            },
            {}
        ],
        202: [
            function(require, module, exports) {
                // Currently in sync with Node.js lib/internal/util/types.js
                // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
                "use strict";
                var isArgumentsObject = require("is-arguments");
                var isGeneratorFunction = require("is-generator-function");
                var whichTypedArray = require("which-typed-array");
                var isTypedArray = require("is-typed-array");
                function uncurryThis(f) {
                    return f.call.bind(f);
                }
                var BigIntSupported = typeof BigInt !== "undefined";
                var SymbolSupported = typeof Symbol !== "undefined";
                var ObjectToString = uncurryThis(Object.prototype.toString);
                var numberValue = uncurryThis(Number.prototype.valueOf);
                var stringValue = uncurryThis(String.prototype.valueOf);
                var booleanValue = uncurryThis(Boolean.prototype.valueOf);
                if (BigIntSupported) var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
                if (SymbolSupported) var symbolValue = uncurryThis(Symbol.prototype.valueOf);
                function checkBoxedPrimitive(value, prototypeValueOf) {
                    if (_typeof(value) !== "object") return false;
                    try {
                        prototypeValueOf(value);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }
                exports.isArgumentsObject = isArgumentsObject;
                exports.isGeneratorFunction = isGeneratorFunction;
                exports.isTypedArray = isTypedArray; // Taken from here and modified for better browser support
                // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
                function isPromise(input) {
                    return typeof Promise !== "undefined" && input instanceof Promise || input !== null && _typeof(input) === "object" && typeof input.then === "function" && typeof input["catch"] === "function";
                }
                exports.isPromise = isPromise;
                function isArrayBufferView(value) {
                    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) return ArrayBuffer.isView(value);
                    return isTypedArray(value) || isDataView(value);
                }
                exports.isArrayBufferView = isArrayBufferView;
                function isUint8Array(value) {
                    return whichTypedArray(value) === "Uint8Array";
                }
                exports.isUint8Array = isUint8Array;
                function isUint8ClampedArray(value) {
                    return whichTypedArray(value) === "Uint8ClampedArray";
                }
                exports.isUint8ClampedArray = isUint8ClampedArray;
                function isUint16Array(value) {
                    return whichTypedArray(value) === "Uint16Array";
                }
                exports.isUint16Array = isUint16Array;
                function isUint32Array(value) {
                    return whichTypedArray(value) === "Uint32Array";
                }
                exports.isUint32Array = isUint32Array;
                function isInt8Array(value) {
                    return whichTypedArray(value) === "Int8Array";
                }
                exports.isInt8Array = isInt8Array;
                function isInt16Array(value) {
                    return whichTypedArray(value) === "Int16Array";
                }
                exports.isInt16Array = isInt16Array;
                function isInt32Array(value) {
                    return whichTypedArray(value) === "Int32Array";
                }
                exports.isInt32Array = isInt32Array;
                function isFloat32Array(value) {
                    return whichTypedArray(value) === "Float32Array";
                }
                exports.isFloat32Array = isFloat32Array;
                function isFloat64Array(value) {
                    return whichTypedArray(value) === "Float64Array";
                }
                exports.isFloat64Array = isFloat64Array;
                function isBigInt64Array(value) {
                    return whichTypedArray(value) === "BigInt64Array";
                }
                exports.isBigInt64Array = isBigInt64Array;
                function isBigUint64Array(value) {
                    return whichTypedArray(value) === "BigUint64Array";
                }
                exports.isBigUint64Array = isBigUint64Array;
                function isMapToString(value) {
                    return ObjectToString(value) === "[object Map]";
                }
                isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());
                function isMap(value) {
                    if (typeof Map === "undefined") return false;
                    return isMapToString.working ? isMapToString(value) : value instanceof Map;
                }
                exports.isMap = isMap;
                function isSetToString(value) {
                    return ObjectToString(value) === "[object Set]";
                }
                isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
                function isSet(value) {
                    if (typeof Set === "undefined") return false;
                    return isSetToString.working ? isSetToString(value) : value instanceof Set;
                }
                exports.isSet = isSet;
                function isWeakMapToString(value) {
                    return ObjectToString(value) === "[object WeakMap]";
                }
                isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
                function isWeakMap(value) {
                    if (typeof WeakMap === "undefined") return false;
                    return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
                }
                exports.isWeakMap = isWeakMap;
                function isWeakSetToString(value) {
                    return ObjectToString(value) === "[object WeakSet]";
                }
                isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
                function isWeakSet(value) {
                    return isWeakSetToString(value);
                }
                exports.isWeakSet = isWeakSet;
                function isArrayBufferToString(value) {
                    return ObjectToString(value) === "[object ArrayBuffer]";
                }
                isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
                function isArrayBuffer(value) {
                    if (typeof ArrayBuffer === "undefined") return false;
                    return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
                }
                exports.isArrayBuffer = isArrayBuffer;
                function isDataViewToString(value) {
                    return ObjectToString(value) === "[object DataView]";
                }
                isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
                function isDataView(value) {
                    if (typeof DataView === "undefined") return false;
                    return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
                }
                exports.isDataView = isDataView; // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
                var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : undefined;
                function isSharedArrayBufferToString(value) {
                    return ObjectToString(value) === "[object SharedArrayBuffer]";
                }
                function isSharedArrayBuffer(value) {
                    if (typeof SharedArrayBufferCopy === "undefined") return false;
                    if (typeof isSharedArrayBufferToString.working === "undefined") isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
                    return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
                }
                exports.isSharedArrayBuffer = isSharedArrayBuffer;
                function isAsyncFunction(value) {
                    return ObjectToString(value) === "[object AsyncFunction]";
                }
                exports.isAsyncFunction = isAsyncFunction;
                function isMapIterator(value) {
                    return ObjectToString(value) === "[object Map Iterator]";
                }
                exports.isMapIterator = isMapIterator;
                function isSetIterator(value) {
                    return ObjectToString(value) === "[object Set Iterator]";
                }
                exports.isSetIterator = isSetIterator;
                function isGeneratorObject(value) {
                    return ObjectToString(value) === "[object Generator]";
                }
                exports.isGeneratorObject = isGeneratorObject;
                function isWebAssemblyCompiledModule(value) {
                    return ObjectToString(value) === "[object WebAssembly.Module]";
                }
                exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
                function isNumberObject(value) {
                    return checkBoxedPrimitive(value, numberValue);
                }
                exports.isNumberObject = isNumberObject;
                function isStringObject(value) {
                    return checkBoxedPrimitive(value, stringValue);
                }
                exports.isStringObject = isStringObject;
                function isBooleanObject(value) {
                    return checkBoxedPrimitive(value, booleanValue);
                }
                exports.isBooleanObject = isBooleanObject;
                function isBigIntObject(value) {
                    return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
                }
                exports.isBigIntObject = isBigIntObject;
                function isSymbolObject(value) {
                    return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
                }
                exports.isSymbolObject = isSymbolObject;
                function isBoxedPrimitive(value) {
                    return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
                }
                exports.isBoxedPrimitive = isBoxedPrimitive;
                function isAnyArrayBuffer(value) {
                    return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
                }
                exports.isAnyArrayBuffer = isAnyArrayBuffer;
                [
                    "isProxy",
                    "isExternal",
                    "isModuleNamespaceObject"
                ].forEach(function(method) {
                    Object.defineProperty(exports, method, {
                        enumerable: false,
                        value: function value() {
                            throw new Error(method + " is not supported in userland");
                        }
                    });
                });
            },
            {
                "is-arguments": 144,
                "is-generator-function": 145,
                "is-typed-array": 146,
                "which-typed-array": 204
            }
        ],
        203: [
            function(require, module, exports) {
                (function(process) {
                    (function() {
                        // Copyright Joyent, Inc. and other Node contributors.
                        //
                        // Permission is hereby granted, free of charge, to any person obtaining a
                        // copy of this software and associated documentation files (the
                        // "Software"), to deal in the Software without restriction, including
                        // without limitation the rights to use, copy, modify, merge, publish,
                        // distribute, sublicense, and/or sell copies of the Software, and to permit
                        // persons to whom the Software is furnished to do so, subject to the
                        // following conditions:
                        //
                        // The above copyright notice and this permission notice shall be included
                        // in all copies or substantial portions of the Software.
                        //
                        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
                        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
                        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
                        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
                        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
                        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
                        // USE OR OTHER DEALINGS IN THE SOFTWARE.
                        var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
                            var keys = Object.keys(obj);
                            var descriptors = {};
                            for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
                            return descriptors;
                        };
                        var formatRegExp = /%[sdj%]/g;
                        exports.format = function(f) {
                            if (!isString(f)) {
                                var objects = [];
                                for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
                                return objects.join(" ");
                            }
                            var i = 1;
                            var args = arguments;
                            var len = args.length;
                            var str = String(f).replace(formatRegExp, function(x) {
                                if (x === "%%") return "%";
                                if (i >= len) return x;
                                switch(x){
                                    case "%s":
                                        return String(args[i++]);
                                    case "%d":
                                        return Number(args[i++]);
                                    case "%j":
                                        try {
                                            return JSON.stringify(args[i++]);
                                        } catch (_) {
                                            return "[Circular]";
                                        }
                                    default:
                                        return x;
                                }
                            });
                            for(var x3 = args[i]; i < len; x3 = args[++i])if (isNull(x3) || !isObject(x3)) str += " " + x3;
                            else str += " " + inspect(x3);
                            return str;
                        }; // Mark that a method should not be used.
                        // Returns a modified function which warns once by default.
                        // If --no-deprecation is set, then it is a no-op.
                        exports.deprecate = function(fn, msg) {
                            if (typeof process !== "undefined" && process.noDeprecation === true) return fn;
                             // Allow for deprecating things in the process of starting up.
                            if (typeof process === "undefined") return function() {
                                return exports.deprecate(fn, msg).apply(this, arguments);
                            };
                            var warned = false;
                            function deprecated() {
                                if (!warned) {
                                    if (process.throwDeprecation) throw new Error(msg);
                                    else if (process.traceDeprecation) console.trace(msg);
                                    else console.error(msg);
                                    warned = true;
                                }
                                return fn.apply(this, arguments);
                            }
                            return deprecated;
                        };
                        var debugs = {};
                        var debugEnvRegex = /^$/;
                        if (process.env.NODE_DEBUG) {
                            var debugEnv = process.env.NODE_DEBUG;
                            debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
                            debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
                        }
                        exports.debuglog = function(set) {
                            set = set.toUpperCase();
                            if (!debugs[set]) {
                                if (debugEnvRegex.test(set)) {
                                    var pid = process.pid;
                                    debugs[set] = function() {
                                        var msg = exports.format.apply(exports, arguments);
                                        console.error("%s %d: %s", set, pid, msg);
                                    };
                                } else debugs[set] = function() {};
                            }
                            return debugs[set];
                        };
                        /**
           * Echos the value of a value. Trys to print the value out
           * in the best way possible given the different types.
           *
           * @param {Object} obj The object to print out.
           * @param {Object} opts Optional options object that alters the output.
           */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
                            // default options
                            var ctx = {
                                seen: [],
                                stylize: stylizeNoColor
                            }; // legacy...
                            if (arguments.length >= 3) ctx.depth = arguments[2];
                            if (arguments.length >= 4) ctx.colors = arguments[3];
                            if (isBoolean(opts)) // legacy...
                            ctx.showHidden = opts;
                            else if (opts) // got an "options" object
                            exports._extend(ctx, opts);
                             // set default options
                            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                            if (isUndefined(ctx.depth)) ctx.depth = 2;
                            if (isUndefined(ctx.colors)) ctx.colors = false;
                            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                            if (ctx.colors) ctx.stylize = stylizeWithColor;
                            return formatValue(ctx, obj, ctx.depth);
                        }
                        exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
                        inspect.colors = {
                            "bold": [
                                1,
                                22
                            ],
                            "italic": [
                                3,
                                23
                            ],
                            "underline": [
                                4,
                                24
                            ],
                            "inverse": [
                                7,
                                27
                            ],
                            "white": [
                                37,
                                39
                            ],
                            "grey": [
                                90,
                                39
                            ],
                            "black": [
                                30,
                                39
                            ],
                            "blue": [
                                34,
                                39
                            ],
                            "cyan": [
                                36,
                                39
                            ],
                            "green": [
                                32,
                                39
                            ],
                            "magenta": [
                                35,
                                39
                            ],
                            "red": [
                                31,
                                39
                            ],
                            "yellow": [
                                33,
                                39
                            ]
                        }; // Don't use 'blue' not visible on cmd.exe
                        inspect.styles = {
                            "special": "cyan",
                            "number": "yellow",
                            "boolean": "yellow",
                            "undefined": "grey",
                            "null": "bold",
                            "string": "green",
                            "date": "magenta",
                            // "name": intentionally not styling
                            "regexp": "red"
                        };
                        function stylizeWithColor(str, styleType) {
                            var style = inspect.styles[styleType];
                            if (style) return "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m";
                            else return str;
                        }
                        function stylizeNoColor(str, styleType) {
                            return str;
                        }
                        function arrayToHash(array) {
                            var hash = {};
                            array.forEach(function(val, idx) {
                                hash[val] = true;
                            });
                            return hash;
                        }
                        function formatValue(ctx, value, recurseTimes) {
                            // Provide a hook for user-specified inspect functions.
                            // Check that value is an object with an inspect function on it
                            if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
                                var ret = value.inspect(recurseTimes, ctx);
                                if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
                                return ret;
                            } // Primitive types cannot have properties
                            var primitive = formatPrimitive(ctx, value);
                            if (primitive) return primitive;
                             // Look up the keys of the object.
                            var keys = Object.keys(value);
                            var visibleKeys = arrayToHash(keys);
                            if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
                             // IE doesn't make error fields non-enumerable
                            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
                            if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
                             // Some type of object without properties can be shortcutted.
                            if (keys.length === 0) {
                                if (isFunction(value)) {
                                    var name = value.name ? ": " + value.name : "";
                                    return ctx.stylize("[Function" + name + "]", "special");
                                }
                                if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                                if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
                                if (isError(value)) return formatError(value);
                            }
                            var base = "", array = false, braces = [
                                "{",
                                "}"
                            ]; // Make Array say that they are Array
                            if (isArray(value)) {
                                array = true;
                                braces = [
                                    "[",
                                    "]"
                                ];
                            } // Make functions say that they are functions
                            if (isFunction(value)) {
                                var n = value.name ? ": " + value.name : "";
                                base = " [Function" + n + "]";
                            } // Make RegExps say that they are RegExps
                            if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
                             // Make dates with properties first say the date
                            if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
                             // Make error with message first say the error
                            if (isError(value)) base = " " + formatError(value);
                            if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
                            if (recurseTimes < 0) {
                                if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                                else return ctx.stylize("[Object]", "special");
                            }
                            ctx.seen.push(value);
                            var output;
                            if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                            else output = keys.map(function(key) {
                                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                            });
                            ctx.seen.pop();
                            return reduceToSingleString(output, base, braces);
                        }
                        function formatPrimitive(ctx, value) {
                            if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
                            if (isString(value)) {
                                var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                                return ctx.stylize(simple, "string");
                            }
                            if (isNumber(value)) return ctx.stylize("" + value, "number");
                            if (isBoolean(value)) return ctx.stylize("" + value, "boolean"); // For some reason typeof null is "object", so special case here.
                            if (isNull(value)) return ctx.stylize("null", "null");
                        }
                        function formatError(value) {
                            return "[" + Error.prototype.toString.call(value) + "]";
                        }
                        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                            var output = [];
                            for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                            else output.push("");
                            keys.forEach(function(key) {
                                if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                            });
                            return output;
                        }
                        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                            var name, str, desc;
                            desc = Object.getOwnPropertyDescriptor(value, key) || {
                                value: value[key]
                            };
                            if (desc.get) {
                                if (desc.set) str = ctx.stylize("[Getter/Setter]", "special");
                                else str = ctx.stylize("[Getter]", "special");
                            } else if (desc.set) str = ctx.stylize("[Setter]", "special");
                            if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
                            if (!str) {
                                if (ctx.seen.indexOf(desc.value) < 0) {
                                    if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
                                    else str = formatValue(ctx, desc.value, recurseTimes - 1);
                                    if (str.indexOf("\n") > -1) {
                                        if (array) str = str.split("\n").map(function(line) {
                                            return "  " + line;
                                        }).join("\n").substr(2);
                                        else str = "\n" + str.split("\n").map(function(line) {
                                            return "   " + line;
                                        }).join("\n");
                                    }
                                } else str = ctx.stylize("[Circular]", "special");
                            }
                            if (isUndefined(name)) {
                                if (array && key.match(/^\d+$/)) return str;
                                name = JSON.stringify("" + key);
                                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                                    name = name.substr(1, name.length - 2);
                                    name = ctx.stylize(name, "name");
                                } else {
                                    name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                                    name = ctx.stylize(name, "string");
                                }
                            }
                            return name + ": " + str;
                        }
                        function reduceToSingleString(output, base, braces) {
                            var numLinesEst = 0;
                            var length = output.reduce(function(prev, cur) {
                                numLinesEst++;
                                if (cur.indexOf("\n") >= 0) numLinesEst++;
                                return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
                            }, 0);
                            if (length > 60) return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
                            return braces[0] + base + " " + output.join(", ") + " " + braces[1];
                        } // NOTE: These type checking functions intentionally don't use `instanceof`
                        // because it is fragile and can be easily faked with `Object.create()`.
                        exports.types = require("./support/types");
                        function isArray(ar) {
                            return Array.isArray(ar);
                        }
                        exports.isArray = isArray;
                        function isBoolean(arg) {
                            return typeof arg === "boolean";
                        }
                        exports.isBoolean = isBoolean;
                        function isNull(arg) {
                            return arg === null;
                        }
                        exports.isNull = isNull;
                        function isNullOrUndefined(arg) {
                            return arg == null;
                        }
                        exports.isNullOrUndefined = isNullOrUndefined;
                        function isNumber(arg) {
                            return typeof arg === "number";
                        }
                        exports.isNumber = isNumber;
                        function isString(arg) {
                            return typeof arg === "string";
                        }
                        exports.isString = isString;
                        function isSymbol(arg) {
                            return _typeof(arg) === "symbol";
                        }
                        exports.isSymbol = isSymbol;
                        function isUndefined(arg) {
                            return arg === void 0;
                        }
                        exports.isUndefined = isUndefined;
                        function isRegExp(re) {
                            return isObject(re) && objectToString(re) === "[object RegExp]";
                        }
                        exports.isRegExp = isRegExp;
                        exports.types.isRegExp = isRegExp;
                        function isObject(arg) {
                            return _typeof(arg) === "object" && arg !== null;
                        }
                        exports.isObject = isObject;
                        function isDate(d) {
                            return isObject(d) && objectToString(d) === "[object Date]";
                        }
                        exports.isDate = isDate;
                        exports.types.isDate = isDate;
                        function isError(e) {
                            return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
                        }
                        exports.isError = isError;
                        exports.types.isNativeError = isError;
                        function isFunction(arg) {
                            return typeof arg === "function";
                        }
                        exports.isFunction = isFunction;
                        function isPrimitive(arg) {
                            return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || _typeof(arg) === "symbol" || typeof arg === "undefined";
                        }
                        exports.isPrimitive = isPrimitive;
                        exports.isBuffer = require("./support/isBuffer");
                        function objectToString(o) {
                            return Object.prototype.toString.call(o);
                        }
                        function pad(n) {
                            return n < 10 ? "0" + n.toString(10) : n.toString(10);
                        }
                        var months = [
                            "Jan",
                            "Feb",
                            "Mar",
                            "Apr",
                            "May",
                            "Jun",
                            "Jul",
                            "Aug",
                            "Sep",
                            "Oct",
                            "Nov",
                            "Dec"
                        ]; // 26 Feb 16:19:34
                        function timestamp() {
                            var d = new Date();
                            var time = [
                                pad(d.getHours()),
                                pad(d.getMinutes()),
                                pad(d.getSeconds())
                            ].join(":");
                            return [
                                d.getDate(),
                                months[d.getMonth()],
                                time
                            ].join(" ");
                        } // log is just a thin wrapper to console.log that prepends a timestamp
                        exports.log = function() {
                            console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
                        };
                        /**
           * Inherit the prototype methods from one constructor into another.
           *
           * The Function.prototype.inherits from lang.js rewritten as a standalone
           * function (not on Function.prototype). NOTE: If this file is to be loaded
           * during bootstrapping this function needs to be rewritten using some native
           * functions as prototype setup using normal JavaScript does not work as
           * expected during bootstrapping (see mirror.js in r114903).
           *
           * @param {function} ctor Constructor function which needs to inherit the
           *     prototype.
           * @param {function} superCtor Constructor function to inherit prototype from.
           */ exports.inherits = require("inherits");
                        exports._extend = function(origin, add) {
                            // Don't do anything if add isn't an object
                            if (!add || !isObject(add)) return origin;
                            var keys = Object.keys(add);
                            var i = keys.length;
                            while(i--)origin[keys[i]] = add[keys[i]];
                            return origin;
                        };
                        function hasOwnProperty(obj, prop) {
                            return Object.prototype.hasOwnProperty.call(obj, prop);
                        }
                        var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
                        exports.promisify = function promisify(original) {
                            if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
                            if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
                                var fn = original[kCustomPromisifiedSymbol];
                                if (typeof fn !== "function") throw new TypeError('The "util.promisify.custom" argument must be of type Function');
                                Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                                    value: fn,
                                    enumerable: false,
                                    writable: false,
                                    configurable: true
                                });
                                return fn;
                            }
                            function fn() {
                                var promiseResolve, promiseReject;
                                var promise = new Promise(function(resolve, reject) {
                                    promiseResolve = resolve;
                                    promiseReject = reject;
                                });
                                var args = [];
                                for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
                                args.push(function(err, value) {
                                    if (err) promiseReject(err);
                                    else promiseResolve(value);
                                });
                                try {
                                    original.apply(this, args);
                                } catch (err) {
                                    promiseReject(err);
                                }
                                return promise;
                            }
                            Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
                            if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                                value: fn,
                                enumerable: false,
                                writable: false,
                                configurable: true
                            });
                            return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
                        };
                        exports.promisify.custom = kCustomPromisifiedSymbol;
                        function callbackifyOnRejected(reason, cb) {
                            // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
                            // Because `null` is a special error value in callbacks which means "no error
                            // occurred", we error-wrap so the callback consumer can distinguish between
                            // "the promise rejected with null" or "the promise fulfilled with undefined".
                            if (!reason) {
                                var newReason = new Error("Promise was rejected with a falsy value");
                                newReason.reason = reason;
                                reason = newReason;
                            }
                            return cb(reason);
                        }
                        function callbackify(original) {
                            if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
                             // We DO NOT return the promise as it gives the user a false sense that
                            // the promise is actually somehow related to the callback's execution
                            // and that the callback throwing will reject the promise.
                            function callbackified() {
                                var args = [];
                                for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
                                var maybeCb = args.pop();
                                if (typeof maybeCb !== "function") throw new TypeError("The last argument must be of type Function");
                                var self = this;
                                var cb = function cb() {
                                    return maybeCb.apply(self, arguments);
                                }; // In true node style we process the callback on `nextTick` with all the
                                // implications (stack, `uncaughtException`, `async_hooks`)
                                original.apply(this, args).then(function(ret) {
                                    process.nextTick(cb.bind(null, null, ret));
                                }, function(rej) {
                                    process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
                                });
                            }
                            Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
                            Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
                            return callbackified;
                        }
                        exports.callbackify = callbackify;
                    }).call(this);
                }).call(this, require("_process"));
            },
            {
                "./support/isBuffer": 201,
                "./support/types": 202,
                "_process": 163,
                "inherits": 143
            }
        ],
        204: [
            function(require, module, exports) {
                (function(global) {
                    (function() {
                        "use strict";
                        var forEach = require("foreach");
                        var availableTypedArrays = require("available-typed-arrays");
                        var callBound = require("call-bind/callBound");
                        var $toString = callBound("Object.prototype.toString");
                        var hasToStringTag = require("has-tostringtag/shams")();
                        var g = typeof globalThis === "undefined" ? global : globalThis;
                        var typedArrays = availableTypedArrays();
                        var $slice = callBound("String.prototype.slice");
                        var toStrTags = {};
                        var gOPD = require("es-abstract/helpers/getOwnPropertyDescriptor");
                        var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
                        if (hasToStringTag && gOPD && getPrototypeOf) forEach(typedArrays, function(typedArray) {
                            if (typeof g[typedArray] === "function") {
                                var arr = new g[typedArray]();
                                if (Symbol.toStringTag in arr) {
                                    var proto = getPrototypeOf(arr);
                                    var descriptor = gOPD(proto, Symbol.toStringTag);
                                    if (!descriptor) {
                                        var superProto = getPrototypeOf(proto);
                                        descriptor = gOPD(superProto, Symbol.toStringTag);
                                    }
                                    toStrTags[typedArray] = descriptor.get;
                                }
                            }
                        });
                        var tryTypedArrays = function tryAllTypedArrays(value) {
                            var foundName = false;
                            forEach(toStrTags, function(getter, typedArray) {
                                if (!foundName) try {
                                    var name = getter.call(value);
                                    if (name === typedArray) foundName = name;
                                } catch (e) {}
                            });
                            return foundName;
                        };
                        var isTypedArray = require("is-typed-array");
                        module.exports = function whichTypedArray(value) {
                            if (!isTypedArray(value)) return false;
                            if (!hasToStringTag || !(Symbol.toStringTag in value)) return $slice($toString(value), 8, -1);
                            return tryTypedArrays(value);
                        };
                    }).call(this);
                }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "available-typed-arrays": 16,
                "call-bind/callBound": 64,
                "es-abstract/helpers/getOwnPropertyDescriptor": 102,
                "foreach": 105,
                "has-tostringtag/shams": 111,
                "is-typed-array": 146
            }
        ],
        205: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        exports.VerifiableMessage = exports.RequestBodyFactory = exports.PaymailNotFound = exports.PaymailClient = exports.Clock = exports.CapabilityCodes = exports.BrowserDns = void 0;
                        var _brfc = require("@moneybutton/brfc");
                        var _abortController = _interopRequireDefault(require("abort-controller"));
                        var _moment = _interopRequireDefault(require("moment"));
                        var _isomorphicFetch = _interopRequireDefault(require("isomorphic-fetch"));
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {
                                "default": obj
                            };
                        }
                        var CapabilityCodes = {
                            pki: "pki",
                            paymentDestination: "paymentDestination",
                            requestSenderValidation: (0, _brfc.brfc)("bsvalias Payment Addressing (Payer Validation)", [
                                "andy (nChain)"
                            ], ""),
                            verifyPublicKeyOwner: (0, _brfc.brfc)("bsvalias public key verify (Verify Public Key Owner)", [], ""),
                            publicProfile: (0, _brfc.brfc)("Public Profile (Name & Avatar)", [
                                "Ryan X. Charles (Money Button)"
                            ], "1"),
                            receiveTransaction: (0, _brfc.brfc)("Send raw transaction", [
                                "Miguel Duarte (Money Button)",
                                "Ryan X. Charles (Money Button)",
                                "Ivan Mlinaric (Handcash)",
                                "Rafa (Handcash)"
                            ], "1.1"),
                            p2pPaymentDestination: (0, _brfc.brfc)("Get no monitored payment destination (p2p payment destination)", [
                                "Miguel Duarte (Money Button)",
                                "Ryan X. Charles (Money Button)",
                                "Ivan Mlinaric (Handcash)",
                                "Rafa (Handcash)"
                            ], "1.1")
                        }; // import { DnsOverHttps } from "./dns-over-https"
                        exports.CapabilityCodes = CapabilityCodes;
                        var DnsClient1 = /*#__PURE__*/ function() {
                            function DnsClient(dns, doh) {
                                _classCallCheck2(this, DnsClient);
                                this.dns = dns;
                                this.doh = doh;
                            }
                            _createClass2(DnsClient, [
                                {
                                    key: "checkSrv",
                                    value: function() {
                                        var _checkSrv = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2(aDomain) {
                                            var _this3 = this;
                                            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                                                while(true)switch(_context2.prev = _context2.next){
                                                    case 0:
                                                        return _context2.abrupt("return", new Promise(function(resolve, reject) {
                                                            _this3.dns.resolveSrv("_bsvalias._tcp.".concat(aDomain), /*#__PURE__*/ function() {
                                                                var _ref = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee(err, result) {
                                                                    var _result$, domainFromDns, port, isSecure;
                                                                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                                                                        while(true)switch(_context.prev = _context.next){
                                                                            case 0:
                                                                                _context.prev = 0;
                                                                                if (!(err && (err.code === "ENODATA" || err.code === "ENOTFOUND"))) {
                                                                                    _context.next = 3;
                                                                                    break;
                                                                                }
                                                                                return _context.abrupt("return", resolve({
                                                                                    domain: aDomain,
                                                                                    port: 443,
                                                                                    isSecure: true
                                                                                }));
                                                                            case 3:
                                                                                if (!err) {
                                                                                    _context.next = 5;
                                                                                    break;
                                                                                }
                                                                                return _context.abrupt("return", reject(err));
                                                                            case 5:
                                                                                _result$ = result[0], domainFromDns = _result$.name, port = _result$.port, isSecure = _result$.isSecure;
                                                                                resolve({
                                                                                    domain: domainFromDns,
                                                                                    port: port,
                                                                                    isSecure: _this3.checkDomainIsSecure(domainFromDns, aDomain) || isSecure
                                                                                });
                                                                                _context.next = 12;
                                                                                break;
                                                                            case 9:
                                                                                _context.prev = 9;
                                                                                _context.t0 = _context["catch"](0);
                                                                                return _context.abrupt("return", reject(_context.t0));
                                                                            case 12:
                                                                            case "end":
                                                                                return _context.stop();
                                                                        }
                                                                    }, _callee, null, [
                                                                        [
                                                                            0,
                                                                            9
                                                                        ]
                                                                    ]);
                                                                }));
                                                                return function(_x3, _x4) {
                                                                    return _ref.apply(this, arguments);
                                                                };
                                                            }());
                                                        }).then(function(result) {
                                                            if (result.isSecure) return result;
                                                            else return _this3.validateDnssec(aDomain);
                                                        }, function(err) {
                                                            console.error(err);
                                                            return err;
                                                        }));
                                                    case 1:
                                                    case "end":
                                                        return _context2.stop();
                                                }
                                            }, _callee2);
                                        }));
                                        function checkSrv(_x2) {
                                            return _checkSrv.apply(this, arguments);
                                        }
                                        return checkSrv;
                                    }()
                                },
                                {
                                    key: "checkDomainIsSecure",
                                    value: function checkDomainIsSecure(srvResponseDomain, originalDomain) {
                                        if (this.domainsAreEqual(srvResponseDomain, originalDomain)) return true;
                                        else if (this.responseIsWwwSubdomain(srvResponseDomain, originalDomain)) return true;
                                        else if (this.isHandcashDomain(originalDomain)) // tell rafa to fix handcash and we can remove the special case :)
                                        return this.domainsAreEqual("handcash-paymail-production.herokuapp.com", srvResponseDomain) || this.domainsAreEqual("handcash-cloud-production.herokuapp.com", srvResponseDomain);
                                        else if (this.isHandcashInternalDomain(originalDomain)) return this.domainsAreEqual("handcash-cloud-staging.herokuapp.com", srvResponseDomain);
                                        else if (this.domainsAreEqual("localhost", srvResponseDomain)) return true;
                                        else if (this.isMoneyButtonDomain(srvResponseDomain)) return true;
                                        else return false;
                                    }
                                },
                                {
                                    key: "isMoneyButtonDomain",
                                    value: function isMoneyButtonDomain(aDomain) {
                                        return this.domainsAreEqual(aDomain, "moneybutton.com") || this.domainsAreEqual(aDomain, "www.moneybutton.com");
                                    }
                                },
                                {
                                    key: "responseIsWwwSubdomain",
                                    value: function responseIsWwwSubdomain(srvResponseDomain, originalDomain) {
                                        return this.domainsAreEqual(srvResponseDomain, "www.".concat(originalDomain));
                                    }
                                },
                                {
                                    key: "isHandcashDomain",
                                    value: function isHandcashDomain(aDomain) {
                                        return this.domainsAreEqual("handcash.io", aDomain);
                                    }
                                },
                                {
                                    key: "isHandcashInternalDomain",
                                    value: function isHandcashInternalDomain(aDomain) {
                                        return this.domainsAreEqual("internal.handcash.io", aDomain);
                                    }
                                },
                                {
                                    key: "validateDnssec",
                                    value: function() {
                                        var _validateDnssec = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee3(aDomain) {
                                            var dnsResponse, data, port, responseDomain;
                                            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                                                while(true)switch(_context3.prev = _context3.next){
                                                    case 0:
                                                        _context3.next = 2;
                                                        return this.doh.queryBsvaliasDomain(aDomain);
                                                    case 2:
                                                        dnsResponse = _context3.sent;
                                                        if (!(dnsResponse.Status !== 0 || !dnsResponse.Answer)) {
                                                            _context3.next = 5;
                                                            break;
                                                        }
                                                        throw new Error("Insecure domain.");
                                                    case 5:
                                                        data = dnsResponse.Answer[0].data.split(" ");
                                                        port = data[2];
                                                        responseDomain = data[3];
                                                        if (!(!dnsResponse.AD && !this.domainsAreEqual(aDomain, responseDomain))) {
                                                            _context3.next = 10;
                                                            break;
                                                        }
                                                        throw new Error("Insecure domain.");
                                                    case 10:
                                                        return _context3.abrupt("return", {
                                                            port: port,
                                                            domain: responseDomain,
                                                            isSecure: dnsResponse.AD
                                                        });
                                                    case 11:
                                                    case "end":
                                                        return _context3.stop();
                                                }
                                            }, _callee3, this);
                                        }));
                                        function validateDnssec(_x5) {
                                            return _validateDnssec.apply(this, arguments);
                                        }
                                        return validateDnssec;
                                    }()
                                },
                                {
                                    key: "domainsAreEqual",
                                    value: function domainsAreEqual(domain1, domain2) {
                                        return domain1.replace(/\.$/, "") === domain2.replace(/\.$/, "");
                                    }
                                }
                            ]);
                            return DnsClient;
                        }();
                        var DnsOverHttps1 = /*#__PURE__*/ function() {
                            function DnsOverHttps(fetch, config) {
                                _classCallCheck2(this, DnsOverHttps);
                                this.fetch = fetch;
                                this.config = config;
                            }
                            _createClass2(DnsOverHttps, [
                                {
                                    key: "resolveSrv",
                                    value: function() {
                                        var _resolveSrv = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee4(aDomain) {
                                            var response, body;
                                            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                                                while(true)switch(_context4.prev = _context4.next){
                                                    case 0:
                                                        _context4.next = 2;
                                                        return this.fetch("".concat(this.config.baseUrl, "?name=").concat(aDomain, "&type=SRV&cd=0"));
                                                    case 2:
                                                        response = _context4.sent;
                                                        _context4.next = 5;
                                                        return response.json();
                                                    case 5:
                                                        body = _context4.sent;
                                                        return _context4.abrupt("return", body);
                                                    case 7:
                                                    case "end":
                                                        return _context4.stop();
                                                }
                                            }, _callee4, this);
                                        }));
                                        function resolveSrv(_x6) {
                                            return _resolveSrv.apply(this, arguments);
                                        }
                                        return resolveSrv;
                                    }()
                                },
                                {
                                    key: "queryBsvaliasDomain",
                                    value: function() {
                                        var _queryBsvaliasDomain = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee5(aDomain) {
                                            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                                                while(true)switch(_context5.prev = _context5.next){
                                                    case 0:
                                                        return _context5.abrupt("return", this.resolveSrv("_bsvalias._tcp.".concat(aDomain)));
                                                    case 1:
                                                    case "end":
                                                        return _context5.stop();
                                                }
                                            }, _callee5, this);
                                        }));
                                        function queryBsvaliasDomain(_x7) {
                                            return _queryBsvaliasDomain.apply(this, arguments);
                                        }
                                        return queryBsvaliasDomain;
                                    }()
                                }
                            ]);
                            return DnsOverHttps;
                        }();
                        function ownKeys2(object, enumerableOnly) {
                            var keys = Object.keys(object);
                            if (Object.getOwnPropertySymbols) {
                                var symbols = Object.getOwnPropertySymbols(object);
                                enumerableOnly && (symbols = symbols.filter(function(sym) {
                                    return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                                })), keys.push.apply(keys, symbols);
                            }
                            return keys;
                        }
                        function _objectSpread2(target) {
                            for(var i = 1; i < arguments.length; i++){
                                var source = null != arguments[i] ? arguments[i] : {};
                                i % 2 ? ownKeys2(Object(source), !0).forEach(function(key) {
                                    _defineProperty(target, key, source[key]);
                                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
                                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                                });
                            }
                            return target;
                        }
                        function _defineProperty(obj, key, value) {
                            if (key in obj) Object.defineProperty(obj, key, {
                                value: value,
                                enumerable: true,
                                configurable: true,
                                writable: true
                            });
                            else obj[key] = value;
                            return obj;
                        }
                        var Http1 = /*#__PURE__*/ function() {
                            function Http(fetch) {
                                _classCallCheck2(this, Http);
                                this.fetch = fetch;
                            }
                            _createClass2(Http, [
                                {
                                    key: "get",
                                    value: function() {
                                        var _get = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee6(url) {
                                            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                                                while(true)switch(_context6.prev = _context6.next){
                                                    case 0:
                                                        return _context6.abrupt("return", this._basicRequest(url));
                                                    case 1:
                                                    case "end":
                                                        return _context6.stop();
                                                }
                                            }, _callee6, this);
                                        }));
                                        function get(_x8) {
                                            return _get.apply(this, arguments);
                                        }
                                        return get;
                                    }()
                                },
                                {
                                    key: "postJson",
                                    value: function() {
                                        var _postJson = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee7(url, body) {
                                            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                                                while(true)switch(_context7.prev = _context7.next){
                                                    case 0:
                                                        return _context7.abrupt("return", this._basicRequest(url, {
                                                            method: "POST",
                                                            headers: {
                                                                "Content-Type": "application/json"
                                                            },
                                                            body: JSON.stringify(body)
                                                        }));
                                                    case 1:
                                                    case "end":
                                                        return _context7.stop();
                                                }
                                            }, _callee7, this);
                                        }));
                                        function postJson(_x9, _x10) {
                                            return _postJson.apply(this, arguments);
                                        }
                                        return postJson;
                                    }()
                                },
                                {
                                    key: "_basicRequest",
                                    value: function() {
                                        var _basicRequest2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee8(url) {
                                            var options, controller, timer, _args8 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                                                while(true)switch(_context8.prev = _context8.next){
                                                    case 0:
                                                        options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};
                                                        controller = new _abortController["default"]();
                                                        timer = setTimeout(function() {
                                                            return controller.abort();
                                                        }, 30000);
                                                        return _context8.abrupt("return", this.fetch(url, _objectSpread2(_objectSpread2({}, options), {}, {
                                                            credentials: "omit",
                                                            signal: controller.signal
                                                        })).then(function(result) {
                                                            clearTimeout(timer);
                                                            return result;
                                                        }));
                                                    case 4:
                                                    case "end":
                                                        return _context8.stop();
                                                }
                                            }, _callee8, this);
                                        }));
                                        function _basicRequest(_x11) {
                                            return _basicRequest2.apply(this, arguments);
                                        }
                                        return _basicRequest;
                                    }()
                                }
                            ]);
                            return Http;
                        }();
                        var EndpointResolver1 = /*#__PURE__*/ function() {
                            function EndpointResolver() {
                                var dns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                                var fetch = arguments.length > 1 ? arguments[1] : undefined;
                                _classCallCheck2(this, EndpointResolver);
                                this.dnsClient = new DnsClient1(dns, new DnsOverHttps1(fetch, {
                                    baseUrl: "https://dns.google.com/resolve"
                                }));
                                this.http = new Http1(fetch);
                                this._cache = {};
                            }
                            _createClass2(EndpointResolver, [
                                {
                                    key: "getIdentityUrlFor",
                                    value: function() {
                                        var _getIdentityUrlFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee9(aPaymail) {
                                            var _aPaymail$split, _aPaymail$split2, alias, domain, apiDescriptor, identityUrl;
                                            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                                                while(true)switch(_context9.prev = _context9.next){
                                                    case 0:
                                                        _aPaymail$split = aPaymail.split("@"), _aPaymail$split2 = _slicedToArray(_aPaymail$split, 2), alias = _aPaymail$split2[0], domain = _aPaymail$split2[1];
                                                        _context9.next = 3;
                                                        return this.ensureCapabilityFor(domain, CapabilityCodes.pki);
                                                    case 3:
                                                        _context9.next = 5;
                                                        return this.getApiDescriptionFor(domain);
                                                    case 5:
                                                        apiDescriptor = _context9.sent;
                                                        identityUrl = apiDescriptor.capabilities.pki.replace("{alias}", alias).replace("{domain.tld}", domain);
                                                        return _context9.abrupt("return", identityUrl);
                                                    case 8:
                                                    case "end":
                                                        return _context9.stop();
                                                }
                                            }, _callee9, this);
                                        }));
                                        function getIdentityUrlFor(_x12) {
                                            return _getIdentityUrlFor.apply(this, arguments);
                                        }
                                        return getIdentityUrlFor;
                                    }()
                                },
                                {
                                    key: "getAddressUrlFor",
                                    value: function() {
                                        var _getAddressUrlFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee10(aPaymail) {
                                            var _aPaymail$split3, _aPaymail$split4, alias, domain, apiDescriptor, addressUrl;
                                            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                                                while(true)switch(_context10.prev = _context10.next){
                                                    case 0:
                                                        _aPaymail$split3 = aPaymail.split("@"), _aPaymail$split4 = _slicedToArray(_aPaymail$split3, 2), alias = _aPaymail$split4[0], domain = _aPaymail$split4[1];
                                                        _context10.next = 3;
                                                        return this.ensureCapabilityFor(domain, CapabilityCodes.paymentDestination);
                                                    case 3:
                                                        _context10.next = 5;
                                                        return this.getApiDescriptionFor(domain);
                                                    case 5:
                                                        apiDescriptor = _context10.sent;
                                                        addressUrl = apiDescriptor.capabilities.paymentDestination.replace("{alias}", alias).replace("{domain.tld}", domain);
                                                        return _context10.abrupt("return", addressUrl);
                                                    case 8:
                                                    case "end":
                                                        return _context10.stop();
                                                }
                                            }, _callee10, this);
                                        }));
                                        function getAddressUrlFor(_x13) {
                                            return _getAddressUrlFor.apply(this, arguments);
                                        }
                                        return getAddressUrlFor;
                                    }()
                                },
                                {
                                    key: "getVerifyUrlFor",
                                    value: function() {
                                        var _getVerifyUrlFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee11(aPaymail, aPubkey) {
                                            var _aPaymail$split5, _aPaymail$split6, alias, domain, apiDescriptor, url;
                                            return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                                                while(true)switch(_context11.prev = _context11.next){
                                                    case 0:
                                                        _aPaymail$split5 = aPaymail.split("@"), _aPaymail$split6 = _slicedToArray(_aPaymail$split5, 2), alias = _aPaymail$split6[0], domain = _aPaymail$split6[1];
                                                        _context11.next = 3;
                                                        return this.ensureCapabilityFor(domain, CapabilityCodes.verifyPublicKeyOwner);
                                                    case 3:
                                                        _context11.next = 5;
                                                        return this.getApiDescriptionFor(domain);
                                                    case 5:
                                                        apiDescriptor = _context11.sent;
                                                        url = apiDescriptor.capabilities[CapabilityCodes.verifyPublicKeyOwner].replace("{alias}", alias).replace("{domain.tld}", domain).replace("{pubkey}", aPubkey);
                                                        return _context11.abrupt("return", url);
                                                    case 8:
                                                    case "end":
                                                        return _context11.stop();
                                                }
                                            }, _callee11, this);
                                        }));
                                        function getVerifyUrlFor(_x14, _x15) {
                                            return _getVerifyUrlFor.apply(this, arguments);
                                        }
                                        return getVerifyUrlFor;
                                    }()
                                },
                                {
                                    key: "getPublicProfileUrlFor",
                                    value: function() {
                                        var _getPublicProfileUrlFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee12(aPaymail) {
                                            var _aPaymail$split7, _aPaymail$split8, alias, domain, apiDescriptor, url;
                                            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
                                                while(true)switch(_context12.prev = _context12.next){
                                                    case 0:
                                                        _aPaymail$split7 = aPaymail.split("@"), _aPaymail$split8 = _slicedToArray(_aPaymail$split7, 2), alias = _aPaymail$split8[0], domain = _aPaymail$split8[1];
                                                        _context12.next = 3;
                                                        return this.ensureCapabilityFor(domain, CapabilityCodes.publicProfile);
                                                    case 3:
                                                        _context12.next = 5;
                                                        return this.getApiDescriptionFor(domain);
                                                    case 5:
                                                        apiDescriptor = _context12.sent;
                                                        url = apiDescriptor.capabilities[CapabilityCodes.publicProfile].replace("{alias}", alias).replace("{domain.tld}", domain);
                                                        return _context12.abrupt("return", url);
                                                    case 8:
                                                    case "end":
                                                        return _context12.stop();
                                                }
                                            }, _callee12, this);
                                        }));
                                        function getPublicProfileUrlFor(_x16) {
                                            return _getPublicProfileUrlFor.apply(this, arguments);
                                        }
                                        return getPublicProfileUrlFor;
                                    }()
                                },
                                {
                                    key: "getSendTxUrlFor",
                                    value: function() {
                                        var _getSendTxUrlFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee13(aPaymail) {
                                            var _aPaymail$split9, _aPaymail$split10, alias, domain, apiDescriptor, url;
                                            return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                                                while(true)switch(_context13.prev = _context13.next){
                                                    case 0:
                                                        _aPaymail$split9 = aPaymail.split("@"), _aPaymail$split10 = _slicedToArray(_aPaymail$split9, 2), alias = _aPaymail$split10[0], domain = _aPaymail$split10[1];
                                                        _context13.next = 3;
                                                        return this.ensureCapabilityFor(domain, CapabilityCodes.receiveTransaction);
                                                    case 3:
                                                        _context13.next = 5;
                                                        return this.getApiDescriptionFor(domain);
                                                    case 5:
                                                        apiDescriptor = _context13.sent;
                                                        url = apiDescriptor.capabilities[CapabilityCodes.receiveTransaction].replace("{alias}", alias).replace("{domain.tld}", domain);
                                                        return _context13.abrupt("return", url);
                                                    case 8:
                                                    case "end":
                                                        return _context13.stop();
                                                }
                                            }, _callee13, this);
                                        }));
                                        function getSendTxUrlFor(_x17) {
                                            return _getSendTxUrlFor.apply(this, arguments);
                                        }
                                        return getSendTxUrlFor;
                                    }()
                                },
                                {
                                    key: "getP2pPatmentDestinationUrlFor",
                                    value: function() {
                                        var _getP2pPatmentDestinationUrlFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee14(aPaymail) {
                                            var _aPaymail$split11, _aPaymail$split12, alias, domain, apiDescriptor, url;
                                            return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                                                while(true)switch(_context14.prev = _context14.next){
                                                    case 0:
                                                        _aPaymail$split11 = aPaymail.split("@"), _aPaymail$split12 = _slicedToArray(_aPaymail$split11, 2), alias = _aPaymail$split12[0], domain = _aPaymail$split12[1];
                                                        _context14.next = 3;
                                                        return this.ensureCapabilityFor(domain, CapabilityCodes.p2pPaymentDestination);
                                                    case 3:
                                                        _context14.next = 5;
                                                        return this.getApiDescriptionFor(domain);
                                                    case 5:
                                                        apiDescriptor = _context14.sent;
                                                        url = apiDescriptor.capabilities[CapabilityCodes.p2pPaymentDestination].replace("{alias}", alias).replace("{domain.tld}", domain);
                                                        return _context14.abrupt("return", url);
                                                    case 8:
                                                    case "end":
                                                        return _context14.stop();
                                                }
                                            }, _callee14, this);
                                        }));
                                        function getP2pPatmentDestinationUrlFor(_x18) {
                                            return _getP2pPatmentDestinationUrlFor.apply(this, arguments);
                                        }
                                        return getP2pPatmentDestinationUrlFor;
                                    }()
                                },
                                {
                                    key: "domainHasCapability",
                                    value: function() {
                                        var _domainHasCapability = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee15(aDomain, capability) {
                                            var apiDescriptor;
                                            return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                                                while(true)switch(_context15.prev = _context15.next){
                                                    case 0:
                                                        _context15.next = 2;
                                                        return this.getApiDescriptionFor(aDomain);
                                                    case 2:
                                                        apiDescriptor = _context15.sent;
                                                        return _context15.abrupt("return", !!apiDescriptor.capabilities[capability]);
                                                    case 4:
                                                    case "end":
                                                        return _context15.stop();
                                                }
                                            }, _callee15, this);
                                        }));
                                        function domainHasCapability(_x19, _x20) {
                                            return _domainHasCapability.apply(this, arguments);
                                        }
                                        return domainHasCapability;
                                    }()
                                },
                                {
                                    key: "getApiDescriptionFor",
                                    value: function() {
                                        var _getApiDescriptionFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee16(aDomain) {
                                            var _yield$this$getWellKn, domain, port, apiDescriptor;
                                            return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                                                while(true)switch(_context16.prev = _context16.next){
                                                    case 0:
                                                        if (!this._cache[aDomain]) {
                                                            _context16.next = 2;
                                                            break;
                                                        }
                                                        return _context16.abrupt("return", this._cache[aDomain]);
                                                    case 2:
                                                        _context16.next = 4;
                                                        return this.getWellKnownBaseUrl(aDomain);
                                                    case 4:
                                                        _yield$this$getWellKn = _context16.sent;
                                                        domain = _yield$this$getWellKn.domain;
                                                        port = _yield$this$getWellKn.port;
                                                        apiDescriptor = this.fetchApiDescriptor(domain, port);
                                                        this._cache[aDomain] = apiDescriptor;
                                                        return _context16.abrupt("return", apiDescriptor);
                                                    case 10:
                                                    case "end":
                                                        return _context16.stop();
                                                }
                                            }, _callee16, this);
                                        }));
                                        function getApiDescriptionFor(_x21) {
                                            return _getApiDescriptionFor.apply(this, arguments);
                                        }
                                        return getApiDescriptionFor;
                                    }()
                                },
                                {
                                    key: "fetchApiDescriptor",
                                    value: function() {
                                        var _fetchApiDescriptor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee17(domain, port) {
                                            var protocol, requestPort, requestDomain, wellKnown, apiDescriptor;
                                            return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                                                while(true)switch(_context17.prev = _context17.next){
                                                    case 0:
                                                        protocol = domain === "localhost" || domain === "localhost." ? "http" : "https";
                                                        requestPort = port.toString() === "443" ? "" : ":".concat(port);
                                                        requestDomain = /^(.*?)\.?$/.exec(domain)[1]; // Get value from capture group
                                                        if (requestDomain) {
                                                            _context17.next = 5;
                                                            break;
                                                        }
                                                        throw new Error("Invalid domain: ".concat(domain));
                                                    case 5:
                                                        _context17.next = 7;
                                                        return this.http.get("".concat(protocol, "://").concat(requestDomain).concat(requestPort, "/.well-known/bsvalias"));
                                                    case 7:
                                                        wellKnown = _context17.sent;
                                                        _context17.next = 10;
                                                        return wellKnown.json();
                                                    case 10:
                                                        apiDescriptor = _context17.sent;
                                                        return _context17.abrupt("return", apiDescriptor);
                                                    case 12:
                                                    case "end":
                                                        return _context17.stop();
                                                }
                                            }, _callee17, this);
                                        }));
                                        function fetchApiDescriptor(_x22, _x23) {
                                            return _fetchApiDescriptor.apply(this, arguments);
                                        }
                                        return fetchApiDescriptor;
                                    }()
                                },
                                {
                                    key: "getWellKnownBaseUrl",
                                    value: function() {
                                        var _getWellKnownBaseUrl = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee18(aDomain) {
                                            return _regeneratorRuntime().wrap(function _callee18$(_context18) {
                                                while(true)switch(_context18.prev = _context18.next){
                                                    case 0:
                                                        return _context18.abrupt("return", this.dnsClient.checkSrv(aDomain));
                                                    case 1:
                                                    case "end":
                                                        return _context18.stop();
                                                }
                                            }, _callee18, this);
                                        }));
                                        function getWellKnownBaseUrl(_x24) {
                                            return _getWellKnownBaseUrl.apply(this, arguments);
                                        }
                                        return getWellKnownBaseUrl;
                                    }()
                                },
                                {
                                    key: "ensureCapabilityFor",
                                    value: function() {
                                        var _ensureCapabilityFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee19(aDomain, aCapability) {
                                            return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                                                while(true)switch(_context19.prev = _context19.next){
                                                    case 0:
                                                        _context19.next = 2;
                                                        return this.domainHasCapability(aDomain, aCapability);
                                                    case 2:
                                                        if (_context19.sent) {
                                                            _context19.next = 4;
                                                            break;
                                                        }
                                                        throw new Error('Unknown capability "'.concat(aCapability, '" for "').concat(aDomain, '"'));
                                                    case 4:
                                                    case "end":
                                                        return _context19.stop();
                                                }
                                            }, _callee19, this);
                                        }));
                                        function ensureCapabilityFor(_x25, _x26) {
                                            return _ensureCapabilityFor.apply(this, arguments);
                                        }
                                        return ensureCapabilityFor;
                                    }()
                                }
                            ], [
                                {
                                    key: "create",
                                    value: function create(dnsClient, fetch) {
                                        var instance = new EndpointResolver(null, fetch);
                                        instance.dnsClient = dnsClient;
                                        return instance;
                                    }
                                }
                            ]);
                            return EndpointResolver;
                        }();
                        var VerifiableMessage1 = /*#__PURE__*/ function() {
                            function VerifiableMessage(parts) {
                                var bsv = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                                _classCallCheck2(this, VerifiableMessage);
                                if (bsv === null) {
                                    bsv = require("bsv");
                                    bsv.Message = bsv.Bsm;
                                }
                                this.bsv = bsv;
                                var concatenated = Buffer.from(parts.join(""));
                                this.message = new this.bsv.Message(concatenated);
                            }
                            _createClass2(VerifiableMessage, [
                                {
                                    key: "sign",
                                    value: function sign(wifPrivateKey) {
                                        return this.message.sign(this.bsv.PrivateKey.fromWIF(wifPrivateKey));
                                    }
                                },
                                {
                                    key: "verify",
                                    value: function verify(keyAddress, signature) {
                                        return this.message.verify(keyAddress, signature);
                                    }
                                }
                            ], [
                                {
                                    key: "forBasicAddressResolution",
                                    value: function forBasicAddressResolution(_ref2) {
                                        var senderHandle = _ref2.senderHandle, amount = _ref2.amount, dt = _ref2.dt, purpose = _ref2.purpose;
                                        if (dt.toISOString) dt = dt.toISOString();
                                        return new VerifiableMessage([
                                            senderHandle,
                                            amount || "0",
                                            dt,
                                            purpose
                                        ]);
                                    }
                                }
                            ]);
                            return VerifiableMessage;
                        }();
                        exports.VerifiableMessage = VerifiableMessage1;
                        var RequestBodyFactory1 = /*#__PURE__*/ function() {
                            function RequestBodyFactory(clock) {
                                _classCallCheck2(this, RequestBodyFactory);
                                this.clock = clock;
                            }
                            _createClass2(RequestBodyFactory, [
                                {
                                    key: "buildBodyToRequestAddress",
                                    value: function buildBodyToRequestAddress(senderInfo) {
                                        var privateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                                        var senderHandle = senderInfo.senderHandle, amount = senderInfo.amount, senderName = senderInfo.senderName, purpose = senderInfo.purpose, pubkey = senderInfo.pubkey, providedSignature = senderInfo.signature;
                                        if (!providedSignature && privateKey === null) throw new Error("Missing private key or signature");
                                        var dt, signature;
                                        if (providedSignature) {
                                            if (!senderInfo.dt) throw new Error("missing datetime for given signature");
                                            dt = senderInfo.dt;
                                            signature = providedSignature;
                                        } else {
                                            dt = this.clock.now();
                                            signature = VerifiableMessage1.forBasicAddressResolution({
                                                senderHandle: senderHandle,
                                                amount: amount,
                                                dt: dt,
                                                purpose: purpose
                                            }).sign(privateKey);
                                        }
                                        return {
                                            senderHandle: senderHandle,
                                            senderName: senderName,
                                            purpose: purpose,
                                            dt: dt,
                                            amount: amount || null,
                                            pubkey: pubkey,
                                            signature: signature
                                        };
                                    }
                                },
                                {
                                    key: "buildBodySendTx",
                                    value: function buildBodySendTx(hexTransaction, reference, metadata) {
                                        return {
                                            hex: hexTransaction,
                                            metadata: metadata,
                                            reference: reference
                                        };
                                    }
                                },
                                {
                                    key: "buildBodyP2pPaymentDestination",
                                    value: function buildBodyP2pPaymentDestination(satoshis) {
                                        return {
                                            satoshis: satoshis
                                        };
                                    }
                                }
                            ]);
                            return RequestBodyFactory;
                        }();
                        exports.RequestBodyFactory = RequestBodyFactory1;
                        var Clock1 = /*#__PURE__*/ function() {
                            function Clock() {
                                _classCallCheck2(this, Clock);
                            }
                            _createClass2(Clock, [
                                {
                                    key: "now",
                                    value: function now() {
                                        return (0, _moment["default"])();
                                    }
                                }
                            ]);
                            return Clock;
                        }();
                        exports.Clock = Clock1;
                        var PaymailNotFound1 = /*#__PURE__*/ function(_Error) {
                            _inherits(PaymailNotFound, _Error);
                            var _super = _createSuper(PaymailNotFound);
                            function PaymailNotFound(message, paymail) {
                                var _this4;
                                _classCallCheck2(this, PaymailNotFound);
                                _this4 = _super.call(this, message);
                                _this4.paymail = paymail;
                                return _this4;
                            }
                            return _createClass2(PaymailNotFound);
                        }(/*#__PURE__*/ _wrapNativeSuper(Error));
                        exports.PaymailNotFound = PaymailNotFound1;
                        var BrowserDns1 = /*#__PURE__*/ function() {
                            function BrowserDns(fetch) {
                                _classCallCheck2(this, BrowserDns);
                                this.doh = new DnsOverHttps1(fetch, {
                                    baseUrl: "https://dns.google.com/resolve"
                                });
                            }
                            _createClass2(BrowserDns, [
                                {
                                    key: "resolveSrv",
                                    value: function() {
                                        var _resolveSrv2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee20(aDomain, aCallback) {
                                            var response, data;
                                            return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                                                while(true)switch(_context20.prev = _context20.next){
                                                    case 0:
                                                        _context20.prev = 0;
                                                        _context20.next = 3;
                                                        return this.doh.resolveSrv(aDomain);
                                                    case 3:
                                                        response = _context20.sent;
                                                        if (response.Status === 0 && response.Answer) {
                                                            data = response.Answer.map(function(record) {
                                                                var _record$data$split = record.data.split(" "), _record$data$split2 = _slicedToArray(_record$data$split, 4), priority = _record$data$split2[0], weight = _record$data$split2[1], port = _record$data$split2[2], name = _record$data$split2[3];
                                                                return {
                                                                    priority: priority,
                                                                    weight: weight,
                                                                    port: port,
                                                                    name: name,
                                                                    isSecure: response.AD
                                                                };
                                                            });
                                                            aCallback(null, data);
                                                        } else if (response.Status === 0 && !response.Answer) aCallback({
                                                            code: "ENODATA"
                                                        });
                                                        else aCallback(new Error("error during dns query"));
                                                        _context20.next = 10;
                                                        break;
                                                    case 7:
                                                        _context20.prev = 7;
                                                        _context20.t0 = _context20["catch"](0);
                                                        aCallback(_context20.t0);
                                                    case 10:
                                                    case "end":
                                                        return _context20.stop();
                                                }
                                            }, _callee20, this, [
                                                [
                                                    0,
                                                    7
                                                ]
                                            ]);
                                        }));
                                        function resolveSrv(_x27, _x28) {
                                            return _resolveSrv2.apply(this, arguments);
                                        }
                                        return resolveSrv;
                                    }()
                                }
                            ]);
                            return BrowserDns;
                        }();
                        exports.BrowserDns = BrowserDns1;
                        var PaymailClient1 = /*#__PURE__*/ function() {
                            function PaymailClient() {
                                var dns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                                var fetch2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
                                var clock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                                var bsv = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
                                _classCallCheck2(this, PaymailClient);
                                if (fetch2 === null) fetch2 = _isomorphicFetch["default"];
                                if (dns === null) dns = new BrowserDns1(fetch2);
                                if (bsv === null) bsv = require("bsv");
                                this.bsv = bsv;
                                this.resolver = new EndpointResolver1(dns, fetch2);
                                this.http = new Http1(fetch2);
                                this.requestBodyFactory = new RequestBodyFactory1(clock !== null ? clock : new Clock1());
                            }
                            /**
             * Uses pki flow to query for an identity key for a given paymail address.
             *
             * @param {String} paymail - a paymail address
             */ _createClass2(PaymailClient, [
                                {
                                    key: "getPublicKey",
                                    value: function() {
                                        var _getPublicKey = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee21(paymail) {
                                            var identityUrl, response, _yield$response$json, pubkey;
                                            return _regeneratorRuntime().wrap(function _callee21$(_context21) {
                                                while(true)switch(_context21.prev = _context21.next){
                                                    case 0:
                                                        _context21.next = 2;
                                                        return this.resolver.getIdentityUrlFor(paymail);
                                                    case 2:
                                                        identityUrl = _context21.sent;
                                                        _context21.next = 5;
                                                        return this.http.get(identityUrl);
                                                    case 5:
                                                        response = _context21.sent;
                                                        _context21.next = 8;
                                                        return response.json();
                                                    case 8:
                                                        _yield$response$json = _context21.sent;
                                                        pubkey = _yield$response$json.pubkey;
                                                        return _context21.abrupt("return", pubkey);
                                                    case 11:
                                                    case "end":
                                                        return _context21.stop();
                                                }
                                            }, _callee21, this);
                                        }));
                                        function getPublicKey(_x29) {
                                            return _getPublicKey.apply(this, arguments);
                                        }
                                        return getPublicKey;
                                    }()
                                },
                                {
                                    key: "getOutputFor",
                                    value: function() {
                                        var _getOutputFor = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee22(aPaymail, senderInfo) {
                                            var privateKey, addressUrl, response, _yield$response$json2, output, _args22 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee22$(_context22) {
                                                while(true)switch(_context22.prev = _context22.next){
                                                    case 0:
                                                        privateKey = _args22.length > 2 && _args22[2] !== undefined ? _args22[2] : null;
                                                        _context22.next = 3;
                                                        return this.resolver.getAddressUrlFor(aPaymail);
                                                    case 3:
                                                        addressUrl = _context22.sent;
                                                        _context22.next = 6;
                                                        return this.http.postJson(addressUrl, this.requestBodyFactory.buildBodyToRequestAddress(senderInfo, privateKey));
                                                    case 6:
                                                        response = _context22.sent;
                                                        if (response.ok) {
                                                            _context22.next = 9;
                                                            break;
                                                        }
                                                        throw new PaymailNotFound1("Paymail not found: ".concat(aPaymail), aPaymail);
                                                    case 9:
                                                        _context22.next = 11;
                                                        return response.json();
                                                    case 11:
                                                        _yield$response$json2 = _context22.sent;
                                                        output = _yield$response$json2.output;
                                                        return _context22.abrupt("return", output);
                                                    case 14:
                                                    case "end":
                                                        return _context22.stop();
                                                }
                                            }, _callee22, this);
                                        }));
                                        function getOutputFor(_x30, _x31) {
                                            return _getOutputFor.apply(this, arguments);
                                        }
                                        return getOutputFor;
                                    }()
                                },
                                {
                                    key: "verifyPubkeyOwner",
                                    value: function() {
                                        var _verifyPubkeyOwner = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee23(pubkey, paymail) {
                                            var url, response, body, match;
                                            return _regeneratorRuntime().wrap(function _callee23$(_context23) {
                                                while(true)switch(_context23.prev = _context23.next){
                                                    case 0:
                                                        _context23.next = 2;
                                                        return this.resolver.getVerifyUrlFor(paymail, pubkey);
                                                    case 2:
                                                        url = _context23.sent;
                                                        _context23.next = 5;
                                                        return this.http.get(url);
                                                    case 5:
                                                        response = _context23.sent;
                                                        _context23.next = 8;
                                                        return response.json();
                                                    case 8:
                                                        body = _context23.sent;
                                                        match = body.match;
                                                        return _context23.abrupt("return", match);
                                                    case 11:
                                                    case "end":
                                                        return _context23.stop();
                                                }
                                            }, _callee23, this);
                                        }));
                                        function verifyPubkeyOwner(_x32, _x33) {
                                            return _verifyPubkeyOwner.apply(this, arguments);
                                        }
                                        return verifyPubkeyOwner;
                                    }()
                                },
                                {
                                    key: "isValidSignature",
                                    value: function() {
                                        var _isValidSignature = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee24(message, signature) {
                                            var paymail, pubkey, senderPublicKey, hasPki, identityKey, senderKeyAddress, verified, _args24 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee24$(_context24) {
                                                while(true)switch(_context24.prev = _context24.next){
                                                    case 0:
                                                        paymail = _args24.length > 2 && _args24[2] !== undefined ? _args24[2] : null;
                                                        pubkey = _args24.length > 3 && _args24[3] !== undefined ? _args24[3] : null;
                                                        if (!(paymail == null && pubkey === null)) {
                                                            _context24.next = 4;
                                                            break;
                                                        }
                                                        throw new Error("Must specify either paymail or pubkey");
                                                    case 4:
                                                        if (!paymail) {
                                                            _context24.next = 31;
                                                            break;
                                                        }
                                                        _context24.t0 = pubkey;
                                                        if (!_context24.t0) {
                                                            _context24.next = 10;
                                                            break;
                                                        }
                                                        _context24.next = 9;
                                                        return this.resolver.domainHasCapability(paymail.split("@")[1], CapabilityCodes.verifyPublicKeyOwner);
                                                    case 9:
                                                        _context24.t0 = _context24.sent;
                                                    case 10:
                                                        if (!_context24.t0) {
                                                            _context24.next = 20;
                                                            break;
                                                        }
                                                        _context24.next = 13;
                                                        return this.verifyPubkeyOwner(pubkey, paymail);
                                                    case 13:
                                                        if (!_context24.sent) {
                                                            _context24.next = 17;
                                                            break;
                                                        }
                                                        senderPublicKey = this.bsv.PublicKey.fromString(pubkey);
                                                        _context24.next = 18;
                                                        break;
                                                    case 17:
                                                        return _context24.abrupt("return", false);
                                                    case 18:
                                                        _context24.next = 31;
                                                        break;
                                                    case 20:
                                                        _context24.next = 22;
                                                        return this.resolver.domainHasCapability(paymail.split("@")[1], CapabilityCodes.pki);
                                                    case 22:
                                                        hasPki = _context24.sent;
                                                        if (!hasPki) {
                                                            _context24.next = 30;
                                                            break;
                                                        }
                                                        _context24.next = 26;
                                                        return this.getPublicKey(paymail);
                                                    case 26:
                                                        identityKey = _context24.sent;
                                                        senderPublicKey = this.bsv.PublicKey.fromString(identityKey);
                                                        _context24.next = 31;
                                                        break;
                                                    case 30:
                                                        return _context24.abrupt("return", false);
                                                    case 31:
                                                        senderKeyAddress = this.bsv.Address.fromPublicKey(senderPublicKey || pubkey);
                                                        _context24.prev = 32;
                                                        verified = message.verify(senderKeyAddress.toString(), signature);
                                                        return _context24.abrupt("return", verified);
                                                    case 37:
                                                        _context24.prev = 37;
                                                        _context24.t1 = _context24["catch"](32);
                                                        return _context24.abrupt("return", false);
                                                    case 40:
                                                    case "end":
                                                        return _context24.stop();
                                                }
                                            }, _callee24, this, [
                                                [
                                                    32,
                                                    37
                                                ]
                                            ]);
                                        }));
                                        function isValidSignature(_x34, _x35) {
                                            return _isValidSignature.apply(this, arguments);
                                        }
                                        return isValidSignature;
                                    }()
                                },
                                {
                                    key: "getPublicProfile",
                                    value: function() {
                                        var _getPublicProfile = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee25(paymail) {
                                            var publicProfileUrl, response, body, _yield$response$json3, avatar, name;
                                            return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                                                while(true)switch(_context25.prev = _context25.next){
                                                    case 0:
                                                        _context25.next = 2;
                                                        return this.resolver.getPublicProfileUrlFor(paymail);
                                                    case 2:
                                                        publicProfileUrl = _context25.sent;
                                                        _context25.next = 5;
                                                        return this.http.get(publicProfileUrl);
                                                    case 5:
                                                        response = _context25.sent;
                                                        if (response.ok) {
                                                            _context25.next = 11;
                                                            break;
                                                        }
                                                        _context25.next = 9;
                                                        return response.json();
                                                    case 9:
                                                        body = _context25.sent;
                                                        throw new Error("Server failed with: ".concat(JSON.stringify(body)));
                                                    case 11:
                                                        _context25.next = 13;
                                                        return response.json();
                                                    case 13:
                                                        _yield$response$json3 = _context25.sent;
                                                        avatar = _yield$response$json3.avatar;
                                                        name = _yield$response$json3.name;
                                                        return _context25.abrupt("return", {
                                                            avatar: avatar,
                                                            name: name
                                                        });
                                                    case 17:
                                                    case "end":
                                                        return _context25.stop();
                                                }
                                            }, _callee25, this);
                                        }));
                                        function getPublicProfile(_x36) {
                                            return _getPublicProfile.apply(this, arguments);
                                        }
                                        return getPublicProfile;
                                    }()
                                },
                                {
                                    key: "sendRawTx",
                                    value: function() {
                                        var _sendRawTx = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee26(targetPaymail, hexTransaction, reference) {
                                            var metadata, receiveTxUrl, response, body, _args26 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee26$(_context26) {
                                                while(true)switch(_context26.prev = _context26.next){
                                                    case 0:
                                                        metadata = _args26.length > 3 && _args26[3] !== undefined ? _args26[3] : {};
                                                        if (hexTransaction) {
                                                            _context26.next = 3;
                                                            break;
                                                        }
                                                        throw new Error("transaction hex cannot be empty");
                                                    case 3:
                                                        _context26.next = 5;
                                                        return this.resolver.getSendTxUrlFor(targetPaymail);
                                                    case 5:
                                                        receiveTxUrl = _context26.sent;
                                                        _context26.next = 8;
                                                        return this.http.postJson(receiveTxUrl, this.requestBodyFactory.buildBodySendTx(hexTransaction, reference, metadata));
                                                    case 8:
                                                        response = _context26.sent;
                                                        if (response.ok) {
                                                            _context26.next = 14;
                                                            break;
                                                        }
                                                        _context26.next = 12;
                                                        return response.json();
                                                    case 12:
                                                        body = _context26.sent;
                                                        throw new Error("Server failed with: ".concat(JSON.stringify(body)));
                                                    case 14:
                                                        return _context26.abrupt("return", response.json());
                                                    case 15:
                                                    case "end":
                                                        return _context26.stop();
                                                }
                                            }, _callee26, this);
                                        }));
                                        function sendRawTx(_x37, _x38, _x39) {
                                            return _sendRawTx.apply(this, arguments);
                                        }
                                        return sendRawTx;
                                    }()
                                },
                                {
                                    key: "getP2pPaymentDestination",
                                    value: function() {
                                        var _getP2pPaymentDestination = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee27(targetPaymail, satoshis) {
                                            var paymentDestinationUrl, response, _body, body;
                                            return _regeneratorRuntime().wrap(function _callee27$(_context27) {
                                                while(true)switch(_context27.prev = _context27.next){
                                                    case 0:
                                                        if (satoshis) {
                                                            _context27.next = 2;
                                                            break;
                                                        }
                                                        throw new Error("Amount in satohis needs to be specified");
                                                    case 2:
                                                        _context27.next = 4;
                                                        return this.resolver.getP2pPatmentDestinationUrlFor(targetPaymail);
                                                    case 4:
                                                        paymentDestinationUrl = _context27.sent;
                                                        _context27.next = 7;
                                                        return this.http.postJson(paymentDestinationUrl, this.requestBodyFactory.buildBodyP2pPaymentDestination(satoshis));
                                                    case 7:
                                                        response = _context27.sent;
                                                        if (response.ok) {
                                                            _context27.next = 13;
                                                            break;
                                                        }
                                                        _context27.next = 11;
                                                        return response.json();
                                                    case 11:
                                                        _body = _context27.sent;
                                                        throw new Error("Server failed with: ".concat(JSON.stringify(_body)));
                                                    case 13:
                                                        _context27.next = 15;
                                                        return response.json();
                                                    case 15:
                                                        body = _context27.sent;
                                                        if (body.outputs) {
                                                            _context27.next = 18;
                                                            break;
                                                        }
                                                        throw new Error("Server answered with a wrong format. Missing outputs");
                                                    case 18:
                                                        return _context27.abrupt("return", body);
                                                    case 19:
                                                    case "end":
                                                        return _context27.stop();
                                                }
                                            }, _callee27, this);
                                        }));
                                        function getP2pPaymentDestination(_x40, _x41) {
                                            return _getP2pPaymentDestination.apply(this, arguments);
                                        }
                                        return getP2pPaymentDestination;
                                    }()
                                }
                            ]);
                            return PaymailClient;
                        }();
                        exports.PaymailClient = PaymailClient1;
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "@moneybutton/brfc": 206,
                "abort-controller": 208,
                "bsv": 226,
                "buffer": 63,
                "isomorphic-fetch": 244,
                "moment": 248
            }
        ],
        206: [
            function(require, module, exports) {
                (function(Buffer) {
                    (function() {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        exports.brfc = void 0;
                        var _bsv = require("bsv");
                        var brfc = function brfc(title, authors, version) {
                            var autorString = authors.join(", ").trim();
                            var stringToHash = [
                                title.trim() + autorString + (version.toString() || "")
                            ].join("").trim();
                            var hash = _bsv.Hash.sha256Sha256(Buffer.from(stringToHash));
                            hash = hash.reverse();
                            return hash.toString("hex").substring(0, 12);
                        };
                        exports.brfc = brfc;
                    }).call(this);
                }).call(this, require("buffer").Buffer);
            },
            {
                "bsv": 207,
                "buffer": 63
            }
        ],
        207: [
            function(require, module, exports) {
                (function(process, Buffer) {
                    (function() {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {
                            value: true
                        });
                        exports.BlockHeader = exports.Block = exports.Bip39 = exports.Bip32 = exports.Base58Check = exports.Base58 = exports.Aescbc = exports.Aes = exports.Address = exports.Ach = void 0;
                        exports.Bn = Bn;
                        exports.version = exports.jp = exports.getConstants = exports.en = exports.deps = exports.cmp = exports.WorkersResult = exports.Workers = exports.VarInt = exports.TxVerifier = exports.TxOutMap = exports.TxOut = exports.TxIn = exports.TxBuilder = exports.Tx = exports.Struct = exports.SigOperations = exports.Sig = exports.Script = exports.Random = exports.PubKey = exports.PrivKey = exports.Point = exports.OpCode = exports.KeyPair = exports.Interp = exports.Hash = exports.Ecies = exports.Ecdsa = exports.Constants = exports.Cbc = exports.Bw = exports.Bsm = exports.Br = void 0;
                        var _aes = _interopRequireDefault(require("aes"));
                        var _bn2 = _interopRequireDefault(require("bn.js"));
                        var _bs = _interopRequireDefault(require("bs58"));
                        var _bitcoinElliptic = _interopRequireDefault(require("bitcoin-elliptic"));
                        var _hash = _interopRequireDefault(require("hash.js"));
                        var _pbkdf = _interopRequireDefault(require("pbkdf2"));
                        var _isHex = _interopRequireDefault(require("is-hex"));
                        var _randombytes = _interopRequireDefault(require("randombytes"));
                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {
                                "default": obj
                            };
                        }
                        var version = "2.0.7";
                        exports.version = version;
                        function Bn(n, base) {
                            var _bn2$default;
                            for(var _len2 = arguments.length, rest = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++)rest[_key2 - 2] = arguments[_key2];
                            if (!(this instanceof Bn)) return _construct(Bn, [
                                n,
                                base
                            ].concat(rest));
                            (_bn2$default = _bn2["default"]).call.apply(_bn2$default, [
                                this,
                                n,
                                base
                            ].concat(rest));
                        }
                        Object.keys(_bn2["default"]).forEach(function(key) {
                            Bn[key] = _bn2["default"][key];
                        });
                        Bn.prototype = Object.create(_bn2["default"].prototype);
                        Bn.prototype.constructor = Bn;
                        function reverseBuf(buf) {
                            var buf2 = Buffer.alloc(buf.length);
                            for(var i = 0; i < buf.length; i++)buf2[i] = buf[buf.length - 1 - i];
                            return buf2;
                        }
                        Bn.prototype.fromHex = function(hex, opts) {
                            return this.fromBuffer(Buffer.from(hex, "hex"), opts);
                        };
                        Bn.prototype.toHex = function(opts) {
                            return this.toBuffer(opts).toString("hex");
                        };
                        Bn.prototype.toJSON = function() {
                            return this.toString();
                        };
                        Bn.prototype.fromJSON = function(str) {
                            var bn = Bn(str);
                            bn.copy(this);
                            return this;
                        };
                        Bn.prototype.fromNumber = function(n) {
                            var bn = Bn(n);
                            bn.copy(this);
                            return this;
                        };
                        Bn.prototype.toNumber = function() {
                            return parseInt(this.toString(10), 10);
                        };
                        Bn.prototype.fromString = function(str, base) {
                            var bn = Bn(str, base);
                            bn.copy(this);
                            return this;
                        };
                        Bn.fromBuffer = function(buf) {
                            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                                endian: "big"
                            };
                            if (opts.endian === "little") buf = reverseBuf(buf);
                            var hex = buf.toString("hex");
                            var bn = new Bn(hex, 16);
                            return bn;
                        };
                        Bn.prototype.fromBuffer = function(buf, opts) {
                            var bn = Bn.fromBuffer(buf, opts);
                            bn.copy(this);
                            return this;
                        };
                        Bn.prototype.toBuffer = function() {
                            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                                size: undefined,
                                endian: "big"
                            };
                            var buf;
                            if (opts.size) {
                                var hex = this.toString(16, 2);
                                var natlen = hex.length / 2;
                                buf = Buffer.from(hex, "hex");
                                if (natlen === opts.size) ;
                                else if (natlen > opts.size) buf = buf.slice(natlen - buf.length, buf.length);
                                else if (natlen < opts.size) {
                                    var rbuf = Buffer.alloc(opts.size);
                                    for(var i = 0; i < buf.length; i++)rbuf[rbuf.length - 1 - i] = buf[buf.length - 1 - i];
                                    for(var _i6 = 0; _i6 < opts.size - natlen; _i6++)rbuf[_i6] = 0;
                                    buf = rbuf;
                                }
                            } else {
                                var _hex = this.toString(16, 2);
                                buf = Buffer.from(_hex, "hex");
                            }
                            if (opts.endian === "little") buf = reverseBuf(buf);
                            var longzero = Buffer.from([
                                0
                            ]);
                            if (Buffer.compare(buf, longzero) === 0) return Buffer.from([]);
                            return buf;
                        };
                        Bn.prototype.toFastBuffer = Bn.prototype.toBuffer;
                        Bn.fromFastBuffer = Bn.fromBuffer;
                        Bn.prototype.fromFastBuffer = Bn.prototype.fromBuffer;
                        Bn.prototype.fromSm = function(buf) {
                            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                                endian: "big"
                            };
                            if (buf.length === 0) this.fromBuffer(Buffer.from([
                                0
                            ]));
                            var endian = opts.endian;
                            if (endian === "little") buf = reverseBuf(buf);
                            if (buf[0] & 0x80) {
                                buf[0] = buf[0] & 0x7f;
                                this.fromBuffer(buf);
                                this.neg().copy(this);
                            } else this.fromBuffer(buf);
                            return this;
                        };
                        Bn.prototype.toSm = function() {
                            var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                                endian: "big"
                            };
                            var endian = opts.endian;
                            var buf;
                            if (this.cmp(0) === -1) {
                                buf = this.neg().toBuffer();
                                if (buf[0] & 0x80) buf = Buffer.concat([
                                    Buffer.from([
                                        0x80
                                    ]),
                                    buf
                                ]);
                                else buf[0] = buf[0] | 0x80;
                            } else {
                                buf = this.toBuffer();
                                if (buf[0] & 0x80) buf = Buffer.concat([
                                    Buffer.from([
                                        0x00
                                    ]),
                                    buf
                                ]);
                            }
                            if (buf.length === 1 & buf[0] === 0) buf = Buffer.from([]);
                            if (endian === "little") buf = reverseBuf(buf);
                            return buf;
                        };
                        Bn.prototype.fromBits = function(bits) {
                            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                                strict: false
                            };
                            var buf = Buffer.alloc(4);
                            buf.writeUInt32BE(bits, 0);
                            bits = buf.readInt32BE(0);
                            if (opts.strict && bits & 0x00800000) throw new Error("negative bit set");
                            var nsize = bits >> 24;
                            var nword = bits & 0x007fffff;
                            buf = Buffer.alloc(4);
                            buf.writeInt32BE(nword);
                            if (nsize <= 3) buf = buf.slice(1, nsize + 1);
                            else {
                                var fill = Buffer.alloc(nsize - 3);
                                fill.fill(0);
                                buf = Buffer.concat([
                                    buf,
                                    fill
                                ]);
                            }
                            this.fromBuffer(buf);
                            if (bits & 0x00800000) Bn(0).sub(this).copy(this);
                            return this;
                        };
                        Bn.prototype.toBits = function() {
                            var buf;
                            if (this.lt(0)) buf = this.neg().toBuffer();
                            else buf = this.toBuffer();
                            var nsize = buf.length;
                            var nword;
                            if (nsize > 3) nword = Buffer.concat([
                                Buffer.from([
                                    0
                                ]),
                                buf.slice(0, 3)
                            ]).readUInt32BE(0);
                            else if (nsize <= 3) {
                                var blank = Buffer.alloc(3 - nsize + 1);
                                blank.fill(0);
                                nword = Buffer.concat([
                                    blank,
                                    buf.slice(0, nsize)
                                ]).readUInt32BE(0);
                            }
                            if (nword & 0x00800000) {
                                nword >>= 8;
                                nsize++;
                            }
                            if (this.lt(0)) nword |= 0x00800000;
                            var bits = nsize << 24 | nword;
                            buf = Buffer.alloc(4);
                            buf.writeInt32BE(bits, 0);
                            return buf.readUInt32BE(0);
                        };
                        Bn.prototype.fromScriptNumBuffer = function(buf, fRequireMinimal, nMaxNumSize) {
                            if (nMaxNumSize === undefined) nMaxNumSize = 4;
                            if (buf.length > nMaxNumSize) throw new Error("script number overflow");
                            if (fRequireMinimal && buf.length > 0) {
                                if ((buf[buf.length - 1] & 0x7f) === 0) {
                                    if (buf.length <= 1 || (buf[buf.length - 2] & 0x80) === 0) throw new Error("non-minimally encoded script number");
                                }
                            }
                            return this.fromSm(buf, {
                                endian: "little"
                            });
                        };
                        Bn.prototype.toScriptNumBuffer = function(buf) {
                            return this.toSm({
                                endian: "little"
                            });
                        };
                        Bn.prototype.neg = function() {
                            var _neg = _bn2["default"].prototype.neg.call(this);
                            var neg = Object.create(Bn.prototype);
                            _neg.copy(neg);
                            return neg;
                        };
                        Bn.prototype.add = function(bn) {
                            var _bn = _bn2["default"].prototype.add.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.sub = function(bn) {
                            var _bn = _bn2["default"].prototype.sub.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.mul = function(bn) {
                            var _bn = _bn2["default"].prototype.mul.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.mod = function(bn) {
                            var _bn = _bn2["default"].prototype.mod.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.umod = function(bn) {
                            var _bn = _bn2["default"].prototype.umod.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.invm = function(bn) {
                            var _bn = _bn2["default"].prototype.invm.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.div = function(bn) {
                            var _bn = _bn2["default"].prototype.div.call(this, bn);
                            bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.ushln = function(bits) {
                            var _bn = _bn2["default"].prototype.ushln.call(this, bits);
                            var bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.ushrn = function(bits) {
                            var _bn = _bn2["default"].prototype.ushrn.call(this, bits);
                            var bn = Object.create(Bn.prototype);
                            _bn.copy(bn);
                            return bn;
                        };
                        Bn.prototype.cmp = function(bn) {
                            return _bn2["default"].prototype.cmp.call(this, bn);
                        };
                        function decorate(name) {
                            Bn.prototype["_" + name] = Bn.prototype[name];
                            var f = function f(b) {
                                if (typeof b === "string") b = new Bn(b);
                                else if (typeof b === "number") b = new Bn(b.toString());
                                return this["_" + name](b);
                            };
                            Bn.prototype[name] = f;
                        }
                        Bn.prototype.eq = function(b) {
                            return this.cmp(b) === 0;
                        };
                        Bn.prototype.neq = function(b) {
                            return this.cmp(b) !== 0;
                        };
                        Bn.prototype.gt = function(b) {
                            return this.cmp(b) > 0;
                        };
                        Bn.prototype.geq = function(b) {
                            return this.cmp(b) >= 0;
                        };
                        Bn.prototype.lt = function(b) {
                            return this.cmp(b) < 0;
                        };
                        Bn.prototype.leq = function(b) {
                            return this.cmp(b) <= 0;
                        };
                        decorate("add");
                        decorate("sub");
                        decorate("mul");
                        decorate("mod");
                        decorate("invm");
                        decorate("div");
                        decorate("cmp");
                        decorate("gt");
                        decorate("geq");
                        decorate("lt");
                        decorate("leq");
                        var Br1 = /*#__PURE__*/ function() {
                            function Br(buf) {
                                _classCallCheck2(this, Br);
                                this.fromObject({
                                    buf: buf
                                });
                            }
                            _createClass2(Br, [
                                {
                                    key: "fromObject",
                                    value: function fromObject(obj) {
                                        this.buf = obj.buf || this.buf || undefined;
                                        this.pos = obj.pos || this.pos || 0;
                                        return this;
                                    }
                                },
                                {
                                    key: "eof",
                                    value: function eof() {
                                        return this.pos >= this.buf.length;
                                    }
                                },
                                {
                                    key: "read",
                                    value: function read() {
                                        var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.buf.length;
                                        var buf = this.buf.slice(this.pos, this.pos + len);
                                        this.pos = this.pos + len;
                                        return buf;
                                    }
                                },
                                {
                                    key: "readReverse",
                                    value: function readReverse() {
                                        var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.buf.length;
                                        var buf = this.buf.slice(this.pos, this.pos + len);
                                        this.pos = this.pos + len;
                                        var buf2 = Buffer.alloc(buf.length);
                                        for(var i = 0; i < buf2.length; i++)buf2[i] = buf[buf.length - 1 - i];
                                        return buf2;
                                    }
                                },
                                {
                                    key: "readUInt8",
                                    value: function readUInt8() {
                                        var val = this.buf.readUInt8(this.pos);
                                        this.pos = this.pos + 1;
                                        return val;
                                    }
                                },
                                {
                                    key: "readInt8",
                                    value: function readInt8() {
                                        var val = this.buf.readInt8(this.pos);
                                        this.pos = this.pos + 1;
                                        return val;
                                    }
                                },
                                {
                                    key: "readUInt16BE",
                                    value: function readUInt16BE() {
                                        var val = this.buf.readUInt16BE(this.pos);
                                        this.pos = this.pos + 2;
                                        return val;
                                    }
                                },
                                {
                                    key: "readInt16BE",
                                    value: function readInt16BE() {
                                        var val = this.buf.readInt16BE(this.pos);
                                        this.pos = this.pos + 2;
                                        return val;
                                    }
                                },
                                {
                                    key: "readUInt16LE",
                                    value: function readUInt16LE() {
                                        var val = this.buf.readUInt16LE(this.pos);
                                        this.pos = this.pos + 2;
                                        return val;
                                    }
                                },
                                {
                                    key: "readInt16LE",
                                    value: function readInt16LE() {
                                        var val = this.buf.readInt16LE(this.pos);
                                        this.pos = this.pos + 2;
                                        return val;
                                    }
                                },
                                {
                                    key: "readUInt32BE",
                                    value: function readUInt32BE() {
                                        var val = this.buf.readUInt32BE(this.pos);
                                        this.pos = this.pos + 4;
                                        return val;
                                    }
                                },
                                {
                                    key: "readInt32BE",
                                    value: function readInt32BE() {
                                        var val = this.buf.readInt32BE(this.pos);
                                        this.pos = this.pos + 4;
                                        return val;
                                    }
                                },
                                {
                                    key: "readUInt32LE",
                                    value: function readUInt32LE() {
                                        var val = this.buf.readUInt32LE(this.pos);
                                        this.pos = this.pos + 4;
                                        return val;
                                    }
                                },
                                {
                                    key: "readInt32LE",
                                    value: function readInt32LE() {
                                        var val = this.buf.readInt32LE(this.pos);
                                        this.pos = this.pos + 4;
                                        return val;
                                    }
                                },
                                {
                                    key: "readUInt64BEBn",
                                    value: function readUInt64BEBn() {
                                        var buf = this.buf.slice(this.pos, this.pos + 8);
                                        var bn = new Bn().fromBuffer(buf);
                                        this.pos = this.pos + 8;
                                        return bn;
                                    }
                                },
                                {
                                    key: "readUInt64LEBn",
                                    value: function readUInt64LEBn() {
                                        var buf = this.readReverse(8);
                                        var bn = new Bn().fromBuffer(buf);
                                        return bn;
                                    }
                                },
                                {
                                    key: "readVarIntNum",
                                    value: function readVarIntNum() {
                                        var first = this.readUInt8();
                                        var bn, n;
                                        switch(first){
                                            case 0xfd:
                                                return this.readUInt16LE();
                                            case 0xfe:
                                                return this.readUInt32LE();
                                            case 0xff:
                                                bn = this.readUInt64LEBn();
                                                n = bn.toNumber();
                                                if (n <= Math.pow(2, 53)) return n;
                                                else throw new Error("number too large to retain precision - use readVarIntBn");
                                            default:
                                                return first;
                                        }
                                    }
                                },
                                {
                                    key: "readVarIntBuf",
                                    value: function readVarIntBuf() {
                                        var first = this.buf.readUInt8(this.pos);
                                        switch(first){
                                            case 0xfd:
                                                return this.read(3);
                                            case 0xfe:
                                                return this.read(5);
                                            case 0xff:
                                                return this.read(9);
                                            default:
                                                return this.read(1);
                                        }
                                    }
                                },
                                {
                                    key: "readVarIntBn",
                                    value: function readVarIntBn() {
                                        var first = this.readUInt8();
                                        switch(first){
                                            case 0xfd:
                                                return new Bn(this.readUInt16LE());
                                            case 0xfe:
                                                return new Bn(this.readUInt32LE());
                                            case 0xff:
                                                return this.readUInt64LEBn();
                                            default:
                                                return new Bn(first);
                                        }
                                    }
                                }
                            ]);
                            return Br;
                        }();
                        exports.Br = Br1;
                        var Bw1 = /*#__PURE__*/ function() {
                            function Bw(bufs) {
                                _classCallCheck2(this, Bw);
                                this.fromObject({
                                    bufs: bufs
                                });
                            }
                            _createClass2(Bw, [
                                {
                                    key: "fromObject",
                                    value: function fromObject(obj) {
                                        this.bufs = obj.bufs || this.bufs || [];
                                        return this;
                                    }
                                },
                                {
                                    key: "getLength",
                                    value: function getLength() {
                                        var len = 0;
                                        for(var i in this.bufs){
                                            var buf = this.bufs[i];
                                            len = len + buf.length;
                                        }
                                        return len;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        return Buffer.concat(this.bufs);
                                    }
                                },
                                {
                                    key: "write",
                                    value: function write(buf) {
                                        this.bufs.push(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeReverse",
                                    value: function writeReverse(buf) {
                                        var buf2 = Buffer.alloc(buf.length);
                                        for(var i = 0; i < buf2.length; i++)buf2[i] = buf[buf.length - 1 - i];
                                        this.bufs.push(buf2);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt8",
                                    value: function writeUInt8(n) {
                                        var buf = Buffer.alloc(1);
                                        buf.writeUInt8(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeInt8",
                                    value: function writeInt8(n) {
                                        var buf = Buffer.alloc(1);
                                        buf.writeInt8(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt16BE",
                                    value: function writeUInt16BE(n) {
                                        var buf = Buffer.alloc(2);
                                        buf.writeUInt16BE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeInt16BE",
                                    value: function writeInt16BE(n) {
                                        var buf = Buffer.alloc(2);
                                        buf.writeInt16BE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt16LE",
                                    value: function writeUInt16LE(n) {
                                        var buf = Buffer.alloc(2);
                                        buf.writeUInt16LE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeInt16LE",
                                    value: function writeInt16LE(n) {
                                        var buf = Buffer.alloc(2);
                                        buf.writeInt16LE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt32BE",
                                    value: function writeUInt32BE(n) {
                                        var buf = Buffer.alloc(4);
                                        buf.writeUInt32BE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeInt32BE",
                                    value: function writeInt32BE(n) {
                                        var buf = Buffer.alloc(4);
                                        buf.writeInt32BE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt32LE",
                                    value: function writeUInt32LE(n) {
                                        var buf = Buffer.alloc(4);
                                        buf.writeUInt32LE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeInt32LE",
                                    value: function writeInt32LE(n) {
                                        var buf = Buffer.alloc(4);
                                        buf.writeInt32LE(n, 0);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt64BEBn",
                                    value: function writeUInt64BEBn(bn) {
                                        var buf = bn.toBuffer({
                                            size: 8
                                        });
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeUInt64LEBn",
                                    value: function writeUInt64LEBn(bn) {
                                        var buf = bn.toBuffer({
                                            size: 8
                                        });
                                        this.writeReverse(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeVarIntNum",
                                    value: function writeVarIntNum(n) {
                                        var buf = Bw.varIntBufNum(n);
                                        this.write(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeVarIntBn",
                                    value: function writeVarIntBn(bn) {
                                        var buf = Bw.varIntBufBn(bn);
                                        this.write(buf);
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "varIntBufNum",
                                    value: function varIntBufNum(n) {
                                        var buf;
                                        if (n < 253) {
                                            buf = Buffer.alloc(1);
                                            buf.writeUInt8(n, 0);
                                        } else if (n < 0x10000) {
                                            buf = Buffer.alloc(3);
                                            buf.writeUInt8(253, 0);
                                            buf.writeUInt16LE(n, 1);
                                        } else if (n < 0x100000000) {
                                            buf = Buffer.alloc(5);
                                            buf.writeUInt8(254, 0);
                                            buf.writeUInt32LE(n, 1);
                                        } else {
                                            buf = Buffer.alloc(9);
                                            buf.writeUInt8(255, 0);
                                            buf.writeInt32LE(n & -1, 1);
                                            buf.writeUInt32LE(Math.floor(n / 0x100000000), 5);
                                        }
                                        return buf;
                                    }
                                },
                                {
                                    key: "varIntBufBn",
                                    value: function varIntBufBn(bn) {
                                        var buf;
                                        var n = bn.toNumber();
                                        if (n < 253) {
                                            buf = Buffer.alloc(1);
                                            buf.writeUInt8(n, 0);
                                        } else if (n < 0x10000) {
                                            buf = Buffer.alloc(3);
                                            buf.writeUInt8(253, 0);
                                            buf.writeUInt16LE(n, 1);
                                        } else if (n < 0x100000000) {
                                            buf = Buffer.alloc(5);
                                            buf.writeUInt8(254, 0);
                                            buf.writeUInt32LE(n, 1);
                                        } else {
                                            var bw = new Bw();
                                            bw.writeUInt8(255);
                                            bw.writeUInt64LEBn(bn);
                                            buf = bw.toBuffer();
                                        }
                                        return buf;
                                    }
                                }
                            ]);
                            return Bw;
                        }();
                        exports.Bw = Bw1;
                        var Struct1 = /*#__PURE__*/ function() {
                            function Struct(obj) {
                                _classCallCheck2(this, Struct);
                                this.fromObject(obj);
                            }
                            _createClass2(Struct, [
                                {
                                    key: "fromObject",
                                    value: function fromObject(obj) {
                                        if (!obj) return this;
                                        for(var _i7 = 0, _Object$keys = Object.keys(obj); _i7 < _Object$keys.length; _i7++){
                                            var key = _Object$keys[_i7];
                                            if (obj[key] !== undefined) this[key] = obj[key];
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        if (!(br instanceof Br1)) throw new Error("br must be a buffer reader");
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "asyncFromBr",
                                    value: function asyncFromBr(br) {
                                        if (!(br instanceof Br1)) throw new Error("br must be a buffer reader");
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "asyncToBw",
                                    value: function asyncToBw(bw) {
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "genFromBuffers",
                                    value: /*#__PURE__*/ _regeneratorRuntime().mark(function genFromBuffers() {
                                        return _regeneratorRuntime().wrap(function genFromBuffers$(_context28) {
                                            while(true)switch(_context28.prev = _context28.next){
                                                case 0:
                                                    throw new Error("not implemented");
                                                case 1:
                                                case "end":
                                                    return _context28.stop();
                                            }
                                        }, genFromBuffers);
                                    })
                                },
                                {
                                    key: "expect",
                                    value: /*#__PURE__*/ _regeneratorRuntime().mark(function expect(len, startbuf) {
                                        var buf, bw, gotlen, remainderlen, overlen, remainderbuf;
                                        return _regeneratorRuntime().wrap(function expect$(_context29) {
                                            while(true)switch(_context29.prev = _context29.next){
                                                case 0:
                                                    buf = startbuf;
                                                    bw = new Bw1();
                                                    gotlen = 0;
                                                    if (startbuf) {
                                                        bw.write(startbuf);
                                                        gotlen += startbuf.length;
                                                    }
                                                case 4:
                                                    if (!(gotlen < len)) {
                                                        _context29.next = 15;
                                                        break;
                                                    }
                                                    remainderlen = len - gotlen;
                                                    _context29.next = 8;
                                                    return remainderlen;
                                                case 8:
                                                    buf = _context29.sent;
                                                    if (buf) {
                                                        _context29.next = 11;
                                                        break;
                                                    }
                                                    return _context29.abrupt("continue", 4);
                                                case 11:
                                                    bw.write(buf);
                                                    gotlen += buf.length;
                                                    _context29.next = 4;
                                                    break;
                                                case 15:
                                                    buf = bw.toBuffer();
                                                    overlen = gotlen - len;
                                                    remainderbuf = buf.slice(buf.length - overlen, buf.length);
                                                    buf = buf.slice(0, buf.length - overlen);
                                                    return _context29.abrupt("return", {
                                                        buf: buf,
                                                        remainderbuf: remainderbuf
                                                    });
                                                case 20:
                                                case "end":
                                                    return _context29.stop();
                                            }
                                        }, expect);
                                    })
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        if (!Buffer.isBuffer(buf)) throw new Error("buf must be a buffer");
                                        var br = new Br1(buf);
                                        for(var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)rest[_key3 - 1] = arguments[_key3];
                                        return this.fromBr.apply(this, [
                                            br
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "asyncFromBuffer",
                                    value: function asyncFromBuffer(buf) {
                                        if (!Buffer.isBuffer(buf)) throw new Error("buf must be a buffer");
                                        var br = new Br1(buf);
                                        for(var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)rest[_key4 - 1] = arguments[_key4];
                                        return this.asyncFromBr.apply(this, [
                                            br
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "fromFastBuffer",
                                    value: function fromFastBuffer(buf) {
                                        if (buf.length === 0) return this;
                                        else {
                                            for(var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)rest[_key5 - 1] = arguments[_key5];
                                            return this.fromBuffer.apply(this, [
                                                buf
                                            ].concat(rest));
                                        }
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        return this.toBw.apply(this, arguments).toBuffer();
                                    }
                                },
                                {
                                    key: "asyncToBuffer",
                                    value: function asyncToBuffer() {
                                        return this.asyncToBw.apply(this, arguments).then(function(bw) {
                                            return bw.toBuffer();
                                        });
                                    }
                                },
                                {
                                    key: "toFastBuffer",
                                    value: function toFastBuffer() {
                                        if (Object.keys(this).length === 0) return Buffer.alloc(0);
                                        else return this.toBuffer.apply(this, arguments);
                                    }
                                },
                                {
                                    key: "fromHex",
                                    value: function fromHex(hex) {
                                        if (!(0, _isHex["default"])(hex)) throw new Error("invalid hex string");
                                        var buf = Buffer.from(hex, "hex");
                                        for(var _len6 = arguments.length, rest = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++)rest[_key6 - 1] = arguments[_key6];
                                        return this.fromBuffer.apply(this, [
                                            buf
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "asyncFromHex",
                                    value: function asyncFromHex(hex) {
                                        if (!(0, _isHex["default"])(hex)) throw new Error("invalid hex string");
                                        var buf = Buffer.from(hex, "hex");
                                        for(var _len7 = arguments.length, rest = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++)rest[_key7 - 1] = arguments[_key7];
                                        return this.asyncFromBuffer.apply(this, [
                                            buf
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "fromFastHex",
                                    value: function fromFastHex(hex) {
                                        if (!(0, _isHex["default"])(hex)) throw new Error("invalid hex string");
                                        var buf = Buffer.from(hex, "hex");
                                        for(var _len8 = arguments.length, rest = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++)rest[_key8 - 1] = arguments[_key8];
                                        return this.fromFastBuffer.apply(this, [
                                            buf
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "toHex",
                                    value: function toHex() {
                                        return this.toBuffer.apply(this, arguments).toString("hex");
                                    }
                                },
                                {
                                    key: "asyncToHex",
                                    value: function asyncToHex() {
                                        return this.asyncToBuffer.apply(this, arguments).then(function(buf) {
                                            return buf.toString("hex");
                                        });
                                    }
                                },
                                {
                                    key: "toFastHex",
                                    value: function toFastHex() {
                                        return this.toFastBuffer.apply(this, arguments).toString("hex");
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        if (typeof str !== "string") throw new Error("str must be a string");
                                        for(var _len9 = arguments.length, rest = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++)rest[_key9 - 1] = arguments[_key9];
                                        return this.fromHex.apply(this, [
                                            str
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "asyncFromString",
                                    value: function asyncFromString(str) {
                                        if (typeof str !== "string") throw new Error("str must be a string");
                                        for(var _len10 = arguments.length, rest = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++)rest[_key10 - 1] = arguments[_key10];
                                        return this.asyncFromHex.apply(this, [
                                            str
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return this.toHex.apply(this, arguments);
                                    }
                                },
                                {
                                    key: "asyncToString",
                                    value: function asyncToString() {
                                        return this.asyncToHex.apply(this, arguments);
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "asyncFromJSON",
                                    value: function asyncFromJSON(json) {
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var json = {};
                                        for(var val in this){
                                            if (Array.isArray(this[val])) {
                                                var arr = [];
                                                for(var i in this[val])if (typeof this[val][i].toJSON === "function") arr.push(this[val][i].toJSON());
                                                else arr.push(JSON.stringify(this[val][i]));
                                                json[val] = arr;
                                            } else if (this[val] === null) json[val] = this[val];
                                            else if (_typeof(this[val]) === "object" && typeof this[val].toJSON === "function") json[val] = this[val].toJSON();
                                            else if (typeof this[val] === "boolean" || typeof this[val] === "number" || typeof this[val] === "string") json[val] = this[val];
                                            else if (Buffer.isBuffer(this[val])) json[val] = this[val].toString("hex");
                                            else if (this[val] instanceof Map) json[val] = JSON.stringify(this[val]);
                                            else if (_typeof(this[val]) === "object") throw new Error("not implemented");
                                        }
                                        return json;
                                    }
                                },
                                {
                                    key: "asyncToJSON",
                                    value: function asyncToJSON() {
                                        throw new Error("not implemented");
                                    }
                                },
                                {
                                    key: "clone",
                                    value: function clone() {
                                        return this.cloneByJSON();
                                    }
                                },
                                {
                                    key: "cloneByBuffer",
                                    value: function cloneByBuffer() {
                                        return new this.constructor().fromBuffer(this.toBuffer());
                                    }
                                },
                                {
                                    key: "cloneByFastBuffer",
                                    value: function cloneByFastBuffer() {
                                        return new this.constructor().fromFastBuffer(this.toFastBuffer());
                                    }
                                },
                                {
                                    key: "cloneByHex",
                                    value: function cloneByHex() {
                                        return new this.constructor().fromHex(this.toHex());
                                    }
                                },
                                {
                                    key: "cloneByString",
                                    value: function cloneByString() {
                                        return new this.constructor().fromString(this.toString());
                                    }
                                },
                                {
                                    key: "cloneByJSON",
                                    value: function cloneByJSON() {
                                        return new this.constructor().fromJSON(this.toJSON());
                                    }
                                }
                            ], [
                                {
                                    key: "fromObject",
                                    value: function fromObject(obj) {
                                        return new this().fromObject(obj);
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        return new this().fromBr(br);
                                    }
                                },
                                {
                                    key: "asyncFromBr",
                                    value: function asyncFromBr(br) {
                                        return new this().asyncFromBr(br);
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer() {
                                        var _this5;
                                        return (_this5 = new this()).fromBuffer.apply(_this5, arguments);
                                    }
                                },
                                {
                                    key: "asyncFromBuffer",
                                    value: function asyncFromBuffer(buf) {
                                        var _this6;
                                        for(var _len11 = arguments.length, rest = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++)rest[_key11 - 1] = arguments[_key11];
                                        return (_this6 = new this()).asyncFromBuffer.apply(_this6, [
                                            buf
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "fromFastBuffer",
                                    value: function fromFastBuffer() {
                                        var _this7;
                                        return (_this7 = new this()).fromFastBuffer.apply(_this7, arguments);
                                    }
                                },
                                {
                                    key: "fromHex",
                                    value: function fromHex(hex) {
                                        var _this8;
                                        for(var _len12 = arguments.length, rest = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++)rest[_key12 - 1] = arguments[_key12];
                                        return (_this8 = new this()).fromHex.apply(_this8, [
                                            hex
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "asyncFromHex",
                                    value: function asyncFromHex(hex) {
                                        var _this9;
                                        for(var _len13 = arguments.length, rest = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++)rest[_key13 - 1] = arguments[_key13];
                                        return (_this9 = new this()).asyncFromHex.apply(_this9, [
                                            hex
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "fromFastHex",
                                    value: function fromFastHex(hex) {
                                        var _this10;
                                        for(var _len14 = arguments.length, rest = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++)rest[_key14 - 1] = arguments[_key14];
                                        return (_this10 = new this()).fromFastHex.apply(_this10, [
                                            hex
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var _this11;
                                        for(var _len15 = arguments.length, rest = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++)rest[_key15 - 1] = arguments[_key15];
                                        return (_this11 = new this()).fromString.apply(_this11, [
                                            str
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "asyncFromString",
                                    value: function asyncFromString(str) {
                                        var _this12;
                                        for(var _len16 = arguments.length, rest = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++)rest[_key16 - 1] = arguments[_key16];
                                        return (_this12 = new this()).asyncFromString.apply(_this12, [
                                            str
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        var _this13;
                                        for(var _len17 = arguments.length, rest = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++)rest[_key17 - 1] = arguments[_key17];
                                        return (_this13 = new this()).fromJSON.apply(_this13, [
                                            json
                                        ].concat(rest));
                                    }
                                },
                                {
                                    key: "asyncFromJSON",
                                    value: function asyncFromJSON(json) {
                                        var _this14;
                                        for(var _len18 = arguments.length, rest = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++)rest[_key18 - 1] = arguments[_key18];
                                        return (_this14 = new this()).asyncFromJSON.apply(_this14, [
                                            json
                                        ].concat(rest));
                                    }
                                }
                            ]);
                            return Struct;
                        }();
                        exports.Struct = Struct1;
                        var Base581 = /*#__PURE__*/ function(_Struct) {
                            _inherits(Base58, _Struct);
                            var _super2 = _createSuper(Base58);
                            function Base58(buf) {
                                _classCallCheck2(this, Base58);
                                return _super2.call(this, {
                                    buf: buf
                                });
                            }
                            _createClass2(Base58, [
                                {
                                    key: "fromHex",
                                    value: function fromHex(hex) {
                                        return this.fromBuffer(Buffer.from(hex, "hex"));
                                    }
                                },
                                {
                                    key: "toHex",
                                    value: function toHex() {
                                        return this.toBuffer().toString("hex");
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        this.buf = buf;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var buf = Base58.decode(str);
                                        this.buf = buf;
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        return this.buf;
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return Base58.encode(this.buf);
                                    }
                                }
                            ], [
                                {
                                    key: "encode",
                                    value: function encode(buf) {
                                        if (!Buffer.isBuffer(buf)) throw new Error("Input should be a buffer");
                                        return _bs["default"].encode(buf);
                                    }
                                },
                                {
                                    key: "decode",
                                    value: function decode(str) {
                                        if (typeof str !== "string") throw new Error("Input should be a string");
                                        return Buffer.from(_bs["default"].decode(str));
                                    }
                                }
                            ]);
                            return Base58;
                        }(Struct1);
                        exports.Base58 = Base581;
                        var cmp = function cmp(buf1, buf2) {
                            if (!Buffer.isBuffer(buf1) || !Buffer.isBuffer(buf2)) throw new Error("buf1 and buf2 must be buffers");
                            if (buf1.length !== buf2.length) return false;
                            var d = 0;
                            for(var i = 0; i < buf1.length; i++){
                                var x = buf1[i];
                                var y = buf2[i];
                                d |= x ^ y;
                            }
                            return d === 0;
                        };
                        exports.cmp = cmp;
                        var WorkersResult1 = /*#__PURE__*/ function(_Struct2) {
                            _inherits(WorkersResult, _Struct2);
                            var _super3 = _createSuper(WorkersResult);
                            function WorkersResult(resbuf, isError, id) {
                                _classCallCheck2(this, WorkersResult);
                                return _super3.call(this, {
                                    resbuf: resbuf,
                                    isError: isError,
                                    id: id
                                });
                            }
                            _createClass2(WorkersResult, [
                                {
                                    key: "fromResult",
                                    value: function fromResult(result, id) {
                                        if (result.toFastBuffer) this.resbuf = result.toFastBuffer();
                                        else if (Buffer.isBuffer(result)) this.resbuf = result;
                                        else this.resbuf = Buffer.from(JSON.stringify(result));
                                        this.isError = false;
                                        this.id = id;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromError",
                                    value: function fromError(error, id) {
                                        this.resbuf = Buffer.from(JSON.stringify(error.message));
                                        this.isError = true;
                                        this.id = id;
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        bw.writeVarIntNum(this.resbuf.length);
                                        bw.write(this.resbuf);
                                        bw.writeUInt8(Number(this.isError));
                                        bw.writeVarIntNum(this.id);
                                        return bw;
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        var resbuflen = br.readVarIntNum();
                                        this.resbuf = br.read(resbuflen);
                                        this.isError = Boolean(br.readUInt8());
                                        this.id = br.readVarIntNum();
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "fromResult",
                                    value: function fromResult(result, id) {
                                        return new this().fromResult(result, id);
                                    }
                                }
                            ]);
                            return WorkersResult;
                        }(Struct1);
                        exports.WorkersResult = WorkersResult1;
                        var globalWorkers;
                        var Workers1 = /*#__PURE__*/ function() {
                            function Workers() {
                                var nativeWorkers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                                var lastid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                                var incompconsteRes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                                var promisemap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();
                                _classCallCheck2(this, Workers);
                                this.nativeWorkers = nativeWorkers;
                                this.lastid = lastid;
                                this.incompconsteRes = incompconsteRes;
                                this.promisemap = promisemap;
                            }
                            _createClass2(Workers, [
                                {
                                    key: "asyncObjectMethod",
                                    value: function asyncObjectMethod(obj, methodname, args) {
                                        var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.lastid + 1;
                                        if (!args) throw new Error("must specify args");
                                        var result = obj[methodname].apply(obj, _toConsumableArray(args));
                                        var workersResult = new WorkersResult1().fromResult(result, id);
                                        return workersResult;
                                    }
                                },
                                {
                                    key: "asyncClassMethod",
                                    value: function asyncClassMethod(classObj, methodname, args) {
                                        var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.lastid + 1;
                                        if (!args) throw new Error("must specify args");
                                        var result = classObj[methodname].apply(classObj, _toConsumableArray(args));
                                        var workersResult = new WorkersResult1().fromResult(result, id);
                                        return workersResult;
                                    }
                                }
                            ], [
                                {
                                    key: "asyncObjectMethod",
                                    value: function asyncObjectMethod(obj, methodname, args, id) {
                                        if (!globalWorkers) globalWorkers = new Workers();
                                        return globalWorkers.asyncObjectMethod(obj, methodname, args, id);
                                    }
                                },
                                {
                                    key: "asyncClassMethod",
                                    value: function asyncClassMethod(classObj, methodname, args, id) {
                                        if (!globalWorkers) globalWorkers = new Workers();
                                        return globalWorkers.asyncClassMethod(classObj, methodname, args, id);
                                    }
                                },
                                {
                                    key: "endGlobalWorkers",
                                    value: function endGlobalWorkers() {
                                        if (globalWorkers && !process.browser) globalWorkers = undefined;
                                    }
                                }
                            ]);
                            return Workers;
                        }();
                        exports.Workers = Workers1;
                        var Hash1 = /*#__PURE__*/ _createClass2(function Hash() {
                            _classCallCheck2(this, Hash);
                        });
                        exports.Hash = Hash1;
                        Hash1.sha1 = function(buf) {
                            if (!Buffer.isBuffer(buf)) throw new Error("sha1 hash must be of a buffer");
                            var Sha1 = _hash["default"].sha1;
                            var hash = new Sha1().update(buf).digest();
                            return Buffer.from(hash);
                        };
                        Hash1.sha1.blockSize = 512;
                        Hash1.asyncSha1 = /*#__PURE__*/ function() {
                            var _ref3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee28(buf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee28$(_context30) {
                                    while(true)switch(_context30.prev = _context30.next){
                                        case 0:
                                            args = [
                                                buf
                                            ];
                                            _context30.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha1", args);
                                        case 3:
                                            workersResult = _context30.sent;
                                            return _context30.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context30.stop();
                                    }
                                }, _callee28);
                            }));
                            return function(_x42) {
                                return _ref3.apply(this, arguments);
                            };
                        }();
                        Hash1.sha256 = function(buf) {
                            if (!Buffer.isBuffer(buf)) throw new Error("sha256 hash must be of a buffer");
                            var Sha256 = _hash["default"].sha256;
                            var hash = new Sha256().update(buf).digest();
                            return Buffer.from(hash);
                        };
                        Hash1.sha256.blockSize = 512;
                        Hash1.asyncSha256 = /*#__PURE__*/ function() {
                            var _ref4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee29(buf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee29$(_context31) {
                                    while(true)switch(_context31.prev = _context31.next){
                                        case 0:
                                            args = [
                                                buf
                                            ];
                                            _context31.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha256", args);
                                        case 3:
                                            workersResult = _context31.sent;
                                            return _context31.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context31.stop();
                                    }
                                }, _callee29);
                            }));
                            return function(_x43) {
                                return _ref4.apply(this, arguments);
                            };
                        }();
                        Hash1.sha256Sha256 = function(buf) {
                            try {
                                return Hash1.sha256(Hash1.sha256(buf));
                            } catch (e) {
                                throw new Error("sha256Sha256 hash must be of a buffer: " + e);
                            }
                        };
                        Hash1.asyncSha256Sha256 = /*#__PURE__*/ function() {
                            var _ref5 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee30(buf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee30$(_context32) {
                                    while(true)switch(_context32.prev = _context32.next){
                                        case 0:
                                            args = [
                                                buf
                                            ];
                                            _context32.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha256Sha256", args);
                                        case 3:
                                            workersResult = _context32.sent;
                                            return _context32.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context32.stop();
                                    }
                                }, _callee30);
                            }));
                            return function(_x44) {
                                return _ref5.apply(this, arguments);
                            };
                        }();
                        Hash1.ripemd160 = function(buf) {
                            if (!Buffer.isBuffer(buf)) throw new Error("ripemd160 hash must be of a buffer");
                            var Ripemd160 = _hash["default"].ripemd160;
                            var hash = new Ripemd160().update(buf).digest();
                            return Buffer.from(hash);
                        };
                        Hash1.asyncRipemd160 = /*#__PURE__*/ function() {
                            var _ref6 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee31(buf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee31$(_context33) {
                                    while(true)switch(_context33.prev = _context33.next){
                                        case 0:
                                            args = [
                                                buf
                                            ];
                                            _context33.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "ripemd160", args);
                                        case 3:
                                            workersResult = _context33.sent;
                                            return _context33.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context33.stop();
                                    }
                                }, _callee31);
                            }));
                            return function(_x45) {
                                return _ref6.apply(this, arguments);
                            };
                        }();
                        Hash1.sha256Ripemd160 = function(buf) {
                            try {
                                return Hash1.ripemd160(Hash1.sha256(buf));
                            } catch (e) {
                                throw new Error("sha256Ripemd160 hash must be of a buffer: " + e);
                            }
                        };
                        Hash1.asyncSha256Ripemd160 = /*#__PURE__*/ function() {
                            var _ref7 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee32(buf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee32$(_context34) {
                                    while(true)switch(_context34.prev = _context34.next){
                                        case 0:
                                            args = [
                                                buf
                                            ];
                                            _context34.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha256Ripemd160", args);
                                        case 3:
                                            workersResult = _context34.sent;
                                            return _context34.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context34.stop();
                                    }
                                }, _callee32);
                            }));
                            return function(_x46) {
                                return _ref7.apply(this, arguments);
                            };
                        }();
                        Hash1.sha512 = function(buf) {
                            if (!Buffer.isBuffer(buf)) throw new Error("sha512 hash must be of a buffer");
                            var Sha512 = _hash["default"].sha512;
                            var hash = new Sha512().update(buf).digest();
                            return Buffer.from(hash);
                        };
                        Hash1.asyncSha512 = /*#__PURE__*/ function() {
                            var _ref8 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee33(buf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee33$(_context35) {
                                    while(true)switch(_context35.prev = _context35.next){
                                        case 0:
                                            args = [
                                                buf
                                            ];
                                            _context35.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha512", args);
                                        case 3:
                                            workersResult = _context35.sent;
                                            return _context35.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context35.stop();
                                    }
                                }, _callee33);
                            }));
                            return function(_x47) {
                                return _ref8.apply(this, arguments);
                            };
                        }();
                        Hash1.sha512.blockSize = 1024;
                        Hash1.hmac = function(hashFStr, data, key) {
                            if (hashFStr !== "sha1" && hashFStr !== "sha256" && hashFStr !== "sha512") throw new Error("invalid choice of hash function");
                            var hashf = Hash1[hashFStr];
                            if (!Buffer.isBuffer(data) || !Buffer.isBuffer(key)) throw new Error("data and key must be buffers");
                            var blockSize = hashf.blockSize / 8;
                            if (key.length > blockSize) key = hashf(key);
                            if (key.length < blockSize) {
                                var fill = Buffer.alloc(blockSize);
                                fill.fill(0, key.length);
                                key.copy(fill);
                                key = fill;
                            }
                            var oKeyPad = Buffer.alloc(blockSize);
                            var iKeyPad = Buffer.alloc(blockSize);
                            for(var i = 0; i < blockSize; i++){
                                oKeyPad[i] = 0x5c ^ key[i];
                                iKeyPad[i] = 0x36 ^ key[i];
                            }
                            return hashf(Buffer.concat([
                                oKeyPad,
                                hashf(Buffer.concat([
                                    iKeyPad,
                                    data
                                ]))
                            ]));
                        };
                        Hash1.sha1Hmac = function(data, key) {
                            return Hash1.hmac("sha1", data, key);
                        };
                        Hash1.asyncSha1Hmac = /*#__PURE__*/ function() {
                            var _ref9 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee34(data, key) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee34$(_context36) {
                                    while(true)switch(_context36.prev = _context36.next){
                                        case 0:
                                            args = [
                                                data,
                                                key
                                            ];
                                            _context36.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha1Hmac", args);
                                        case 3:
                                            workersResult = _context36.sent;
                                            return _context36.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context36.stop();
                                    }
                                }, _callee34);
                            }));
                            return function(_x48, _x49) {
                                return _ref9.apply(this, arguments);
                            };
                        }();
                        Hash1.sha1Hmac.bitsize = 160;
                        Hash1.sha256Hmac = function(data, key) {
                            return Hash1.hmac("sha256", data, key);
                        };
                        Hash1.asyncSha256Hmac = /*#__PURE__*/ function() {
                            var _ref10 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee35(data, key) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee35$(_context37) {
                                    while(true)switch(_context37.prev = _context37.next){
                                        case 0:
                                            args = [
                                                data,
                                                key
                                            ];
                                            _context37.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha256Hmac", args);
                                        case 3:
                                            workersResult = _context37.sent;
                                            return _context37.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context37.stop();
                                    }
                                }, _callee35);
                            }));
                            return function(_x50, _x51) {
                                return _ref10.apply(this, arguments);
                            };
                        }();
                        Hash1.sha256Hmac.bitsize = 256;
                        Hash1.sha512Hmac = function(data, key) {
                            return Hash1.hmac("sha512", data, key);
                        };
                        Hash1.asyncSha512Hmac = /*#__PURE__*/ function() {
                            var _ref11 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee36(data, key) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee36$(_context38) {
                                    while(true)switch(_context38.prev = _context38.next){
                                        case 0:
                                            args = [
                                                data,
                                                key
                                            ];
                                            _context38.next = 3;
                                            return Workers1.asyncClassMethod(Hash1, "sha512Hmac", args);
                                        case 3:
                                            workersResult = _context38.sent;
                                            return _context38.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context38.stop();
                                    }
                                }, _callee36);
                            }));
                            return function(_x52, _x53) {
                                return _ref11.apply(this, arguments);
                            };
                        }();
                        Hash1.sha512Hmac.bitsize = 512;
                        var Base58Check1 = /*#__PURE__*/ function(_Struct3) {
                            _inherits(Base58Check, _Struct3);
                            var _super4 = _createSuper(Base58Check);
                            function Base58Check(buf) {
                                _classCallCheck2(this, Base58Check);
                                return _super4.call(this, {
                                    buf: buf
                                });
                            }
                            _createClass2(Base58Check, [
                                {
                                    key: "fromHex",
                                    value: function fromHex(hex) {
                                        return this.fromBuffer(Buffer.from(hex, "hex"));
                                    }
                                },
                                {
                                    key: "toHex",
                                    value: function toHex() {
                                        return this.toBuffer().toString("hex");
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        this.buf = buf;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var buf = Base58Check.decode(str);
                                        this.buf = buf;
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        return this.buf;
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return Base58Check.encode(this.buf);
                                    }
                                }
                            ], [
                                {
                                    key: "decode",
                                    value: function decode(s) {
                                        if (typeof s !== "string") throw new Error("Input must be a string");
                                        var buf = Base581.decode(s);
                                        if (buf.length < 4) throw new Error("Input string too short");
                                        var data = buf.slice(0, -4);
                                        var csum = buf.slice(-4);
                                        var hash = Hash1.sha256Sha256(data);
                                        var hash4 = hash.slice(0, 4);
                                        if (!cmp(csum, hash4)) throw new Error("Checksum mismatch");
                                        return data;
                                    }
                                },
                                {
                                    key: "encode",
                                    value: function encode(buf) {
                                        if (!Buffer.isBuffer(buf)) throw new Error("Input must be a buffer");
                                        var checkedBuf = Buffer.alloc(buf.length + 4);
                                        var hash = Hash1.sha256Sha256(buf);
                                        buf.copy(checkedBuf);
                                        hash.copy(checkedBuf, buf.length);
                                        return Base581.encode(checkedBuf);
                                    }
                                }
                            ]);
                            return Base58Check;
                        }(Struct1);
                        exports.Base58Check = Base58Check1;
                        var Config1 = /*#__PURE__*/ function() {
                            function Config(values) {
                                _classCallCheck2(this, Config);
                                this.keyDefined = function(key) {
                                    return key in values;
                                };
                                this.getValue = function(key) {
                                    return values[key];
                                };
                            }
                            _createClass2(Config, [
                                {
                                    key: "get",
                                    value: function get(key) {
                                        if (this.keyDefined(key)) return this.getValue(key);
                                        else throw new Error("Unknown configuration: ".concat(key));
                                    }
                                }
                            ]);
                            return Config;
                        }();
                        var ConfigBuilder1 = /*#__PURE__*/ function() {
                            function ConfigBuilder() {
                                _classCallCheck2(this, ConfigBuilder);
                                this.variables = {};
                            }
                            _createClass2(ConfigBuilder, [
                                {
                                    key: "build",
                                    value: function build() {
                                        return new Config1(this.variables);
                                    }
                                },
                                {
                                    key: "addValue",
                                    value: function addValue(key, value) {
                                        if (value === undefined) throw new Error('Failed to add "'.concat(key, '" property. The value cannot be undefined'));
                                        if (key in this.variables) throw new Error('"'.concat(key, '" already has a value defined.'));
                                        this.variables[key] = value;
                                        return this;
                                    }
                                },
                                {
                                    key: "addValueWithDefault",
                                    value: function addValueWithDefault(key, value, defaultValue) {
                                        if (defaultValue === undefined) throw new Error('Failed to add "'.concat(key, '" property. Default value cannot be undefined'));
                                        return this.addValue(key, value === undefined ? defaultValue : value);
                                    }
                                }
                            ]);
                            return ConfigBuilder;
                        }();
                        var config = new ConfigBuilder1().addValue("NETWORK", process.env.NETWORK || "mainnet").build();
                        var Constants = {};
                        exports.Constants = Constants;
                        Constants.Mainnet = {
                            MaxSize: 0x02000000,
                            Port: 8333,
                            Address: {
                                pubKeyHash: 0x00,
                                payToScriptHash: 0x05
                            },
                            Bip32: {
                                pubKey: 0x0488b21e,
                                privKey: 0x0488ade4
                            },
                            Block: {
                                maxNBits: 0x1d00ffff,
                                magicNum: 0xe3e1f3e8
                            },
                            Msg: {
                                magicNum: 0xe3e1f3e8,
                                versionBytesNum: 70015
                            },
                            PrivKey: {
                                versionByteNum: 0x80
                            },
                            TxBuilder: {
                                dust: 546,
                                feePerKbNum: 0.00000500e8
                            },
                            Workers: {
                                timeout: 60000
                            }
                        };
                        Constants.Testnet = Object.assign({}, Constants.Mainnet, {
                            Port: 18333,
                            Address: {
                                pubKeyHash: 0x6f,
                                payToScriptHash: 0xc4
                            },
                            Bip32: {
                                pubKey: 0x043587cf,
                                privKey: 0x04358394
                            },
                            Block: {
                                maxNBits: 0x1d00ffff,
                                magicNum: 0xf4e5f3f4
                            },
                            Msg: {
                                magicNum: 0xf4e5f3f4,
                                versionBytesNum: 70015
                            },
                            PrivKey: {
                                versionByteNum: 0xef
                            }
                        });
                        Constants.Regtest = Object.assign({}, Constants.Mainnet, {
                            Port: 18444,
                            Address: {
                                pubKeyHash: 0x6f,
                                payToScriptHash: 0xc4
                            },
                            Bip32: {
                                pubKey: 0x043587cf,
                                privKey: 0x04358394
                            },
                            Block: {
                                maxNBits: 0x207fffff,
                                magicNum: 0xdab5bffa
                            },
                            Msg: {
                                magicNum: 0xdab5bffa,
                                versionBytesNum: 70015
                            },
                            PrivKey: {
                                versionByteNum: 0xef
                            }
                        });
                        Constants.STN = Object.assign({}, Constants.Mainnet, {
                            Port: 9333,
                            Address: {
                                pubKeyHash: 0x6f,
                                payToScriptHash: 0xc4
                            },
                            Bip32: {
                                pubKey: 0x043587cf,
                                privKey: 0x04358394
                            },
                            Block: {
                                maxNBits: 0x1d00ffff,
                                magicNum: 0xfbcec4f9
                            },
                            Msg: {
                                magicNum: 0xfbcec4f9,
                                versionBytesNum: 70015
                            },
                            PrivKey: {
                                versionByteNum: 0xef
                            }
                        });
                        if (config.get("NETWORK") === "testnet") Constants.Default = Object.assign({}, Constants.Testnet);
                        else if (config.get("NETWORK") === "mainnet") Constants.Default = Object.assign({}, Constants.Mainnet);
                        else if (config.get("NETWORK") === "regtest") Constants.Default = Object.assign({}, Constants.Regtest);
                        else if (config.get("NETWORK") === "stn") Constants.Default = Object.assign({}, Constants.STN);
                        else throw new Error("must set network in environment variable - mainnet, testnet, regtest or stn?, received ".concat(config.get("NETWORK")));
                        var getConstants = function getConstants(magicNum) {
                            if (Constants.Mainnet.Msg.magicNum === magicNum) return Constants.Mainnet;
                            else if (Constants.Testnet.Msg.magicNum === magicNum) return Constants.Testnet;
                            else if (Constants.Regtest.Msg.magicNum === magicNum) return Constants.Regtest;
                            else if (Constants.STN.Msg.magicNum === magicNum) return Constants.STN;
                            else return Constants.Default;
                        };
                        exports.getConstants = getConstants;
                        var map1 = {
                            OP_FALSE: 0x00,
                            OP_0: 0x00,
                            OP_PUSHDATA1: 0x4c,
                            OP_PUSHDATA2: 0x4d,
                            OP_PUSHDATA4: 0x4e,
                            OP_1NEGATE: 0x4f,
                            OP_RESERVED: 0x50,
                            OP_TRUE: 0x51,
                            OP_1: 0x51,
                            OP_2: 0x52,
                            OP_3: 0x53,
                            OP_4: 0x54,
                            OP_5: 0x55,
                            OP_6: 0x56,
                            OP_7: 0x57,
                            OP_8: 0x58,
                            OP_9: 0x59,
                            OP_10: 0x5a,
                            OP_11: 0x5b,
                            OP_12: 0x5c,
                            OP_13: 0x5d,
                            OP_14: 0x5e,
                            OP_15: 0x5f,
                            OP_16: 0x60,
                            OP_NOP: 0x61,
                            OP_VER: 0x62,
                            OP_IF: 0x63,
                            OP_NOTIF: 0x64,
                            OP_VERIF: 0x65,
                            OP_VERNOTIF: 0x66,
                            OP_ELSE: 0x67,
                            OP_ENDIF: 0x68,
                            OP_VERIFY: 0x69,
                            OP_RETURN: 0x6a,
                            OP_TOALTSTACK: 0x6b,
                            OP_FROMALTSTACK: 0x6c,
                            OP_2DROP: 0x6d,
                            OP_2DUP: 0x6e,
                            OP_3DUP: 0x6f,
                            OP_2OVER: 0x70,
                            OP_2ROT: 0x71,
                            OP_2SWAP: 0x72,
                            OP_IFDUP: 0x73,
                            OP_DEPTH: 0x74,
                            OP_DROP: 0x75,
                            OP_DUP: 0x76,
                            OP_NIP: 0x77,
                            OP_OVER: 0x78,
                            OP_PICK: 0x79,
                            OP_ROLL: 0x7a,
                            OP_ROT: 0x7b,
                            OP_SWAP: 0x7c,
                            OP_TUCK: 0x7d,
                            OP_CAT: 0x7e,
                            OP_SUBSTR: 0x7f,
                            OP_SPLIT: 0x7f,
                            OP_LEFT: 0x80,
                            OP_NUM2BIN: 0x80,
                            OP_RIGHT: 0x81,
                            OP_BIN2NUM: 0x81,
                            OP_SIZE: 0x82,
                            OP_INVERT: 0x83,
                            OP_AND: 0x84,
                            OP_OR: 0x85,
                            OP_XOR: 0x86,
                            OP_EQUAL: 0x87,
                            OP_EQUALVERIFY: 0x88,
                            OP_RESERVED1: 0x89,
                            OP_RESERVED2: 0x8a,
                            OP_1ADD: 0x8b,
                            OP_1SUB: 0x8c,
                            OP_2MUL: 0x8d,
                            OP_2DIV: 0x8e,
                            OP_NEGATE: 0x8f,
                            OP_ABS: 0x90,
                            OP_NOT: 0x91,
                            OP_0NOTEQUAL: 0x92,
                            OP_ADD: 0x93,
                            OP_SUB: 0x94,
                            OP_MUL: 0x95,
                            OP_DIV: 0x96,
                            OP_MOD: 0x97,
                            OP_LSHIFT: 0x98,
                            OP_RSHIFT: 0x99,
                            OP_BOOLAND: 0x9a,
                            OP_BOOLOR: 0x9b,
                            OP_NUMEQUAL: 0x9c,
                            OP_NUMEQUALVERIFY: 0x9d,
                            OP_NUMNOTEQUAL: 0x9e,
                            OP_LESSTHAN: 0x9f,
                            OP_GREATERTHAN: 0xa0,
                            OP_LESSTHANOREQUAL: 0xa1,
                            OP_GREATERTHANOREQUAL: 0xa2,
                            OP_MIN: 0xa3,
                            OP_MAX: 0xa4,
                            OP_WITHIN: 0xa5,
                            OP_RIPEMD160: 0xa6,
                            OP_SHA1: 0xa7,
                            OP_SHA256: 0xa8,
                            OP_HASH160: 0xa9,
                            OP_HASH256: 0xaa,
                            OP_CODESEPARATOR: 0xab,
                            OP_CHECKSIG: 0xac,
                            OP_CHECKSIGVERIFY: 0xad,
                            OP_CHECKMULTISIG: 0xae,
                            OP_CHECKMULTISIGVERIFY: 0xaf,
                            OP_NOP1: 0xb0,
                            OP_NOP2: 0xb1,
                            OP_CHECKLOCKTIMEVERIFY: 0xb1,
                            OP_NOP3: 0xb2,
                            OP_CHECKSEQUENCEVERIFY: 0xb2,
                            OP_NOP4: 0xb3,
                            OP_NOP5: 0xb4,
                            OP_NOP6: 0xb5,
                            OP_NOP7: 0xb6,
                            OP_NOP8: 0xb7,
                            OP_NOP9: 0xb8,
                            OP_NOP10: 0xb9,
                            OP_SMALLDATA: 0xf9,
                            OP_SMALLINTEGER: 0xfa,
                            OP_PUBKEYS: 0xfb,
                            OP_PUBKEYHASH: 0xfd,
                            OP_PUBKEY: 0xfe,
                            OP_INVALIDOPCODE: 0xff
                        };
                        var OpCode1 = /*#__PURE__*/ function(_Struct4) {
                            _inherits(OpCode, _Struct4);
                            var _super5 = _createSuper(OpCode);
                            function OpCode(num) {
                                _classCallCheck2(this, OpCode);
                                return _super5.call(this, {
                                    num: num
                                });
                            }
                            _createClass2(OpCode, [
                                {
                                    key: "fromNumber",
                                    value: function fromNumber(num) {
                                        this.num = num;
                                        return this;
                                    }
                                },
                                {
                                    key: "toNumber",
                                    value: function toNumber() {
                                        return this.num;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var num = map1[str];
                                        if (num === undefined) throw new Error("Invalid opCodeStr");
                                        this.num = num;
                                        return this;
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        var str = OpCode.str[this.num];
                                        if (str === undefined) {
                                            if (this.num > 0 && this.num < OpCode.OP_PUSHDATA1) return this.num.toString();
                                            throw new Error("OpCode does not have a string representation");
                                        }
                                        return str;
                                    }
                                }
                            ], [
                                {
                                    key: "fromNumber",
                                    value: function fromNumber(num) {
                                        return new this().fromNumber(num);
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        return new this().fromString(str);
                                    }
                                }
                            ]);
                            return OpCode;
                        }(Struct1);
                        exports.OpCode = OpCode1;
                        OpCode1.str = {};
                        for(var opCodeStr in map1){
                            OpCode1[opCodeStr] = map1[opCodeStr];
                            if (Object.prototype.hasOwnProperty.call(map1, opCodeStr)) OpCode1.str[map1[opCodeStr]] = opCodeStr;
                        }
                        var ec = _bitcoinElliptic["default"].curves.secp256k1;
                        var _point1 = ec.curve.point();
                        var _Point = _point1.constructor;
                        var Point1 = /*#__PURE__*/ function(_Point2) {
                            _inherits(Point, _Point2);
                            var _super6 = _createSuper(Point);
                            function Point(x, y, isRed) {
                                _classCallCheck2(this, Point);
                                return _super6.call(this, ec.curve, x, y, isRed);
                            }
                            _createClass2(Point, [
                                {
                                    key: "copyFrom",
                                    value: function copyFrom(point) {
                                        if (!(point instanceof _Point)) throw new Error("point should be an external point");
                                        Object.keys(point).forEach((function(key) {
                                            this[key] = point[key];
                                        }).bind(this));
                                        return this;
                                    }
                                },
                                {
                                    key: "add",
                                    value: function add(p) {
                                        p = _Point.prototype.add.call(this, p);
                                        var point = Object.create(Point.prototype);
                                        return point.copyFrom(p);
                                    }
                                },
                                {
                                    key: "mul",
                                    value: function mul(bn) {
                                        if (!bn.lt(Point.getN())) throw new Error("point mul out of range");
                                        var p = _Point.prototype.mul.call(this, bn);
                                        var point = Object.create(Point.prototype);
                                        return point.copyFrom(p);
                                    }
                                },
                                {
                                    key: "mulAdd",
                                    value: function mulAdd(bn1, point, bn2) {
                                        var p = _Point.prototype.mulAdd.call(this, bn1, point, bn2);
                                        point = Object.create(Point.prototype);
                                        return point.copyFrom(p);
                                    }
                                },
                                {
                                    key: "getX",
                                    value: function getX() {
                                        var _x = _Point.prototype.getX.call(this);
                                        var x = Object.create(Bn.prototype);
                                        _x.copy(x);
                                        return x;
                                    }
                                },
                                {
                                    key: "getY",
                                    value: function getY() {
                                        var _y = _Point.prototype.getY.call(this);
                                        var y = Object.create(Bn.prototype);
                                        _y.copy(y);
                                        return y;
                                    }
                                },
                                {
                                    key: "fromX",
                                    value: function fromX(isOdd, x) {
                                        var point = Point.fromX(isOdd, x);
                                        return this.copyFrom(point);
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return {
                                            x: this.getX().toString(),
                                            y: this.getY().toString()
                                        };
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        var x = new Bn().fromString(json.x);
                                        var y = new Bn().fromString(json.y);
                                        var point = new Point(x, y);
                                        return this.copyFrom(point);
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return JSON.stringify(this.toJSON());
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var json = JSON.parse(str);
                                        var p = new Point().fromJSON(json);
                                        return this.copyFrom(p);
                                    }
                                },
                                {
                                    key: "validate",
                                    value: function validate() {
                                        var p2 = Point.fromX(this.getY().isOdd(), this.getX());
                                        if (!(p2.getY().cmp(this.getY()) === 0)) throw new Error("Invalid y value of public key");
                                        if (!(this.getX().gt(-1) && this.getX().lt(Point.getN())) || !(this.getY().gt(-1) && this.getY().lt(Point.getN()))) throw new Error("Point does not lie on the curve");
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "fromX",
                                    value: function fromX(isOdd, x) {
                                        var _point = ec.curve.pointFromX(x, isOdd);
                                        var point = Object.create(Point.prototype);
                                        return point.copyFrom(_point);
                                    }
                                },
                                {
                                    key: "getG",
                                    value: function getG() {
                                        var _g = ec.curve.g;
                                        var g = Object.create(Point.prototype);
                                        return g.copyFrom(_g);
                                    }
                                },
                                {
                                    key: "getN",
                                    value: function getN() {
                                        return new Bn(ec.curve.n.toArray());
                                    }
                                }
                            ]);
                            return Point;
                        }(_Point);
                        exports.Point = Point1;
                        var PubKey1 = /*#__PURE__*/ function(_Struct5) {
                            _inherits(PubKey, _Struct5);
                            var _super7 = _createSuper(PubKey);
                            function PubKey(point, compressed) {
                                _classCallCheck2(this, PubKey);
                                return _super7.call(this, {
                                    point: point,
                                    compressed: compressed
                                });
                            }
                            _createClass2(PubKey, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromFastHex(json);
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return this.toFastHex();
                                    }
                                },
                                {
                                    key: "fromPrivKey",
                                    value: function fromPrivKey(privKey) {
                                        this.fromObject({
                                            point: Point1.getG().mul(privKey.bn),
                                            compressed: privKey.compressed
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncFromPrivKey",
                                    value: function() {
                                        var _asyncFromPrivKey = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee37(privKey) {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee37$(_context39) {
                                                while(true)switch(_context39.prev = _context39.next){
                                                    case 0:
                                                        _context39.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "fromPrivKey", [
                                                            privKey
                                                        ]);
                                                    case 2:
                                                        workersResult = _context39.sent;
                                                        return _context39.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context39.stop();
                                                }
                                            }, _callee37, this);
                                        }));
                                        function asyncFromPrivKey(_x54) {
                                            return _asyncFromPrivKey.apply(this, arguments);
                                        }
                                        return asyncFromPrivKey;
                                    }()
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf, strict) {
                                        return this.fromDer(buf, strict);
                                    }
                                },
                                {
                                    key: "asyncFromBuffer",
                                    value: function() {
                                        var _asyncFromBuffer = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee38(buf, strict) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee38$(_context40) {
                                                while(true)switch(_context40.prev = _context40.next){
                                                    case 0:
                                                        args = [
                                                            buf,
                                                            strict
                                                        ];
                                                        _context40.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "fromBuffer", args);
                                                    case 3:
                                                        workersResult = _context40.sent;
                                                        return _context40.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context40.stop();
                                                }
                                            }, _callee38, this);
                                        }));
                                        function asyncFromBuffer(_x55, _x56) {
                                            return _asyncFromBuffer.apply(this, arguments);
                                        }
                                        return asyncFromBuffer;
                                    }()
                                },
                                {
                                    key: "fromFastBuffer",
                                    value: function fromFastBuffer(buf) {
                                        if (buf.length === 0) return this;
                                        var compressed = Boolean(buf[0]);
                                        buf = buf.slice(1);
                                        this.fromDer(buf);
                                        this.compressed = compressed;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromDer",
                                    value: function fromDer(buf, strict) {
                                        if (strict === undefined) strict = true;
                                        else strict = false;
                                        if (buf[0] === 0x04 || !strict && (buf[0] === 0x06 || buf[0] === 0x07)) {
                                            var xbuf = buf.slice(1, 33);
                                            var ybuf = buf.slice(33, 65);
                                            if (xbuf.length !== 32 || ybuf.length !== 32 || buf.length !== 65) throw new Error("LEngth of x and y must be 32 bytes");
                                            var x = new Bn(xbuf);
                                            var y = new Bn(ybuf);
                                            this.point = new Point1(x, y);
                                            this.compressed = false;
                                        } else if (buf[0] === 0x03) {
                                            var _xbuf = buf.slice(1);
                                            var _x57 = new Bn(_xbuf);
                                            this.fromX(true, _x57);
                                            this.compressed = true;
                                        } else if (buf[0] === 0x02) {
                                            var _xbuf2 = buf.slice(1);
                                            var _x58 = new Bn(_xbuf2);
                                            this.fromX(false, _x58);
                                            this.compressed = true;
                                        } else throw new Error("Invalid DER format pubKey");
                                        return this;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        this.fromDer(Buffer.from(str, "hex"));
                                        return this;
                                    }
                                },
                                {
                                    key: "fromX",
                                    value: function fromX(odd, x) {
                                        if (typeof odd !== "boolean") throw new Error("Must specify whether y is odd or not (true or false)");
                                        this.point = Point1.fromX(odd, x);
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        var compressed = this.compressed === undefined ? true : this.compressed;
                                        return this.toDer(compressed);
                                    }
                                },
                                {
                                    key: "toFastBuffer",
                                    value: function toFastBuffer() {
                                        if (!this.point) return Buffer.alloc(0);
                                        var bw = new Bw1();
                                        var compressed = this.compressed === undefined ? true : Boolean(this.compressed);
                                        bw.writeUInt8(Number(compressed));
                                        bw.write(this.toDer(false));
                                        return bw.toBuffer();
                                    }
                                },
                                {
                                    key: "toDer",
                                    value: function toDer(compressed) {
                                        compressed = compressed === undefined ? this.compressed : compressed;
                                        if (typeof compressed !== "boolean") throw new Error("Must specify whether the public key is compressed or not (true or false)");
                                        var x = this.point.getX();
                                        var y = this.point.getY();
                                        var xbuf = x.toBuffer({
                                            size: 32
                                        });
                                        var ybuf = y.toBuffer({
                                            size: 32
                                        });
                                        var prefix;
                                        if (!compressed) {
                                            prefix = Buffer.from([
                                                0x04
                                            ]);
                                            return Buffer.concat([
                                                prefix,
                                                xbuf,
                                                ybuf
                                            ]);
                                        } else {
                                            var odd = ybuf[ybuf.length - 1] % 2;
                                            if (odd) prefix = Buffer.from([
                                                0x03
                                            ]);
                                            else prefix = Buffer.from([
                                                0x02
                                            ]);
                                            return Buffer.concat([
                                                prefix,
                                                xbuf
                                            ]);
                                        }
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        var compressed = this.compressed === undefined ? true : this.compressed;
                                        return this.toDer(compressed).toString("hex");
                                    }
                                },
                                {
                                    key: "validate",
                                    value: function validate() {
                                        if (this.point.isInfinity()) throw new Error("point: Point cannot be equal to Infinity");
                                        if (this.point.eq(new Point1(new Bn(0), new Bn(0)))) throw new Error("point: Point cannot be equal to 0, 0");
                                        this.point.validate();
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "fromPrivKey",
                                    value: function fromPrivKey(privKey) {
                                        return new this().fromPrivKey(privKey);
                                    }
                                },
                                {
                                    key: "asyncFromPrivKey",
                                    value: function asyncFromPrivKey(privKey) {
                                        return new this().asyncFromPrivKey(privKey);
                                    }
                                },
                                {
                                    key: "fromDer",
                                    value: function fromDer(buf, strict) {
                                        return new this().fromDer(buf, strict);
                                    }
                                },
                                {
                                    key: "fromX",
                                    value: function fromX(odd, x) {
                                        return new this().fromX(odd, x);
                                    }
                                },
                                {
                                    key: "isCompressedOrUncompressed",
                                    value: function isCompressedOrUncompressed(buf) {
                                        if (buf.length < 33) return false;
                                        if (buf[0] === 0x04) {
                                            if (buf.length !== 65) return false;
                                        } else if (buf[0] === 0x02 || buf[0] === 0x03) {
                                            if (buf.length !== 33) return false;
                                        } else return false;
                                        return true;
                                    }
                                }
                            ]);
                            return PubKey;
                        }(Struct1);
                        exports.PubKey = PubKey1;
                        var Random1 = /*#__PURE__*/ _createClass2(function Random() {
                            _classCallCheck2(this, Random);
                        });
                        exports.Random = Random1;
                        Random1.getRandomBuffer = function(size) {
                            return (0, _randombytes["default"])(size);
                        };
                        var PrivKey1 = /*#__PURE__*/ function(_Struct6) {
                            _inherits(PrivKey, _Struct6);
                            var _super8 = _createSuper(PrivKey);
                            function PrivKey(bn, compressed) {
                                var _this15;
                                var constants = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                                _classCallCheck2(this, PrivKey);
                                _this15 = _super8.call(this, {
                                    bn: bn,
                                    compressed: compressed
                                });
                                constants = constants || Constants.Default.PrivKey;
                                _this15.Constants = constants;
                                return _this15;
                            }
                            _createClass2(PrivKey, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromHex(json);
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return this.toHex();
                                    }
                                },
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        var privBuf, bn, condition;
                                        do {
                                            privBuf = Random1.getRandomBuffer(32);
                                            bn = new Bn().fromBuffer(privBuf);
                                            condition = bn.lt(Point1.getN());
                                        }while (!condition);
                                        this.fromObject({
                                            bn: bn,
                                            compressed: true
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        var compressed = this.compressed;
                                        if (compressed === undefined) compressed = true;
                                        var privBuf = this.bn.toBuffer({
                                            size: 32
                                        });
                                        var buf;
                                        if (compressed) buf = Buffer.concat([
                                            Buffer.from([
                                                this.Constants.versionByteNum
                                            ]),
                                            privBuf,
                                            Buffer.from([
                                                0x01
                                            ])
                                        ]);
                                        else buf = Buffer.concat([
                                            Buffer.from([
                                                this.Constants.versionByteNum
                                            ]),
                                            privBuf
                                        ]);
                                        return buf;
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        if (buf.length === 34 && buf[33] === 1) this.compressed = true;
                                        else if (buf.length === 33) this.compressed = false;
                                        else throw new Error("Length of privKey buffer must be 33 (uncompressed pubKey) or 34 (compressed pubKey)");
                                        if (buf[0] !== this.Constants.versionByteNum) throw new Error("Invalid versionByteNum byte");
                                        return this.fromBn(new Bn().fromBuffer(buf.slice(1, 33)));
                                    }
                                },
                                {
                                    key: "toBn",
                                    value: function toBn() {
                                        return this.bn;
                                    }
                                },
                                {
                                    key: "fromBn",
                                    value: function fromBn(bn) {
                                        this.bn = bn;
                                        return this;
                                    }
                                },
                                {
                                    key: "validate",
                                    value: function validate() {
                                        if (!this.bn.lt(Point1.getN())) throw new Error("Number must be less than N");
                                        if (typeof this.compressed !== "boolean") throw new Error("Must specify whether the corresponding public key is compressed or not (true or false)");
                                        return this;
                                    }
                                },
                                {
                                    key: "toWif",
                                    value: function toWif() {
                                        return Base58Check1.encode(this.toBuffer());
                                    }
                                },
                                {
                                    key: "fromWif",
                                    value: function fromWif(str) {
                                        return this.fromBuffer(Base58Check1.decode(str));
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return this.toWif();
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        return this.fromWif(str);
                                    }
                                }
                            ], [
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        return new this().fromRandom();
                                    }
                                },
                                {
                                    key: "fromBn",
                                    value: function fromBn(bn) {
                                        return new this().fromBn(bn);
                                    }
                                },
                                {
                                    key: "fromWif",
                                    value: function fromWif(str) {
                                        return new this().fromWif(str);
                                    }
                                }
                            ]);
                            return PrivKey;
                        }(Struct1);
                        exports.PrivKey = PrivKey1;
                        PrivKey1.Mainnet = /*#__PURE__*/ function(_PrivKey) {
                            _inherits(_class, _PrivKey);
                            var _super9 = _createSuper(_class);
                            function _class(bn, compressed) {
                                _classCallCheck2(this, _class);
                                return _super9.call(this, bn, compressed, Constants.Mainnet.PrivKey);
                            }
                            return _createClass2(_class);
                        }(PrivKey1);
                        PrivKey1.Testnet = /*#__PURE__*/ function(_PrivKey2) {
                            _inherits(_class2, _PrivKey2);
                            var _super10 = _createSuper(_class2);
                            function _class2(bn, compressed) {
                                _classCallCheck2(this, _class2);
                                return _super10.call(this, bn, compressed, Constants.Testnet.PrivKey);
                            }
                            return _createClass2(_class2);
                        }(PrivKey1);
                        var Sig1 = /*#__PURE__*/ function(_Struct7) {
                            _inherits(Sig, _Struct7);
                            var _super11 = _createSuper(Sig);
                            function Sig(r, s, nHashType, recovery, compressed) {
                                _classCallCheck2(this, Sig);
                                return _super11.call(this, {
                                    r: r,
                                    s: s,
                                    nHashType: nHashType,
                                    recovery: recovery,
                                    compressed: compressed
                                });
                            }
                            _createClass2(Sig, [
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        try {
                                            return this.fromDer(buf, true);
                                        } catch (e) {}
                                        try {
                                            return this.fromCompact(buf);
                                        } catch (e3) {}
                                        return this.fromTxFormat(buf);
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        if (this.nHashType !== undefined) return this.toTxFormat();
                                        else if (this.recovery !== undefined) return this.toCompact();
                                        return this.toDer();
                                    }
                                },
                                {
                                    key: "fromCompact",
                                    value: function fromCompact(buf) {
                                        var compressed = true;
                                        var recovery = buf.slice(0, 1)[0] - 27 - 4;
                                        if (recovery < 0) {
                                            compressed = false;
                                            recovery = recovery + 4;
                                        }
                                        if (!(recovery === 0 || recovery === 1 || recovery === 2 || recovery === 3)) throw new Error("i must be 0, 1, 2, or 3");
                                        this.compressed = compressed;
                                        this.recovery = recovery;
                                        var rsbuf = buf.slice(1);
                                        this.fromRS(rsbuf);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromRS",
                                    value: function fromRS(rsbuf) {
                                        var b2 = rsbuf.slice(0, 32);
                                        var b3 = rsbuf.slice(32, 64);
                                        if (b2.length !== 32) throw new Error("r must be 32 bytes");
                                        if (b3.length !== 32 || rsbuf.length > 64) throw new Error("s must be 32 bytes");
                                        this.r = new Bn().fromBuffer(b2);
                                        this.s = new Bn().fromBuffer(b3);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromDer",
                                    value: function fromDer(buf, strict) {
                                        var obj = Sig.parseDer(buf, strict);
                                        this.r = obj.r;
                                        this.s = obj.s;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromTxFormat",
                                    value: function fromTxFormat(buf) {
                                        if (buf.length === 0) {
                                            this.r = new Bn(1);
                                            this.s = new Bn(1);
                                            this.nHashType = 1;
                                            return this;
                                        }
                                        var nHashType = buf.readUInt8(buf.length - 1);
                                        var derbuf = buf.slice(0, buf.length - 1);
                                        this.fromDer(derbuf, false);
                                        this.nHashType = nHashType;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        return this.fromHex(str);
                                    }
                                },
                                {
                                    key: "hasLowS",
                                    value: function hasLowS() {
                                        if (this.s.lt(1) || this.s.gt(Bn.fromBuffer(Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex")))) return false;
                                        return true;
                                    }
                                },
                                {
                                    key: "hasDefinedHashType",
                                    value: function hasDefinedHashType() {
                                        if (this.nHashType < Sig.SIGHASH_ALL || this.nHashType > Sig.SIGHASH_SINGLE) return false;
                                        return true;
                                    }
                                },
                                {
                                    key: "toCompact",
                                    value: function toCompact(recovery, compressed) {
                                        recovery = typeof recovery === "number" ? recovery : this.recovery;
                                        compressed = typeof compressed === "boolean" ? compressed : this.compressed;
                                        if (!(recovery === 0 || recovery === 1 || recovery === 2 || recovery === 3)) throw new Error("recovery must be equal to 0, 1, 2, or 3");
                                        var val = recovery + 27 + 4;
                                        if (compressed === false) val = val - 4;
                                        var b1 = Buffer.from([
                                            val
                                        ]);
                                        var b2 = this.r.toBuffer({
                                            size: 32
                                        });
                                        var b3 = this.s.toBuffer({
                                            size: 32
                                        });
                                        return Buffer.concat([
                                            b1,
                                            b2,
                                            b3
                                        ]);
                                    }
                                },
                                {
                                    key: "toRS",
                                    value: function toRS() {
                                        return Buffer.concat([
                                            this.r.toBuffer({
                                                size: 32
                                            }),
                                            this.s.toBuffer({
                                                size: 32
                                            })
                                        ]);
                                    }
                                },
                                {
                                    key: "toDer",
                                    value: function toDer() {
                                        var rnbuf = this.r.toBuffer();
                                        var snbuf = this.s.toBuffer();
                                        var rneg = rnbuf[0] & 0x80;
                                        var sneg = snbuf[0] & 0x80;
                                        var rbuf = rneg ? Buffer.concat([
                                            Buffer.from([
                                                0x00
                                            ]),
                                            rnbuf
                                        ]) : rnbuf;
                                        var sbuf = sneg ? Buffer.concat([
                                            Buffer.from([
                                                0x00
                                            ]),
                                            snbuf
                                        ]) : snbuf;
                                        var length = 2 + rbuf.length + 2 + sbuf.length;
                                        var rlength = rbuf.length;
                                        var slength = sbuf.length;
                                        var rheader = 0x02;
                                        var sheader = 0x02;
                                        var header = 0x30;
                                        var der = Buffer.concat([
                                            Buffer.from([
                                                header,
                                                length,
                                                rheader,
                                                rlength
                                            ]),
                                            rbuf,
                                            Buffer.from([
                                                sheader,
                                                slength
                                            ]),
                                            sbuf
                                        ]);
                                        return der;
                                    }
                                },
                                {
                                    key: "toTxFormat",
                                    value: function toTxFormat() {
                                        var derbuf = this.toDer();
                                        var buf = Buffer.alloc(1);
                                        buf.writeUInt8(this.nHashType, 0);
                                        return Buffer.concat([
                                            derbuf,
                                            buf
                                        ]);
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return this.toHex();
                                    }
                                }
                            ], [
                                {
                                    key: "fromCompact",
                                    value: function fromCompact(buf) {
                                        return new this().fromCompact(buf);
                                    }
                                },
                                {
                                    key: "fromRS",
                                    value: function fromRS(rsbuf) {
                                        return new this().fromRS(rsbuf);
                                    }
                                },
                                {
                                    key: "fromDer",
                                    value: function fromDer(buf, strict) {
                                        return new this().fromDer(buf, strict);
                                    }
                                },
                                {
                                    key: "fromTxFormat",
                                    value: function fromTxFormat(buf) {
                                        return new this().fromTxFormat(buf);
                                    }
                                },
                                {
                                    key: "parseDer",
                                    value: function parseDer(buf, strict) {
                                        if (strict === undefined) strict = true;
                                        if (!Buffer.isBuffer(buf)) throw new Error("DER formatted signature should be a buffer");
                                        var header = buf[0];
                                        if (header !== 0x30) throw new Error("Header byte should be 0x30");
                                        var length = buf[1];
                                        var buflength = buf.slice(2).length;
                                        if (strict && length !== buflength) throw new Error("LEngth byte should length of what follows");
                                        else length = length < buflength ? length : buflength;
                                        var rheader = buf[2];
                                        if (rheader !== 0x02) throw new Error("Integer byte for r should be 0x02");
                                        var rlength = buf[3];
                                        var rbuf = buf.slice(4, 4 + rlength);
                                        var r = new Bn().fromBuffer(rbuf);
                                        var rneg = buf[4] === 0x00;
                                        if (rlength !== rbuf.length) throw new Error("LEngth of r incorrect");
                                        var sheader = buf[4 + rlength + 0];
                                        if (sheader !== 0x02) throw new Error("Integer byte for s should be 0x02");
                                        var slength = buf[4 + rlength + 1];
                                        var sbuf = buf.slice(4 + rlength + 2, 4 + rlength + 2 + slength);
                                        var s = new Bn().fromBuffer(sbuf);
                                        var sneg = buf[4 + rlength + 2 + 2] === 0x00;
                                        if (slength !== sbuf.length) throw new Error("LEngth of s incorrect");
                                        var sumlength = 4 + rlength + 2 + slength;
                                        if (length !== sumlength - 2) throw new Error("LEngth of signature incorrect");
                                        var obj = {
                                            header: header,
                                            length: length,
                                            rheader: rheader,
                                            rlength: rlength,
                                            rneg: rneg,
                                            rbuf: rbuf,
                                            r: r,
                                            sheader: sheader,
                                            slength: slength,
                                            sneg: sneg,
                                            sbuf: sbuf,
                                            s: s
                                        };
                                        return obj;
                                    }
                                },
                                {
                                    key: "IsTxDer",
                                    value: function IsTxDer(buf) {
                                        if (buf.length < 9) return false;
                                        if (buf.length > 73) return false;
                                        if (buf[0] !== 0x30) return false;
                                        if (buf[1] !== buf.length - 3) return false;
                                        var nLEnR = buf[3];
                                        if (5 + nLEnR >= buf.length) return false;
                                        var nLEnS = buf[5 + nLEnR];
                                        if (nLEnR + nLEnS + 7 !== buf.length) return false;
                                        var R = buf.slice(4);
                                        if (buf[2] !== 0x02) return false;
                                        if (nLEnR === 0) return false;
                                        if (R[0] & 0x80) return false;
                                        if (nLEnR > 1 && R[0] === 0x00 && !(R[1] & 0x80)) return false;
                                        var S = buf.slice(6 + nLEnR);
                                        if (buf[6 + nLEnR - 2] !== 0x02) return false;
                                        if (nLEnS === 0) return false;
                                        if (S[0] & 0x80) return false;
                                        if (nLEnS > 1 && S[0] === 0x00 && !(S[1] & 0x80)) return false;
                                        return true;
                                    }
                                }
                            ]);
                            return Sig;
                        }(Struct1);
                        exports.Sig = Sig1;
                        Sig1.SIGHASH_ALL = 0x00000001;
                        Sig1.SIGHASH_NONE = 0x00000002;
                        Sig1.SIGHASH_SINGLE = 0x00000003;
                        Sig1.SIGHASH_FORKID = 0x00000040;
                        Sig1.SIGHASH_ANYONECANPAY = 0x00000080;
                        var Script1 = /*#__PURE__*/ function(_Struct8) {
                            _inherits(Script, _Struct8);
                            var _super12 = _createSuper(Script);
                            function Script() {
                                var chunks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                                _classCallCheck2(this, Script);
                                return _super12.call(this, {
                                    chunks: chunks
                                });
                            }
                            _createClass2(Script, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        return this.fromString(json);
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return this.toString();
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        this.chunks = [];
                                        var br = new Br1(buf);
                                        while(!br.eof()){
                                            var opCodeNum = br.readUInt8();
                                            var len = 0;
                                            var _buf = Buffer.from([]);
                                            if (opCodeNum > 0 && opCodeNum < OpCode1.OP_PUSHDATA1) {
                                                len = opCodeNum;
                                                this.chunks.push({
                                                    buf: br.read(len),
                                                    len: len,
                                                    opCodeNum: opCodeNum
                                                });
                                            } else if (opCodeNum === OpCode1.OP_PUSHDATA1) {
                                                try {
                                                    len = br.readUInt8();
                                                    _buf = br.read(len);
                                                } catch (err) {
                                                    br.read();
                                                }
                                                this.chunks.push({
                                                    buf: _buf,
                                                    len: len,
                                                    opCodeNum: opCodeNum
                                                });
                                            } else if (opCodeNum === OpCode1.OP_PUSHDATA2) {
                                                try {
                                                    len = br.readUInt16LE();
                                                    _buf = br.read(len);
                                                } catch (err) {
                                                    br.read();
                                                }
                                                this.chunks.push({
                                                    buf: _buf,
                                                    len: len,
                                                    opCodeNum: opCodeNum
                                                });
                                            } else if (opCodeNum === OpCode1.OP_PUSHDATA4) {
                                                try {
                                                    len = br.readUInt32LE();
                                                    _buf = br.read(len);
                                                } catch (err) {
                                                    br.read();
                                                }
                                                this.chunks.push({
                                                    buf: _buf,
                                                    len: len,
                                                    opCodeNum: opCodeNum
                                                });
                                            } else this.chunks.push({
                                                opCodeNum: opCodeNum
                                            });
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        var bw = new Bw1();
                                        for(var i = 0; i < this.chunks.length; i++){
                                            var chunk = this.chunks[i];
                                            var opCodeNum = chunk.opCodeNum;
                                            bw.writeUInt8(opCodeNum);
                                            if (chunk.buf) {
                                                if (opCodeNum < OpCode1.OP_PUSHDATA1) bw.write(chunk.buf);
                                                else if (opCodeNum === OpCode1.OP_PUSHDATA1) {
                                                    bw.writeUInt8(chunk.len);
                                                    bw.write(chunk.buf);
                                                } else if (opCodeNum === OpCode1.OP_PUSHDATA2) {
                                                    bw.writeUInt16LE(chunk.len);
                                                    bw.write(chunk.buf);
                                                } else if (opCodeNum === OpCode1.OP_PUSHDATA4) {
                                                    bw.writeUInt32LE(chunk.len);
                                                    bw.write(chunk.buf);
                                                }
                                            }
                                        }
                                        return bw.toBuffer();
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        this.chunks = [];
                                        if (str === "" || str === undefined) return this;
                                        var tokens = str.split(" ");
                                        var i = 0;
                                        while(i < tokens.length){
                                            var token = tokens[i];
                                            var opCodeNum = void 0;
                                            try {
                                                var opCode = new OpCode1().fromString(token);
                                                opCodeNum = opCode.toNumber();
                                            } catch (err) {}
                                            if (opCodeNum === undefined) {
                                                opCodeNum = parseInt(token, 10);
                                                if (opCodeNum > 0 && opCodeNum < OpCode1.OP_PUSHDATA1) {
                                                    this.chunks.push({
                                                        buf: Buffer.from(tokens[i + 1].slice(2), "hex"),
                                                        len: opCodeNum,
                                                        opCodeNum: opCodeNum
                                                    });
                                                    i = i + 2;
                                                } else if (opCodeNum === 0) {
                                                    this.chunks.push({
                                                        opCodeNum: 0
                                                    });
                                                    i = i + 1;
                                                } else throw new Error("Invalid script");
                                            } else if (opCodeNum === OpCode1.OP_PUSHDATA1 || opCodeNum === OpCode1.OP_PUSHDATA2 || opCodeNum === OpCode1.OP_PUSHDATA4) {
                                                if (tokens[i + 2].slice(0, 2) !== "0x") throw new Error("Pushdata data must start with 0x");
                                                this.chunks.push({
                                                    buf: Buffer.from(tokens[i + 2].slice(2), "hex"),
                                                    len: parseInt(tokens[i + 1], 10),
                                                    opCodeNum: opCodeNum
                                                });
                                                i = i + 3;
                                            } else {
                                                this.chunks.push({
                                                    opCodeNum: opCodeNum
                                                });
                                                i = i + 1;
                                            }
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        var str = "";
                                        for(var i = 0; i < this.chunks.length; i++){
                                            var chunk = this.chunks[i];
                                            var opCodeNum = chunk.opCodeNum;
                                            if (!chunk.buf) {
                                                if (OpCode1.str[opCodeNum] !== undefined) str = str + " " + new OpCode1(opCodeNum).toString();
                                                else str = str + " " + "0x" + opCodeNum.toString(16);
                                            } else {
                                                if (opCodeNum === OpCode1.OP_PUSHDATA1 || opCodeNum === OpCode1.OP_PUSHDATA2 || opCodeNum === OpCode1.OP_PUSHDATA4) str = str + " " + new OpCode1(opCodeNum).toString();
                                                str = str + " " + chunk.len;
                                                str = str + " " + "0x" + chunk.buf.toString("hex");
                                            }
                                        }
                                        return str.substr(1);
                                    }
                                },
                                {
                                    key: "fromBitcoindString",
                                    value: function fromBitcoindString(str) {
                                        var bw = new Bw1();
                                        var tokens = str.split(" ");
                                        var i;
                                        for(i = 0; i < tokens.length; i++){
                                            var token = tokens[i];
                                            if (token === "") continue;
                                            if (token[0] === "0" && token[1] === "x") {
                                                var hex = token.slice(2);
                                                bw.write(Buffer.from(hex, "hex"));
                                            } else if (token[0] === "'") {
                                                var tstr = token.slice(1, token.length - 1);
                                                var cbuf = Buffer.from(tstr);
                                                var tbuf = new Script().writeBuffer(cbuf).toBuffer();
                                                bw.write(tbuf);
                                            } else if (OpCode1["OP_" + token] !== undefined) {
                                                var opstr = "OP_" + token;
                                                var opCodeNum = OpCode1[opstr];
                                                bw.writeUInt8(opCodeNum);
                                            } else if (typeof OpCode1[token] === "number") {
                                                var _opstr = token;
                                                var _opCodeNum = OpCode1[_opstr];
                                                bw.writeUInt8(_opCodeNum);
                                            } else if (!isNaN(parseInt(token, 10))) {
                                                var bn = new Bn(token);
                                                var script = new Script().writeBn(bn);
                                                var _tbuf = script.toBuffer();
                                                bw.write(_tbuf);
                                            } else throw new Error("Could not determine type of script value");
                                        }
                                        var buf = bw.toBuffer();
                                        return this.fromBuffer(buf);
                                    }
                                },
                                {
                                    key: "toBitcoindString",
                                    value: function toBitcoindString() {
                                        var str = "";
                                        for(var i = 0; i < this.chunks.length; i++){
                                            var chunk = this.chunks[i];
                                            if (chunk.buf) {
                                                var buf = new Script([
                                                    chunk
                                                ]).toBuffer();
                                                var hex = buf.toString("hex");
                                                str = str + " " + "0x" + hex;
                                            } else if (OpCode1.str[chunk.opCodeNum] !== undefined) {
                                                var ostr = new OpCode1(chunk.opCodeNum).toString();
                                                str = str + " " + ostr.slice(3);
                                            } else str = str + " " + "0x" + chunk.opCodeNum.toString(16);
                                        }
                                        return str.substr(1);
                                    }
                                },
                                {
                                    key: "fromAsmString",
                                    value: function fromAsmString(str) {
                                        this.chunks = [];
                                        var tokens = str.split(" ");
                                        var i = 0;
                                        while(i < tokens.length){
                                            var token = tokens[i];
                                            var opCode = void 0, opCodeNum = void 0;
                                            try {
                                                opCode = OpCode1.fromString(token);
                                                opCodeNum = opCode.toNumber();
                                            } catch (err) {
                                                opCode = undefined;
                                                opCodeNum = undefined;
                                            }
                                            if (token === "0") {
                                                opCodeNum = 0;
                                                this.chunks.push({
                                                    opCodeNum: opCodeNum
                                                });
                                                i = i + 1;
                                            } else if (token === "-1") {
                                                opCodeNum = OpCode1.OP_1NEGATE;
                                                this.chunks.push({
                                                    opCodeNum: opCodeNum
                                                });
                                                i = i + 1;
                                            } else if (opCode === undefined) {
                                                var hex = tokens[i];
                                                var buf = Buffer.from(hex, "hex");
                                                if (buf.toString("hex") !== hex) throw new Error("invalid hex string in script");
                                                var len = buf.length;
                                                if (len >= 0 && len < OpCode1.OP_PUSHDATA1) opCodeNum = len;
                                                else if (len < Math.pow(2, 8)) opCodeNum = OpCode1.OP_PUSHDATA1;
                                                else if (len < Math.pow(2, 16)) opCodeNum = OpCode1.OP_PUSHDATA2;
                                                else if (len < Math.pow(2, 32)) opCodeNum = OpCode1.OP_PUSHDATA4;
                                                this.chunks.push({
                                                    buf: buf,
                                                    len: buf.length,
                                                    opCodeNum: opCodeNum
                                                });
                                                i = i + 1;
                                            } else {
                                                this.chunks.push({
                                                    opCodeNum: opCodeNum
                                                });
                                                i = i + 1;
                                            }
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "toAsmString",
                                    value: function toAsmString() {
                                        var str = "";
                                        for(var i = 0; i < this.chunks.length; i++){
                                            var chunk = this.chunks[i];
                                            str += this._chunkToString(chunk);
                                        }
                                        return str.substr(1);
                                    }
                                },
                                {
                                    key: "_chunkToString",
                                    value: function _chunkToString(chunk, type) {
                                        var opCodeNum = chunk.opCodeNum;
                                        var str = "";
                                        if (!chunk.buf) {
                                            if (typeof OpCode1.str[opCodeNum] !== "undefined") {
                                                if (opCodeNum === 0) str = str + " 0";
                                                else if (opCodeNum === 79) str = str + " -1";
                                                else str = str + " " + new OpCode1(opCodeNum).toString();
                                            } else {
                                                var numstr = opCodeNum.toString(16);
                                                if (numstr.length % 2 !== 0) numstr = "0" + numstr;
                                                str = str + " " + numstr;
                                            }
                                        } else if (chunk.len > 0) str = str + " " + chunk.buf.toString("hex");
                                        return str;
                                    }
                                },
                                {
                                    key: "fromOpReturnData",
                                    value: function fromOpReturnData(dataBuf) {
                                        this.writeOpCode(OpCode1.OP_RETURN);
                                        this.writeBuffer(dataBuf);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromSafeData",
                                    value: function fromSafeData(dataBuf) {
                                        this.writeOpCode(OpCode1.OP_FALSE);
                                        this.writeOpCode(OpCode1.OP_RETURN);
                                        this.writeBuffer(dataBuf);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromSafeDataArray",
                                    value: function fromSafeDataArray(dataBufs) {
                                        this.writeOpCode(OpCode1.OP_FALSE);
                                        this.writeOpCode(OpCode1.OP_RETURN);
                                        for(var i in dataBufs){
                                            var dataBuf = dataBufs[i];
                                            this.writeBuffer(dataBuf);
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "getData",
                                    value: function getData() {
                                        if (this.isSafeDataOut()) {
                                            var chunks = this.chunks.slice(2);
                                            var buffers = chunks.map(function(chunk) {
                                                return chunk.buf;
                                            });
                                            return buffers;
                                        }
                                        if (this.isOpReturn()) {
                                            var _chunks = this.chunks.slice(1);
                                            var _buffers = _chunks.map(function(chunk) {
                                                return chunk.buf;
                                            });
                                            return _buffers;
                                        }
                                        throw new Error("Unrecognized script type to get data from");
                                    }
                                },
                                {
                                    key: "fromPubKeyHash",
                                    value: function fromPubKeyHash(hashBuf) {
                                        if (hashBuf.length !== 20) throw new Error("hashBuf must be a 20 byte buffer");
                                        this.writeOpCode(OpCode1.OP_DUP);
                                        this.writeOpCode(OpCode1.OP_HASH160);
                                        this.writeBuffer(hashBuf);
                                        this.writeOpCode(OpCode1.OP_EQUALVERIFY);
                                        this.writeOpCode(OpCode1.OP_CHECKSIG);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromPubKeys",
                                    value: function fromPubKeys(m, pubKeys) {
                                        var sort = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
                                        if (typeof m !== "number") throw new Error("m must be a number");
                                        if (sort === true) pubKeys = Script.sortPubKeys(pubKeys);
                                        this.writeOpCode(m + OpCode1.OP_1 - 1);
                                        for(var i in pubKeys)this.writeBuffer(pubKeys[i].toBuffer());
                                        this.writeOpCode(pubKeys.length + OpCode1.OP_1 - 1);
                                        this.writeOpCode(OpCode1.OP_CHECKMULTISIG);
                                        return this;
                                    }
                                },
                                {
                                    key: "removeCodeseparators",
                                    value: function removeCodeseparators() {
                                        var chunks = [];
                                        for(var i = 0; i < this.chunks.length; i++)if (this.chunks[i].opCodeNum !== OpCode1.OP_CODESEPARATOR) chunks.push(this.chunks[i]);
                                        this.chunks = chunks;
                                        return this;
                                    }
                                },
                                {
                                    key: "isPushOnly",
                                    value: function isPushOnly() {
                                        for(var i = 0; i < this.chunks.length; i++){
                                            var chunk = this.chunks[i];
                                            var opCodeNum = chunk.opCodeNum;
                                            if (opCodeNum > OpCode1.OP_16) return false;
                                        }
                                        return true;
                                    }
                                },
                                {
                                    key: "isOpReturn",
                                    value: function isOpReturn() {
                                        if (this.chunks[0].opCodeNum === OpCode1.OP_RETURN && this.chunks.filter(function(chunk) {
                                            return Buffer.isBuffer(chunk.buf);
                                        }).length === this.chunks.slice(1).length) return true;
                                        else return false;
                                    }
                                },
                                {
                                    key: "isSafeDataOut",
                                    value: function isSafeDataOut() {
                                        if (this.chunks.length < 2) return false;
                                        if (this.chunks[0].opCodeNum !== OpCode1.OP_FALSE) return false;
                                        var chunks = this.chunks.slice(1);
                                        var script2 = new Script(chunks);
                                        return script2.isOpReturn();
                                    }
                                },
                                {
                                    key: "isPubKeyHashOut",
                                    value: function isPubKeyHashOut() {
                                        if (this.chunks[0] && this.chunks[0].opCodeNum === OpCode1.OP_DUP && this.chunks[1] && this.chunks[1].opCodeNum === OpCode1.OP_HASH160 && this.chunks[2].buf && this.chunks[3] && this.chunks[3].opCodeNum === OpCode1.OP_EQUALVERIFY && this.chunks[4] && this.chunks[4].opCodeNum === OpCode1.OP_CHECKSIG) return true;
                                        else return false;
                                    }
                                },
                                {
                                    key: "isPubKeyHashIn",
                                    value: function isPubKeyHashIn() {
                                        if (this.chunks.length === 2 && (this.chunks[0].buf || this.chunks[0].opCodeNum === OpCode1.OP_0) && (this.chunks[1].buf || this.chunks[0].opCodeNum === OpCode1.OP_0)) return true;
                                        else return false;
                                    }
                                },
                                {
                                    key: "isScriptHashOut",
                                    value: function isScriptHashOut() {
                                        var buf = this.toBuffer();
                                        return buf.length === 23 && buf[0] === OpCode1.OP_HASH160 && buf[1] === 0x14 && buf[22] === OpCode1.OP_EQUAL;
                                    }
                                },
                                {
                                    key: "isScriptHashIn",
                                    value: function isScriptHashIn() {
                                        if (!this.isPushOnly()) return false;
                                        try {
                                            new Script().fromBuffer(this.chunks[this.chunks.length - 1].buf);
                                        } catch (err) {
                                            return false;
                                        }
                                        return true;
                                    }
                                },
                                {
                                    key: "isMultiSigOut",
                                    value: function isMultiSigOut() {
                                        var m = this.chunks[0].opCodeNum - OpCode1.OP_1 + 1;
                                        if (!(m >= 1 && m <= 16)) return false;
                                        var pubKeychunks = this.chunks.slice(1, this.chunks.length - 2);
                                        if (!pubKeychunks.every(function(chunk) {
                                            try {
                                                var buf = chunk.buf;
                                                var pubKey = new PubKey1().fromDer(buf);
                                                pubKey.validate();
                                                return true;
                                            } catch (err) {
                                                return false;
                                            }
                                        })) return false;
                                        var n = this.chunks[this.chunks.length - 2].opCodeNum - OpCode1.OP_1 + 1;
                                        if (!(n >= m && n <= 16)) return false;
                                        if (this.chunks[1 + n + 1].opCodeNum !== OpCode1.OP_CHECKMULTISIG) return false;
                                        return true;
                                    }
                                },
                                {
                                    key: "isMultiSigIn",
                                    value: function isMultiSigIn() {
                                        if (this.chunks[0].opCodeNum !== OpCode1.OP_0) return false;
                                        var remaining = this.chunks.slice(1);
                                        if (remaining.length < 1) return false;
                                        return remaining.every(function(chunk) {
                                            return Buffer.isBuffer(chunk.buf) && Sig1.IsTxDer(chunk.buf);
                                        });
                                    }
                                },
                                {
                                    key: "findAndDelete",
                                    value: function findAndDelete(script) {
                                        var buf = script.toBuffer();
                                        for(var i = 0; i < this.chunks.length; i++){
                                            var script2 = new Script([
                                                this.chunks[i]
                                            ]);
                                            var buf2 = script2.toBuffer();
                                            if (cmp(buf, buf2)) this.chunks.splice(i, 1);
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "writeScript",
                                    value: function writeScript(script) {
                                        this.chunks = this.chunks.concat(script.chunks);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeString",
                                    value: function writeString(str) {
                                        var script = new Script().fromString(str);
                                        this.chunks = this.chunks.concat(script.chunks);
                                        return this;
                                    }
                                },
                                {
                                    key: "writeOpCode",
                                    value: function writeOpCode(opCodeNum) {
                                        this.chunks.push({
                                            opCodeNum: opCodeNum
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "setChunkOpCode",
                                    value: function setChunkOpCode(i, opCodeNum) {
                                        this.chunks[i] = {
                                            opCodeNum: opCodeNum
                                        };
                                        return this;
                                    }
                                },
                                {
                                    key: "writeBn",
                                    value: function writeBn(bn) {
                                        if (bn.cmp(0) === OpCode1.OP_0) this.chunks.push({
                                            opCodeNum: OpCode1.OP_0
                                        });
                                        else if (bn.cmp(-1) === 0) this.chunks.push({
                                            opCodeNum: OpCode1.OP_1NEGATE
                                        });
                                        else if (bn.cmp(1) >= 0 && bn.cmp(16) <= 0) this.chunks.push({
                                            opCodeNum: bn.toNumber() + OpCode1.OP_1 - 1
                                        });
                                        else {
                                            var buf = bn.toSm({
                                                endian: "little"
                                            });
                                            this.writeBuffer(buf);
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "writeNumber",
                                    value: function writeNumber(number) {
                                        this.writeBn(new Bn().fromNumber(number));
                                        return this;
                                    }
                                },
                                {
                                    key: "setChunkBn",
                                    value: function setChunkBn(i, bn) {
                                        this.chunks[i] = new Script().writeBn(bn).chunks[0];
                                        return this;
                                    }
                                },
                                {
                                    key: "writeBuffer",
                                    value: function writeBuffer(buf) {
                                        var opCodeNum;
                                        var len = buf.length;
                                        if (buf.length > 0 && buf.length < OpCode1.OP_PUSHDATA1) opCodeNum = buf.length;
                                        else if (buf.length === 0) opCodeNum = OpCode1.OP_0;
                                        else if (buf.length < Math.pow(2, 8)) opCodeNum = OpCode1.OP_PUSHDATA1;
                                        else if (buf.length < Math.pow(2, 16)) opCodeNum = OpCode1.OP_PUSHDATA2;
                                        else if (buf.length < Math.pow(2, 32)) opCodeNum = OpCode1.OP_PUSHDATA4;
                                        else throw new Error("You can't push that much data");
                                        this.chunks.push({
                                            buf: buf,
                                            len: len,
                                            opCodeNum: opCodeNum
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "setChunkBuffer",
                                    value: function setChunkBuffer(i, buf) {
                                        this.chunks[i] = new Script().writeBuffer(buf).chunks[0];
                                        return this;
                                    }
                                },
                                {
                                    key: "checkMinimalPush",
                                    value: function checkMinimalPush(i) {
                                        var chunk = this.chunks[i];
                                        var buf = chunk.buf;
                                        var opCodeNum = chunk.opCodeNum;
                                        if (!buf) return true;
                                        if (buf.length === 0) return opCodeNum === OpCode1.OP_0;
                                        else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) return opCodeNum === OpCode1.OP_1 + (buf[0] - 1);
                                        else if (buf.length === 1 && buf[0] === 0x81) return opCodeNum === OpCode1.OP_1NEGATE;
                                        else if (buf.length <= 75) return opCodeNum === buf.length;
                                        else if (buf.length <= 255) return opCodeNum === OpCode1.OP_PUSHDATA1;
                                        else if (buf.length <= 65535) return opCodeNum === OpCode1.OP_PUSHDATA2;
                                        return true;
                                    }
                                }
                            ], [
                                {
                                    key: "fromBitcoindString",
                                    value: function fromBitcoindString(str) {
                                        return new this().fromBitcoindString(str);
                                    }
                                },
                                {
                                    key: "fromAsmString",
                                    value: function fromAsmString(str) {
                                        return new this().fromAsmString(str);
                                    }
                                },
                                {
                                    key: "fromOpReturnData",
                                    value: function fromOpReturnData(dataBuf) {
                                        return new this().fromOpReturnData(dataBuf);
                                    }
                                },
                                {
                                    key: "fromSafeData",
                                    value: function fromSafeData(dataBuf) {
                                        return new this().fromSafeData(dataBuf);
                                    }
                                },
                                {
                                    key: "fromSafeDataArray",
                                    value: function fromSafeDataArray(dataBufs) {
                                        return new this().fromSafeDataArray(dataBufs);
                                    }
                                },
                                {
                                    key: "fromPubKeyHash",
                                    value: function fromPubKeyHash(hashBuf) {
                                        return new this().fromPubKeyHash(hashBuf);
                                    }
                                },
                                {
                                    key: "sortPubKeys",
                                    value: function sortPubKeys(pubKeys) {
                                        return pubKeys.slice().sort(function(pubKey1, pubKey2) {
                                            var buf1 = pubKey1.toBuffer();
                                            var buf2 = pubKey2.toBuffer();
                                            var len = Math.max(buf1.length, buf2.length);
                                            for(var i = 0; i <= len; i++){
                                                if (buf1[i] === undefined) return -1;
                                                if (buf2[i] === undefined) return 1;
                                                if (buf1[i] < buf2[i]) return -1;
                                                if (buf1[i] > buf2[i]) return 1;
                                                else continue;
                                            }
                                        });
                                    }
                                },
                                {
                                    key: "fromPubKeys",
                                    value: function fromPubKeys(m, pubKeys, sort) {
                                        return new this().fromPubKeys(m, pubKeys, sort);
                                    }
                                },
                                {
                                    key: "writeScript",
                                    value: function writeScript(script) {
                                        return new this().writeScript(script);
                                    }
                                },
                                {
                                    key: "writeString",
                                    value: function writeString(str) {
                                        return new this().writeString(str);
                                    }
                                },
                                {
                                    key: "writeOpCode",
                                    value: function writeOpCode(opCodeNum) {
                                        return new this().writeOpCode(opCodeNum);
                                    }
                                },
                                {
                                    key: "writeBn",
                                    value: function writeBn(bn) {
                                        return new this().writeBn(bn);
                                    }
                                },
                                {
                                    key: "writeNumber",
                                    value: function writeNumber(number) {
                                        return new this().writeNumber(number);
                                    }
                                },
                                {
                                    key: "writeBuffer",
                                    value: function writeBuffer(buf) {
                                        return new this().writeBuffer(buf);
                                    }
                                }
                            ]);
                            return Script;
                        }(Struct1);
                        exports.Script = Script1;
                        var Address1 = /*#__PURE__*/ function(_Struct9) {
                            _inherits(Address, _Struct9);
                            var _super13 = _createSuper(Address);
                            function Address(versionByteNum, hashBuf) {
                                var _this16;
                                var constants = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                                _classCallCheck2(this, Address);
                                _this16 = _super13.call(this, {
                                    versionByteNum: versionByteNum,
                                    hashBuf: hashBuf
                                });
                                constants = constants || Constants.Default.Address;
                                _this16.Constants = constants;
                                return _this16;
                            }
                            _createClass2(Address, [
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        if (buf.length !== 21) throw new Error("address buffers must be exactly 21 bytes");
                                        if (buf[0] !== this.Constants.pubKeyHash) throw new Error("address: invalid versionByteNum byte");
                                        this.versionByteNum = buf[0];
                                        this.hashBuf = buf.slice(1);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromPubKeyHashBuf",
                                    value: function fromPubKeyHashBuf(hashBuf) {
                                        this.hashBuf = hashBuf;
                                        this.versionByteNum = this.Constants.pubKeyHash;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromPubKey",
                                    value: function fromPubKey(pubKey) {
                                        var hashBuf = Hash1.sha256Ripemd160(pubKey.toBuffer());
                                        return this.fromPubKeyHashBuf(hashBuf);
                                    }
                                },
                                {
                                    key: "asyncFromPubKey",
                                    value: function() {
                                        var _asyncFromPubKey = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee39(pubKey) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee39$(_context41) {
                                                while(true)switch(_context41.prev = _context41.next){
                                                    case 0:
                                                        args = [
                                                            pubKey
                                                        ];
                                                        _context41.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "fromPubKey", args);
                                                    case 3:
                                                        workersResult = _context41.sent;
                                                        return _context41.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context41.stop();
                                                }
                                            }, _callee39, this);
                                        }));
                                        function asyncFromPubKey(_x59) {
                                            return _asyncFromPubKey.apply(this, arguments);
                                        }
                                        return asyncFromPubKey;
                                    }()
                                },
                                {
                                    key: "fromPrivKey",
                                    value: function fromPrivKey(privKey) {
                                        var pubKey = new PubKey1().fromPrivKey(privKey);
                                        var hashBuf = Hash1.sha256Ripemd160(pubKey.toBuffer());
                                        return this.fromPubKeyHashBuf(hashBuf);
                                    }
                                },
                                {
                                    key: "asyncFromPrivKey",
                                    value: function() {
                                        var _asyncFromPrivKey2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee40(privKey) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee40$(_context42) {
                                                while(true)switch(_context42.prev = _context42.next){
                                                    case 0:
                                                        args = [
                                                            privKey
                                                        ];
                                                        _context42.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "fromPrivKey", args);
                                                    case 3:
                                                        workersResult = _context42.sent;
                                                        return _context42.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context42.stop();
                                                }
                                            }, _callee40, this);
                                        }));
                                        function asyncFromPrivKey(_x60) {
                                            return _asyncFromPrivKey2.apply(this, arguments);
                                        }
                                        return asyncFromPrivKey;
                                    }()
                                },
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        var randomPrivKey = new PrivKey1().fromRandom();
                                        return this.fromPrivKey(randomPrivKey);
                                    }
                                },
                                {
                                    key: "asyncFromRandom",
                                    value: function() {
                                        var _asyncFromRandom = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee41() {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee41$(_context43) {
                                                while(true)switch(_context43.prev = _context43.next){
                                                    case 0:
                                                        args = [];
                                                        _context43.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "fromRandom", args);
                                                    case 3:
                                                        workersResult = _context43.sent;
                                                        return _context43.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context43.stop();
                                                }
                                            }, _callee41, this);
                                        }));
                                        function asyncFromRandom() {
                                            return _asyncFromRandom.apply(this, arguments);
                                        }
                                        return asyncFromRandom;
                                    }()
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var buf = Base58Check1.decode(str);
                                        return this.fromBuffer(buf);
                                    }
                                },
                                {
                                    key: "asyncFromString",
                                    value: function() {
                                        var _asyncFromString = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee42(str) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee42$(_context44) {
                                                while(true)switch(_context44.prev = _context44.next){
                                                    case 0:
                                                        args = [
                                                            str
                                                        ];
                                                        _context44.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "fromString", args);
                                                    case 3:
                                                        workersResult = _context44.sent;
                                                        return _context44.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context44.stop();
                                                }
                                            }, _callee42, this);
                                        }));
                                        function asyncFromString(_x61) {
                                            return _asyncFromString.apply(this, arguments);
                                        }
                                        return asyncFromString;
                                    }()
                                },
                                {
                                    key: "isValid",
                                    value: function isValid() {
                                        try {
                                            this.validate();
                                            return true;
                                        } catch (e) {
                                            return false;
                                        }
                                    }
                                },
                                {
                                    key: "toTxOutScript",
                                    value: function toTxOutScript() {
                                        var script = new Script1();
                                        script.writeOpCode(OpCode1.OP_DUP);
                                        script.writeOpCode(OpCode1.OP_HASH160);
                                        script.writeBuffer(this.hashBuf);
                                        script.writeOpCode(OpCode1.OP_EQUALVERIFY);
                                        script.writeOpCode(OpCode1.OP_CHECKSIG);
                                        return script;
                                    }
                                },
                                {
                                    key: "fromTxInScript",
                                    value: function fromTxInScript(script) {
                                        var pubKeyHashBuf = Hash1.sha256Ripemd160(script.chunks[1].buf || Buffer.from("00".repeat(32), "hex"));
                                        return this.fromPubKeyHashBuf(pubKeyHashBuf);
                                    }
                                },
                                {
                                    key: "fromTxOutScript",
                                    value: function fromTxOutScript(script) {
                                        return this.fromPubKeyHashBuf(script.chunks[2].buf);
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        var versionByteBuf = Buffer.from([
                                            this.versionByteNum
                                        ]);
                                        var buf = Buffer.concat([
                                            versionByteBuf,
                                            this.hashBuf
                                        ]);
                                        return buf;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var json = {};
                                        if (this.hashBuf) json.hashBuf = this.hashBuf.toString("hex");
                                        if (typeof this.versionByteNum !== "undefined") json.versionByteNum = this.versionByteNum;
                                        return json;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        if (json.hashBuf) this.hashBuf = Buffer.from(json.hashBuf, "hex");
                                        if (typeof json.versionByteNum !== "undefined") this.versionByteNum = json.versionByteNum;
                                        return this;
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return Base58Check1.encode(this.toBuffer());
                                    }
                                },
                                {
                                    key: "asyncToString",
                                    value: function() {
                                        var _asyncToString = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee43() {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee43$(_context45) {
                                                while(true)switch(_context45.prev = _context45.next){
                                                    case 0:
                                                        args = [];
                                                        _context45.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "toString", args);
                                                    case 3:
                                                        workersResult = _context45.sent;
                                                        return _context45.abrupt("return", JSON.parse(workersResult.resbuf.toString()));
                                                    case 5:
                                                    case "end":
                                                        return _context45.stop();
                                                }
                                            }, _callee43, this);
                                        }));
                                        function asyncToString() {
                                            return _asyncToString.apply(this, arguments);
                                        }
                                        return asyncToString;
                                    }()
                                },
                                {
                                    key: "validate",
                                    value: function validate() {
                                        if (!Buffer.isBuffer(this.hashBuf) || this.hashBuf.length !== 20) throw new Error("hashBuf must be a buffer of 20 bytes");
                                        if (this.versionByteNum !== this.Constants.pubKeyHash) throw new Error("invalid versionByteNum");
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "fromPubKeyHashBuf",
                                    value: function fromPubKeyHashBuf(hashBuf) {
                                        return new this().fromPubKeyHashBuf(hashBuf);
                                    }
                                },
                                {
                                    key: "fromPubKey",
                                    value: function fromPubKey(pubKey) {
                                        return new this().fromPubKey(pubKey);
                                    }
                                },
                                {
                                    key: "asyncFromPubKey",
                                    value: function asyncFromPubKey(pubKey) {
                                        return new this().asyncFromPubKey(pubKey);
                                    }
                                },
                                {
                                    key: "fromPrivKey",
                                    value: function fromPrivKey(privKey) {
                                        return new this().fromPrivKey(privKey);
                                    }
                                },
                                {
                                    key: "asyncFromPrivKey",
                                    value: function asyncFromPrivKey(privKey) {
                                        return new this().fromPrivKey(privKey);
                                    }
                                },
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        return new this().fromRandom();
                                    }
                                },
                                {
                                    key: "asyncFromRandom",
                                    value: function asyncFromRandom() {
                                        return new this().fromRandom();
                                    }
                                },
                                {
                                    key: "asyncFromString",
                                    value: function asyncFromString(str) {
                                        return new this().asyncFromString(str);
                                    }
                                },
                                {
                                    key: "isValid",
                                    value: function isValid(addrstr) {
                                        var address;
                                        try {
                                            address = new Address().fromString(addrstr);
                                        } catch (e) {
                                            return false;
                                        }
                                        return address.isValid();
                                    }
                                },
                                {
                                    key: "fromTxInScript",
                                    value: function fromTxInScript(script) {
                                        return new this().fromTxInScript(script);
                                    }
                                },
                                {
                                    key: "fromTxOutScript",
                                    value: function fromTxOutScript(script) {
                                        return new this().fromTxOutScript(script);
                                    }
                                }
                            ]);
                            return Address;
                        }(Struct1);
                        exports.Address = Address1;
                        Address1.Mainnet = /*#__PURE__*/ function(_Address) {
                            _inherits(_class3, _Address);
                            var _super14 = _createSuper(_class3);
                            function _class3(versionByteNum, hashBuf) {
                                _classCallCheck2(this, _class3);
                                return _super14.call(this, versionByteNum, hashBuf, Constants.Mainnet.Address);
                            }
                            return _createClass2(_class3);
                        }(Address1);
                        Address1.Testnet = /*#__PURE__*/ function(_Address2) {
                            _inherits(_class4, _Address2);
                            var _super15 = _createSuper(_class4);
                            function _class4(versionByteNum, hashBuf) {
                                _classCallCheck2(this, _class4);
                                return _super15.call(this, versionByteNum, hashBuf, Constants.Testnet.Address);
                            }
                            return _createClass2(_class4);
                        }(Address1);
                        var Bip321 = /*#__PURE__*/ function(_Struct10) {
                            _inherits(Bip32, _Struct10);
                            var _super16 = _createSuper(Bip32);
                            function Bip32(versionBytesNum, depth, parentFingerPrint, childIndex, chainCode, privKey, pubKey) {
                                var _this17;
                                var constants = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
                                var PrivKey$1 = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : PrivKey1;
                                _classCallCheck2(this, Bip32);
                                _this17 = _super16.call(this, {
                                    versionBytesNum: versionBytesNum,
                                    depth: depth,
                                    parentFingerPrint: parentFingerPrint,
                                    childIndex: childIndex,
                                    chainCode: chainCode,
                                    privKey: privKey,
                                    pubKey: pubKey
                                });
                                constants = constants || Constants.Default.Bip32;
                                _this17.Constants = constants;
                                _this17.PrivKey = PrivKey$1;
                                return _this17;
                            }
                            _createClass2(Bip32, [
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        this.versionBytesNum = this.Constants.privKey;
                                        this.depth = 0x00;
                                        this.parentFingerPrint = Buffer.from([
                                            0,
                                            0,
                                            0,
                                            0
                                        ]);
                                        this.childIndex = 0;
                                        this.chainCode = Random1.getRandomBuffer(32);
                                        this.privKey = new this.PrivKey().fromRandom();
                                        this.pubKey = new PubKey1().fromPrivKey(this.privKey);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        return this.fromBuffer(Base58Check1.decode(str));
                                    }
                                },
                                {
                                    key: "asyncFromString",
                                    value: function() {
                                        var _asyncFromString2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee44(str) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee44$(_context46) {
                                                while(true)switch(_context46.prev = _context46.next){
                                                    case 0:
                                                        args = [
                                                            str
                                                        ];
                                                        _context46.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "fromString", args);
                                                    case 3:
                                                        workersResult = _context46.sent;
                                                        return _context46.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context46.stop();
                                                }
                                            }, _callee44, this);
                                        }));
                                        function asyncFromString(_x62) {
                                            return _asyncFromString2.apply(this, arguments);
                                        }
                                        return asyncFromString;
                                    }()
                                },
                                {
                                    key: "fromSeed",
                                    value: function fromSeed(bytes) {
                                        if (!Buffer.isBuffer(bytes)) throw new Error("bytes must be a buffer");
                                        if (bytes.length < 16) throw new Error("Need more than 128 bits of entropy");
                                        if (bytes.length > 64) throw new Error("More than 512 bits of entropy is nonstandard");
                                        var hash = Hash1.sha512Hmac(bytes, Buffer.from("Bitcoin seed"));
                                        this.depth = 0x00;
                                        this.parentFingerPrint = Buffer.from([
                                            0,
                                            0,
                                            0,
                                            0
                                        ]);
                                        this.childIndex = 0;
                                        this.chainCode = hash.slice(32, 64);
                                        this.versionBytesNum = this.Constants.privKey;
                                        this.privKey = new this.PrivKey().fromBn(Bn().fromBuffer(hash.slice(0, 32)));
                                        this.pubKey = new PubKey1().fromPrivKey(this.privKey);
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncFromSeed",
                                    value: function() {
                                        var _asyncFromSeed = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee45(bytes) {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee45$(_context47) {
                                                while(true)switch(_context47.prev = _context47.next){
                                                    case 0:
                                                        _context47.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "fromSeed", [
                                                            bytes
                                                        ]);
                                                    case 2:
                                                        workersResult = _context47.sent;
                                                        return _context47.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context47.stop();
                                                }
                                            }, _callee45, this);
                                        }));
                                        function asyncFromSeed(_x63) {
                                            return _asyncFromSeed.apply(this, arguments);
                                        }
                                        return asyncFromSeed;
                                    }()
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        if (buf.length !== 78) throw new Error("incorrect bip32 data length");
                                        this.versionBytesNum = buf.slice(0, 4).readUInt32BE(0);
                                        this.depth = buf.slice(4, 5).readUInt8(0);
                                        this.parentFingerPrint = buf.slice(5, 9);
                                        this.childIndex = buf.slice(9, 13).readUInt32BE(0);
                                        this.chainCode = buf.slice(13, 45);
                                        var keyBytes = buf.slice(45, 78);
                                        var isPrivate = this.versionBytesNum === this.Constants.privKey;
                                        var isPublic = this.versionBytesNum === this.Constants.pubKey;
                                        if (isPrivate && keyBytes[0] === 0) {
                                            this.privKey = new this.PrivKey().fromBn(Bn().fromBuffer(keyBytes.slice(1, 33)));
                                            this.pubKey = new PubKey1().fromPrivKey(this.privKey);
                                        } else if (isPublic && (keyBytes[0] === 0x02 || keyBytes[0] === 0x03)) this.pubKey = new PubKey1().fromDer(keyBytes);
                                        else throw new Error("Invalid key");
                                        return this;
                                    }
                                },
                                {
                                    key: "fromFastBuffer",
                                    value: function fromFastBuffer(buf) {
                                        if (buf.length === 0) return this;
                                        if (buf.length !== 78 && buf.length !== 111) throw new Error("incorrect bip32 fastBuffer data length: " + buf.length);
                                        this.versionBytesNum = buf.slice(0, 4).readUInt32BE(0);
                                        this.depth = buf.slice(4, 5).readUInt8(0);
                                        this.parentFingerPrint = buf.slice(5, 9);
                                        this.childIndex = buf.slice(9, 13).readUInt32BE(0);
                                        this.chainCode = buf.slice(13, 45);
                                        var keyBytes = buf.slice(45, buf.length);
                                        var isPrivate = this.versionBytesNum === this.Constants.privKey;
                                        var isPublic = this.versionBytesNum === this.Constants.pubKey;
                                        if (isPrivate && keyBytes[0] === 0 && buf.length === 78) {
                                            this.privKey = new this.PrivKey().fromBn(Bn().fromBuffer(keyBytes.slice(1, 33)));
                                            this.pubKey = new PubKey1().fromPrivKey(this.privKey);
                                        } else if (isPublic && buf.length === 111) {
                                            this.pubKey = new PubKey1().fromFastBuffer(keyBytes);
                                            this.pubKey.compressed = true;
                                        } else throw new Error("Invalid key");
                                        return this;
                                    }
                                },
                                {
                                    key: "derive",
                                    value: function derive(path) {
                                        var e = path.split("/");
                                        if (path === "m") return this;
                                        var bip32 = this;
                                        for(var i in e){
                                            var c = e[i];
                                            if (i === "0") {
                                                if (c !== "m") throw new Error("invalid path");
                                                continue;
                                            }
                                            if (parseInt(c.replace("'", ""), 10).toString() !== c.replace("'", "")) throw new Error("invalid path");
                                            var usePrivate = c.length > 1 && c[c.length - 1] === "'";
                                            var childIndex = parseInt(usePrivate ? c.slice(0, c.length - 1) : c, 10) & 0x7fffffff;
                                            if (usePrivate) childIndex += 0x80000000;
                                            bip32 = bip32.deriveChild(childIndex);
                                        }
                                        return bip32;
                                    }
                                },
                                {
                                    key: "asyncDerive",
                                    value: function() {
                                        var _asyncDerive = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee46(path) {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee46$(_context48) {
                                                while(true)switch(_context48.prev = _context48.next){
                                                    case 0:
                                                        _context48.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "derive", [
                                                            path
                                                        ]);
                                                    case 2:
                                                        workersResult = _context48.sent;
                                                        return _context48.abrupt("return", new this.constructor().fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context48.stop();
                                                }
                                            }, _callee46, this);
                                        }));
                                        function asyncDerive(_x64) {
                                            return _asyncDerive.apply(this, arguments);
                                        }
                                        return asyncDerive;
                                    }()
                                },
                                {
                                    key: "deriveChild",
                                    value: function deriveChild(i) {
                                        if (typeof i !== "number") throw new Error("i must be a number");
                                        var ib = [];
                                        ib.push(i >> 24 & 0xff);
                                        ib.push(i >> 16 & 0xff);
                                        ib.push(i >> 8 & 0xff);
                                        ib.push(i & 0xff);
                                        ib = Buffer.from(ib);
                                        var usePrivate = (i & 0x80000000) !== 0;
                                        var isPrivate = this.versionBytesNum === this.Constants.privKey;
                                        if (usePrivate && (!this.privKey || !isPrivate)) throw new Error("Cannot do private key derivation without private key");
                                        var ret = null;
                                        if (this.privKey) {
                                            var data = null;
                                            if (usePrivate) data = Buffer.concat([
                                                Buffer.from([
                                                    0
                                                ]),
                                                this.privKey.bn.toBuffer({
                                                    size: 32
                                                }),
                                                ib
                                            ]);
                                            else data = Buffer.concat([
                                                this.pubKey.toBuffer({
                                                    size: 32
                                                }),
                                                ib
                                            ]);
                                            var hash = Hash1.sha512Hmac(data, this.chainCode);
                                            var il = Bn().fromBuffer(hash.slice(0, 32), {
                                                size: 32
                                            });
                                            var ir = hash.slice(32, 64);
                                            var k = il.add(this.privKey.bn).mod(Point1.getN());
                                            ret = new this.constructor();
                                            ret.chainCode = ir;
                                            ret.privKey = new this.PrivKey().fromBn(k);
                                            ret.pubKey = new PubKey1().fromPrivKey(ret.privKey);
                                        } else {
                                            var _data = Buffer.concat([
                                                this.pubKey.toBuffer(),
                                                ib
                                            ]);
                                            var _hash2 = Hash1.sha512Hmac(_data, this.chainCode);
                                            var _il = Bn().fromBuffer(_hash2.slice(0, 32));
                                            var _ir = _hash2.slice(32, 64);
                                            var ilG = Point1.getG().mul(_il);
                                            var Kpar = this.pubKey.point;
                                            var Ki = ilG.add(Kpar);
                                            var newpub = new PubKey1();
                                            newpub.point = Ki;
                                            ret = new this.constructor();
                                            ret.chainCode = _ir;
                                            ret.pubKey = newpub;
                                        }
                                        ret.childIndex = i;
                                        var pubKeyhash = Hash1.sha256Ripemd160(this.pubKey.toBuffer());
                                        ret.parentFingerPrint = pubKeyhash.slice(0, 4);
                                        ret.versionBytesNum = this.versionBytesNum;
                                        ret.depth = this.depth + 1;
                                        return ret;
                                    }
                                },
                                {
                                    key: "toPublic",
                                    value: function toPublic() {
                                        var bip32 = new this.constructor().fromObject(this);
                                        bip32.versionBytesNum = this.Constants.pubKey;
                                        bip32.privKey = undefined;
                                        return bip32;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        var isPrivate = this.versionBytesNum === this.Constants.privKey;
                                        var isPublic = this.versionBytesNum === this.Constants.pubKey;
                                        if (isPrivate) return new Bw1().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({
                                            size: 32
                                        })).toBuffer();
                                        else if (isPublic) {
                                            if (this.pubKey.compressed === false) throw new Error("cannot convert bip32 to buffer if pubKey is not compressed");
                                            return new Bw1().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toBuffer()).toBuffer();
                                        } else throw new Error("bip32: invalid versionBytesNum byte");
                                    }
                                },
                                {
                                    key: "toFastBuffer",
                                    value: function toFastBuffer() {
                                        if (!this.versionBytesNum) return Buffer.alloc(0);
                                        var isPrivate = this.versionBytesNum === this.Constants.privKey;
                                        var isPublic = this.versionBytesNum === this.Constants.pubKey;
                                        if (isPrivate) return new Bw1().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({
                                            size: 32
                                        })).toBuffer();
                                        else if (isPublic) return new Bw1().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toFastBuffer()).toBuffer();
                                        else throw new Error("bip32: invalid versionBytesNum byte");
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return Base58Check1.encode(this.toBuffer());
                                    }
                                },
                                {
                                    key: "asyncToString",
                                    value: function() {
                                        var _asyncToString2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee47() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee47$(_context49) {
                                                while(true)switch(_context49.prev = _context49.next){
                                                    case 0:
                                                        _context49.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "toString", []);
                                                    case 2:
                                                        workersResult = _context49.sent;
                                                        return _context49.abrupt("return", JSON.parse(workersResult.resbuf.toString()));
                                                    case 4:
                                                    case "end":
                                                        return _context49.stop();
                                                }
                                            }, _callee47, this);
                                        }));
                                        function asyncToString() {
                                            return _asyncToString2.apply(this, arguments);
                                        }
                                        return asyncToString;
                                    }()
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return this.toFastHex();
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        return this.fromFastHex(json);
                                    }
                                },
                                {
                                    key: "isPrivate",
                                    value: function isPrivate() {
                                        return this.versionBytesNum === this.Constants.privKey;
                                    }
                                }
                            ], [
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        return new this().fromRandom();
                                    }
                                },
                                {
                                    key: "fromSeed",
                                    value: function fromSeed(bytes) {
                                        return new this().fromSeed(bytes);
                                    }
                                },
                                {
                                    key: "asyncFromSeed",
                                    value: function asyncFromSeed(bytes) {
                                        return new this().asyncFromSeed(bytes);
                                    }
                                }
                            ]);
                            return Bip32;
                        }(Struct1);
                        exports.Bip32 = Bip321;
                        Bip321.Mainnet = /*#__PURE__*/ function(_Bip) {
                            _inherits(_class5, _Bip);
                            var _super17 = _createSuper(_class5);
                            function _class5(versionBytesNum, depth, parentFingerPrint, childIndex, chainCode, privKey, pubKey) {
                                _classCallCheck2(this, _class5);
                                return _super17.call(this, versionBytesNum, depth, parentFingerPrint, childIndex, chainCode, privKey, pubKey, Constants.Mainnet.Bip32, PrivKey1.Mainnet);
                            }
                            return _createClass2(_class5);
                        }(Bip321);
                        Bip321.Testnet = /*#__PURE__*/ function(_Bip2) {
                            _inherits(_class6, _Bip2);
                            var _super18 = _createSuper(_class6);
                            function _class6(versionBytesNum, depth, parentFingerPrint, childIndex, chainCode, privKey, pubKey) {
                                _classCallCheck2(this, _class6);
                                return _super18.call(this, versionBytesNum, depth, parentFingerPrint, childIndex, chainCode, privKey, pubKey, Constants.Testnet.Bip32, PrivKey1.Testnet);
                            }
                            return _createClass2(_class6);
                        }(Bip321);
                        var wordList = [
                            "abandon",
                            "ability",
                            "able",
                            "about",
                            "above",
                            "absent",
                            "absorb",
                            "abstract",
                            "absurd",
                            "abuse",
                            "access",
                            "accident",
                            "account",
                            "accuse",
                            "achieve",
                            "acid",
                            "acoustic",
                            "acquire",
                            "across",
                            "act",
                            "action",
                            "actor",
                            "actress",
                            "actual",
                            "adapt",
                            "add",
                            "addict",
                            "address",
                            "adjust",
                            "admit",
                            "adult",
                            "advance",
                            "advice",
                            "aerobic",
                            "affair",
                            "afford",
                            "afraid",
                            "again",
                            "age",
                            "agent",
                            "agree",
                            "ahead",
                            "aim",
                            "air",
                            "airport",
                            "aisle",
                            "alarm",
                            "album",
                            "alcohol",
                            "alert",
                            "alien",
                            "all",
                            "alley",
                            "allow",
                            "almost",
                            "alone",
                            "alpha",
                            "already",
                            "also",
                            "alter",
                            "always",
                            "amateur",
                            "amazing",
                            "among",
                            "amount",
                            "amused",
                            "analyst",
                            "anchor",
                            "ancient",
                            "anger",
                            "angle",
                            "angry",
                            "animal",
                            "ankle",
                            "announce",
                            "annual",
                            "another",
                            "answer",
                            "antenna",
                            "antique",
                            "anxiety",
                            "any",
                            "apart",
                            "apology",
                            "appear",
                            "apple",
                            "approve",
                            "april",
                            "arch",
                            "arctic",
                            "area",
                            "arena",
                            "argue",
                            "arm",
                            "armed",
                            "armor",
                            "army",
                            "around",
                            "arrange",
                            "arrest",
                            "arrive",
                            "arrow",
                            "art",
                            "artefact",
                            "artist",
                            "artwork",
                            "ask",
                            "aspect",
                            "assault",
                            "asset",
                            "assist",
                            "assume",
                            "asthma",
                            "athlete",
                            "atom",
                            "attack",
                            "attend",
                            "attitude",
                            "attract",
                            "auction",
                            "audit",
                            "august",
                            "aunt",
                            "author",
                            "auto",
                            "autumn",
                            "average",
                            "avocado",
                            "avoid",
                            "awake",
                            "aware",
                            "away",
                            "awesome",
                            "awful",
                            "awkward",
                            "axis",
                            "baby",
                            "bachelor",
                            "bacon",
                            "badge",
                            "bag",
                            "balance",
                            "balcony",
                            "ball",
                            "bamboo",
                            "banana",
                            "banner",
                            "bar",
                            "barely",
                            "bargain",
                            "barrel",
                            "base",
                            "basic",
                            "basket",
                            "battle",
                            "beach",
                            "bean",
                            "beauty",
                            "because",
                            "become",
                            "beef",
                            "before",
                            "begin",
                            "behave",
                            "behind",
                            "believe",
                            "below",
                            "belt",
                            "bench",
                            "benefit",
                            "best",
                            "betray",
                            "better",
                            "between",
                            "beyond",
                            "bicycle",
                            "bid",
                            "bike",
                            "bind",
                            "biology",
                            "bird",
                            "birth",
                            "bitter",
                            "black",
                            "blade",
                            "blame",
                            "blanket",
                            "blast",
                            "bleak",
                            "bless",
                            "blind",
                            "blood",
                            "blossom",
                            "blouse",
                            "blue",
                            "blur",
                            "blush",
                            "board",
                            "boat",
                            "body",
                            "boil",
                            "bomb",
                            "bone",
                            "bonus",
                            "book",
                            "boost",
                            "border",
                            "boring",
                            "borrow",
                            "boss",
                            "bottom",
                            "bounce",
                            "box",
                            "boy",
                            "bracket",
                            "brain",
                            "brand",
                            "brass",
                            "brave",
                            "bread",
                            "breeze",
                            "brick",
                            "bridge",
                            "brief",
                            "bright",
                            "bring",
                            "brisk",
                            "broccoli",
                            "broken",
                            "bronze",
                            "broom",
                            "brother",
                            "brown",
                            "brush",
                            "bubble",
                            "buddy",
                            "budget",
                            "buffalo",
                            "build",
                            "bulb",
                            "bulk",
                            "bullet",
                            "bundle",
                            "bunker",
                            "burden",
                            "burger",
                            "burst",
                            "bus",
                            "business",
                            "busy",
                            "butter",
                            "buyer",
                            "buzz",
                            "cabbage",
                            "cabin",
                            "cable",
                            "cactus",
                            "cage",
                            "cake",
                            "call",
                            "calm",
                            "camera",
                            "camp",
                            "can",
                            "canal",
                            "cancel",
                            "candy",
                            "cannon",
                            "canoe",
                            "canvas",
                            "canyon",
                            "capable",
                            "capital",
                            "captain",
                            "car",
                            "carbon",
                            "card",
                            "cargo",
                            "carpet",
                            "carry",
                            "cart",
                            "case",
                            "cash",
                            "casino",
                            "castle",
                            "casual",
                            "cat",
                            "catalog",
                            "catch",
                            "category",
                            "cattle",
                            "caught",
                            "cause",
                            "caution",
                            "cave",
                            "ceiling",
                            "celery",
                            "cement",
                            "census",
                            "century",
                            "cereal",
                            "certain",
                            "chair",
                            "chalk",
                            "champion",
                            "change",
                            "chaos",
                            "chapter",
                            "charge",
                            "chase",
                            "chat",
                            "cheap",
                            "check",
                            "cheese",
                            "chef",
                            "cherry",
                            "chest",
                            "chicken",
                            "chief",
                            "child",
                            "chimney",
                            "choice",
                            "choose",
                            "chronic",
                            "chuckle",
                            "chunk",
                            "churn",
                            "cigar",
                            "cinnamon",
                            "circle",
                            "citizen",
                            "city",
                            "civil",
                            "claim",
                            "clap",
                            "clarify",
                            "claw",
                            "clay",
                            "clean",
                            "clerk",
                            "clever",
                            "click",
                            "client",
                            "cliff",
                            "climb",
                            "clinic",
                            "clip",
                            "clock",
                            "clog",
                            "close",
                            "cloth",
                            "cloud",
                            "clown",
                            "club",
                            "clump",
                            "cluster",
                            "clutch",
                            "coach",
                            "coast",
                            "coconut",
                            "code",
                            "coffee",
                            "coil",
                            "coin",
                            "collect",
                            "color",
                            "column",
                            "combine",
                            "come",
                            "comfort",
                            "comic",
                            "common",
                            "company",
                            "concert",
                            "conduct",
                            "confirm",
                            "congress",
                            "connect",
                            "consider",
                            "control",
                            "convince",
                            "cook",
                            "cool",
                            "copper",
                            "copy",
                            "coral",
                            "core",
                            "corn",
                            "correct",
                            "cost",
                            "cotton",
                            "couch",
                            "country",
                            "couple",
                            "course",
                            "cousin",
                            "cover",
                            "coyote",
                            "crack",
                            "cradle",
                            "craft",
                            "cram",
                            "crane",
                            "crash",
                            "crater",
                            "crawl",
                            "crazy",
                            "cream",
                            "credit",
                            "creek",
                            "crew",
                            "cricket",
                            "crime",
                            "crisp",
                            "critic",
                            "crop",
                            "cross",
                            "crouch",
                            "crowd",
                            "crucial",
                            "cruel",
                            "cruise",
                            "crumble",
                            "crunch",
                            "crush",
                            "cry",
                            "crystal",
                            "cube",
                            "culture",
                            "cup",
                            "cupboard",
                            "curious",
                            "current",
                            "curtain",
                            "curve",
                            "cushion",
                            "custom",
                            "cute",
                            "cycle",
                            "dad",
                            "damage",
                            "damp",
                            "dance",
                            "danger",
                            "daring",
                            "dash",
                            "daughter",
                            "dawn",
                            "day",
                            "deal",
                            "debate",
                            "debris",
                            "decade",
                            "december",
                            "decide",
                            "decline",
                            "decorate",
                            "decrease",
                            "deer",
                            "defense",
                            "define",
                            "defy",
                            "degree",
                            "delay",
                            "deliver",
                            "demand",
                            "demise",
                            "denial",
                            "dentist",
                            "deny",
                            "depart",
                            "depend",
                            "deposit",
                            "depth",
                            "deputy",
                            "derive",
                            "describe",
                            "desert",
                            "design",
                            "desk",
                            "despair",
                            "destroy",
                            "detail",
                            "detect",
                            "develop",
                            "device",
                            "devote",
                            "diagram",
                            "dial",
                            "diamond",
                            "diary",
                            "dice",
                            "diesel",
                            "diet",
                            "differ",
                            "digital",
                            "dignity",
                            "dilemma",
                            "dinner",
                            "dinosaur",
                            "direct",
                            "dirt",
                            "disagree",
                            "discover",
                            "disease",
                            "dish",
                            "dismiss",
                            "disorder",
                            "display",
                            "distance",
                            "divert",
                            "divide",
                            "divorce",
                            "dizzy",
                            "doctor",
                            "document",
                            "dog",
                            "doll",
                            "dolphin",
                            "domain",
                            "donate",
                            "donkey",
                            "donor",
                            "door",
                            "dose",
                            "double",
                            "dove",
                            "draft",
                            "dragon",
                            "drama",
                            "drastic",
                            "draw",
                            "dream",
                            "dress",
                            "drift",
                            "drill",
                            "drink",
                            "drip",
                            "drive",
                            "drop",
                            "drum",
                            "dry",
                            "duck",
                            "dumb",
                            "dune",
                            "during",
                            "dust",
                            "dutch",
                            "duty",
                            "dwarf",
                            "dynamic",
                            "eager",
                            "eagle",
                            "early",
                            "earn",
                            "earth",
                            "easily",
                            "east",
                            "easy",
                            "echo",
                            "ecology",
                            "economy",
                            "edge",
                            "edit",
                            "educate",
                            "effort",
                            "egg",
                            "eight",
                            "either",
                            "elbow",
                            "elder",
                            "electric",
                            "elegant",
                            "element",
                            "elephant",
                            "elevator",
                            "elite",
                            "else",
                            "embark",
                            "embody",
                            "embrace",
                            "emerge",
                            "emotion",
                            "employ",
                            "empower",
                            "empty",
                            "enable",
                            "enact",
                            "end",
                            "endless",
                            "endorse",
                            "enemy",
                            "energy",
                            "enforce",
                            "engage",
                            "engine",
                            "enhance",
                            "enjoy",
                            "enlist",
                            "enough",
                            "enrich",
                            "enroll",
                            "ensure",
                            "enter",
                            "entire",
                            "entry",
                            "envelope",
                            "episode",
                            "equal",
                            "equip",
                            "era",
                            "erase",
                            "erode",
                            "erosion",
                            "error",
                            "erupt",
                            "escape",
                            "essay",
                            "essence",
                            "estate",
                            "eternal",
                            "ethics",
                            "evidence",
                            "evil",
                            "evoke",
                            "evolve",
                            "exact",
                            "example",
                            "excess",
                            "exchange",
                            "excite",
                            "exclude",
                            "excuse",
                            "execute",
                            "exercise",
                            "exhaust",
                            "exhibit",
                            "exile",
                            "exist",
                            "exit",
                            "exotic",
                            "expand",
                            "expect",
                            "expire",
                            "explain",
                            "expose",
                            "express",
                            "extend",
                            "extra",
                            "eye",
                            "eyebrow",
                            "fabric",
                            "face",
                            "faculty",
                            "fade",
                            "faint",
                            "faith",
                            "fall",
                            "false",
                            "fame",
                            "family",
                            "famous",
                            "fan",
                            "fancy",
                            "fantasy",
                            "farm",
                            "fashion",
                            "fat",
                            "fatal",
                            "father",
                            "fatigue",
                            "fault",
                            "favorite",
                            "feature",
                            "february",
                            "federal",
                            "fee",
                            "feed",
                            "feel",
                            "female",
                            "fence",
                            "festival",
                            "fetch",
                            "fever",
                            "few",
                            "fiber",
                            "fiction",
                            "field",
                            "figure",
                            "file",
                            "film",
                            "filter",
                            "final",
                            "find",
                            "fine",
                            "finger",
                            "finish",
                            "fire",
                            "firm",
                            "first",
                            "fiscal",
                            "fish",
                            "fit",
                            "fitness",
                            "fix",
                            "flag",
                            "flame",
                            "flash",
                            "flat",
                            "flavor",
                            "flee",
                            "flight",
                            "flip",
                            "float",
                            "flock",
                            "floor",
                            "flower",
                            "fluid",
                            "flush",
                            "fly",
                            "foam",
                            "focus",
                            "fog",
                            "foil",
                            "fold",
                            "follow",
                            "food",
                            "foot",
                            "force",
                            "forest",
                            "forget",
                            "fork",
                            "fortune",
                            "forum",
                            "forward",
                            "fossil",
                            "foster",
                            "found",
                            "fox",
                            "fragile",
                            "frame",
                            "frequent",
                            "fresh",
                            "friend",
                            "fringe",
                            "frog",
                            "front",
                            "frost",
                            "frown",
                            "frozen",
                            "fruit",
                            "fuel",
                            "fun",
                            "funny",
                            "furnace",
                            "fury",
                            "future",
                            "gadget",
                            "gain",
                            "galaxy",
                            "gallery",
                            "game",
                            "gap",
                            "garage",
                            "garbage",
                            "garden",
                            "garlic",
                            "garment",
                            "gas",
                            "gasp",
                            "gate",
                            "gather",
                            "gauge",
                            "gaze",
                            "general",
                            "genius",
                            "genre",
                            "gentle",
                            "genuine",
                            "gesture",
                            "ghost",
                            "giant",
                            "gift",
                            "giggle",
                            "ginger",
                            "giraffe",
                            "girl",
                            "give",
                            "glad",
                            "glance",
                            "glare",
                            "glass",
                            "glide",
                            "glimpse",
                            "globe",
                            "gloom",
                            "glory",
                            "glove",
                            "glow",
                            "glue",
                            "goat",
                            "goddess",
                            "gold",
                            "good",
                            "goose",
                            "gorilla",
                            "gospel",
                            "gossip",
                            "govern",
                            "gown",
                            "grab",
                            "grace",
                            "grain",
                            "grant",
                            "grape",
                            "grass",
                            "gravity",
                            "great",
                            "green",
                            "grid",
                            "grief",
                            "grit",
                            "grocery",
                            "group",
                            "grow",
                            "grunt",
                            "guard",
                            "guess",
                            "guide",
                            "guilt",
                            "guitar",
                            "gun",
                            "gym",
                            "habit",
                            "hair",
                            "half",
                            "hammer",
                            "hamster",
                            "hand",
                            "happy",
                            "harbor",
                            "hard",
                            "harsh",
                            "harvest",
                            "hat",
                            "have",
                            "hawk",
                            "hazard",
                            "head",
                            "health",
                            "heart",
                            "heavy",
                            "hedgehog",
                            "height",
                            "hello",
                            "helmet",
                            "help",
                            "hen",
                            "hero",
                            "hidden",
                            "high",
                            "hill",
                            "hint",
                            "hip",
                            "hire",
                            "history",
                            "hobby",
                            "hockey",
                            "hold",
                            "hole",
                            "holiday",
                            "hollow",
                            "home",
                            "honey",
                            "hood",
                            "hope",
                            "horn",
                            "horror",
                            "horse",
                            "hospital",
                            "host",
                            "hotel",
                            "hour",
                            "hover",
                            "hub",
                            "huge",
                            "human",
                            "humble",
                            "humor",
                            "hundred",
                            "hungry",
                            "hunt",
                            "hurdle",
                            "hurry",
                            "hurt",
                            "husband",
                            "hybrid",
                            "ice",
                            "icon",
                            "idea",
                            "identify",
                            "idle",
                            "ignore",
                            "ill",
                            "illegal",
                            "illness",
                            "image",
                            "imitate",
                            "immense",
                            "immune",
                            "impact",
                            "impose",
                            "improve",
                            "impulse",
                            "inch",
                            "include",
                            "income",
                            "increase",
                            "index",
                            "indicate",
                            "indoor",
                            "industry",
                            "infant",
                            "inflict",
                            "inform",
                            "inhale",
                            "inherit",
                            "initial",
                            "inject",
                            "injury",
                            "inmate",
                            "inner",
                            "innocent",
                            "input",
                            "inquiry",
                            "insane",
                            "insect",
                            "inside",
                            "inspire",
                            "install",
                            "intact",
                            "interest",
                            "into",
                            "invest",
                            "invite",
                            "involve",
                            "iron",
                            "island",
                            "isolate",
                            "issue",
                            "item",
                            "ivory",
                            "jacket",
                            "jaguar",
                            "jar",
                            "jazz",
                            "jealous",
                            "jeans",
                            "jelly",
                            "jewel",
                            "job",
                            "join",
                            "joke",
                            "journey",
                            "joy",
                            "judge",
                            "juice",
                            "jump",
                            "jungle",
                            "junior",
                            "junk",
                            "just",
                            "kangaroo",
                            "keen",
                            "keep",
                            "ketchup",
                            "key",
                            "kick",
                            "kid",
                            "kidney",
                            "kind",
                            "kingdom",
                            "kiss",
                            "kit",
                            "kitchen",
                            "kite",
                            "kitten",
                            "kiwi",
                            "knee",
                            "knife",
                            "knock",
                            "know",
                            "lab",
                            "label",
                            "labor",
                            "ladder",
                            "lady",
                            "lake",
                            "lamp",
                            "language",
                            "laptop",
                            "large",
                            "later",
                            "latin",
                            "laugh",
                            "laundry",
                            "lava",
                            "law",
                            "lawn",
                            "lawsuit",
                            "layer",
                            "lazy",
                            "leader",
                            "leaf",
                            "learn",
                            "leave",
                            "lecture",
                            "left",
                            "leg",
                            "legal",
                            "legend",
                            "leisure",
                            "lemon",
                            "lend",
                            "length",
                            "lens",
                            "leopard",
                            "lesson",
                            "letter",
                            "level",
                            "liar",
                            "liberty",
                            "library",
                            "license",
                            "life",
                            "lift",
                            "light",
                            "like",
                            "limb",
                            "limit",
                            "link",
                            "lion",
                            "liquid",
                            "list",
                            "little",
                            "live",
                            "lizard",
                            "load",
                            "loan",
                            "lobster",
                            "local",
                            "lock",
                            "logic",
                            "lonely",
                            "long",
                            "loop",
                            "lottery",
                            "loud",
                            "lounge",
                            "love",
                            "loyal",
                            "lucky",
                            "luggage",
                            "lumber",
                            "lunar",
                            "lunch",
                            "luxury",
                            "lyrics",
                            "machine",
                            "mad",
                            "magic",
                            "magnet",
                            "maid",
                            "mail",
                            "main",
                            "major",
                            "make",
                            "mammal",
                            "man",
                            "manage",
                            "mandate",
                            "mango",
                            "mansion",
                            "manual",
                            "maple",
                            "marble",
                            "march",
                            "margin",
                            "marine",
                            "market",
                            "marriage",
                            "mask",
                            "mass",
                            "master",
                            "match",
                            "material",
                            "math",
                            "matrix",
                            "matter",
                            "maximum",
                            "maze",
                            "meadow",
                            "mean",
                            "measure",
                            "meat",
                            "mechanic",
                            "medal",
                            "media",
                            "melody",
                            "melt",
                            "member",
                            "memory",
                            "mention",
                            "menu",
                            "mercy",
                            "merge",
                            "merit",
                            "merry",
                            "mesh",
                            "message",
                            "metal",
                            "method",
                            "middle",
                            "midnight",
                            "milk",
                            "million",
                            "mimic",
                            "mind",
                            "minimum",
                            "minor",
                            "minute",
                            "miracle",
                            "mirror",
                            "misery",
                            "miss",
                            "mistake",
                            "mix",
                            "mixed",
                            "mixture",
                            "mobile",
                            "model",
                            "modify",
                            "mom",
                            "moment",
                            "monitor",
                            "monkey",
                            "monster",
                            "month",
                            "moon",
                            "moral",
                            "more",
                            "morning",
                            "mosquito",
                            "mother",
                            "motion",
                            "motor",
                            "mountain",
                            "mouse",
                            "move",
                            "movie",
                            "much",
                            "muffin",
                            "mule",
                            "multiply",
                            "muscle",
                            "museum",
                            "mushroom",
                            "music",
                            "must",
                            "mutual",
                            "myself",
                            "mystery",
                            "myth",
                            "naive",
                            "name",
                            "napkin",
                            "narrow",
                            "nasty",
                            "nation",
                            "nature",
                            "near",
                            "neck",
                            "need",
                            "negative",
                            "neglect",
                            "neither",
                            "nephew",
                            "nerve",
                            "nest",
                            "net",
                            "network",
                            "neutral",
                            "never",
                            "news",
                            "next",
                            "nice",
                            "night",
                            "noble",
                            "noise",
                            "nominee",
                            "noodle",
                            "normal",
                            "north",
                            "nose",
                            "notable",
                            "note",
                            "nothing",
                            "notice",
                            "novel",
                            "now",
                            "nuclear",
                            "number",
                            "nurse",
                            "nut",
                            "oak",
                            "obey",
                            "object",
                            "oblige",
                            "obscure",
                            "observe",
                            "obtain",
                            "obvious",
                            "occur",
                            "ocean",
                            "october",
                            "odor",
                            "off",
                            "offer",
                            "office",
                            "often",
                            "oil",
                            "okay",
                            "old",
                            "olive",
                            "olympic",
                            "omit",
                            "once",
                            "one",
                            "onion",
                            "online",
                            "only",
                            "open",
                            "opera",
                            "opinion",
                            "oppose",
                            "option",
                            "orange",
                            "orbit",
                            "orchard",
                            "order",
                            "ordinary",
                            "organ",
                            "orient",
                            "original",
                            "orphan",
                            "ostrich",
                            "other",
                            "outdoor",
                            "outer",
                            "output",
                            "outside",
                            "oval",
                            "oven",
                            "over",
                            "own",
                            "owner",
                            "oxygen",
                            "oyster",
                            "ozone",
                            "pact",
                            "paddle",
                            "page",
                            "pair",
                            "palace",
                            "palm",
                            "panda",
                            "panel",
                            "panic",
                            "panther",
                            "paper",
                            "parade",
                            "parent",
                            "park",
                            "parrot",
                            "party",
                            "pass",
                            "patch",
                            "path",
                            "patient",
                            "patrol",
                            "pattern",
                            "pause",
                            "pave",
                            "payment",
                            "peace",
                            "peanut",
                            "pear",
                            "peasant",
                            "pelican",
                            "pen",
                            "penalty",
                            "pencil",
                            "people",
                            "pepper",
                            "perfect",
                            "permit",
                            "person",
                            "pet",
                            "phone",
                            "photo",
                            "phrase",
                            "physical",
                            "piano",
                            "picnic",
                            "picture",
                            "piece",
                            "pig",
                            "pigeon",
                            "pill",
                            "pilot",
                            "pink",
                            "pioneer",
                            "pipe",
                            "pistol",
                            "pitch",
                            "pizza",
                            "place",
                            "planet",
                            "plastic",
                            "plate",
                            "play",
                            "please",
                            "pledge",
                            "pluck",
                            "plug",
                            "plunge",
                            "poem",
                            "poet",
                            "point",
                            "polar",
                            "pole",
                            "police",
                            "pond",
                            "pony",
                            "pool",
                            "popular",
                            "portion",
                            "position",
                            "possible",
                            "post",
                            "potato",
                            "pottery",
                            "poverty",
                            "powder",
                            "power",
                            "practice",
                            "praise",
                            "predict",
                            "prefer",
                            "prepare",
                            "present",
                            "pretty",
                            "prevent",
                            "price",
                            "pride",
                            "primary",
                            "print",
                            "priority",
                            "prison",
                            "private",
                            "prize",
                            "problem",
                            "process",
                            "produce",
                            "profit",
                            "program",
                            "project",
                            "promote",
                            "proof",
                            "property",
                            "prosper",
                            "protect",
                            "proud",
                            "provide",
                            "public",
                            "pudding",
                            "pull",
                            "pulp",
                            "pulse",
                            "pumpkin",
                            "punch",
                            "pupil",
                            "puppy",
                            "purchase",
                            "purity",
                            "purpose",
                            "purse",
                            "push",
                            "put",
                            "puzzle",
                            "pyramid",
                            "quality",
                            "quantum",
                            "quarter",
                            "question",
                            "quick",
                            "quit",
                            "quiz",
                            "quote",
                            "rabbit",
                            "raccoon",
                            "race",
                            "rack",
                            "radar",
                            "radio",
                            "rail",
                            "rain",
                            "raise",
                            "rally",
                            "ramp",
                            "ranch",
                            "random",
                            "range",
                            "rapid",
                            "rare",
                            "rate",
                            "rather",
                            "raven",
                            "raw",
                            "razor",
                            "ready",
                            "real",
                            "reason",
                            "rebel",
                            "rebuild",
                            "recall",
                            "receive",
                            "recipe",
                            "record",
                            "recycle",
                            "reduce",
                            "reflect",
                            "reform",
                            "refuse",
                            "region",
                            "regret",
                            "regular",
                            "reject",
                            "relax",
                            "release",
                            "relief",
                            "rely",
                            "remain",
                            "remember",
                            "remind",
                            "remove",
                            "render",
                            "renew",
                            "rent",
                            "reopen",
                            "repair",
                            "repeat",
                            "replace",
                            "report",
                            "require",
                            "rescue",
                            "resemble",
                            "resist",
                            "resource",
                            "response",
                            "result",
                            "retire",
                            "retreat",
                            "return",
                            "reunion",
                            "reveal",
                            "review",
                            "reward",
                            "rhythm",
                            "rib",
                            "ribbon",
                            "rice",
                            "rich",
                            "ride",
                            "ridge",
                            "rifle",
                            "right",
                            "rigid",
                            "ring",
                            "riot",
                            "ripple",
                            "risk",
                            "ritual",
                            "rival",
                            "river",
                            "road",
                            "roast",
                            "robot",
                            "robust",
                            "rocket",
                            "romance",
                            "roof",
                            "rookie",
                            "room",
                            "rose",
                            "rotate",
                            "rough",
                            "round",
                            "route",
                            "royal",
                            "rubber",
                            "rude",
                            "rug",
                            "rule",
                            "run",
                            "runway",
                            "rural",
                            "sad",
                            "saddle",
                            "sadness",
                            "safe",
                            "sail",
                            "salad",
                            "salmon",
                            "salon",
                            "salt",
                            "salute",
                            "same",
                            "sample",
                            "sand",
                            "satisfy",
                            "satoshi",
                            "sauce",
                            "sausage",
                            "save",
                            "say",
                            "scale",
                            "scan",
                            "scare",
                            "scatter",
                            "scene",
                            "scheme",
                            "school",
                            "science",
                            "scissors",
                            "scorpion",
                            "scout",
                            "scrap",
                            "screen",
                            "script",
                            "scrub",
                            "sea",
                            "search",
                            "season",
                            "seat",
                            "second",
                            "secret",
                            "section",
                            "security",
                            "seed",
                            "seek",
                            "segment",
                            "select",
                            "sell",
                            "seminar",
                            "senior",
                            "sense",
                            "sentence",
                            "series",
                            "service",
                            "session",
                            "settle",
                            "setup",
                            "seven",
                            "shadow",
                            "shaft",
                            "shallow",
                            "share",
                            "shed",
                            "shell",
                            "sheriff",
                            "shield",
                            "shift",
                            "shine",
                            "ship",
                            "shiver",
                            "shock",
                            "shoe",
                            "shoot",
                            "shop",
                            "short",
                            "shoulder",
                            "shove",
                            "shrimp",
                            "shrug",
                            "shuffle",
                            "shy",
                            "sibling",
                            "sick",
                            "side",
                            "siege",
                            "sight",
                            "sign",
                            "silent",
                            "silk",
                            "silly",
                            "silver",
                            "similar",
                            "simple",
                            "since",
                            "sing",
                            "siren",
                            "sister",
                            "situate",
                            "six",
                            "size",
                            "skate",
                            "sketch",
                            "ski",
                            "skill",
                            "skin",
                            "skirt",
                            "skull",
                            "slab",
                            "slam",
                            "sleep",
                            "slender",
                            "slice",
                            "slide",
                            "slight",
                            "slim",
                            "slogan",
                            "slot",
                            "slow",
                            "slush",
                            "small",
                            "smart",
                            "smile",
                            "smoke",
                            "smooth",
                            "snack",
                            "snake",
                            "snap",
                            "sniff",
                            "snow",
                            "soap",
                            "soccer",
                            "social",
                            "sock",
                            "soda",
                            "soft",
                            "solar",
                            "soldier",
                            "solid",
                            "solution",
                            "solve",
                            "someone",
                            "song",
                            "soon",
                            "sorry",
                            "sort",
                            "soul",
                            "sound",
                            "soup",
                            "source",
                            "south",
                            "space",
                            "spare",
                            "spatial",
                            "spawn",
                            "speak",
                            "special",
                            "speed",
                            "spell",
                            "spend",
                            "sphere",
                            "spice",
                            "spider",
                            "spike",
                            "spin",
                            "spirit",
                            "split",
                            "spoil",
                            "sponsor",
                            "spoon",
                            "sport",
                            "spot",
                            "spray",
                            "spread",
                            "spring",
                            "spy",
                            "square",
                            "squeeze",
                            "squirrel",
                            "stable",
                            "stadium",
                            "staff",
                            "stage",
                            "stairs",
                            "stamp",
                            "stand",
                            "start",
                            "state",
                            "stay",
                            "steak",
                            "steel",
                            "stem",
                            "step",
                            "stereo",
                            "stick",
                            "still",
                            "sting",
                            "stock",
                            "stomach",
                            "stone",
                            "stool",
                            "story",
                            "stove",
                            "strategy",
                            "street",
                            "strike",
                            "strong",
                            "struggle",
                            "student",
                            "stuff",
                            "stumble",
                            "style",
                            "subject",
                            "submit",
                            "subway",
                            "success",
                            "such",
                            "sudden",
                            "suffer",
                            "sugar",
                            "suggest",
                            "suit",
                            "summer",
                            "sun",
                            "sunny",
                            "sunset",
                            "super",
                            "supply",
                            "supreme",
                            "sure",
                            "surface",
                            "surge",
                            "surprise",
                            "surround",
                            "survey",
                            "suspect",
                            "sustain",
                            "swallow",
                            "swamp",
                            "swap",
                            "swarm",
                            "swear",
                            "sweet",
                            "swift",
                            "swim",
                            "swing",
                            "switch",
                            "sword",
                            "symbol",
                            "symptom",
                            "syrup",
                            "system",
                            "table",
                            "tackle",
                            "tag",
                            "tail",
                            "talent",
                            "talk",
                            "tank",
                            "tape",
                            "target",
                            "task",
                            "taste",
                            "tattoo",
                            "taxi",
                            "teach",
                            "team",
                            "tell",
                            "ten",
                            "tenant",
                            "tennis",
                            "tent",
                            "term",
                            "test",
                            "text",
                            "thank",
                            "that",
                            "theme",
                            "then",
                            "theory",
                            "there",
                            "they",
                            "thing",
                            "this",
                            "thought",
                            "three",
                            "thrive",
                            "throw",
                            "thumb",
                            "thunder",
                            "ticket",
                            "tide",
                            "tiger",
                            "tilt",
                            "timber",
                            "time",
                            "tiny",
                            "tip",
                            "tired",
                            "tissue",
                            "title",
                            "toast",
                            "tobacco",
                            "today",
                            "toddler",
                            "toe",
                            "together",
                            "toilet",
                            "token",
                            "tomato",
                            "tomorrow",
                            "tone",
                            "tongue",
                            "tonight",
                            "tool",
                            "tooth",
                            "top",
                            "topic",
                            "topple",
                            "torch",
                            "tornado",
                            "tortoise",
                            "toss",
                            "total",
                            "tourist",
                            "toward",
                            "tower",
                            "town",
                            "toy",
                            "track",
                            "trade",
                            "traffic",
                            "tragic",
                            "train",
                            "transfer",
                            "trap",
                            "trash",
                            "travel",
                            "tray",
                            "treat",
                            "tree",
                            "trend",
                            "trial",
                            "tribe",
                            "trick",
                            "trigger",
                            "trim",
                            "trip",
                            "trophy",
                            "trouble",
                            "truck",
                            "true",
                            "truly",
                            "trumpet",
                            "trust",
                            "truth",
                            "try",
                            "tube",
                            "tuition",
                            "tumble",
                            "tuna",
                            "tunnel",
                            "turkey",
                            "turn",
                            "turtle",
                            "twelve",
                            "twenty",
                            "twice",
                            "twin",
                            "twist",
                            "two",
                            "type",
                            "typical",
                            "ugly",
                            "umbrella",
                            "unable",
                            "unaware",
                            "uncle",
                            "uncover",
                            "under",
                            "undo",
                            "unfair",
                            "unfold",
                            "unhappy",
                            "uniform",
                            "unique",
                            "unit",
                            "universe",
                            "unknown",
                            "unlock",
                            "until",
                            "unusual",
                            "unveil",
                            "update",
                            "upgrade",
                            "uphold",
                            "upon",
                            "upper",
                            "upset",
                            "urban",
                            "urge",
                            "usage",
                            "use",
                            "used",
                            "useful",
                            "useless",
                            "usual",
                            "utility",
                            "vacant",
                            "vacuum",
                            "vague",
                            "valid",
                            "valley",
                            "valve",
                            "van",
                            "vanish",
                            "vapor",
                            "various",
                            "vast",
                            "vault",
                            "vehicle",
                            "velvet",
                            "vendor",
                            "venture",
                            "venue",
                            "verb",
                            "verify",
                            "version",
                            "very",
                            "vessel",
                            "veteran",
                            "viable",
                            "vibrant",
                            "vicious",
                            "victory",
                            "video",
                            "view",
                            "village",
                            "vintage",
                            "violin",
                            "virtual",
                            "virus",
                            "visa",
                            "visit",
                            "visual",
                            "vital",
                            "vivid",
                            "vocal",
                            "voice",
                            "void",
                            "volcano",
                            "volume",
                            "vote",
                            "voyage",
                            "wage",
                            "wagon",
                            "wait",
                            "walk",
                            "wall",
                            "walnut",
                            "want",
                            "warfare",
                            "warm",
                            "warrior",
                            "wash",
                            "wasp",
                            "waste",
                            "water",
                            "wave",
                            "way",
                            "wealth",
                            "weapon",
                            "wear",
                            "weasel",
                            "weather",
                            "web",
                            "wedding",
                            "weekend",
                            "weird",
                            "welcome",
                            "west",
                            "wet",
                            "whale",
                            "what",
                            "wheat",
                            "wheel",
                            "when",
                            "where",
                            "whip",
                            "whisper",
                            "wide",
                            "width",
                            "wife",
                            "wild",
                            "will",
                            "win",
                            "window",
                            "wine",
                            "wing",
                            "wink",
                            "winner",
                            "winter",
                            "wire",
                            "wisdom",
                            "wise",
                            "wish",
                            "witness",
                            "wolf",
                            "woman",
                            "wonder",
                            "wood",
                            "wool",
                            "word",
                            "work",
                            "world",
                            "worry",
                            "worth",
                            "wrap",
                            "wreck",
                            "wrestle",
                            "wrist",
                            "write",
                            "wrong",
                            "yard",
                            "year",
                            "yellow",
                            "you",
                            "young",
                            "youth",
                            "zebra",
                            "zero",
                            "zone",
                            "zoo"
                        ];
                        exports.en = wordList;
                        wordList.space = " ";
                        var Bip391 = /*#__PURE__*/ function(_Struct11) {
                            _inherits(Bip39, _Struct11);
                            var _super19 = _createSuper(Bip39);
                            function Bip39(mnemonic, seed) {
                                var _this18;
                                var wordlist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : wordList;
                                _classCallCheck2(this, Bip39);
                                _this18 = _super19.call(this, {
                                    mnemonic: mnemonic,
                                    seed: seed
                                });
                                _this18.Wordlist = wordlist;
                                return _this18;
                            }
                            _createClass2(Bip39, [
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        if (this.mnemonic) {
                                            var buf = Buffer.from(this.mnemonic);
                                            bw.writeVarIntNum(buf.length);
                                            bw.write(buf);
                                        } else bw.writeVarIntNum(0);
                                        if (this.seed) {
                                            bw.writeVarIntNum(this.seed.length);
                                            bw.write(this.seed);
                                        } else bw.writeVarIntNum(0);
                                        return bw;
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        var mnemoniclen = br.readVarIntNum();
                                        if (mnemoniclen > 0) this.mnemonic = br.read(mnemoniclen).toString();
                                        var seedlen = br.readVarIntNum();
                                        if (seedlen > 0) this.seed = br.read(seedlen);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromRandom",
                                    value: function fromRandom(bits) {
                                        if (!bits) bits = 128;
                                        if (bits % 32 !== 0) throw new Error("bits must be multiple of 32");
                                        if (bits < 128) throw new Error("bits must be at least 128");
                                        var buf = Random1.getRandomBuffer(bits / 8);
                                        this.entropy2Mnemonic(buf);
                                        this.mnemonic2Seed();
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncFromRandom",
                                    value: function() {
                                        var _asyncFromRandom2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee48(bits) {
                                            var buf, workersResult, bip39;
                                            return _regeneratorRuntime().wrap(function _callee48$(_context50) {
                                                while(true)switch(_context50.prev = _context50.next){
                                                    case 0:
                                                        if (!bits) bits = 128;
                                                        buf = Random1.getRandomBuffer(bits / 8);
                                                        _context50.next = 4;
                                                        return Workers1.asyncObjectMethod(this, "entropy2Mnemonic", [
                                                            buf
                                                        ]);
                                                    case 4:
                                                        workersResult = _context50.sent;
                                                        bip39 = new Bip39().fromFastBuffer(workersResult.resbuf);
                                                        _context50.next = 8;
                                                        return Workers1.asyncObjectMethod(bip39, "mnemonic2Seed", []);
                                                    case 8:
                                                        workersResult = _context50.sent;
                                                        return _context50.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 10:
                                                    case "end":
                                                        return _context50.stop();
                                                }
                                            }, _callee48, this);
                                        }));
                                        function asyncFromRandom(_x65) {
                                            return _asyncFromRandom2.apply(this, arguments);
                                        }
                                        return asyncFromRandom;
                                    }()
                                },
                                {
                                    key: "fromEntropy",
                                    value: function fromEntropy(buf) {
                                        this.entropy2Mnemonic(buf);
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncFromEntropy",
                                    value: function() {
                                        var _asyncFromEntropy = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee49(buf) {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee49$(_context51) {
                                                while(true)switch(_context51.prev = _context51.next){
                                                    case 0:
                                                        _context51.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "fromEntropy", [
                                                            buf
                                                        ]);
                                                    case 2:
                                                        workersResult = _context51.sent;
                                                        return _context51.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context51.stop();
                                                }
                                            }, _callee49, this);
                                        }));
                                        function asyncFromEntropy(_x66) {
                                            return _asyncFromEntropy.apply(this, arguments);
                                        }
                                        return asyncFromEntropy;
                                    }()
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(mnemonic) {
                                        this.mnemonic = mnemonic;
                                        return this;
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return this.mnemonic;
                                    }
                                },
                                {
                                    key: "toSeed",
                                    value: function toSeed(passphrase) {
                                        this.mnemonic2Seed(passphrase);
                                        return this.seed;
                                    }
                                },
                                {
                                    key: "asyncToSeed",
                                    value: function() {
                                        var _asyncToSeed = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee50(passphrase) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee50$(_context52) {
                                                while(true)switch(_context52.prev = _context52.next){
                                                    case 0:
                                                        if (passphrase === undefined) passphrase = "";
                                                        args = [
                                                            passphrase
                                                        ];
                                                        _context52.next = 4;
                                                        return Workers1.asyncObjectMethod(this, "toSeed", args);
                                                    case 4:
                                                        workersResult = _context52.sent;
                                                        return _context52.abrupt("return", workersResult.resbuf);
                                                    case 6:
                                                    case "end":
                                                        return _context52.stop();
                                                }
                                            }, _callee50, this);
                                        }));
                                        function asyncToSeed(_x67) {
                                            return _asyncToSeed.apply(this, arguments);
                                        }
                                        return asyncToSeed;
                                    }()
                                },
                                {
                                    key: "entropy2Mnemonic",
                                    value: function entropy2Mnemonic(buf) {
                                        if (!Buffer.isBuffer(buf) || buf.length < 16) throw new Error("Entropy is less than 128 bits. It must be 128 bits or more.");
                                        var hash = Hash1.sha256(buf);
                                        var bin = "";
                                        var bits = buf.length * 8;
                                        for(var i = 0; i < buf.length; i++)bin = bin + ("00000000" + buf[i].toString(2)).slice(-8);
                                        var hashbits = hash[0].toString(2);
                                        hashbits = ("00000000" + hashbits).slice(-8).slice(0, bits / 32);
                                        bin = bin + hashbits;
                                        if (bin.length % 11 !== 0) throw new Error("internal error - entropy not an even multiple of 11 bits - " + bin.length);
                                        var mnemonic = "";
                                        for(var _i8 = 0; _i8 < bin.length / 11; _i8++){
                                            if (mnemonic !== "") mnemonic = mnemonic + this.Wordlist.space;
                                            var wi = parseInt(bin.slice(_i8 * 11, (_i8 + 1) * 11), 2);
                                            mnemonic = mnemonic + this.Wordlist[wi];
                                        }
                                        this.mnemonic = mnemonic;
                                        return this;
                                    }
                                },
                                {
                                    key: "check",
                                    value: function check() {
                                        var mnemonic = this.mnemonic;
                                        var words = mnemonic.split(this.Wordlist.space);
                                        var bin = "";
                                        for(var i = 0; i < words.length; i++){
                                            var ind = this.Wordlist.indexOf(words[i]);
                                            if (ind < 0) return false;
                                            bin = bin + ("00000000000" + ind.toString(2)).slice(-11);
                                        }
                                        if (bin.length % 11 !== 0) throw new Error("internal error - entropy not an even multiple of 11 bits - " + bin.length);
                                        var cs = bin.length / 33;
                                        var hashBits = bin.slice(-cs);
                                        var nonhashBits = bin.slice(0, bin.length - cs);
                                        var buf = Buffer.alloc(nonhashBits.length / 8);
                                        for(var _i9 = 0; _i9 < nonhashBits.length / 8; _i9++)buf.writeUInt8(parseInt(bin.slice(_i9 * 8, (_i9 + 1) * 8), 2), _i9);
                                        var hash = Hash1.sha256(buf);
                                        var expectedHashBits = hash[0].toString(2);
                                        expectedHashBits = ("00000000" + expectedHashBits).slice(-8).slice(0, cs);
                                        return expectedHashBits === hashBits;
                                    }
                                },
                                {
                                    key: "mnemonic2Seed",
                                    value: function mnemonic2Seed() {
                                        var passphrase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                                        var mnemonic = this.mnemonic;
                                        if (!this.check()) throw new Error("Mnemonic does not pass the check - was the mnemonic typed incorrectly? Are there extra spaces?");
                                        if (typeof passphrase !== "string") throw new Error("passphrase must be a string or undefined");
                                        mnemonic = mnemonic.normalize("NFKD");
                                        passphrase = passphrase.normalize("NFKD");
                                        var mbuf = Buffer.from(mnemonic);
                                        var pbuf = Buffer.concat([
                                            Buffer.from("mnemonic"),
                                            Buffer.from(passphrase)
                                        ]);
                                        this.seed = _pbkdf["default"].pbkdf2Sync(mbuf, pbuf, 2048, 64, "sha512");
                                        return this;
                                    }
                                },
                                {
                                    key: "isValid",
                                    value: function isValid() {
                                        var passphrase = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                                        var isValid;
                                        try {
                                            isValid = !!this.mnemonic2Seed(passphrase);
                                        } catch (err) {
                                            isValid = false;
                                        }
                                        return isValid;
                                    }
                                }
                            ], [
                                {
                                    key: "fromRandom",
                                    value: function fromRandom(bits) {
                                        return new this().fromRandom(bits);
                                    }
                                },
                                {
                                    key: "asyncFromRandom",
                                    value: function asyncFromRandom(bits) {
                                        return new this().asyncFromRandom(bits);
                                    }
                                },
                                {
                                    key: "fromEntropy",
                                    value: function fromEntropy(buf) {
                                        return new this().fromEntropy(buf);
                                    }
                                },
                                {
                                    key: "asyncFromEntropy",
                                    value: function asyncFromEntropy(buf) {
                                        return new this().asyncFromEntropy(buf);
                                    }
                                },
                                {
                                    key: "isValid",
                                    value: function isValid(mnemonic) {
                                        var passphrase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                                        return new Bip39(mnemonic).isValid(passphrase);
                                    }
                                }
                            ]);
                            return Bip39;
                        }(Struct1);
                        exports.Bip39 = Bip391;
                        var wordList$1 = [
                            "\u3042\u3044\u3053\u304F\u3057\u3093",
                            "\u3042\u3044\u3055\u3064",
                            "\u3042\u3044\u3060",
                            "\u3042\u304A\u305E\u3089",
                            "\u3042\u304B\u3061\u3083\u3093",
                            "\u3042\u304D\u308B",
                            "\u3042\u3051\u304C\u305F",
                            "\u3042\u3051\u308B",
                            "\u3042\u3053\u304C\u308C\u308B",
                            "\u3042\u3055\u3044",
                            "\u3042\u3055\u3072",
                            "\u3042\u3057\u3042\u3068",
                            "\u3042\u3058\u308F\u3046",
                            "\u3042\u305A\u304B\u308B",
                            "\u3042\u305A\u304D",
                            "\u3042\u305D\u3076",
                            "\u3042\u305F\u3048\u308B",
                            "\u3042\u305F\u305F\u3081\u308B",
                            "\u3042\u305F\u308A\u307E\u3048",
                            "\u3042\u305F\u308B",
                            "\u3042\u3064\u3044",
                            "\u3042\u3064\u304B\u3046",
                            "\u3042\u3063\u3057\u3085\u304F",
                            "\u3042\u3064\u307E\u308A",
                            "\u3042\u3064\u3081\u308B",
                            "\u3042\u3066\u306A",
                            "\u3042\u3066\u306F\u307E\u308B",
                            "\u3042\u3072\u308B",
                            "\u3042\u3076\u3089",
                            "\u3042\u3076\u308B",
                            "\u3042\u3075\u308C\u308B",
                            "\u3042\u307E\u3044",
                            "\u3042\u307E\u3069",
                            "\u3042\u307E\u3084\u304B\u3059",
                            "\u3042\u307E\u308A",
                            "\u3042\u307F\u3082\u306E",
                            "\u3042\u3081\u308A\u304B",
                            "\u3042\u3084\u307E\u308B",
                            "\u3042\u3086\u3080",
                            "\u3042\u3089\u3044\u3050\u307E",
                            "\u3042\u3089\u3057",
                            "\u3042\u3089\u3059\u3058",
                            "\u3042\u3089\u305F\u3081\u308B",
                            "\u3042\u3089\u3086\u308B",
                            "\u3042\u3089\u308F\u3059",
                            "\u3042\u308A\u304C\u3068\u3046",
                            "\u3042\u308F\u305B\u308B",
                            "\u3042\u308F\u3066\u308B",
                            "\u3042\u3093\u3044",
                            "\u3042\u3093\u304C\u3044",
                            "\u3042\u3093\u3053",
                            "\u3042\u3093\u305C\u3093",
                            "\u3042\u3093\u3066\u3044",
                            "\u3042\u3093\u306A\u3044",
                            "\u3042\u3093\u307E\u308A",
                            "\u3044\u3044\u3060\u3059",
                            "\u3044\u304A\u3093",
                            "\u3044\u304C\u3044",
                            "\u3044\u304C\u304F",
                            "\u3044\u304D\u304A\u3044",
                            "\u3044\u304D\u306A\u308A",
                            "\u3044\u304D\u3082\u306E",
                            "\u3044\u304D\u308B",
                            "\u3044\u304F\u3058",
                            "\u3044\u304F\u3076\u3093",
                            "\u3044\u3051\u3070\u306A",
                            "\u3044\u3051\u3093",
                            "\u3044\u3053\u3046",
                            "\u3044\u3053\u304F",
                            "\u3044\u3053\u3064",
                            "\u3044\u3055\u307E\u3057\u3044",
                            "\u3044\u3055\u3093",
                            "\u3044\u3057\u304D",
                            "\u3044\u3058\u3085\u3046",
                            "\u3044\u3058\u3087\u3046",
                            "\u3044\u3058\u308F\u308B",
                            "\u3044\u305A\u307F",
                            "\u3044\u305A\u308C",
                            "\u3044\u305B\u3044",
                            "\u3044\u305B\u3048\u3073",
                            "\u3044\u305B\u304B\u3044",
                            "\u3044\u305B\u304D",
                            "\u3044\u305C\u3093",
                            "\u3044\u305D\u3046\u308D\u3046",
                            "\u3044\u305D\u304C\u3057\u3044",
                            "\u3044\u3060\u3044",
                            "\u3044\u3060\u304F",
                            "\u3044\u305F\u305A\u3089",
                            "\u3044\u305F\u307F",
                            "\u3044\u305F\u308A\u3042",
                            "\u3044\u3061\u304A\u3046",
                            "\u3044\u3061\u3058",
                            "\u3044\u3061\u3069",
                            "\u3044\u3061\u3070",
                            "\u3044\u3061\u3076",
                            "\u3044\u3061\u308A\u3085\u3046",
                            "\u3044\u3064\u304B",
                            "\u3044\u3063\u3057\u3085\u3093",
                            "\u3044\u3063\u305B\u3044",
                            "\u3044\u3063\u305D\u3046",
                            "\u3044\u3063\u305F\u3093",
                            "\u3044\u3063\u3061",
                            "\u3044\u3063\u3066\u3044",
                            "\u3044\u3063\u307D\u3046",
                            "\u3044\u3066\u3056",
                            "\u3044\u3066\u3093",
                            "\u3044\u3069\u3046",
                            "\u3044\u3068\u3053",
                            "\u3044\u306A\u3044",
                            "\u3044\u306A\u304B",
                            "\u3044\u306D\u3080\u308A",
                            "\u3044\u306E\u3061",
                            "\u3044\u306E\u308B",
                            "\u3044\u306F\u3064",
                            "\u3044\u3070\u308B",
                            "\u3044\u306F\u3093",
                            "\u3044\u3073\u304D",
                            "\u3044\u3072\u3093",
                            "\u3044\u3075\u304F",
                            "\u3044\u3078\u3093",
                            "\u3044\u307B\u3046",
                            "\u3044\u307F\u3093",
                            "\u3044\u3082\u3046\u3068",
                            "\u3044\u3082\u305F\u308C",
                            "\u3044\u3082\u308A",
                            "\u3044\u3084\u304C\u308B",
                            "\u3044\u3084\u3059",
                            "\u3044\u3088\u304B\u3093",
                            "\u3044\u3088\u304F",
                            "\u3044\u3089\u3044",
                            "\u3044\u3089\u3059\u3068",
                            "\u3044\u308A\u3050\u3061",
                            "\u3044\u308A\u3087\u3046",
                            "\u3044\u308C\u3044",
                            "\u3044\u308C\u3082\u306E",
                            "\u3044\u308C\u308B",
                            "\u3044\u308D\u3048\u3093\u3074\u3064",
                            "\u3044\u308F\u3044",
                            "\u3044\u308F\u3046",
                            "\u3044\u308F\u304B\u3093",
                            "\u3044\u308F\u3070",
                            "\u3044\u308F\u3086\u308B",
                            "\u3044\u3093\u3052\u3093\u307E\u3081",
                            "\u3044\u3093\u3055\u3064",
                            "\u3044\u3093\u3057\u3087\u3046",
                            "\u3044\u3093\u3088\u3046",
                            "\u3046\u3048\u304D",
                            "\u3046\u3048\u308B",
                            "\u3046\u304A\u3056",
                            "\u3046\u304C\u3044",
                            "\u3046\u304B\u3076",
                            "\u3046\u304B\u3079\u308B",
                            "\u3046\u304D\u308F",
                            "\u3046\u304F\u3089\u3044\u306A",
                            "\u3046\u304F\u308C\u308C",
                            "\u3046\u3051\u305F\u307E\u308F\u308B",
                            "\u3046\u3051\u3064\u3051",
                            "\u3046\u3051\u3068\u308B",
                            "\u3046\u3051\u3082\u3064",
                            "\u3046\u3051\u308B",
                            "\u3046\u3054\u304B\u3059",
                            "\u3046\u3054\u304F",
                            "\u3046\u3053\u3093",
                            "\u3046\u3055\u304E",
                            "\u3046\u3057\u306A\u3046",
                            "\u3046\u3057\u308D\u304C\u307F",
                            "\u3046\u3059\u3044",
                            "\u3046\u3059\u304E",
                            "\u3046\u3059\u3050\u3089\u3044",
                            "\u3046\u3059\u3081\u308B",
                            "\u3046\u305B\u3064",
                            "\u3046\u3061\u3042\u308F\u305B",
                            "\u3046\u3061\u304C\u308F",
                            "\u3046\u3061\u304D",
                            "\u3046\u3061\u3085\u3046",
                            "\u3046\u3063\u304B\u308A",
                            "\u3046\u3064\u304F\u3057\u3044",
                            "\u3046\u3063\u305F\u3048\u308B",
                            "\u3046\u3064\u308B",
                            "\u3046\u3069\u3093",
                            "\u3046\u306A\u304E",
                            "\u3046\u306A\u3058",
                            "\u3046\u306A\u305A\u304F",
                            "\u3046\u306A\u308B",
                            "\u3046\u306D\u308B",
                            "\u3046\u306E\u3046",
                            "\u3046\u3076\u3052",
                            "\u3046\u3076\u3054\u3048",
                            "\u3046\u307E\u308C\u308B",
                            "\u3046\u3081\u308B",
                            "\u3046\u3082\u3046",
                            "\u3046\u3084\u307E\u3046",
                            "\u3046\u3088\u304F",
                            "\u3046\u3089\u304C\u3048\u3059",
                            "\u3046\u3089\u3050\u3061",
                            "\u3046\u3089\u306A\u3044",
                            "\u3046\u308A\u3042\u3052",
                            "\u3046\u308A\u304D\u308C",
                            "\u3046\u308B\u3055\u3044",
                            "\u3046\u308C\u3057\u3044",
                            "\u3046\u308C\u3086\u304D",
                            "\u3046\u308C\u308B",
                            "\u3046\u308D\u3053",
                            "\u3046\u308F\u304D",
                            "\u3046\u308F\u3055",
                            "\u3046\u3093\u3053\u3046",
                            "\u3046\u3093\u3061\u3093",
                            "\u3046\u3093\u3066\u3093",
                            "\u3046\u3093\u3069\u3046",
                            "\u3048\u3044\u3048\u3093",
                            "\u3048\u3044\u304C",
                            "\u3048\u3044\u304D\u3087\u3046",
                            "\u3048\u3044\u3054",
                            "\u3048\u3044\u305B\u3044",
                            "\u3048\u3044\u3076\u3093",
                            "\u3048\u3044\u3088\u3046",
                            "\u3048\u3044\u308F",
                            "\u3048\u304A\u308A",
                            "\u3048\u304C\u304A",
                            "\u3048\u304C\u304F",
                            "\u3048\u304D\u305F\u3044",
                            "\u3048\u304F\u305B\u308B",
                            "\u3048\u3057\u3083\u304F",
                            "\u3048\u3059\u3066",
                            "\u3048\u3064\u3089\u3093",
                            "\u3048\u306E\u3050",
                            "\u3048\u307B\u3046\u307E\u304D",
                            "\u3048\u307B\u3093",
                            "\u3048\u307E\u304D",
                            "\u3048\u3082\u3058",
                            "\u3048\u3082\u306E",
                            "\u3048\u3089\u3044",
                            "\u3048\u3089\u3076",
                            "\u3048\u308A\u3042",
                            "\u3048\u3093\u3048\u3093",
                            "\u3048\u3093\u304B\u3044",
                            "\u3048\u3093\u304E",
                            "\u3048\u3093\u3052\u304D",
                            "\u3048\u3093\u3057\u3085\u3046",
                            "\u3048\u3093\u305C\u3064",
                            "\u3048\u3093\u305D\u304F",
                            "\u3048\u3093\u3061\u3087\u3046",
                            "\u3048\u3093\u3068\u3064",
                            "\u304A\u3044\u304B\u3051\u308B",
                            "\u304A\u3044\u3053\u3059",
                            "\u304A\u3044\u3057\u3044",
                            "\u304A\u3044\u3064\u304F",
                            "\u304A\u3046\u3048\u3093",
                            "\u304A\u3046\u3055\u307E",
                            "\u304A\u3046\u3058",
                            "\u304A\u3046\u305B\u3064",
                            "\u304A\u3046\u305F\u3044",
                            "\u304A\u3046\u3075\u304F",
                            "\u304A\u3046\u3079\u3044",
                            "\u304A\u3046\u3088\u3046",
                            "\u304A\u3048\u308B",
                            "\u304A\u304A\u3044",
                            "\u304A\u304A\u3046",
                            "\u304A\u304A\u3069\u304A\u308A",
                            "\u304A\u304A\u3084",
                            "\u304A\u304A\u3088\u305D",
                            "\u304A\u304B\u3048\u308A",
                            "\u304A\u304B\u305A",
                            "\u304A\u304C\u3080",
                            "\u304A\u304B\u308F\u308A",
                            "\u304A\u304E\u306A\u3046",
                            "\u304A\u304D\u308B",
                            "\u304A\u304F\u3055\u307E",
                            "\u304A\u304F\u3058\u3087\u3046",
                            "\u304A\u304F\u308A\u304C\u306A",
                            "\u304A\u304F\u308B",
                            "\u304A\u304F\u308C\u308B",
                            "\u304A\u3053\u3059",
                            "\u304A\u3053\u306A\u3046",
                            "\u304A\u3053\u308B",
                            "\u304A\u3055\u3048\u308B",
                            "\u304A\u3055\u306A\u3044",
                            "\u304A\u3055\u3081\u308B",
                            "\u304A\u3057\u3044\u308C",
                            "\u304A\u3057\u3048\u308B",
                            "\u304A\u3058\u304E",
                            "\u304A\u3058\u3055\u3093",
                            "\u304A\u3057\u3083\u308C",
                            "\u304A\u305D\u3089\u304F",
                            "\u304A\u305D\u308F\u308B",
                            "\u304A\u305F\u304C\u3044",
                            "\u304A\u305F\u304F",
                            "\u304A\u3060\u3084\u304B",
                            "\u304A\u3061\u3064\u304F",
                            "\u304A\u3063\u3068",
                            "\u304A\u3064\u308A",
                            "\u304A\u3067\u304B\u3051",
                            "\u304A\u3068\u3057\u3082\u306E",
                            "\u304A\u3068\u306A\u3057\u3044",
                            "\u304A\u3069\u308A",
                            "\u304A\u3069\u308D\u304B\u3059",
                            "\u304A\u3070\u3055\u3093",
                            "\u304A\u307E\u3044\u308A",
                            "\u304A\u3081\u3067\u3068\u3046",
                            "\u304A\u3082\u3044\u3067",
                            "\u304A\u3082\u3046",
                            "\u304A\u3082\u305F\u3044",
                            "\u304A\u3082\u3061\u3083",
                            "\u304A\u3084\u3064",
                            "\u304A\u3084\u3086\u3073",
                            "\u304A\u3088\u307C\u3059",
                            "\u304A\u3089\u3093\u3060",
                            "\u304A\u308D\u3059",
                            "\u304A\u3093\u304C\u304F",
                            "\u304A\u3093\u3051\u3044",
                            "\u304A\u3093\u3057\u3083",
                            "\u304A\u3093\u305B\u3093",
                            "\u304A\u3093\u3060\u3093",
                            "\u304A\u3093\u3061\u3085\u3046",
                            "\u304A\u3093\u3069\u3051\u3044",
                            "\u304B\u3042\u3064",
                            "\u304B\u3044\u304C",
                            "\u304C\u3044\u304D",
                            "\u304C\u3044\u3051\u3093",
                            "\u304C\u3044\u3053\u3046",
                            "\u304B\u3044\u3055\u3064",
                            "\u304B\u3044\u3057\u3083",
                            "\u304B\u3044\u3059\u3044\u3088\u304F",
                            "\u304B\u3044\u305C\u3093",
                            "\u304B\u3044\u305E\u3046\u3069",
                            "\u304B\u3044\u3064\u3046",
                            "\u304B\u3044\u3066\u3093",
                            "\u304B\u3044\u3068\u3046",
                            "\u304B\u3044\u3075\u304F",
                            "\u304C\u3044\u3078\u304D",
                            "\u304B\u3044\u307B\u3046",
                            "\u304B\u3044\u3088\u3046",
                            "\u304C\u3044\u3089\u3044",
                            "\u304B\u3044\u308F",
                            "\u304B\u3048\u308B",
                            "\u304B\u304A\u308A",
                            "\u304B\u304B\u3048\u308B",
                            "\u304B\u304C\u304F",
                            "\u304B\u304C\u3057",
                            "\u304B\u304C\u307F",
                            "\u304B\u304F\u3054",
                            "\u304B\u304F\u3068\u304F",
                            "\u304B\u3056\u308B",
                            "\u304C\u305E\u3046",
                            "\u304B\u305F\u3044",
                            "\u304B\u305F\u3061",
                            "\u304C\u3061\u3087\u3046",
                            "\u304C\u3063\u304D\u3085\u3046",
                            "\u304C\u3063\u3053\u3046",
                            "\u304C\u3063\u3055\u3093",
                            "\u304C\u3063\u3057\u3087\u3046",
                            "\u304B\u306A\u3056\u308F\u3057",
                            "\u304B\u306E\u3046",
                            "\u304C\u306F\u304F",
                            "\u304B\u3076\u304B",
                            "\u304B\u307B\u3046",
                            "\u304B\u307B\u3054",
                            "\u304B\u307E\u3046",
                            "\u304B\u307E\u307C\u3053",
                            "\u304B\u3081\u308C\u304A\u3093",
                            "\u304B\u3086\u3044",
                            "\u304B\u3088\u3046\u3073",
                            "\u304B\u3089\u3044",
                            "\u304B\u308B\u3044",
                            "\u304B\u308D\u3046",
                            "\u304B\u308F\u304F",
                            "\u304B\u308F\u3089",
                            "\u304C\u3093\u304B",
                            "\u304B\u3093\u3051\u3044",
                            "\u304B\u3093\u3053\u3046",
                            "\u304B\u3093\u3057\u3083",
                            "\u304B\u3093\u305D\u3046",
                            "\u304B\u3093\u305F\u3093",
                            "\u304B\u3093\u3061",
                            "\u304C\u3093\u3070\u308B",
                            "\u304D\u3042\u3044",
                            "\u304D\u3042\u3064",
                            "\u304D\u3044\u308D",
                            "\u304E\u3044\u3093",
                            "\u304D\u3046\u3044",
                            "\u304D\u3046\u3093",
                            "\u304D\u3048\u308B",
                            "\u304D\u304A\u3046",
                            "\u304D\u304A\u304F",
                            "\u304D\u304A\u3061",
                            "\u304D\u304A\u3093",
                            "\u304D\u304B\u3044",
                            "\u304D\u304B\u304F",
                            "\u304D\u304B\u3093\u3057\u3083",
                            "\u304D\u304D\u3066",
                            "\u304D\u304F\u3070\u308A",
                            "\u304D\u304F\u3089\u3052",
                            "\u304D\u3051\u3093\u305B\u3044",
                            "\u304D\u3053\u3046",
                            "\u304D\u3053\u3048\u308B",
                            "\u304D\u3053\u304F",
                            "\u304D\u3055\u3044",
                            "\u304D\u3055\u304F",
                            "\u304D\u3055\u307E",
                            "\u304D\u3055\u3089\u304E",
                            "\u304E\u3058\u304B\u304C\u304F",
                            "\u304E\u3057\u304D",
                            "\u304E\u3058\u305F\u3044\u3051\u3093",
                            "\u304E\u3058\u306B\u3063\u3066\u3044",
                            "\u304E\u3058\u3085\u3064\u3057\u3083",
                            "\u304D\u3059\u3046",
                            "\u304D\u305B\u3044",
                            "\u304D\u305B\u304D",
                            "\u304D\u305B\u3064",
                            "\u304D\u305D\u3046",
                            "\u304D\u305E\u304F",
                            "\u304D\u305E\u3093",
                            "\u304D\u305F\u3048\u308B",
                            "\u304D\u3061\u3087\u3046",
                            "\u304D\u3064\u3048\u3093",
                            "\u304E\u3063\u3061\u308A",
                            "\u304D\u3064\u3064\u304D",
                            "\u304D\u3064\u306D",
                            "\u304D\u3066\u3044",
                            "\u304D\u3069\u3046",
                            "\u304D\u3069\u304F",
                            "\u304D\u306A\u3044",
                            "\u304D\u306A\u304C",
                            "\u304D\u306A\u3053",
                            "\u304D\u306C\u3054\u3057",
                            "\u304D\u306D\u3093",
                            "\u304D\u306E\u3046",
                            "\u304D\u306E\u3057\u305F",
                            "\u304D\u306F\u304F",
                            "\u304D\u3073\u3057\u3044",
                            "\u304D\u3072\u3093",
                            "\u304D\u3075\u304F",
                            "\u304D\u3076\u3093",
                            "\u304D\u307C\u3046",
                            "\u304D\u307B\u3093",
                            "\u304D\u307E\u308B",
                            "\u304D\u307F\u3064",
                            "\u304D\u3080\u305A\u304B\u3057\u3044",
                            "\u304D\u3081\u308B",
                            "\u304D\u3082\u3060\u3081\u3057",
                            "\u304D\u3082\u3061",
                            "\u304D\u3082\u306E",
                            "\u304D\u3083\u304F",
                            "\u304D\u3084\u304F",
                            "\u304E\u3085\u3046\u306B\u304F",
                            "\u304D\u3088\u3046",
                            "\u304D\u3087\u3046\u308A\u3085\u3046",
                            "\u304D\u3089\u3044",
                            "\u304D\u3089\u304F",
                            "\u304D\u308A\u3093",
                            "\u304D\u308C\u3044",
                            "\u304D\u308C\u3064",
                            "\u304D\u308D\u304F",
                            "\u304E\u308D\u3093",
                            "\u304D\u308F\u3081\u308B",
                            "\u304E\u3093\u3044\u308D",
                            "\u304D\u3093\u304B\u304F\u3058",
                            "\u304D\u3093\u3058\u3087",
                            "\u304D\u3093\u3088\u3046\u3073",
                            "\u3050\u3042\u3044",
                            "\u304F\u3044\u305A",
                            "\u304F\u3046\u304B\u3093",
                            "\u304F\u3046\u304D",
                            "\u304F\u3046\u3050\u3093",
                            "\u304F\u3046\u3053\u3046",
                            "\u3050\u3046\u305B\u3044",
                            "\u304F\u3046\u305D\u3046",
                            "\u3050\u3046\u305F\u3089",
                            "\u304F\u3046\u3075\u304F",
                            "\u304F\u3046\u307C",
                            "\u304F\u304B\u3093",
                            "\u304F\u304D\u3087\u3046",
                            "\u304F\u3052\u3093",
                            "\u3050\u3053\u3046",
                            "\u304F\u3055\u3044",
                            "\u304F\u3055\u304D",
                            "\u304F\u3055\u3070\u306A",
                            "\u304F\u3055\u308B",
                            "\u304F\u3057\u3083\u307F",
                            "\u304F\u3057\u3087\u3046",
                            "\u304F\u3059\u306E\u304D",
                            "\u304F\u3059\u308A\u3086\u3073",
                            "\u304F\u305B\u3052",
                            "\u304F\u305B\u3093",
                            "\u3050\u305F\u3044\u3066\u304D",
                            "\u304F\u3060\u3055\u308B",
                            "\u304F\u305F\u3073\u308C\u308B",
                            "\u304F\u3061\u3053\u307F",
                            "\u304F\u3061\u3055\u304D",
                            "\u304F\u3064\u3057\u305F",
                            "\u3050\u3063\u3059\u308A",
                            "\u304F\u3064\u308D\u3050",
                            "\u304F\u3068\u3046\u3066\u3093",
                            "\u304F\u3069\u304F",
                            "\u304F\u306A\u3093",
                            "\u304F\u306D\u304F\u306D",
                            "\u304F\u306E\u3046",
                            "\u304F\u3075\u3046",
                            "\u304F\u307F\u3042\u308F\u305B",
                            "\u304F\u307F\u305F\u3066\u308B",
                            "\u304F\u3081\u308B",
                            "\u304F\u3084\u304F\u3057\u3087",
                            "\u304F\u3089\u3059",
                            "\u304F\u3089\u3079\u308B",
                            "\u304F\u308B\u307E",
                            "\u304F\u308C\u308B",
                            "\u304F\u308D\u3046",
                            "\u304F\u308F\u3057\u3044",
                            "\u3050\u3093\u304B\u3093",
                            "\u3050\u3093\u3057\u3087\u304F",
                            "\u3050\u3093\u305F\u3044",
                            "\u3050\u3093\u3066",
                            "\u3051\u3042\u306A",
                            "\u3051\u3044\u304B\u304F",
                            "\u3051\u3044\u3051\u3093",
                            "\u3051\u3044\u3053",
                            "\u3051\u3044\u3055\u3064",
                            "\u3052\u3044\u3058\u3085\u3064",
                            "\u3051\u3044\u305F\u3044",
                            "\u3052\u3044\u306E\u3046\u3058\u3093",
                            "\u3051\u3044\u308C\u304D",
                            "\u3051\u3044\u308D",
                            "\u3051\u304A\u3068\u3059",
                            "\u3051\u304A\u308A\u3082\u306E",
                            "\u3052\u304D\u304B",
                            "\u3052\u304D\u3052\u3093",
                            "\u3052\u304D\u3060\u3093",
                            "\u3052\u304D\u3061\u3093",
                            "\u3052\u304D\u3068\u3064",
                            "\u3052\u304D\u306F",
                            "\u3052\u304D\u3084\u304F",
                            "\u3052\u3053\u3046",
                            "\u3052\u3053\u304F\u3058\u3087\u3046",
                            "\u3052\u3056\u3044",
                            "\u3051\u3055\u304D",
                            "\u3052\u3056\u3093",
                            "\u3051\u3057\u304D",
                            "\u3051\u3057\u3054\u3080",
                            "\u3051\u3057\u3087\u3046",
                            "\u3052\u3059\u3068",
                            "\u3051\u305F\u3070",
                            "\u3051\u3061\u3083\u3063\u3077",
                            "\u3051\u3061\u3089\u3059",
                            "\u3051\u3064\u3042\u3064",
                            "\u3051\u3064\u3044",
                            "\u3051\u3064\u3048\u304D",
                            "\u3051\u3063\u3053\u3093",
                            "\u3051\u3064\u3058\u3087",
                            "\u3051\u3063\u305B\u304D",
                            "\u3051\u3063\u3066\u3044",
                            "\u3051\u3064\u307E\u3064",
                            "\u3052\u3064\u3088\u3046\u3073",
                            "\u3052\u3064\u308C\u3044",
                            "\u3051\u3064\u308D\u3093",
                            "\u3052\u3069\u304F",
                            "\u3051\u3068\u3070\u3059",
                            "\u3051\u3068\u308B",
                            "\u3051\u306A\u3052",
                            "\u3051\u306A\u3059",
                            "\u3051\u306A\u307F",
                            "\u3051\u306C\u304D",
                            "\u3052\u306D\u3064",
                            "\u3051\u306D\u3093",
                            "\u3051\u306F\u3044",
                            "\u3052\u3072\u3093",
                            "\u3051\u3076\u304B\u3044",
                            "\u3052\u307C\u304F",
                            "\u3051\u307E\u308A",
                            "\u3051\u307F\u304B\u308B",
                            "\u3051\u3080\u3057",
                            "\u3051\u3080\u308A",
                            "\u3051\u3082\u306E",
                            "\u3051\u3089\u3044",
                            "\u3051\u308D\u3051\u308D",
                            "\u3051\u308F\u3057\u3044",
                            "\u3051\u3093\u3044",
                            "\u3051\u3093\u3048\u3064",
                            "\u3051\u3093\u304A",
                            "\u3051\u3093\u304B",
                            "\u3052\u3093\u304D",
                            "\u3051\u3093\u3052\u3093",
                            "\u3051\u3093\u3053\u3046",
                            "\u3051\u3093\u3055\u304F",
                            "\u3051\u3093\u3057\u3085\u3046",
                            "\u3051\u3093\u3059\u3046",
                            "\u3052\u3093\u305D\u3046",
                            "\u3051\u3093\u3061\u304F",
                            "\u3051\u3093\u3066\u3044",
                            "\u3051\u3093\u3068\u3046",
                            "\u3051\u3093\u306A\u3044",
                            "\u3051\u3093\u306B\u3093",
                            "\u3052\u3093\u3076\u3064",
                            "\u3051\u3093\u307E",
                            "\u3051\u3093\u307F\u3093",
                            "\u3051\u3093\u3081\u3044",
                            "\u3051\u3093\u3089\u3093",
                            "\u3051\u3093\u308A",
                            "\u3053\u3042\u304F\u307E",
                            "\u3053\u3044\u306C",
                            "\u3053\u3044\u3073\u3068",
                            "\u3054\u3046\u3044",
                            "\u3053\u3046\u3048\u3093",
                            "\u3053\u3046\u304A\u3093",
                            "\u3053\u3046\u304B\u3093",
                            "\u3054\u3046\u304D\u3085\u3046",
                            "\u3054\u3046\u3051\u3044",
                            "\u3053\u3046\u3053\u3046",
                            "\u3053\u3046\u3055\u3044",
                            "\u3053\u3046\u3058",
                            "\u3053\u3046\u3059\u3044",
                            "\u3054\u3046\u305B\u3044",
                            "\u3053\u3046\u305D\u304F",
                            "\u3053\u3046\u305F\u3044",
                            "\u3053\u3046\u3061\u3083",
                            "\u3053\u3046\u3064\u3046",
                            "\u3053\u3046\u3066\u3044",
                            "\u3053\u3046\u3069\u3046",
                            "\u3053\u3046\u306A\u3044",
                            "\u3053\u3046\u306F\u3044",
                            "\u3054\u3046\u307B\u3046",
                            "\u3054\u3046\u307E\u3093",
                            "\u3053\u3046\u3082\u304F",
                            "\u3053\u3046\u308A\u3064",
                            "\u3053\u3048\u308B",
                            "\u3053\u304A\u308A",
                            "\u3054\u304B\u3044",
                            "\u3054\u304C\u3064",
                            "\u3054\u304B\u3093",
                            "\u3053\u304F\u3054",
                            "\u3053\u304F\u3055\u3044",
                            "\u3053\u304F\u3068\u3046",
                            "\u3053\u304F\u306A\u3044",
                            "\u3053\u304F\u306F\u304F",
                            "\u3053\u3050\u307E",
                            "\u3053\u3051\u3044",
                            "\u3053\u3051\u308B",
                            "\u3053\u3053\u306E\u304B",
                            "\u3053\u3053\u308D",
                            "\u3053\u3055\u3081",
                            "\u3053\u3057\u3064",
                            "\u3053\u3059\u3046",
                            "\u3053\u305B\u3044",
                            "\u3053\u305B\u304D",
                            "\u3053\u305C\u3093",
                            "\u3053\u305D\u3060\u3066",
                            "\u3053\u305F\u3044",
                            "\u3053\u305F\u3048\u308B",
                            "\u3053\u305F\u3064",
                            "\u3053\u3061\u3087\u3046",
                            "\u3053\u3063\u304B",
                            "\u3053\u3064\u3053\u3064",
                            "\u3053\u3064\u3070\u3093",
                            "\u3053\u3064\u3076",
                            "\u3053\u3066\u3044",
                            "\u3053\u3066\u3093",
                            "\u3053\u3068\u304C\u3089",
                            "\u3053\u3068\u3057",
                            "\u3053\u3068\u3070",
                            "\u3053\u3068\u308A",
                            "\u3053\u306A\u3054\u306A",
                            "\u3053\u306D\u3053\u306D",
                            "\u3053\u306E\u307E\u307E",
                            "\u3053\u306E\u307F",
                            "\u3053\u306E\u3088",
                            "\u3054\u306F\u3093",
                            "\u3053\u3072\u3064\u3058",
                            "\u3053\u3075\u3046",
                            "\u3053\u3075\u3093",
                            "\u3053\u307C\u308C\u308B",
                            "\u3054\u307E\u3042\u3076\u3089",
                            "\u3053\u307E\u304B\u3044",
                            "\u3054\u307E\u3059\u308A",
                            "\u3053\u307E\u3064\u306A",
                            "\u3053\u307E\u308B",
                            "\u3053\u3080\u304E\u3053",
                            "\u3053\u3082\u3058",
                            "\u3053\u3082\u3061",
                            "\u3053\u3082\u306E",
                            "\u3053\u3082\u3093",
                            "\u3053\u3084\u304F",
                            "\u3053\u3084\u307E",
                            "\u3053\u3086\u3046",
                            "\u3053\u3086\u3073",
                            "\u3053\u3088\u3044",
                            "\u3053\u3088\u3046",
                            "\u3053\u308A\u308B",
                            "\u3053\u308C\u304F\u3057\u3087\u3093",
                            "\u3053\u308D\u3063\u3051",
                            "\u3053\u308F\u3082\u3066",
                            "\u3053\u308F\u308C\u308B",
                            "\u3053\u3093\u3044\u3093",
                            "\u3053\u3093\u304B\u3044",
                            "\u3053\u3093\u304D",
                            "\u3053\u3093\u3057\u3085\u3046",
                            "\u3053\u3093\u3059\u3044",
                            "\u3053\u3093\u3060\u3066",
                            "\u3053\u3093\u3068\u3093",
                            "\u3053\u3093\u306A\u3093",
                            "\u3053\u3093\u3073\u306B",
                            "\u3053\u3093\u307D\u3093",
                            "\u3053\u3093\u307E\u3051",
                            "\u3053\u3093\u3084",
                            "\u3053\u3093\u308C\u3044",
                            "\u3053\u3093\u308F\u304F",
                            "\u3056\u3044\u3048\u304D",
                            "\u3055\u3044\u304B\u3044",
                            "\u3055\u3044\u304D\u3093",
                            "\u3056\u3044\u3052\u3093",
                            "\u3056\u3044\u3053",
                            "\u3055\u3044\u3057\u3087",
                            "\u3055\u3044\u305B\u3044",
                            "\u3056\u3044\u305F\u304F",
                            "\u3056\u3044\u3061\u3085\u3046",
                            "\u3055\u3044\u3066\u304D",
                            "\u3056\u3044\u308A\u3087\u3046",
                            "\u3055\u3046\u306A",
                            "\u3055\u304B\u3044\u3057",
                            "\u3055\u304C\u3059",
                            "\u3055\u304B\u306A",
                            "\u3055\u304B\u307F\u3061",
                            "\u3055\u304C\u308B",
                            "\u3055\u304E\u3087\u3046",
                            "\u3055\u304F\u3057",
                            "\u3055\u304F\u3072\u3093",
                            "\u3055\u304F\u3089",
                            "\u3055\u3053\u304F",
                            "\u3055\u3053\u3064",
                            "\u3055\u305A\u304B\u308B",
                            "\u3056\u305B\u304D",
                            "\u3055\u305F\u3093",
                            "\u3055\u3064\u3048\u3044",
                            "\u3056\u3064\u304A\u3093",
                            "\u3056\u3063\u304B",
                            "\u3056\u3064\u304C\u304F",
                            "\u3055\u3063\u304D\u3087\u304F",
                            "\u3056\u3063\u3057",
                            "\u3055\u3064\u3058\u3093",
                            "\u3056\u3063\u305D\u3046",
                            "\u3055\u3064\u305F\u3070",
                            "\u3055\u3064\u307E\u3044\u3082",
                            "\u3055\u3066\u3044",
                            "\u3055\u3068\u3044\u3082",
                            "\u3055\u3068\u3046",
                            "\u3055\u3068\u304A\u3084",
                            "\u3055\u3068\u3057",
                            "\u3055\u3068\u308B",
                            "\u3055\u306E\u3046",
                            "\u3055\u3070\u304F",
                            "\u3055\u3073\u3057\u3044",
                            "\u3055\u3079\u3064",
                            "\u3055\u307B\u3046",
                            "\u3055\u307B\u3069",
                            "\u3055\u307E\u3059",
                            "\u3055\u307F\u3057\u3044",
                            "\u3055\u307F\u3060\u308C",
                            "\u3055\u3080\u3051",
                            "\u3055\u3081\u308B",
                            "\u3055\u3084\u3048\u3093\u3069\u3046",
                            "\u3055\u3086\u3046",
                            "\u3055\u3088\u3046",
                            "\u3055\u3088\u304F",
                            "\u3055\u3089\u3060",
                            "\u3056\u308B\u305D\u3070",
                            "\u3055\u308F\u3084\u304B",
                            "\u3055\u308F\u308B",
                            "\u3055\u3093\u3044\u3093",
                            "\u3055\u3093\u304B",
                            "\u3055\u3093\u304D\u3083\u304F",
                            "\u3055\u3093\u3053\u3046",
                            "\u3055\u3093\u3055\u3044",
                            "\u3056\u3093\u3057\u3087",
                            "\u3055\u3093\u3059\u3046",
                            "\u3055\u3093\u305B\u3044",
                            "\u3055\u3093\u305D",
                            "\u3055\u3093\u3061",
                            "\u3055\u3093\u307E",
                            "\u3055\u3093\u307F",
                            "\u3055\u3093\u3089\u3093",
                            "\u3057\u3042\u3044",
                            "\u3057\u3042\u3052",
                            "\u3057\u3042\u3055\u3063\u3066",
                            "\u3057\u3042\u308F\u305B",
                            "\u3057\u3044\u304F",
                            "\u3057\u3044\u3093",
                            "\u3057\u3046\u3061",
                            "\u3057\u3048\u3044",
                            "\u3057\u304A\u3051",
                            "\u3057\u304B\u3044",
                            "\u3057\u304B\u304F",
                            "\u3058\u304B\u3093",
                            "\u3057\u3054\u3068",
                            "\u3057\u3059\u3046",
                            "\u3058\u3060\u3044",
                            "\u3057\u305F\u3046\u3051",
                            "\u3057\u305F\u304E",
                            "\u3057\u305F\u3066",
                            "\u3057\u305F\u307F",
                            "\u3057\u3061\u3087\u3046",
                            "\u3057\u3061\u308A\u3093",
                            "\u3057\u3063\u304B\u308A",
                            "\u3057\u3064\u3058",
                            "\u3057\u3064\u3082\u3093",
                            "\u3057\u3066\u3044",
                            "\u3057\u3066\u304D",
                            "\u3057\u3066\u3064",
                            "\u3058\u3066\u3093",
                            "\u3058\u3069\u3046",
                            "\u3057\u306A\u304E\u308C",
                            "\u3057\u306A\u3082\u306E",
                            "\u3057\u306A\u3093",
                            "\u3057\u306D\u307E",
                            "\u3057\u306D\u3093",
                            "\u3057\u306E\u3050",
                            "\u3057\u306E\u3076",
                            "\u3057\u306F\u3044",
                            "\u3057\u3070\u304B\u308A",
                            "\u3057\u306F\u3064",
                            "\u3057\u306F\u3089\u3044",
                            "\u3057\u306F\u3093",
                            "\u3057\u3072\u3087\u3046",
                            "\u3057\u3075\u304F",
                            "\u3058\u3076\u3093",
                            "\u3057\u3078\u3044",
                            "\u3057\u307B\u3046",
                            "\u3057\u307B\u3093",
                            "\u3057\u307E\u3046",
                            "\u3057\u307E\u308B",
                            "\u3057\u307F\u3093",
                            "\u3057\u3080\u3051\u308B",
                            "\u3058\u3080\u3057\u3087",
                            "\u3057\u3081\u3044",
                            "\u3057\u3081\u308B",
                            "\u3057\u3082\u3093",
                            "\u3057\u3083\u3044\u3093",
                            "\u3057\u3083\u3046\u3093",
                            "\u3057\u3083\u304A\u3093",
                            "\u3058\u3083\u304C\u3044\u3082",
                            "\u3057\u3084\u304F\u3057\u3087",
                            "\u3057\u3083\u304F\u307B\u3046",
                            "\u3057\u3083\u3051\u3093",
                            "\u3057\u3083\u3053",
                            "\u3057\u3083\u3056\u3044",
                            "\u3057\u3083\u3057\u3093",
                            "\u3057\u3083\u305B\u3093",
                            "\u3057\u3083\u305D\u3046",
                            "\u3057\u3083\u305F\u3044",
                            "\u3057\u3083\u3061\u3087\u3046",
                            "\u3057\u3083\u3063\u304D\u3093",
                            "\u3058\u3083\u307E",
                            "\u3057\u3083\u308A\u3093",
                            "\u3057\u3083\u308C\u3044",
                            "\u3058\u3086\u3046",
                            "\u3058\u3085\u3046\u3057\u3087",
                            "\u3057\u3085\u304F\u306F\u304F",
                            "\u3058\u3085\u3057\u3093",
                            "\u3057\u3085\u3063\u305B\u304D",
                            "\u3057\u3085\u307F",
                            "\u3057\u3085\u3089\u3070",
                            "\u3058\u3085\u3093\u3070\u3093",
                            "\u3057\u3087\u3046\u304B\u3044",
                            "\u3057\u3087\u304F\u305F\u304F",
                            "\u3057\u3087\u3063\u3051\u3093",
                            "\u3057\u3087\u3069\u3046",
                            "\u3057\u3087\u3082\u3064",
                            "\u3057\u3089\u305B\u308B",
                            "\u3057\u3089\u3079\u308B",
                            "\u3057\u3093\u304B",
                            "\u3057\u3093\u3053\u3046",
                            "\u3058\u3093\u3058\u3083",
                            "\u3057\u3093\u305B\u3044\u3058",
                            "\u3057\u3093\u3061\u304F",
                            "\u3057\u3093\u308A\u3093",
                            "\u3059\u3042\u3052",
                            "\u3059\u3042\u3057",
                            "\u3059\u3042\u306A",
                            "\u305A\u3042\u3093",
                            "\u3059\u3044\u3048\u3044",
                            "\u3059\u3044\u304B",
                            "\u3059\u3044\u3068\u3046",
                            "\u305A\u3044\u3076\u3093",
                            "\u3059\u3044\u3088\u3046\u3073",
                            "\u3059\u3046\u304C\u304F",
                            "\u3059\u3046\u3058\u3064",
                            "\u3059\u3046\u305B\u3093",
                            "\u3059\u304A\u3069\u308A",
                            "\u3059\u304D\u307E",
                            "\u3059\u304F\u3046",
                            "\u3059\u304F\u306A\u3044",
                            "\u3059\u3051\u308B",
                            "\u3059\u3054\u3044",
                            "\u3059\u3053\u3057",
                            "\u305A\u3055\u3093",
                            "\u3059\u305A\u3057\u3044",
                            "\u3059\u3059\u3080",
                            "\u3059\u3059\u3081\u308B",
                            "\u3059\u3063\u304B\u308A",
                            "\u305A\u3063\u3057\u308A",
                            "\u305A\u3063\u3068",
                            "\u3059\u3066\u304D",
                            "\u3059\u3066\u308B",
                            "\u3059\u306D\u308B",
                            "\u3059\u306E\u3053",
                            "\u3059\u306F\u3060",
                            "\u3059\u3070\u3089\u3057\u3044",
                            "\u305A\u3072\u3087\u3046",
                            "\u305A\u3076\u306C\u308C",
                            "\u3059\u3076\u308A",
                            "\u3059\u3075\u308C",
                            "\u3059\u3079\u3066",
                            "\u3059\u3079\u308B",
                            "\u305A\u307B\u3046",
                            "\u3059\u307C\u3093",
                            "\u3059\u307E\u3044",
                            "\u3059\u3081\u3057",
                            "\u3059\u3082\u3046",
                            "\u3059\u3084\u304D",
                            "\u3059\u3089\u3059\u3089",
                            "\u3059\u308B\u3081",
                            "\u3059\u308C\u3061\u304C\u3046",
                            "\u3059\u308D\u3063\u3068",
                            "\u3059\u308F\u308B",
                            "\u3059\u3093\u305C\u3093",
                            "\u3059\u3093\u307D\u3046",
                            "\u305B\u3042\u3076\u3089",
                            "\u305B\u3044\u304B\u3064",
                            "\u305B\u3044\u3052\u3093",
                            "\u305B\u3044\u3058",
                            "\u305B\u3044\u3088\u3046",
                            "\u305B\u304A\u3046",
                            "\u305B\u304B\u3044\u304B\u3093",
                            "\u305B\u304D\u306B\u3093",
                            "\u305B\u304D\u3080",
                            "\u305B\u304D\u3086",
                            "\u305B\u304D\u3089\u3093\u3046\u3093",
                            "\u305B\u3051\u3093",
                            "\u305B\u3053\u3046",
                            "\u305B\u3059\u3058",
                            "\u305B\u305F\u3044",
                            "\u305B\u305F\u3051",
                            "\u305B\u3063\u304B\u304F",
                            "\u305B\u3063\u304D\u3083\u304F",
                            "\u305C\u3063\u304F",
                            "\u305B\u3063\u3051\u3093",
                            "\u305B\u3063\u3053\u3064",
                            "\u305B\u3063\u3055\u305F\u304F\u307E",
                            "\u305B\u3064\u305E\u304F",
                            "\u305B\u3064\u3060\u3093",
                            "\u305B\u3064\u3067\u3093",
                            "\u305B\u3063\u3071\u3093",
                            "\u305B\u3064\u3073",
                            "\u305B\u3064\u3076\u3093",
                            "\u305B\u3064\u3081\u3044",
                            "\u305B\u3064\u308A\u3064",
                            "\u305B\u306A\u304B",
                            "\u305B\u306E\u3073",
                            "\u305B\u306F\u3070",
                            "\u305B\u3073\u308D",
                            "\u305B\u307C\u306D",
                            "\u305B\u307E\u3044",
                            "\u305B\u307E\u308B",
                            "\u305B\u3081\u308B",
                            "\u305B\u3082\u305F\u308C",
                            "\u305B\u308A\u3075",
                            "\u305C\u3093\u3042\u304F",
                            "\u305B\u3093\u3044",
                            "\u305B\u3093\u3048\u3044",
                            "\u305B\u3093\u304B",
                            "\u305B\u3093\u304D\u3087",
                            "\u305B\u3093\u304F",
                            "\u305B\u3093\u3052\u3093",
                            "\u305C\u3093\u3054",
                            "\u305B\u3093\u3055\u3044",
                            "\u305B\u3093\u3057\u3085",
                            "\u305B\u3093\u3059\u3044",
                            "\u305B\u3093\u305B\u3044",
                            "\u305B\u3093\u305E",
                            "\u305B\u3093\u305F\u304F",
                            "\u305B\u3093\u3061\u3087\u3046",
                            "\u305B\u3093\u3066\u3044",
                            "\u305B\u3093\u3068\u3046",
                            "\u305B\u3093\u306C\u304D",
                            "\u305B\u3093\u306D\u3093",
                            "\u305B\u3093\u3071\u3044",
                            "\u305C\u3093\u3076",
                            "\u305C\u3093\u307D\u3046",
                            "\u305B\u3093\u3080",
                            "\u305B\u3093\u3081\u3093\u3058\u3087",
                            "\u305B\u3093\u3082\u3093",
                            "\u305B\u3093\u3084\u304F",
                            "\u305B\u3093\u3086\u3046",
                            "\u305B\u3093\u3088\u3046",
                            "\u305C\u3093\u3089",
                            "\u305C\u3093\u308A\u3083\u304F",
                            "\u305B\u3093\u308C\u3044",
                            "\u305B\u3093\u308D",
                            "\u305D\u3042\u304F",
                            "\u305D\u3044\u3068\u3052\u308B",
                            "\u305D\u3044\u306D",
                            "\u305D\u3046\u304C\u3093\u304D\u3087\u3046",
                            "\u305D\u3046\u304D",
                            "\u305D\u3046\u3054",
                            "\u305D\u3046\u3057\u3093",
                            "\u305D\u3046\u3060\u3093",
                            "\u305D\u3046\u306A\u3093",
                            "\u305D\u3046\u3073",
                            "\u305D\u3046\u3081\u3093",
                            "\u305D\u3046\u308A",
                            "\u305D\u3048\u3082\u306E",
                            "\u305D\u3048\u3093",
                            "\u305D\u304C\u3044",
                            "\u305D\u3052\u304D",
                            "\u305D\u3053\u3046",
                            "\u305D\u3053\u305D\u3053",
                            "\u305D\u3056\u3044",
                            "\u305D\u3057\u306A",
                            "\u305D\u305B\u3044",
                            "\u305D\u305B\u3093",
                            "\u305D\u305D\u3050",
                            "\u305D\u3060\u3066\u308B",
                            "\u305D\u3064\u3046",
                            "\u305D\u3064\u3048\u3093",
                            "\u305D\u3063\u304B\u3093",
                            "\u305D\u3064\u304E\u3087\u3046",
                            "\u305D\u3063\u3051\u3064",
                            "\u305D\u3063\u3053\u3046",
                            "\u305D\u3063\u305B\u3093",
                            "\u305D\u3063\u3068",
                            "\u305D\u3068\u304C\u308F",
                            "\u305D\u3068\u3065\u3089",
                            "\u305D\u306A\u3048\u308B",
                            "\u305D\u306A\u305F",
                            "\u305D\u3075\u307C",
                            "\u305D\u307C\u304F",
                            "\u305D\u307C\u308D",
                            "\u305D\u307E\u3064",
                            "\u305D\u307E\u308B",
                            "\u305D\u3080\u304F",
                            "\u305D\u3080\u308A\u3048",
                            "\u305D\u3081\u308B",
                            "\u305D\u3082\u305D\u3082",
                            "\u305D\u3088\u304B\u305C",
                            "\u305D\u3089\u307E\u3081",
                            "\u305D\u308D\u3046",
                            "\u305D\u3093\u304B\u3044",
                            "\u305D\u3093\u3051\u3044",
                            "\u305D\u3093\u3056\u3044",
                            "\u305D\u3093\u3057\u3064",
                            "\u305D\u3093\u305E\u304F",
                            "\u305D\u3093\u3061\u3087\u3046",
                            "\u305E\u3093\u3073",
                            "\u305E\u3093\u3076\u3093",
                            "\u305D\u3093\u307F\u3093",
                            "\u305F\u3042\u3044",
                            "\u305F\u3044\u3044\u3093",
                            "\u305F\u3044\u3046\u3093",
                            "\u305F\u3044\u3048\u304D",
                            "\u305F\u3044\u304A\u3046",
                            "\u3060\u3044\u304C\u304F",
                            "\u305F\u3044\u304D",
                            "\u305F\u3044\u3050\u3046",
                            "\u305F\u3044\u3051\u3093",
                            "\u305F\u3044\u3053",
                            "\u305F\u3044\u3056\u3044",
                            "\u3060\u3044\u3058\u3087\u3046\u3076",
                            "\u3060\u3044\u3059\u304D",
                            "\u305F\u3044\u305B\u3064",
                            "\u305F\u3044\u305D\u3046",
                            "\u3060\u3044\u305F\u3044",
                            "\u305F\u3044\u3061\u3087\u3046",
                            "\u305F\u3044\u3066\u3044",
                            "\u3060\u3044\u3069\u3053\u308D",
                            "\u305F\u3044\u306A\u3044",
                            "\u305F\u3044\u306D\u3064",
                            "\u305F\u3044\u306E\u3046",
                            "\u305F\u3044\u306F\u3093",
                            "\u3060\u3044\u3072\u3087\u3046",
                            "\u305F\u3044\u3075\u3046",
                            "\u305F\u3044\u3078\u3093",
                            "\u305F\u3044\u307B",
                            "\u305F\u3044\u307E\u3064\u3070\u306A",
                            "\u305F\u3044\u307F\u3093\u3050",
                            "\u305F\u3044\u3080",
                            "\u305F\u3044\u3081\u3093",
                            "\u305F\u3044\u3084\u304D",
                            "\u305F\u3044\u3088\u3046",
                            "\u305F\u3044\u3089",
                            "\u305F\u3044\u308A\u3087\u304F",
                            "\u305F\u3044\u308B",
                            "\u305F\u3044\u308F\u3093",
                            "\u305F\u3046\u3048",
                            "\u305F\u3048\u308B",
                            "\u305F\u304A\u3059",
                            "\u305F\u304A\u308B",
                            "\u305F\u304A\u308C\u308B",
                            "\u305F\u304B\u3044",
                            "\u305F\u304B\u306D",
                            "\u305F\u304D\u3073",
                            "\u305F\u304F\u3055\u3093",
                            "\u305F\u3053\u304F",
                            "\u305F\u3053\u3084\u304D",
                            "\u305F\u3055\u3044",
                            "\u305F\u3057\u3056\u3093",
                            "\u3060\u3058\u3083\u308C",
                            "\u305F\u3059\u3051\u308B",
                            "\u305F\u305A\u3055\u308F\u308B",
                            "\u305F\u305D\u304C\u308C",
                            "\u305F\u305F\u304B\u3046",
                            "\u305F\u305F\u304F",
                            "\u305F\u3060\u3057\u3044",
                            "\u305F\u305F\u307F",
                            "\u305F\u3061\u3070\u306A",
                            "\u3060\u3063\u304B\u3044",
                            "\u3060\u3063\u304D\u3083\u304F",
                            "\u3060\u3063\u3053",
                            "\u3060\u3063\u3057\u3085\u3064",
                            "\u3060\u3063\u305F\u3044",
                            "\u305F\u3066\u308B",
                            "\u305F\u3068\u3048\u308B",
                            "\u305F\u306A\u3070\u305F",
                            "\u305F\u306B\u3093",
                            "\u305F\u306C\u304D",
                            "\u305F\u306E\u3057\u307F",
                            "\u305F\u306F\u3064",
                            "\u305F\u3076\u3093",
                            "\u305F\u3079\u308B",
                            "\u305F\u307C\u3046",
                            "\u305F\u307E\u3054",
                            "\u305F\u307E\u308B",
                            "\u3060\u3080\u308B",
                            "\u305F\u3081\u3044\u304D",
                            "\u305F\u3081\u3059",
                            "\u305F\u3081\u308B",
                            "\u305F\u3082\u3064",
                            "\u305F\u3084\u3059\u3044",
                            "\u305F\u3088\u308B",
                            "\u305F\u3089\u3059",
                            "\u305F\u308A\u304D\u307B\u3093\u304C\u3093",
                            "\u305F\u308A\u3087\u3046",
                            "\u305F\u308A\u308B",
                            "\u305F\u308B\u3068",
                            "\u305F\u308C\u308B",
                            "\u305F\u308C\u3093\u3068",
                            "\u305F\u308D\u3063\u3068",
                            "\u305F\u308F\u3080\u308C\u308B",
                            "\u3060\u3093\u3042\u3064",
                            "\u305F\u3093\u3044",
                            "\u305F\u3093\u304A\u3093",
                            "\u305F\u3093\u304B",
                            "\u305F\u3093\u304D",
                            "\u305F\u3093\u3051\u3093",
                            "\u305F\u3093\u3054",
                            "\u305F\u3093\u3055\u3093",
                            "\u305F\u3093\u3058\u3087\u3046\u3073",
                            "\u3060\u3093\u305B\u3044",
                            "\u305F\u3093\u305D\u304F",
                            "\u305F\u3093\u305F\u3044",
                            "\u3060\u3093\u3061",
                            "\u305F\u3093\u3066\u3044",
                            "\u305F\u3093\u3068\u3046",
                            "\u3060\u3093\u306A",
                            "\u305F\u3093\u306B\u3093",
                            "\u3060\u3093\u306D\u3064",
                            "\u305F\u3093\u306E\u3046",
                            "\u305F\u3093\u3074\u3093",
                            "\u3060\u3093\u307C\u3046",
                            "\u305F\u3093\u307E\u3064",
                            "\u305F\u3093\u3081\u3044",
                            "\u3060\u3093\u308C\u3064",
                            "\u3060\u3093\u308D",
                            "\u3060\u3093\u308F",
                            "\u3061\u3042\u3044",
                            "\u3061\u3042\u3093",
                            "\u3061\u3044\u304D",
                            "\u3061\u3044\u3055\u3044",
                            "\u3061\u3048\u3093",
                            "\u3061\u304B\u3044",
                            "\u3061\u304B\u3089",
                            "\u3061\u304D\u3085\u3046",
                            "\u3061\u304D\u3093",
                            "\u3061\u3051\u3044\u305A",
                            "\u3061\u3051\u3093",
                            "\u3061\u3053\u304F",
                            "\u3061\u3055\u3044",
                            "\u3061\u3057\u304D",
                            "\u3061\u3057\u308A\u3087\u3046",
                            "\u3061\u305B\u3044",
                            "\u3061\u305D\u3046",
                            "\u3061\u305F\u3044",
                            "\u3061\u305F\u3093",
                            "\u3061\u3061\u304A\u3084",
                            "\u3061\u3064\u3058\u3087",
                            "\u3061\u3066\u304D",
                            "\u3061\u3066\u3093",
                            "\u3061\u306C\u304D",
                            "\u3061\u306C\u308A",
                            "\u3061\u306E\u3046",
                            "\u3061\u3072\u3087\u3046",
                            "\u3061\u3078\u3044\u305B\u3093",
                            "\u3061\u307B\u3046",
                            "\u3061\u307E\u305F",
                            "\u3061\u307F\u3064",
                            "\u3061\u307F\u3069\u308D",
                            "\u3061\u3081\u3044\u3069",
                            "\u3061\u3083\u3093\u3053\u306A\u3079",
                            "\u3061\u3085\u3046\u3044",
                            "\u3061\u3086\u308A\u3087\u304F",
                            "\u3061\u3087\u3046\u3057",
                            "\u3061\u3087\u3055\u304F\u3051\u3093",
                            "\u3061\u3089\u3057",
                            "\u3061\u3089\u307F",
                            "\u3061\u308A\u304C\u307F",
                            "\u3061\u308A\u3087\u3046",
                            "\u3061\u308B\u3069",
                            "\u3061\u308F\u308F",
                            "\u3061\u3093\u305F\u3044",
                            "\u3061\u3093\u3082\u304F",
                            "\u3064\u3044\u304B",
                            "\u3064\u3044\u305F\u3061",
                            "\u3064\u3046\u304B",
                            "\u3064\u3046\u3058\u3087\u3046",
                            "\u3064\u3046\u306F\u3093",
                            "\u3064\u3046\u308F",
                            "\u3064\u304B\u3046",
                            "\u3064\u304B\u308C\u308B",
                            "\u3064\u304F\u306D",
                            "\u3064\u304F\u308B",
                            "\u3064\u3051\u306D",
                            "\u3064\u3051\u308B",
                            "\u3064\u3054\u3046",
                            "\u3064\u305F\u3048\u308B",
                            "\u3064\u3065\u304F",
                            "\u3064\u3064\u3058",
                            "\u3064\u3064\u3080",
                            "\u3064\u3068\u3081\u308B",
                            "\u3064\u306A\u304C\u308B",
                            "\u3064\u306A\u307F",
                            "\u3064\u306D\u3065\u306D",
                            "\u3064\u306E\u308B",
                            "\u3064\u3076\u3059",
                            "\u3064\u307E\u3089\u306A\u3044",
                            "\u3064\u307E\u308B",
                            "\u3064\u307F\u304D",
                            "\u3064\u3081\u305F\u3044",
                            "\u3064\u3082\u308A",
                            "\u3064\u3082\u308B",
                            "\u3064\u3088\u3044",
                            "\u3064\u308B\u307C",
                            "\u3064\u308B\u307F\u304F",
                            "\u3064\u308F\u3082\u306E",
                            "\u3064\u308F\u308A",
                            "\u3066\u3042\u3057",
                            "\u3066\u3042\u3066",
                            "\u3066\u3042\u307F",
                            "\u3066\u3044\u304A\u3093",
                            "\u3066\u3044\u304B",
                            "\u3066\u3044\u304D",
                            "\u3066\u3044\u3051\u3044",
                            "\u3066\u3044\u3053\u304F",
                            "\u3066\u3044\u3055\u3064",
                            "\u3066\u3044\u3057",
                            "\u3066\u3044\u305B\u3044",
                            "\u3066\u3044\u305F\u3044",
                            "\u3066\u3044\u3069",
                            "\u3066\u3044\u306D\u3044",
                            "\u3066\u3044\u3072\u3087\u3046",
                            "\u3066\u3044\u3078\u3093",
                            "\u3066\u3044\u307C\u3046",
                            "\u3066\u3046\u3061",
                            "\u3066\u304A\u304F\u308C",
                            "\u3066\u304D\u3068\u3046",
                            "\u3066\u304F\u3073",
                            "\u3067\u3053\u307C\u3053",
                            "\u3066\u3055\u304E\u3087\u3046",
                            "\u3066\u3055\u3052",
                            "\u3066\u3059\u308A",
                            "\u3066\u305D\u3046",
                            "\u3066\u3061\u304C\u3044",
                            "\u3066\u3061\u3087\u3046",
                            "\u3066\u3064\u304C\u304F",
                            "\u3066\u3064\u3065\u304D",
                            "\u3067\u3063\u3071",
                            "\u3066\u3064\u307C\u3046",
                            "\u3066\u3064\u3084",
                            "\u3067\u306C\u304B\u3048",
                            "\u3066\u306C\u304D",
                            "\u3066\u306C\u3050\u3044",
                            "\u3066\u306E\u3072\u3089",
                            "\u3066\u306F\u3044",
                            "\u3066\u3076\u304F\u308D",
                            "\u3066\u3075\u3060",
                            "\u3066\u307B\u3069\u304D",
                            "\u3066\u307B\u3093",
                            "\u3066\u307E\u3048",
                            "\u3066\u307E\u304D\u305A\u3057",
                            "\u3066\u307F\u3058\u304B",
                            "\u3066\u307F\u3084\u3052",
                            "\u3066\u3089\u3059",
                            "\u3066\u308C\u3073",
                            "\u3066\u308F\u3051",
                            "\u3066\u308F\u305F\u3057",
                            "\u3067\u3093\u3042\u3064",
                            "\u3066\u3093\u3044\u3093",
                            "\u3066\u3093\u304B\u3044",
                            "\u3066\u3093\u304D",
                            "\u3066\u3093\u3050",
                            "\u3066\u3093\u3051\u3093",
                            "\u3066\u3093\u3054\u304F",
                            "\u3066\u3093\u3055\u3044",
                            "\u3066\u3093\u3057",
                            "\u3066\u3093\u3059\u3046",
                            "\u3067\u3093\u3061",
                            "\u3066\u3093\u3066\u304D",
                            "\u3066\u3093\u3068\u3046",
                            "\u3066\u3093\u306A\u3044",
                            "\u3066\u3093\u3077\u3089",
                            "\u3066\u3093\u307C\u3046\u3060\u3044",
                            "\u3066\u3093\u3081\u3064",
                            "\u3066\u3093\u3089\u3093\u304B\u3044",
                            "\u3067\u3093\u308A\u3087\u304F",
                            "\u3067\u3093\u308F",
                            "\u3069\u3042\u3044",
                            "\u3068\u3044\u308C",
                            "\u3069\u3046\u304B\u3093",
                            "\u3068\u3046\u304D\u3085\u3046",
                            "\u3069\u3046\u3050",
                            "\u3068\u3046\u3057",
                            "\u3068\u3046\u3080\u304E",
                            "\u3068\u304A\u3044",
                            "\u3068\u304A\u304B",
                            "\u3068\u304A\u304F",
                            "\u3068\u304A\u3059",
                            "\u3068\u304A\u308B",
                            "\u3068\u304B\u3044",
                            "\u3068\u304B\u3059",
                            "\u3068\u304D\u304A\u308A",
                            "\u3068\u304D\u3069\u304D",
                            "\u3068\u304F\u3044",
                            "\u3068\u304F\u3057\u3085\u3046",
                            "\u3068\u304F\u3066\u3093",
                            "\u3068\u304F\u306B",
                            "\u3068\u304F\u3079\u3064",
                            "\u3068\u3051\u3044",
                            "\u3068\u3051\u308B",
                            "\u3068\u3053\u3084",
                            "\u3068\u3055\u304B",
                            "\u3068\u3057\u3087\u304B\u3093",
                            "\u3068\u305D\u3046",
                            "\u3068\u305F\u3093",
                            "\u3068\u3061\u3085\u3046",
                            "\u3068\u3063\u304D\u3085\u3046",
                            "\u3068\u3063\u304F\u3093",
                            "\u3068\u3064\u305C\u3093",
                            "\u3068\u3064\u306B\u3085\u3046",
                            "\u3068\u3069\u3051\u308B",
                            "\u3068\u3068\u306E\u3048\u308B",
                            "\u3068\u306A\u3044",
                            "\u3068\u306A\u3048\u308B",
                            "\u3068\u306A\u308A",
                            "\u3068\u306E\u3055\u307E",
                            "\u3068\u3070\u3059",
                            "\u3069\u3076\u304C\u308F",
                            "\u3068\u307B\u3046",
                            "\u3068\u307E\u308B",
                            "\u3068\u3081\u308B",
                            "\u3068\u3082\u3060\u3061",
                            "\u3068\u3082\u308B",
                            "\u3069\u3088\u3046\u3073",
                            "\u3068\u3089\u3048\u308B",
                            "\u3068\u3093\u304B\u3064",
                            "\u3069\u3093\u3076\u308A",
                            "\u306A\u3044\u304B\u304F",
                            "\u306A\u3044\u3053\u3046",
                            "\u306A\u3044\u3057\u3087",
                            "\u306A\u3044\u3059",
                            "\u306A\u3044\u305B\u3093",
                            "\u306A\u3044\u305D\u3046",
                            "\u306A\u304A\u3059",
                            "\u306A\u304C\u3044",
                            "\u306A\u304F\u3059",
                            "\u306A\u3052\u308B",
                            "\u306A\u3053\u3046\u3069",
                            "\u306A\u3055\u3051",
                            "\u306A\u305F\u3067\u3053\u3053",
                            "\u306A\u3063\u3068\u3046",
                            "\u306A\u3064\u3084\u3059\u307F",
                            "\u306A\u306A\u304A\u3057",
                            "\u306A\u306B\u3054\u3068",
                            "\u306A\u306B\u3082\u306E",
                            "\u306A\u306B\u308F",
                            "\u306A\u306E\u304B",
                            "\u306A\u3075\u3060",
                            "\u306A\u307E\u3044\u304D",
                            "\u306A\u307E\u3048",
                            "\u306A\u307E\u307F",
                            "\u306A\u307F\u3060",
                            "\u306A\u3081\u3089\u304B",
                            "\u306A\u3081\u308B",
                            "\u306A\u3084\u3080",
                            "\u306A\u3089\u3046",
                            "\u306A\u3089\u3073",
                            "\u306A\u3089\u3076",
                            "\u306A\u308C\u308B",
                            "\u306A\u308F\u3068\u3073",
                            "\u306A\u308F\u3070\u308A",
                            "\u306B\u3042\u3046",
                            "\u306B\u3044\u304C\u305F",
                            "\u306B\u3046\u3051",
                            "\u306B\u304A\u3044",
                            "\u306B\u304B\u3044",
                            "\u306B\u304C\u3066",
                            "\u306B\u304D\u3073",
                            "\u306B\u304F\u3057\u307F",
                            "\u306B\u304F\u307E\u3093",
                            "\u306B\u3052\u308B",
                            "\u306B\u3055\u3093\u304B\u305F\u3093\u305D",
                            "\u306B\u3057\u304D",
                            "\u306B\u305B\u3082\u306E",
                            "\u306B\u3061\u3058\u3087\u3046",
                            "\u306B\u3061\u3088\u3046\u3073",
                            "\u306B\u3063\u304B",
                            "\u306B\u3063\u304D",
                            "\u306B\u3063\u3051\u3044",
                            "\u306B\u3063\u3053\u3046",
                            "\u306B\u3063\u3055\u3093",
                            "\u306B\u3063\u3057\u3087\u304F",
                            "\u306B\u3063\u3059\u3046",
                            "\u306B\u3063\u305B\u304D",
                            "\u306B\u3063\u3066\u3044",
                            "\u306B\u306A\u3046",
                            "\u306B\u307B\u3093",
                            "\u306B\u307E\u3081",
                            "\u306B\u3082\u3064",
                            "\u306B\u3084\u308A",
                            "\u306B\u3085\u3046\u3044\u3093",
                            "\u306B\u308A\u3093\u3057\u3083",
                            "\u306B\u308F\u3068\u308A",
                            "\u306B\u3093\u3044",
                            "\u306B\u3093\u304B",
                            "\u306B\u3093\u304D",
                            "\u306B\u3093\u3052\u3093",
                            "\u306B\u3093\u3057\u304D",
                            "\u306B\u3093\u305A\u3046",
                            "\u306B\u3093\u305D\u3046",
                            "\u306B\u3093\u305F\u3044",
                            "\u306B\u3093\u3061",
                            "\u306B\u3093\u3066\u3044",
                            "\u306B\u3093\u306B\u304F",
                            "\u306B\u3093\u3077",
                            "\u306B\u3093\u307E\u308A",
                            "\u306B\u3093\u3080",
                            "\u306B\u3093\u3081\u3044",
                            "\u306B\u3093\u3088\u3046",
                            "\u306C\u3044\u304F\u304E",
                            "\u306C\u304B\u3059",
                            "\u306C\u3050\u3044\u3068\u308B",
                            "\u306C\u3050\u3046",
                            "\u306C\u304F\u3082\u308A",
                            "\u306C\u3059\u3080",
                            "\u306C\u307E\u3048\u3073",
                            "\u306C\u3081\u308A",
                            "\u306C\u3089\u3059",
                            "\u306C\u3093\u3061\u3083\u304F",
                            "\u306D\u3042\u3052",
                            "\u306D\u3044\u304D",
                            "\u306D\u3044\u308B",
                            "\u306D\u3044\u308D",
                            "\u306D\u3050\u305B",
                            "\u306D\u304F\u305F\u3044",
                            "\u306D\u304F\u3089",
                            "\u306D\u3053\u305C",
                            "\u306D\u3053\u3080",
                            "\u306D\u3055\u3052",
                            "\u306D\u3059\u3054\u3059",
                            "\u306D\u305D\u3079\u308B",
                            "\u306D\u3060\u3093",
                            "\u306D\u3064\u3044",
                            "\u306D\u3063\u3057\u3093",
                            "\u306D\u3064\u305E\u3046",
                            "\u306D\u3063\u305F\u3044\u304E\u3087",
                            "\u306D\u3076\u305D\u304F",
                            "\u306D\u3075\u3060",
                            "\u306D\u307C\u3046",
                            "\u306D\u307B\u308A\u306F\u307B\u308A",
                            "\u306D\u307E\u304D",
                            "\u306D\u307E\u308F\u3057",
                            "\u306D\u307F\u307F",
                            "\u306D\u3080\u3044",
                            "\u306D\u3080\u305F\u3044",
                            "\u306D\u3082\u3068",
                            "\u306D\u3089\u3046",
                            "\u306D\u308F\u3056",
                            "\u306D\u3093\u3044\u308A",
                            "\u306D\u3093\u304A\u3057",
                            "\u306D\u3093\u304B\u3093",
                            "\u306D\u3093\u304D\u3093",
                            "\u306D\u3093\u3050",
                            "\u306D\u3093\u3056",
                            "\u306D\u3093\u3057",
                            "\u306D\u3093\u3061\u3083\u304F",
                            "\u306D\u3093\u3069",
                            "\u306D\u3093\u3074",
                            "\u306D\u3093\u3076\u3064",
                            "\u306D\u3093\u307E\u3064",
                            "\u306D\u3093\u308A\u3087\u3046",
                            "\u306D\u3093\u308C\u3044",
                            "\u306E\u3044\u305A",
                            "\u306E\u304A\u3065\u307E",
                            "\u306E\u304C\u3059",
                            "\u306E\u304D\u306A\u307F",
                            "\u306E\u3053\u304E\u308A",
                            "\u306E\u3053\u3059",
                            "\u306E\u3053\u308B",
                            "\u306E\u305B\u308B",
                            "\u306E\u305E\u304F",
                            "\u306E\u305E\u3080",
                            "\u306E\u305F\u307E\u3046",
                            "\u306E\u3061\u307B\u3069",
                            "\u306E\u3063\u304F",
                            "\u306E\u3070\u3059",
                            "\u306E\u306F\u3089",
                            "\u306E\u3079\u308B",
                            "\u306E\u307C\u308B",
                            "\u306E\u307F\u3082\u306E",
                            "\u306E\u3084\u307E",
                            "\u306E\u3089\u3044\u306C",
                            "\u306E\u3089\u306D\u3053",
                            "\u306E\u308A\u3082\u306E",
                            "\u306E\u308A\u3086\u304D",
                            "\u306E\u308C\u3093",
                            "\u306E\u3093\u304D",
                            "\u3070\u3042\u3044",
                            "\u306F\u3042\u304F",
                            "\u3070\u3042\u3055\u3093",
                            "\u3070\u3044\u304B",
                            "\u3070\u3044\u304F",
                            "\u306F\u3044\u3051\u3093",
                            "\u306F\u3044\u3054",
                            "\u306F\u3044\u3057\u3093",
                            "\u306F\u3044\u3059\u3044",
                            "\u306F\u3044\u305B\u3093",
                            "\u306F\u3044\u305D\u3046",
                            "\u306F\u3044\u3061",
                            "\u3070\u3044\u3070\u3044",
                            "\u306F\u3044\u308C\u3064",
                            "\u306F\u3048\u308B",
                            "\u306F\u304A\u308B",
                            "\u306F\u304B\u3044",
                            "\u3070\u304B\u308A",
                            "\u306F\u304B\u308B",
                            "\u306F\u304F\u3057\u3085",
                            "\u306F\u3051\u3093",
                            "\u306F\u3053\u3076",
                            "\u306F\u3055\u307F",
                            "\u306F\u3055\u3093",
                            "\u306F\u3057\u3054",
                            "\u3070\u3057\u3087",
                            "\u306F\u3057\u308B",
                            "\u306F\u305B\u308B",
                            "\u3071\u305D\u3053\u3093",
                            "\u306F\u305D\u3093",
                            "\u306F\u305F\u3093",
                            "\u306F\u3061\u307F\u3064",
                            "\u306F\u3064\u304A\u3093",
                            "\u306F\u3063\u304B\u304F",
                            "\u306F\u3065\u304D",
                            "\u306F\u3063\u304D\u308A",
                            "\u306F\u3063\u304F\u3064",
                            "\u306F\u3063\u3051\u3093",
                            "\u306F\u3063\u3053\u3046",
                            "\u306F\u3063\u3055\u3093",
                            "\u306F\u3063\u3057\u3093",
                            "\u306F\u3063\u305F\u3064",
                            "\u306F\u3063\u3061\u3085\u3046",
                            "\u306F\u3063\u3066\u3093",
                            "\u306F\u3063\u3074\u3087\u3046",
                            "\u306F\u3063\u307D\u3046",
                            "\u306F\u306A\u3059",
                            "\u306F\u306A\u3073",
                            "\u306F\u306B\u304B\u3080",
                            "\u306F\u3076\u3089\u3057",
                            "\u306F\u307F\u304C\u304D",
                            "\u306F\u3080\u304B\u3046",
                            "\u306F\u3081\u3064",
                            "\u306F\u3084\u3044",
                            "\u306F\u3084\u3057",
                            "\u306F\u3089\u3046",
                            "\u306F\u308D\u3046\u3043\u3093",
                            "\u306F\u308F\u3044",
                            "\u306F\u3093\u3044",
                            "\u306F\u3093\u3048\u3044",
                            "\u306F\u3093\u304A\u3093",
                            "\u306F\u3093\u304B\u304F",
                            "\u306F\u3093\u304D\u3087\u3046",
                            "\u3070\u3093\u3050\u307F",
                            "\u306F\u3093\u3053",
                            "\u306F\u3093\u3057\u3083",
                            "\u306F\u3093\u3059\u3046",
                            "\u306F\u3093\u3060\u3093",
                            "\u3071\u3093\u3061",
                            "\u3071\u3093\u3064",
                            "\u306F\u3093\u3066\u3044",
                            "\u306F\u3093\u3068\u3057",
                            "\u306F\u3093\u306E\u3046",
                            "\u306F\u3093\u3071",
                            "\u306F\u3093\u3076\u3093",
                            "\u306F\u3093\u307A\u3093",
                            "\u306F\u3093\u307C\u3046\u304D",
                            "\u306F\u3093\u3081\u3044",
                            "\u306F\u3093\u3089\u3093",
                            "\u306F\u3093\u308D\u3093",
                            "\u3072\u3044\u304D",
                            "\u3072\u3046\u3093",
                            "\u3072\u3048\u308B",
                            "\u3072\u304B\u304F",
                            "\u3072\u304B\u308A",
                            "\u3072\u304B\u308B",
                            "\u3072\u304B\u3093",
                            "\u3072\u304F\u3044",
                            "\u3072\u3051\u3064",
                            "\u3072\u3053\u3046\u304D",
                            "\u3072\u3053\u304F",
                            "\u3072\u3055\u3044",
                            "\u3072\u3055\u3057\u3076\u308A",
                            "\u3072\u3055\u3093",
                            "\u3073\u3058\u3085\u3064\u304B\u3093",
                            "\u3072\u3057\u3087",
                            "\u3072\u305D\u304B",
                            "\u3072\u305D\u3080",
                            "\u3072\u305F\u3080\u304D",
                            "\u3072\u3060\u308A",
                            "\u3072\u305F\u308B",
                            "\u3072\u3064\u304E",
                            "\u3072\u3063\u3053\u3057",
                            "\u3072\u3063\u3057",
                            "\u3072\u3064\u3058\u3085\u3072\u3093",
                            "\u3072\u3063\u3059",
                            "\u3072\u3064\u305C\u3093",
                            "\u3074\u3063\u305F\u308A",
                            "\u3074\u3063\u3061\u308A",
                            "\u3072\u3064\u3088\u3046",
                            "\u3072\u3066\u3044",
                            "\u3072\u3068\u3054\u307F",
                            "\u3072\u306A\u307E\u3064\u308A",
                            "\u3072\u306A\u3093",
                            "\u3072\u306D\u308B",
                            "\u3072\u306F\u3093",
                            "\u3072\u3073\u304F",
                            "\u3072\u3072\u3087\u3046",
                            "\u3072\u307B\u3046",
                            "\u3072\u307E\u308F\u308A",
                            "\u3072\u307E\u3093",
                            "\u3072\u307F\u3064",
                            "\u3072\u3081\u3044",
                            "\u3072\u3081\u3058\u3057",
                            "\u3072\u3084\u3051",
                            "\u3072\u3084\u3059",
                            "\u3072\u3088\u3046",
                            "\u3073\u3087\u3046\u304D",
                            "\u3072\u3089\u304C\u306A",
                            "\u3072\u3089\u304F",
                            "\u3072\u308A\u3064",
                            "\u3072\u308A\u3087\u3046",
                            "\u3072\u308B\u307E",
                            "\u3072\u308B\u3084\u3059\u307F",
                            "\u3072\u308C\u3044",
                            "\u3072\u308D\u3044",
                            "\u3072\u308D\u3046",
                            "\u3072\u308D\u304D",
                            "\u3072\u308D\u3086\u304D",
                            "\u3072\u3093\u304B\u304F",
                            "\u3072\u3093\u3051\u3064",
                            "\u3072\u3093\u3053\u3093",
                            "\u3072\u3093\u3057\u3085",
                            "\u3072\u3093\u305D\u3046",
                            "\u3074\u3093\u3061",
                            "\u3072\u3093\u3071\u3093",
                            "\u3073\u3093\u307C\u3046",
                            "\u3075\u3042\u3093",
                            "\u3075\u3044\u3046\u3061",
                            "\u3075\u3046\u3051\u3044",
                            "\u3075\u3046\u305B\u3093",
                            "\u3077\u3046\u305F\u308D\u3046",
                            "\u3075\u3046\u3068\u3046",
                            "\u3075\u3046\u3075",
                            "\u3075\u3048\u308B",
                            "\u3075\u304A\u3093",
                            "\u3075\u304B\u3044",
                            "\u3075\u304D\u3093",
                            "\u3075\u304F\u3056\u3064",
                            "\u3075\u304F\u3076\u304F\u308D",
                            "\u3075\u3053\u3046",
                            "\u3075\u3055\u3044",
                            "\u3075\u3057\u304E",
                            "\u3075\u3058\u307F",
                            "\u3075\u3059\u307E",
                            "\u3075\u305B\u3044",
                            "\u3075\u305B\u3050",
                            "\u3075\u305D\u304F",
                            "\u3076\u305F\u306B\u304F",
                            "\u3075\u305F\u3093",
                            "\u3075\u3061\u3087\u3046",
                            "\u3075\u3064\u3046",
                            "\u3075\u3064\u304B",
                            "\u3075\u3063\u304B\u3064",
                            "\u3075\u3063\u304D",
                            "\u3075\u3063\u3053\u304F",
                            "\u3076\u3069\u3046",
                            "\u3075\u3068\u308B",
                            "\u3075\u3068\u3093",
                            "\u3075\u306E\u3046",
                            "\u3075\u306F\u3044",
                            "\u3075\u3072\u3087\u3046",
                            "\u3075\u3078\u3093",
                            "\u3075\u307E\u3093",
                            "\u3075\u307F\u3093",
                            "\u3075\u3081\u3064",
                            "\u3075\u3081\u3093",
                            "\u3075\u3088\u3046",
                            "\u3075\u308A\u3053",
                            "\u3075\u308A\u308B",
                            "\u3075\u308B\u3044",
                            "\u3075\u3093\u3044\u304D",
                            "\u3076\u3093\u304C\u304F",
                            "\u3076\u3093\u3050",
                            "\u3075\u3093\u3057\u3064",
                            "\u3076\u3093\u305B\u304D",
                            "\u3075\u3093\u305D\u3046",
                            "\u3076\u3093\u307D\u3046",
                            "\u3078\u3044\u3042\u3093",
                            "\u3078\u3044\u304A\u3093",
                            "\u3078\u3044\u304C\u3044",
                            "\u3078\u3044\u304D",
                            "\u3078\u3044\u3052\u3093",
                            "\u3078\u3044\u3053\u3046",
                            "\u3078\u3044\u3055",
                            "\u3078\u3044\u3057\u3083",
                            "\u3078\u3044\u305B\u3064",
                            "\u3078\u3044\u305D",
                            "\u3078\u3044\u305F\u304F",
                            "\u3078\u3044\u3066\u3093",
                            "\u3078\u3044\u306D\u3064",
                            "\u3078\u3044\u308F",
                            "\u3078\u304D\u304C",
                            "\u3078\u3053\u3080",
                            "\u3079\u306B\u3044\u308D",
                            "\u3079\u306B\u3057\u3087\u3046\u304C",
                            "\u3078\u3089\u3059",
                            "\u3078\u3093\u304B\u3093",
                            "\u3079\u3093\u304D\u3087\u3046",
                            "\u3079\u3093\u3054\u3057",
                            "\u3078\u3093\u3055\u3044",
                            "\u3078\u3093\u305F\u3044",
                            "\u3079\u3093\u308A",
                            "\u307B\u3042\u3093",
                            "\u307B\u3044\u304F",
                            "\u307C\u3046\u304E\u3087",
                            "\u307B\u3046\u3053\u304F",
                            "\u307B\u3046\u305D\u3046",
                            "\u307B\u3046\u307B\u3046",
                            "\u307B\u3046\u3082\u3093",
                            "\u307B\u3046\u308A\u3064",
                            "\u307B\u3048\u308B",
                            "\u307B\u304A\u3093",
                            "\u307B\u304B\u3093",
                            "\u307B\u304D\u3087\u3046",
                            "\u307C\u304D\u3093",
                            "\u307B\u304F\u308D",
                            "\u307B\u3051\u3064",
                            "\u307B\u3051\u3093",
                            "\u307B\u3053\u3046",
                            "\u307B\u3053\u308B",
                            "\u307B\u3057\u3044",
                            "\u307B\u3057\u3064",
                            "\u307B\u3057\u3085",
                            "\u307B\u3057\u3087\u3046",
                            "\u307B\u305B\u3044",
                            "\u307B\u305D\u3044",
                            "\u307B\u305D\u304F",
                            "\u307B\u305F\u3066",
                            "\u307B\u305F\u308B",
                            "\u307D\u3061\u3076\u304F\u308D",
                            "\u307B\u3063\u304D\u3087\u304F",
                            "\u307B\u3063\u3055",
                            "\u307B\u3063\u305F\u3093",
                            "\u307B\u3068\u3093\u3069",
                            "\u307B\u3081\u308B",
                            "\u307B\u3093\u3044",
                            "\u307B\u3093\u304D",
                            "\u307B\u3093\u3051",
                            "\u307B\u3093\u3057\u3064",
                            "\u307B\u3093\u3084\u304F",
                            "\u307E\u3044\u306B\u3061",
                            "\u307E\u304B\u3044",
                            "\u307E\u304B\u305B\u308B",
                            "\u307E\u304C\u308B",
                            "\u307E\u3051\u308B",
                            "\u307E\u3053\u3068",
                            "\u307E\u3055\u3064",
                            "\u307E\u3058\u3081",
                            "\u307E\u3059\u304F",
                            "\u307E\u305C\u308B",
                            "\u307E\u3064\u308A",
                            "\u307E\u3068\u3081",
                            "\u307E\u306A\u3076",
                            "\u307E\u306C\u3051",
                            "\u307E\u306D\u304F",
                            "\u307E\u307B\u3046",
                            "\u307E\u3082\u308B",
                            "\u307E\u3086\u3052",
                            "\u307E\u3088\u3046",
                            "\u307E\u308D\u3084\u304B",
                            "\u307E\u308F\u3059",
                            "\u307E\u308F\u308A",
                            "\u307E\u308F\u308B",
                            "\u307E\u3093\u304C",
                            "\u307E\u3093\u304D\u3064",
                            "\u307E\u3093\u305E\u304F",
                            "\u307E\u3093\u306A\u304B",
                            "\u307F\u3044\u3089",
                            "\u307F\u3046\u3061",
                            "\u307F\u3048\u308B",
                            "\u307F\u304C\u304F",
                            "\u307F\u304B\u305F",
                            "\u307F\u304B\u3093",
                            "\u307F\u3051\u3093",
                            "\u307F\u3053\u3093",
                            "\u307F\u3058\u304B\u3044",
                            "\u307F\u3059\u3044",
                            "\u307F\u3059\u3048\u308B",
                            "\u307F\u305B\u308B",
                            "\u307F\u3063\u304B",
                            "\u307F\u3064\u304B\u308B",
                            "\u307F\u3064\u3051\u308B",
                            "\u307F\u3066\u3044",
                            "\u307F\u3068\u3081\u308B",
                            "\u307F\u306A\u3068",
                            "\u307F\u306A\u307F\u304B\u3055\u3044",
                            "\u307F\u306D\u3089\u308B",
                            "\u307F\u306E\u3046",
                            "\u307F\u306E\u304C\u3059",
                            "\u307F\u307B\u3093",
                            "\u307F\u3082\u3068",
                            "\u307F\u3084\u3052",
                            "\u307F\u3089\u3044",
                            "\u307F\u308A\u3087\u304F",
                            "\u307F\u308F\u304F",
                            "\u307F\u3093\u304B",
                            "\u307F\u3093\u305E\u304F",
                            "\u3080\u3044\u304B",
                            "\u3080\u3048\u304D",
                            "\u3080\u3048\u3093",
                            "\u3080\u304B\u3044",
                            "\u3080\u304B\u3046",
                            "\u3080\u304B\u3048",
                            "\u3080\u304B\u3057",
                            "\u3080\u304E\u3061\u3083",
                            "\u3080\u3051\u308B",
                            "\u3080\u3052\u3093",
                            "\u3080\u3055\u307C\u308B",
                            "\u3080\u3057\u3042\u3064\u3044",
                            "\u3080\u3057\u3070",
                            "\u3080\u3058\u3085\u3093",
                            "\u3080\u3057\u308D",
                            "\u3080\u3059\u3046",
                            "\u3080\u3059\u3053",
                            "\u3080\u3059\u3076",
                            "\u3080\u3059\u3081",
                            "\u3080\u305B\u308B",
                            "\u3080\u305B\u3093",
                            "\u3080\u3061\u3085\u3046",
                            "\u3080\u306A\u3057\u3044",
                            "\u3080\u306E\u3046",
                            "\u3080\u3084\u307F",
                            "\u3080\u3088\u3046",
                            "\u3080\u3089\u3055\u304D",
                            "\u3080\u308A\u3087\u3046",
                            "\u3080\u308D\u3093",
                            "\u3081\u3044\u3042\u3093",
                            "\u3081\u3044\u3046\u3093",
                            "\u3081\u3044\u3048\u3093",
                            "\u3081\u3044\u304B\u304F",
                            "\u3081\u3044\u304D\u3087\u304F",
                            "\u3081\u3044\u3055\u3044",
                            "\u3081\u3044\u3057",
                            "\u3081\u3044\u305D\u3046",
                            "\u3081\u3044\u3076\u3064",
                            "\u3081\u3044\u308C\u3044",
                            "\u3081\u3044\u308F\u304F",
                            "\u3081\u3050\u307E\u308C\u308B",
                            "\u3081\u3056\u3059",
                            "\u3081\u3057\u305F",
                            "\u3081\u305A\u3089\u3057\u3044",
                            "\u3081\u3060\u3064",
                            "\u3081\u307E\u3044",
                            "\u3081\u3084\u3059",
                            "\u3081\u3093\u304D\u3087",
                            "\u3081\u3093\u305B\u304D",
                            "\u3081\u3093\u3069\u3046",
                            "\u3082\u3046\u3057\u3042\u3052\u308B",
                            "\u3082\u3046\u3069\u3046\u3051\u3093",
                            "\u3082\u3048\u308B",
                            "\u3082\u304F\u3057",
                            "\u3082\u304F\u3066\u304D",
                            "\u3082\u304F\u3088\u3046\u3073",
                            "\u3082\u3061\u308D\u3093",
                            "\u3082\u3069\u308B",
                            "\u3082\u3089\u3046",
                            "\u3082\u3093\u304F",
                            "\u3082\u3093\u3060\u3044",
                            "\u3084\u304A\u3084",
                            "\u3084\u3051\u308B",
                            "\u3084\u3055\u3044",
                            "\u3084\u3055\u3057\u3044",
                            "\u3084\u3059\u3044",
                            "\u3084\u3059\u305F\u308D\u3046",
                            "\u3084\u3059\u307F",
                            "\u3084\u305B\u308B",
                            "\u3084\u305D\u3046",
                            "\u3084\u305F\u3044",
                            "\u3084\u3061\u3093",
                            "\u3084\u3063\u3068",
                            "\u3084\u3063\u3071\u308A",
                            "\u3084\u3076\u308B",
                            "\u3084\u3081\u308B",
                            "\u3084\u3084\u3053\u3057\u3044",
                            "\u3084\u3088\u3044",
                            "\u3084\u308F\u3089\u304B\u3044",
                            "\u3086\u3046\u304D",
                            "\u3086\u3046\u3073\u3093\u304D\u3087\u304F",
                            "\u3086\u3046\u3079",
                            "\u3086\u3046\u3081\u3044",
                            "\u3086\u3051\u3064",
                            "\u3086\u3057\u3085\u3064",
                            "\u3086\u305B\u3093",
                            "\u3086\u305D\u3046",
                            "\u3086\u305F\u304B",
                            "\u3086\u3061\u3083\u304F",
                            "\u3086\u3067\u308B",
                            "\u3086\u306B\u3085\u3046",
                            "\u3086\u3073\u308F",
                            "\u3086\u3089\u3044",
                            "\u3086\u308C\u308B",
                            "\u3088\u3046\u3044",
                            "\u3088\u3046\u304B",
                            "\u3088\u3046\u304D\u3085\u3046",
                            "\u3088\u3046\u3058",
                            "\u3088\u3046\u3059",
                            "\u3088\u3046\u3061\u3048\u3093",
                            "\u3088\u304B\u305C",
                            "\u3088\u304B\u3093",
                            "\u3088\u304D\u3093",
                            "\u3088\u304F\u305B\u3044",
                            "\u3088\u304F\u307C\u3046",
                            "\u3088\u3051\u3044",
                            "\u3088\u3054\u308C\u308B",
                            "\u3088\u3055\u3093",
                            "\u3088\u3057\u3085\u3046",
                            "\u3088\u305D\u3046",
                            "\u3088\u305D\u304F",
                            "\u3088\u3063\u304B",
                            "\u3088\u3066\u3044",
                            "\u3088\u3069\u304C\u308F\u304F",
                            "\u3088\u306D\u3064",
                            "\u3088\u3084\u304F",
                            "\u3088\u3086\u3046",
                            "\u3088\u308D\u3053\u3076",
                            "\u3088\u308D\u3057\u3044",
                            "\u3089\u3044\u3046",
                            "\u3089\u304F\u304C\u304D",
                            "\u3089\u304F\u3054",
                            "\u3089\u304F\u3055\u3064",
                            "\u3089\u304F\u3060",
                            "\u3089\u3057\u3093\u3070\u3093",
                            "\u3089\u305B\u3093",
                            "\u3089\u305E\u304F",
                            "\u3089\u305F\u3044",
                            "\u3089\u3063\u304B",
                            "\u3089\u308C\u3064",
                            "\u308A\u3048\u304D",
                            "\u308A\u304B\u3044",
                            "\u308A\u304D\u3055\u304F",
                            "\u308A\u304D\u305B\u3064",
                            "\u308A\u304F\u3050\u3093",
                            "\u308A\u304F\u3064",
                            "\u308A\u3051\u3093",
                            "\u308A\u3053\u3046",
                            "\u308A\u305B\u3044",
                            "\u308A\u305D\u3046",
                            "\u308A\u305D\u304F",
                            "\u308A\u3066\u3093",
                            "\u308A\u306D\u3093",
                            "\u308A\u3086\u3046",
                            "\u308A\u3085\u3046\u304C\u304F",
                            "\u308A\u3088\u3046",
                            "\u308A\u3087\u3046\u308A",
                            "\u308A\u3087\u304B\u3093",
                            "\u308A\u3087\u304F\u3061\u3083",
                            "\u308A\u3087\u3053\u3046",
                            "\u308A\u308A\u304F",
                            "\u308A\u308C\u304D",
                            "\u308A\u308D\u3093",
                            "\u308A\u3093\u3054",
                            "\u308B\u3044\u3051\u3044",
                            "\u308B\u3044\u3055\u3044",
                            "\u308B\u3044\u3058",
                            "\u308B\u3044\u305B\u304D",
                            "\u308B\u3059\u3070\u3093",
                            "\u308B\u308A\u304C\u308F\u3089",
                            "\u308C\u3044\u304B\u3093",
                            "\u308C\u3044\u304E",
                            "\u308C\u3044\u305B\u3044",
                            "\u308C\u3044\u305E\u3046\u3053",
                            "\u308C\u3044\u3068\u3046",
                            "\u308C\u3044\u307C\u3046",
                            "\u308C\u304D\u3057",
                            "\u308C\u304D\u3060\u3044",
                            "\u308C\u3093\u3042\u3044",
                            "\u308C\u3093\u3051\u3044",
                            "\u308C\u3093\u3053\u3093",
                            "\u308C\u3093\u3055\u3044",
                            "\u308C\u3093\u3057\u3085\u3046",
                            "\u308C\u3093\u305E\u304F",
                            "\u308C\u3093\u3089\u304F",
                            "\u308D\u3046\u304B",
                            "\u308D\u3046\u3054",
                            "\u308D\u3046\u3058\u3093",
                            "\u308D\u3046\u305D\u304F",
                            "\u308D\u304F\u304C",
                            "\u308D\u3053\u3064",
                            "\u308D\u3058\u3046\u3089",
                            "\u308D\u3057\u3085\u3064",
                            "\u308D\u305B\u3093",
                            "\u308D\u3066\u3093",
                            "\u308D\u3081\u3093",
                            "\u308D\u308C\u3064",
                            "\u308D\u3093\u304E",
                            "\u308D\u3093\u3071",
                            "\u308D\u3093\u3076\u3093",
                            "\u308D\u3093\u308A",
                            "\u308F\u304B\u3059",
                            "\u308F\u304B\u3081",
                            "\u308F\u304B\u3084\u307E",
                            "\u308F\u304B\u308C\u308B",
                            "\u308F\u3057\u3064",
                            "\u308F\u3058\u307E\u3057",
                            "\u308F\u3059\u308C\u3082\u306E",
                            "\u308F\u3089\u3046",
                            "\u308F\u308C\u308B"
                        ];
                        exports.jp = wordList$1;
                        wordList$1.space = "\u3000";
                        var KeyPair1 = /*#__PURE__*/ function(_Struct12) {
                            _inherits(KeyPair, _Struct12);
                            var _super20 = _createSuper(KeyPair);
                            function KeyPair(privKey, pubKey) {
                                var _this19;
                                var PrivKey$1 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PrivKey1;
                                _classCallCheck2(this, KeyPair);
                                _this19 = _super20.call(this, {
                                    privKey: privKey,
                                    pubKey: pubKey
                                });
                                _this19.PrivKey = PrivKey$1;
                                return _this19;
                            }
                            _createClass2(KeyPair, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        if (json.privKey) this.privKey = this.PrivKey.fromJSON(json.privKey);
                                        if (json.pubKey) this.pubKey = PubKey1.fromJSON(json.pubKey);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        var buflen1 = br.readUInt8();
                                        if (buflen1 > 0) this.privKey = new this.PrivKey().fromFastBuffer(br.read(buflen1));
                                        var buflen2 = br.readUInt8();
                                        if (buflen2 > 0) this.pubKey = new PubKey1().fromFastBuffer(br.read(buflen2));
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        if (this.privKey) {
                                            var privKeybuf = this.privKey.toFastBuffer();
                                            bw.writeUInt8(privKeybuf.length);
                                            bw.write(privKeybuf);
                                        } else bw.writeUInt8(0);
                                        if (this.pubKey) {
                                            var pubKeybuf = this.pubKey.toFastBuffer();
                                            bw.writeUInt8(pubKeybuf.length);
                                            bw.write(pubKeybuf);
                                        } else bw.writeUInt8(0);
                                        return bw;
                                    }
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        return this.fromJSON(JSON.parse(str));
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        return JSON.stringify(this.toJSON());
                                    }
                                },
                                {
                                    key: "toPublic",
                                    value: function toPublic() {
                                        var keyPair = new KeyPair().fromObject(this);
                                        keyPair.privKey = undefined;
                                        return keyPair;
                                    }
                                },
                                {
                                    key: "fromPrivKey",
                                    value: function fromPrivKey(privKey) {
                                        this.privKey = privKey;
                                        this.pubKey = new PubKey1().fromPrivKey(privKey);
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncFromPrivKey",
                                    value: function() {
                                        var _asyncFromPrivKey3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee51(privKey) {
                                            return _regeneratorRuntime().wrap(function _callee51$(_context53) {
                                                while(true)switch(_context53.prev = _context53.next){
                                                    case 0:
                                                        this.privKey = privKey;
                                                        _context53.next = 3;
                                                        return new PubKey1().asyncFromPrivKey(privKey);
                                                    case 3:
                                                        this.pubKey = _context53.sent;
                                                        return _context53.abrupt("return", this);
                                                    case 5:
                                                    case "end":
                                                        return _context53.stop();
                                                }
                                            }, _callee51, this);
                                        }));
                                        function asyncFromPrivKey(_x68) {
                                            return _asyncFromPrivKey3.apply(this, arguments);
                                        }
                                        return asyncFromPrivKey;
                                    }()
                                },
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        this.privKey = new this.PrivKey().fromRandom();
                                        this.pubKey = new PubKey1().fromPrivKey(this.privKey);
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncFromRandom",
                                    value: function() {
                                        var _asyncFromRandom3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee52() {
                                            return _regeneratorRuntime().wrap(function _callee52$(_context54) {
                                                while(true)switch(_context54.prev = _context54.next){
                                                    case 0:
                                                        this.privKey = new this.PrivKey().fromRandom();
                                                        return _context54.abrupt("return", this.asyncFromPrivKey(this.privKey));
                                                    case 2:
                                                    case "end":
                                                        return _context54.stop();
                                                }
                                            }, _callee52, this);
                                        }));
                                        function asyncFromRandom() {
                                            return _asyncFromRandom3.apply(this, arguments);
                                        }
                                        return asyncFromRandom;
                                    }()
                                }
                            ], [
                                {
                                    key: "fromPrivKey",
                                    value: function fromPrivKey(privKey) {
                                        return new this().fromPrivKey(privKey);
                                    }
                                },
                                {
                                    key: "asyncFromPrivKey",
                                    value: function asyncFromPrivKey(privKey) {
                                        return new this().asyncFromPrivKey(privKey);
                                    }
                                },
                                {
                                    key: "fromRandom",
                                    value: function fromRandom() {
                                        return new this().fromRandom();
                                    }
                                },
                                {
                                    key: "asyncFromRandom",
                                    value: function asyncFromRandom() {
                                        return new this().asyncFromRandom();
                                    }
                                }
                            ]);
                            return KeyPair;
                        }(Struct1);
                        exports.KeyPair = KeyPair1;
                        KeyPair1.Mainnet = /*#__PURE__*/ function(_KeyPair) {
                            _inherits(_class7, _KeyPair);
                            var _super21 = _createSuper(_class7);
                            function _class7(privKey, pubKey) {
                                _classCallCheck2(this, _class7);
                                return _super21.call(this, privKey, pubKey, PrivKey1.Mainnet);
                            }
                            return _createClass2(_class7);
                        }(KeyPair1);
                        KeyPair1.Testnet = /*#__PURE__*/ function(_KeyPair2) {
                            _inherits(_class8, _KeyPair2);
                            var _super22 = _createSuper(_class8);
                            function _class8(privKey, pubKey) {
                                _classCallCheck2(this, _class8);
                                return _super22.call(this, privKey, pubKey, PrivKey1.Testnet);
                            }
                            return _createClass2(_class8);
                        }(KeyPair1);
                        var Ecdsa1 = /*#__PURE__*/ function(_Struct13) {
                            _inherits(Ecdsa, _Struct13);
                            var _super23 = _createSuper(Ecdsa);
                            function Ecdsa(sig, keyPair, hashBuf, k, endian, verified) {
                                _classCallCheck2(this, Ecdsa);
                                return _super23.call(this, {
                                    sig: sig,
                                    keyPair: keyPair,
                                    hashBuf: hashBuf,
                                    k: k,
                                    endian: endian,
                                    verified: verified
                                });
                            }
                            _createClass2(Ecdsa, [
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return {
                                            sig: this.sig ? this.sig.toString() : undefined,
                                            keyPair: this.keyPair ? this.keyPair.toBuffer().toString("hex") : undefined,
                                            hashBuf: this.hashBuf ? this.hashBuf.toString("hex") : undefined,
                                            k: this.k ? this.k.toString() : undefined,
                                            endian: this.endian,
                                            verified: this.verified
                                        };
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.sig = json.sig ? new Sig1().fromString(json.sig) : undefined;
                                        this.keyPair = json.keyPair ? new KeyPair1().fromBuffer(Buffer.from(json.keyPair, "hex")) : undefined;
                                        this.hashBuf = json.hashBuf ? Buffer.from(json.hashBuf, "hex") : undefined;
                                        this.k = json.k ? new Bn().fromString(json.k) : undefined;
                                        this.endian = json.endian;
                                        this.verified = json.verified;
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        var str = JSON.stringify(this.toJSON());
                                        return Buffer.from(str);
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        var json = JSON.parse(buf.toString());
                                        return this.fromJSON(json);
                                    }
                                },
                                {
                                    key: "calcrecovery",
                                    value: function calcrecovery() {
                                        for(var recovery = 0; recovery < 4; recovery++){
                                            var Qprime = void 0;
                                            this.sig.recovery = recovery;
                                            try {
                                                Qprime = this.sig2PubKey();
                                            } catch (e) {
                                                continue;
                                            }
                                            if (Qprime.point.eq(this.keyPair.pubKey.point)) {
                                                var compressed = this.keyPair.pubKey.compressed;
                                                this.sig.compressed = this.keyPair.pubKey.compressed === undefined ? true : compressed;
                                                return this;
                                            }
                                        }
                                        this.sig.recovery = undefined;
                                        throw new Error("Unable to find valid recovery factor");
                                    }
                                },
                                {
                                    key: "asyncCalcrecovery",
                                    value: function() {
                                        var _asyncCalcrecovery = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee53() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee53$(_context55) {
                                                while(true)switch(_context55.prev = _context55.next){
                                                    case 0:
                                                        _context55.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "calcrecovery", []);
                                                    case 2:
                                                        workersResult = _context55.sent;
                                                        return _context55.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context55.stop();
                                                }
                                            }, _callee53, this);
                                        }));
                                        function asyncCalcrecovery() {
                                            return _asyncCalcrecovery.apply(this, arguments);
                                        }
                                        return asyncCalcrecovery;
                                    }()
                                },
                                {
                                    key: "fromString",
                                    value: function fromString(str) {
                                        var obj = JSON.parse(str);
                                        if (obj.hashBuf) this.hashBuf = Buffer.from(obj.hashBuf, "hex");
                                        if (obj.keyPair) this.keyPair = new KeyPair1().fromString(obj.keyPair);
                                        if (obj.sig) this.sig = new Sig1().fromString(obj.sig);
                                        if (obj.k) this.k = new Bn(obj.k, 10);
                                        return this;
                                    }
                                },
                                {
                                    key: "randomK",
                                    value: function randomK() {
                                        var N = Point1.getN();
                                        var k;
                                        do k = new Bn().fromBuffer(Random1.getRandomBuffer(32));
                                        while (!(k.lt(N) && k.gt(0)));
                                        this.k = k;
                                        return this;
                                    }
                                },
                                {
                                    key: "deterministicK",
                                    value: function deterministicK(badrs) {
                                        var v = Buffer.alloc(32);
                                        v.fill(0x01);
                                        var k = Buffer.alloc(32);
                                        k.fill(0x00);
                                        var x = this.keyPair.privKey.bn.toBuffer({
                                            size: 32
                                        });
                                        k = Hash1.sha256Hmac(Buffer.concat([
                                            v,
                                            Buffer.from([
                                                0x00
                                            ]),
                                            x,
                                            this.hashBuf
                                        ]), k);
                                        v = Hash1.sha256Hmac(v, k);
                                        k = Hash1.sha256Hmac(Buffer.concat([
                                            v,
                                            Buffer.from([
                                                0x01
                                            ]),
                                            x,
                                            this.hashBuf
                                        ]), k);
                                        v = Hash1.sha256Hmac(v, k);
                                        v = Hash1.sha256Hmac(v, k);
                                        var T = new Bn().fromBuffer(v);
                                        var N = Point1.getN();
                                        if (badrs === undefined) badrs = 0;
                                        for(var i = 0; i < badrs || !(T.lt(N) && T.gt(0)); i++){
                                            k = Hash1.sha256Hmac(Buffer.concat([
                                                v,
                                                Buffer.from([
                                                    0x00
                                                ])
                                            ]), k);
                                            v = Hash1.sha256Hmac(v, k);
                                            v = Hash1.sha256Hmac(v, k);
                                            T = new Bn().fromBuffer(v);
                                        }
                                        this.k = T;
                                        return this;
                                    }
                                },
                                {
                                    key: "sig2PubKey",
                                    value: function sig2PubKey() {
                                        var recovery = this.sig.recovery;
                                        if (!(recovery === 0 || recovery === 1 || recovery === 2 || recovery === 3)) throw new Error("i must be equal to 0, 1, 2, or 3");
                                        var e = new Bn().fromBuffer(this.hashBuf);
                                        var r = this.sig.r;
                                        var s = this.sig.s;
                                        var isYOdd = recovery & 1;
                                        var isSecondKey = recovery >> 1;
                                        var n = Point1.getN();
                                        var G = Point1.getG();
                                        var x = isSecondKey ? r.add(n) : r;
                                        var R = Point1.fromX(isYOdd, x);
                                        var errm = "";
                                        try {
                                            R.mul(n);
                                        } catch (err) {
                                            errm = err.message;
                                        }
                                        if (errm !== "point mul out of range") throw new Error("nR is not a valid curve point");
                                        var eNeg = e.neg().umod(n);
                                        var rInv = r.invm(n);
                                        var Q = R.mul(s).add(G.mul(eNeg)).mul(rInv);
                                        var pubKey = new PubKey1(Q);
                                        pubKey.compressed = this.sig.compressed;
                                        pubKey.validate();
                                        return pubKey;
                                    }
                                },
                                {
                                    key: "asyncSig2PubKey",
                                    value: function() {
                                        var _asyncSig2PubKey = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee54() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee54$(_context56) {
                                                while(true)switch(_context56.prev = _context56.next){
                                                    case 0:
                                                        _context56.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "sig2PubKey", []);
                                                    case 2:
                                                        workersResult = _context56.sent;
                                                        return _context56.abrupt("return", PubKey1.fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context56.stop();
                                                }
                                            }, _callee54, this);
                                        }));
                                        function asyncSig2PubKey() {
                                            return _asyncSig2PubKey.apply(this, arguments);
                                        }
                                        return asyncSig2PubKey;
                                    }()
                                },
                                {
                                    key: "verifyStr",
                                    value: function verifyStr() {
                                        var enforceLowS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                                        if (!Buffer.isBuffer(this.hashBuf) || this.hashBuf.length !== 32) return "hashBuf must be a 32 byte buffer";
                                        try {
                                            this.keyPair.pubKey.validate();
                                        } catch (e4) {
                                            return "Invalid pubKey: " + e4;
                                        }
                                        var r = this.sig.r;
                                        var s = this.sig.s;
                                        if (!(r.gt(0) && r.lt(Point1.getN())) || !(s.gt(0) && s.lt(Point1.getN()))) return "r and s not in range";
                                        if (enforceLowS) {
                                            if (!this.sig.hasLowS()) return "s is too high and does not satisfy low s contraint - see bip 62";
                                        }
                                        var e = new Bn().fromBuffer(this.hashBuf, this.endian ? {
                                            endian: this.endian
                                        } : undefined);
                                        var n = Point1.getN();
                                        var sinv = s.invm(n);
                                        var u1 = sinv.mul(e).mod(n);
                                        var u2 = sinv.mul(r).mod(n);
                                        var p = Point1.getG().mulAdd(u1, this.keyPair.pubKey.point, u2);
                                        if (p.isInfinity()) return "p is infinity";
                                        if (!(p.getX().mod(n).cmp(r) === 0)) return "Invalid signature";
                                        else return false;
                                    }
                                },
                                {
                                    key: "sign",
                                    value: function sign() {
                                        var hashBuf = this.endian === "little" ? new Br1(this.hashBuf).readReverse() : this.hashBuf;
                                        var privKey = this.keyPair.privKey;
                                        var d = privKey.bn;
                                        if (!hashBuf || !privKey || !d) throw new Error("invalid parameters");
                                        if (!Buffer.isBuffer(hashBuf) || hashBuf.length !== 32) throw new Error("hashBuf must be a 32 byte buffer");
                                        var N = Point1.getN();
                                        var G = Point1.getG();
                                        var e = new Bn().fromBuffer(hashBuf);
                                        var badrs = 0;
                                        var k, Q, r, s;
                                        do {
                                            if (!this.k || badrs > 0) this.deterministicK(badrs);
                                            badrs++;
                                            k = this.k;
                                            Q = G.mul(k);
                                            r = Q.getX().mod(N);
                                            s = k.invm(N).mul(e.add(d.mul(r))).mod(N);
                                        }while (r.cmp(0) <= 0 || s.cmp(0) <= 0);
                                        if (s.gt(new Bn().fromBuffer(Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex")))) s = Point1.getN().sub(s);
                                        this.sig = Sig1.fromObject({
                                            r: r,
                                            s: s,
                                            compressed: this.keyPair.pubKey.compressed
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncSign",
                                    value: function() {
                                        var _asyncSign = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee55() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee55$(_context57) {
                                                while(true)switch(_context57.prev = _context57.next){
                                                    case 0:
                                                        _context57.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "sign", []);
                                                    case 2:
                                                        workersResult = _context57.sent;
                                                        return _context57.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context57.stop();
                                                }
                                            }, _callee55, this);
                                        }));
                                        function asyncSign() {
                                            return _asyncSign.apply(this, arguments);
                                        }
                                        return asyncSign;
                                    }()
                                },
                                {
                                    key: "signRandomK",
                                    value: function signRandomK() {
                                        this.randomK();
                                        return this.sign();
                                    }
                                },
                                {
                                    key: "toString",
                                    value: function toString() {
                                        var obj = {};
                                        if (this.hashBuf) obj.hashBuf = this.hashBuf.toString("hex");
                                        if (this.keyPair) obj.keyPair = this.keyPair.toString();
                                        if (this.sig) obj.sig = this.sig.toString();
                                        if (this.k) obj.k = this.k.toString();
                                        return JSON.stringify(obj);
                                    }
                                },
                                {
                                    key: "verify",
                                    value: function verify() {
                                        var enforceLowS = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                                        if (!this.verifyStr(enforceLowS)) this.verified = true;
                                        else this.verified = false;
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncVerify",
                                    value: function() {
                                        var _asyncVerify = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee56() {
                                            var enforceLowS, workersResult, _args58 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee56$(_context58) {
                                                while(true)switch(_context58.prev = _context58.next){
                                                    case 0:
                                                        enforceLowS = _args58.length > 0 && _args58[0] !== undefined ? _args58[0] : true;
                                                        _context58.next = 3;
                                                        return Workers1.asyncObjectMethod(this, "verify", [
                                                            enforceLowS
                                                        ]);
                                                    case 3:
                                                        workersResult = _context58.sent;
                                                        return _context58.abrupt("return", this.fromFastBuffer(workersResult.resbuf));
                                                    case 5:
                                                    case "end":
                                                        return _context58.stop();
                                                }
                                            }, _callee56, this);
                                        }));
                                        function asyncVerify() {
                                            return _asyncVerify.apply(this, arguments);
                                        }
                                        return asyncVerify;
                                    }()
                                }
                            ], [
                                {
                                    key: "calcrecovery",
                                    value: function calcrecovery(sig, pubKey, hashBuf) {
                                        var ecdsa = new Ecdsa().fromObject({
                                            sig: sig,
                                            keyPair: new KeyPair1().fromObject({
                                                pubKey: pubKey
                                            }),
                                            hashBuf: hashBuf
                                        });
                                        return ecdsa.calcrecovery().sig;
                                    }
                                },
                                {
                                    key: "asyncCalcrecovery",
                                    value: function() {
                                        var _asyncCalcrecovery2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee57(sig, pubKey, hashBuf) {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee57$(_context59) {
                                                while(true)switch(_context59.prev = _context59.next){
                                                    case 0:
                                                        _context59.next = 2;
                                                        return Workers1.asyncClassMethod(Ecdsa, "calcrecovery", [
                                                            sig,
                                                            pubKey,
                                                            hashBuf
                                                        ]);
                                                    case 2:
                                                        workersResult = _context59.sent;
                                                        return _context59.abrupt("return", new Sig1().fromFastBuffer(workersResult.resbuf));
                                                    case 4:
                                                    case "end":
                                                        return _context59.stop();
                                                }
                                            }, _callee57);
                                        }));
                                        function asyncCalcrecovery(_x69, _x70, _x71) {
                                            return _asyncCalcrecovery2.apply(this, arguments);
                                        }
                                        return asyncCalcrecovery;
                                    }()
                                },
                                {
                                    key: "sig2PubKey",
                                    value: function sig2PubKey(sig, hashBuf) {
                                        var ecdsa = new Ecdsa().fromObject({
                                            sig: sig,
                                            hashBuf: hashBuf
                                        });
                                        return ecdsa.sig2PubKey();
                                    }
                                },
                                {
                                    key: "asyncSig2PubKey",
                                    value: function() {
                                        var _asyncSig2PubKey2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee58(sig, hashBuf) {
                                            var ecdsa, pubKey;
                                            return _regeneratorRuntime().wrap(function _callee58$(_context60) {
                                                while(true)switch(_context60.prev = _context60.next){
                                                    case 0:
                                                        ecdsa = new Ecdsa().fromObject({
                                                            sig: sig,
                                                            hashBuf: hashBuf
                                                        });
                                                        _context60.next = 3;
                                                        return ecdsa.asyncSig2PubKey();
                                                    case 3:
                                                        pubKey = _context60.sent;
                                                        return _context60.abrupt("return", pubKey);
                                                    case 5:
                                                    case "end":
                                                        return _context60.stop();
                                                }
                                            }, _callee58);
                                        }));
                                        function asyncSig2PubKey(_x72, _x73) {
                                            return _asyncSig2PubKey2.apply(this, arguments);
                                        }
                                        return asyncSig2PubKey;
                                    }()
                                },
                                {
                                    key: "sign",
                                    value: function sign(hashBuf, keyPair, endian) {
                                        return new Ecdsa().fromObject({
                                            hashBuf: hashBuf,
                                            endian: endian,
                                            keyPair: keyPair
                                        }).sign().sig;
                                    }
                                },
                                {
                                    key: "asyncSign",
                                    value: function() {
                                        var _asyncSign2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee59(hashBuf, keyPair, endian) {
                                            var ecdsa;
                                            return _regeneratorRuntime().wrap(function _callee59$(_context61) {
                                                while(true)switch(_context61.prev = _context61.next){
                                                    case 0:
                                                        ecdsa = new Ecdsa().fromObject({
                                                            hashBuf: hashBuf,
                                                            endian: endian,
                                                            keyPair: keyPair
                                                        });
                                                        _context61.next = 3;
                                                        return ecdsa.asyncSign();
                                                    case 3:
                                                        return _context61.abrupt("return", ecdsa.sig);
                                                    case 4:
                                                    case "end":
                                                        return _context61.stop();
                                                }
                                            }, _callee59);
                                        }));
                                        function asyncSign(_x74, _x75, _x76) {
                                            return _asyncSign2.apply(this, arguments);
                                        }
                                        return asyncSign;
                                    }()
                                },
                                {
                                    key: "verify",
                                    value: function verify(hashBuf, sig, pubKey, endian) {
                                        var enforceLowS = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
                                        return new Ecdsa().fromObject({
                                            hashBuf: hashBuf,
                                            endian: endian,
                                            sig: sig,
                                            keyPair: new KeyPair1().fromObject({
                                                pubKey: pubKey
                                            })
                                        }).verify(enforceLowS).verified;
                                    }
                                },
                                {
                                    key: "asyncVerify",
                                    value: function() {
                                        var _asyncVerify2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee60(hashBuf, sig, pubKey, endian) {
                                            var enforceLowS, ecdsa, _args62 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee60$(_context62) {
                                                while(true)switch(_context62.prev = _context62.next){
                                                    case 0:
                                                        enforceLowS = _args62.length > 4 && _args62[4] !== undefined ? _args62[4] : true;
                                                        ecdsa = new Ecdsa().fromObject({
                                                            hashBuf: hashBuf,
                                                            endian: endian,
                                                            sig: sig,
                                                            keyPair: new KeyPair1().fromObject({
                                                                pubKey: pubKey
                                                            })
                                                        });
                                                        _context62.next = 4;
                                                        return ecdsa.asyncVerify(enforceLowS);
                                                    case 4:
                                                        return _context62.abrupt("return", ecdsa.verified);
                                                    case 5:
                                                    case "end":
                                                        return _context62.stop();
                                                }
                                            }, _callee60);
                                        }));
                                        function asyncVerify(_x77, _x78, _x79, _x80) {
                                            return _asyncVerify2.apply(this, arguments);
                                        }
                                        return asyncVerify;
                                    }()
                                }
                            ]);
                            return Ecdsa;
                        }(Struct1);
                        exports.Ecdsa = Ecdsa1;
                        var Bsm1 = /*#__PURE__*/ function(_Struct14) {
                            _inherits(Bsm, _Struct14);
                            var _super24 = _createSuper(Bsm);
                            function Bsm(messageBuf, keyPair, sig, address, verified) {
                                _classCallCheck2(this, Bsm);
                                return _super24.call(this, {
                                    messageBuf: messageBuf,
                                    keyPair: keyPair,
                                    sig: sig,
                                    address: address,
                                    verified: verified
                                });
                            }
                            _createClass2(Bsm, [
                                {
                                    key: "sign",
                                    value: function sign() {
                                        var hashBuf = Bsm.magicHash(this.messageBuf);
                                        var ecdsa = new Ecdsa1().fromObject({
                                            hashBuf: hashBuf,
                                            keyPair: this.keyPair
                                        });
                                        ecdsa.sign();
                                        ecdsa.calcrecovery();
                                        this.sig = ecdsa.sig;
                                        return this;
                                    }
                                },
                                {
                                    key: "verify",
                                    value: function verify() {
                                        var hashBuf = Bsm.magicHash(this.messageBuf);
                                        var ecdsa = new Ecdsa1();
                                        ecdsa.hashBuf = hashBuf;
                                        ecdsa.sig = this.sig;
                                        ecdsa.keyPair = new KeyPair1();
                                        ecdsa.keyPair.pubKey = ecdsa.sig2PubKey();
                                        if (!ecdsa.verify()) {
                                            this.verified = false;
                                            return this;
                                        }
                                        var address = new Address1().fromPubKey(ecdsa.keyPair.pubKey, undefined, this.sig.compressed);
                                        if (cmp(address.hashBuf, this.address.hashBuf)) this.verified = true;
                                        else this.verified = false;
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "magicHash",
                                    value: function magicHash(messageBuf) {
                                        if (!Buffer.isBuffer(messageBuf)) throw new Error("messageBuf must be a buffer");
                                        var bw = new Bw1();
                                        bw.writeVarIntNum(Bsm.magicBytes.length);
                                        bw.write(Bsm.magicBytes);
                                        bw.writeVarIntNum(messageBuf.length);
                                        bw.write(messageBuf);
                                        var buf = bw.toBuffer();
                                        var hashBuf = Hash1.sha256Sha256(buf);
                                        return hashBuf;
                                    }
                                },
                                {
                                    key: "asyncMagicHash",
                                    value: function() {
                                        var _asyncMagicHash = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee61(messageBuf) {
                                            var args, workersResult;
                                            return _regeneratorRuntime().wrap(function _callee61$(_context63) {
                                                while(true)switch(_context63.prev = _context63.next){
                                                    case 0:
                                                        args = [
                                                            messageBuf
                                                        ];
                                                        _context63.next = 3;
                                                        return Workers1.asyncClassMethod(Bsm, "magicHash", args);
                                                    case 3:
                                                        workersResult = _context63.sent;
                                                        return _context63.abrupt("return", workersResult.resbuf);
                                                    case 5:
                                                    case "end":
                                                        return _context63.stop();
                                                }
                                            }, _callee61);
                                        }));
                                        function asyncMagicHash(_x81) {
                                            return _asyncMagicHash.apply(this, arguments);
                                        }
                                        return asyncMagicHash;
                                    }()
                                },
                                {
                                    key: "sign",
                                    value: function sign(messageBuf, keyPair) {
                                        var m = new Bsm(messageBuf, keyPair);
                                        m.sign();
                                        var sigbuf = m.sig.toCompact();
                                        var sigstr = sigbuf.toString("base64");
                                        return sigstr;
                                    }
                                },
                                {
                                    key: "asyncSign",
                                    value: function() {
                                        var _asyncSign3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee62(messageBuf, keyPair) {
                                            var args, workersResult, sigstr;
                                            return _regeneratorRuntime().wrap(function _callee62$(_context64) {
                                                while(true)switch(_context64.prev = _context64.next){
                                                    case 0:
                                                        args = [
                                                            messageBuf,
                                                            keyPair
                                                        ];
                                                        _context64.next = 3;
                                                        return Workers1.asyncClassMethod(Bsm, "sign", args);
                                                    case 3:
                                                        workersResult = _context64.sent;
                                                        sigstr = JSON.parse(workersResult.resbuf.toString());
                                                        return _context64.abrupt("return", sigstr);
                                                    case 6:
                                                    case "end":
                                                        return _context64.stop();
                                                }
                                            }, _callee62);
                                        }));
                                        function asyncSign(_x82, _x83) {
                                            return _asyncSign3.apply(this, arguments);
                                        }
                                        return asyncSign;
                                    }()
                                },
                                {
                                    key: "verify",
                                    value: function verify(messageBuf, sigstr, address) {
                                        var sigbuf = Buffer.from(sigstr, "base64");
                                        var message = new Bsm();
                                        message.messageBuf = messageBuf;
                                        message.sig = new Sig1().fromCompact(sigbuf);
                                        message.address = address;
                                        return message.verify().verified;
                                    }
                                },
                                {
                                    key: "asyncVerify",
                                    value: function() {
                                        var _asyncVerify3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee63(messageBuf, sigstr, address) {
                                            var args, workersResult, res;
                                            return _regeneratorRuntime().wrap(function _callee63$(_context65) {
                                                while(true)switch(_context65.prev = _context65.next){
                                                    case 0:
                                                        args = [
                                                            messageBuf,
                                                            sigstr,
                                                            address
                                                        ];
                                                        _context65.next = 3;
                                                        return Workers1.asyncClassMethod(Bsm, "verify", args);
                                                    case 3:
                                                        workersResult = _context65.sent;
                                                        res = JSON.parse(workersResult.resbuf.toString());
                                                        return _context65.abrupt("return", res);
                                                    case 6:
                                                    case "end":
                                                        return _context65.stop();
                                                }
                                            }, _callee63);
                                        }));
                                        function asyncVerify(_x84, _x85, _x86) {
                                            return _asyncVerify3.apply(this, arguments);
                                        }
                                        return asyncVerify;
                                    }()
                                }
                            ]);
                            return Bsm;
                        }(Struct1);
                        exports.Bsm = Bsm1;
                        Bsm1.magicBytes = Buffer.from("Bitcoin Signed Message:\n");
                        var BlockHeader1 = /*#__PURE__*/ function(_Struct15) {
                            _inherits(BlockHeader, _Struct15);
                            var _super25 = _createSuper(BlockHeader);
                            function BlockHeader(versionBytesNum, prevBlockHashBuf, merkleRootBuf, time, bits, nonce) {
                                _classCallCheck2(this, BlockHeader);
                                return _super25.call(this, {
                                    versionBytesNum: versionBytesNum,
                                    prevBlockHashBuf: prevBlockHashBuf,
                                    merkleRootBuf: merkleRootBuf,
                                    time: time,
                                    bits: bits,
                                    nonce: nonce
                                });
                            }
                            _createClass2(BlockHeader, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromObject({
                                            versionBytesNum: json.versionBytesNum,
                                            prevBlockHashBuf: Buffer.from(json.prevBlockHashBuf, "hex"),
                                            merkleRootBuf: Buffer.from(json.merkleRootBuf, "hex"),
                                            time: json.time,
                                            bits: json.bits,
                                            nonce: json.nonce
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return {
                                            versionBytesNum: this.versionBytesNum,
                                            prevBlockHashBuf: this.prevBlockHashBuf.toString("hex"),
                                            merkleRootBuf: this.merkleRootBuf.toString("hex"),
                                            time: this.time,
                                            bits: this.bits,
                                            nonce: this.nonce
                                        };
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        this.versionBytesNum = br.readUInt32LE();
                                        this.prevBlockHashBuf = br.read(32);
                                        this.merkleRootBuf = br.read(32);
                                        this.time = br.readUInt32LE();
                                        this.bits = br.readUInt32LE();
                                        this.nonce = br.readUInt32LE();
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        bw.writeUInt32LE(this.versionBytesNum);
                                        bw.write(this.prevBlockHashBuf);
                                        bw.write(this.merkleRootBuf);
                                        bw.writeUInt32LE(this.time);
                                        bw.writeUInt32LE(this.bits);
                                        bw.writeUInt32LE(this.nonce);
                                        return bw;
                                    }
                                }
                            ]);
                            return BlockHeader;
                        }(Struct1);
                        exports.BlockHeader = BlockHeader1;
                        var Merkle1 = /*#__PURE__*/ function(_Struct16) {
                            _inherits(Merkle, _Struct16);
                            var _super26 = _createSuper(Merkle);
                            function Merkle(hashBuf, buf, merkle1, merkle2) {
                                _classCallCheck2(this, Merkle);
                                return _super26.call(this, {
                                    hashBuf: hashBuf,
                                    buf: buf,
                                    merkle1: merkle1,
                                    merkle2: merkle2
                                });
                            }
                            _createClass2(Merkle, [
                                {
                                    key: "hash",
                                    value: function hash() {
                                        if (this.hashBuf) return this.hashBuf;
                                        if (this.buf) return Hash1.sha256Sha256(this.buf);
                                        var hashBuf1 = this.merkle1.hash();
                                        var hashBuf2 = this.merkle2.hash();
                                        this.buf = Buffer.concat([
                                            hashBuf1,
                                            hashBuf2
                                        ]);
                                        return Hash1.sha256Sha256(this.buf);
                                    }
                                },
                                {
                                    key: "fromBuffers",
                                    value: function fromBuffers(bufs) {
                                        if (bufs.length < 1) throw new Error("buffers must have a length");
                                        bufs = bufs.slice();
                                        var log = Math.log2(bufs.length);
                                        if (!Number.isInteger(log)) {
                                            var lastval = bufs[bufs.length - 1];
                                            var len = Math.pow(2, Math.ceil(log));
                                            for(var i = bufs.length; i < len; i++)bufs.push(lastval);
                                        }
                                        var bufs1 = bufs.slice(0, bufs.length / 2);
                                        var bufs2 = bufs.slice(bufs.length / 2);
                                        this.fromBufferArrays(bufs1, bufs2);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromBufferArrays",
                                    value: function fromBufferArrays(bufs1, bufs2) {
                                        if (bufs1.length === 1) {
                                            this.merkle1 = new Merkle(undefined, bufs1[0]);
                                            this.merkle2 = new Merkle(undefined, bufs2[0]);
                                            return this;
                                        }
                                        var bufs11 = bufs1.slice(0, bufs1.length / 2);
                                        var bufs12 = bufs1.slice(bufs1.length / 2);
                                        this.merkle1 = new Merkle().fromBufferArrays(bufs11, bufs12);
                                        var bufs21 = bufs2.slice(0, bufs2.length / 2);
                                        var bufs22 = bufs2.slice(bufs2.length / 2);
                                        this.merkle2 = new Merkle().fromBufferArrays(bufs21, bufs22);
                                        return this;
                                    }
                                },
                                {
                                    key: "leavesNum",
                                    value: function leavesNum() {
                                        if (this.merkle1) return this.merkle1.leavesNum() + this.merkle2.leavesNum();
                                        if (this.buf) return 1;
                                        throw new Error("invalid number of leaves");
                                    }
                                }
                            ], [
                                {
                                    key: "fromBuffers",
                                    value: function fromBuffers(bufs) {
                                        return new this().fromBuffers(bufs);
                                    }
                                },
                                {
                                    key: "fromBufferArrays",
                                    value: function fromBufferArrays(bufs1, bufs2) {
                                        return new this().fromBufferArrays(bufs1, bufs2);
                                    }
                                }
                            ]);
                            return Merkle;
                        }(Struct1);
                        var HashCache1 = /*#__PURE__*/ function(_Struct17) {
                            _inherits(HashCache, _Struct17);
                            var _super27 = _createSuper(HashCache);
                            function HashCache(prevoutsHashBuf, sequenceHashBuf, outputsHashBuf) {
                                var _this20;
                                _classCallCheck2(this, HashCache);
                                _this20 = _super27.call(this);
                                _this20.fromObject({
                                    prevoutsHashBuf: prevoutsHashBuf,
                                    sequenceHashBuf: sequenceHashBuf,
                                    outputsHashBuf: outputsHashBuf
                                });
                                return _this20;
                            }
                            _createClass2(HashCache, [
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        return this.fromJSON(JSON.parse(buf.toString()));
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        return Buffer.from(JSON.stringify(this.toJSON()));
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.prevoutsHashBuf = json.prevoutsHashBuf ? Buffer.from(json.prevoutsHashBuf, "hex") : undefined;
                                        this.sequenceHashBuf = json.sequenceHashBuf ? Buffer.from(json.sequenceHashBuf, "hex") : undefined;
                                        this.outputsHashBuf = json.outputsHashBuf ? Buffer.from(json.outputsHashBuf, "hex") : undefined;
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return {
                                            prevoutsHashBuf: this.prevoutsHashBuf ? this.prevoutsHashBuf.toString("hex") : undefined,
                                            sequenceHashBuf: this.sequenceHashBuf ? this.sequenceHashBuf.toString("hex") : undefined,
                                            outputsHashBuf: this.outputsHashBuf ? this.outputsHashBuf.toString("hex") : undefined
                                        };
                                    }
                                }
                            ]);
                            return HashCache;
                        }(Struct1);
                        var VarInt1 = /*#__PURE__*/ function(_Struct18) {
                            _inherits(VarInt, _Struct18);
                            var _super28 = _createSuper(VarInt);
                            function VarInt(buf) {
                                _classCallCheck2(this, VarInt);
                                return _super28.call(this, {
                                    buf: buf
                                });
                            }
                            _createClass2(VarInt, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromObject({
                                            buf: Buffer.from(json, "hex")
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return this.buf.toString("hex");
                                    }
                                },
                                {
                                    key: "fromBuffer",
                                    value: function fromBuffer(buf) {
                                        this.buf = buf;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        this.buf = br.readVarIntBuf();
                                        return this;
                                    }
                                },
                                {
                                    key: "fromBn",
                                    value: function fromBn(bn) {
                                        this.buf = new Bw1().writeVarIntBn(bn).toBuffer();
                                        return this;
                                    }
                                },
                                {
                                    key: "fromNumber",
                                    value: function fromNumber(num) {
                                        this.buf = new Bw1().writeVarIntNum(num).toBuffer();
                                        return this;
                                    }
                                },
                                {
                                    key: "toBuffer",
                                    value: function toBuffer() {
                                        return this.buf;
                                    }
                                },
                                {
                                    key: "toBn",
                                    value: function toBn() {
                                        return new Br1(this.buf).readVarIntBn();
                                    }
                                },
                                {
                                    key: "toNumber",
                                    value: function toNumber() {
                                        return new Br1(this.buf).readVarIntNum();
                                    }
                                }
                            ], [
                                {
                                    key: "fromBn",
                                    value: function fromBn(bn) {
                                        return new this().fromBn(bn);
                                    }
                                },
                                {
                                    key: "fromNumber",
                                    value: function fromNumber(num) {
                                        return new this().fromNumber(num);
                                    }
                                }
                            ]);
                            return VarInt;
                        }(Struct1);
                        exports.VarInt = VarInt1;
                        var TxIn1 = /*#__PURE__*/ function(_Struct19) {
                            _inherits(TxIn, _Struct19);
                            var _super29 = _createSuper(TxIn);
                            function TxIn(txHashBuf, txOutNum, scriptVi, script) {
                                var nSequence = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0xffffffff;
                                _classCallCheck2(this, TxIn);
                                return _super29.call(this, {
                                    txHashBuf: txHashBuf,
                                    txOutNum: txOutNum,
                                    scriptVi: scriptVi,
                                    script: script,
                                    nSequence: nSequence
                                });
                            }
                            _createClass2(TxIn, [
                                {
                                    key: "setScript",
                                    value: function setScript(script) {
                                        this.scriptVi = VarInt1.fromNumber(script.toBuffer().length);
                                        this.script = script;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromProperties",
                                    value: function fromProperties(txHashBuf, txOutNum, script, nSequence) {
                                        this.fromObject({
                                            txHashBuf: txHashBuf,
                                            txOutNum: txOutNum,
                                            nSequence: nSequence
                                        });
                                        this.setScript(script);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromObject({
                                            txHashBuf: typeof json.txHashBuf !== "undefined" ? Buffer.from(json.txHashBuf, "hex") : undefined,
                                            txOutNum: json.txOutNum,
                                            scriptVi: typeof json.scriptVi !== "undefined" ? VarInt1.fromJSON(json.scriptVi) : undefined,
                                            script: typeof json.script !== "undefined" ? Script1.fromJSON(json.script) : undefined,
                                            nSequence: json.nSequence
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return {
                                            txHashBuf: typeof this.txHashBuf !== "undefined" ? this.txHashBuf.toString("hex") : undefined,
                                            txOutNum: this.txOutNum,
                                            scriptVi: typeof this.scriptVi !== "undefined" ? this.scriptVi.toJSON() : undefined,
                                            script: typeof this.script !== "undefined" ? this.script.toJSON() : undefined,
                                            nSequence: this.nSequence
                                        };
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        this.txHashBuf = br.read(32);
                                        this.txOutNum = br.readUInt32LE();
                                        this.scriptVi = VarInt1.fromBuffer(br.readVarIntBuf());
                                        this.script = Script1.fromBuffer(br.read(this.scriptVi.toNumber()));
                                        this.nSequence = br.readUInt32LE();
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        bw.write(this.txHashBuf);
                                        bw.writeUInt32LE(this.txOutNum);
                                        bw.write(this.scriptVi.buf);
                                        bw.write(this.script.toBuffer());
                                        bw.writeUInt32LE(this.nSequence);
                                        return bw;
                                    }
                                },
                                {
                                    key: "fromPubKeyHashTxOut",
                                    value: function fromPubKeyHashTxOut(txHashBuf, txOutNum, txOut, pubKey) {
                                        var script = new Script1();
                                        if (txOut.script.isPubKeyHashOut()) {
                                            script.writeOpCode(OpCode1.OP_0);
                                            if (pubKey) script.writeBuffer(pubKey.toBuffer());
                                            else script.writeOpCode(OpCode1.OP_0);
                                        } else throw new Error("txOut must be of type pubKeyHash");
                                        this.txHashBuf = txHashBuf;
                                        this.txOutNum = txOutNum;
                                        this.setScript(script);
                                        return this;
                                    }
                                },
                                {
                                    key: "hasNullInput",
                                    value: function hasNullInput() {
                                        var hex = this.txHashBuf.toString("hex");
                                        if (hex === "0000000000000000000000000000000000000000000000000000000000000000" && this.txOutNum === 0xffffffff) return true;
                                        return false;
                                    }
                                },
                                {
                                    key: "setNullInput",
                                    value: function setNullInput() {
                                        this.txHashBuf = Buffer.alloc(32);
                                        this.txHashBuf.fill(0);
                                        this.txOutNum = 0xffffffff;
                                    }
                                }
                            ], [
                                {
                                    key: "fromProperties",
                                    value: function fromProperties(txHashBuf, txOutNum, script, nSequence) {
                                        return new this().fromProperties(txHashBuf, txOutNum, script, nSequence);
                                    }
                                }
                            ]);
                            return TxIn;
                        }(Struct1);
                        exports.TxIn = TxIn1;
                        TxIn1.LOCKTIME_VERIFY_SEQUENCE = 1;
                        TxIn1.SEQUENCE_FINAL = 0xffffffff;
                        TxIn1.SEQUENCE_LOCKTIME_DISABLE_FLAG = -2147483648;
                        TxIn1.SEQUENCE_LOCKTIME_TYPE_FLAG = 4194304;
                        TxIn1.SEQUENCE_LOCKTIME_MASK = 0x0000ffff;
                        TxIn1.SEQUENCE_LOCKTIME_GRANULARITY = 9;
                        var TxOut1 = /*#__PURE__*/ function(_Struct20) {
                            _inherits(TxOut, _Struct20);
                            var _super30 = _createSuper(TxOut);
                            function TxOut(valueBn, scriptVi, script) {
                                _classCallCheck2(this, TxOut);
                                return _super30.call(this, {
                                    valueBn: valueBn,
                                    scriptVi: scriptVi,
                                    script: script
                                });
                            }
                            _createClass2(TxOut, [
                                {
                                    key: "setScript",
                                    value: function setScript(script) {
                                        this.scriptVi = VarInt1.fromNumber(script.toBuffer().length);
                                        this.script = script;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromProperties",
                                    value: function fromProperties(valueBn, script) {
                                        this.fromObject({
                                            valueBn: valueBn
                                        });
                                        this.setScript(script);
                                        return this;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromObject({
                                            valueBn: new Bn().fromJSON(json.valueBn),
                                            scriptVi: new VarInt1().fromJSON(json.scriptVi),
                                            script: new Script1().fromJSON(json.script)
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        return {
                                            valueBn: this.valueBn.toJSON(),
                                            scriptVi: this.scriptVi.toJSON(),
                                            script: this.script.toJSON()
                                        };
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        this.valueBn = br.readUInt64LEBn();
                                        this.scriptVi = VarInt1.fromNumber(br.readVarIntNum());
                                        this.script = new Script1().fromBuffer(br.read(this.scriptVi.toNumber()));
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        bw.writeUInt64LEBn(this.valueBn);
                                        bw.write(this.scriptVi.buf);
                                        bw.write(this.script.toBuffer());
                                        return bw;
                                    }
                                }
                            ], [
                                {
                                    key: "fromProperties",
                                    value: function fromProperties(valueBn, script) {
                                        return new this().fromProperties(valueBn, script);
                                    }
                                }
                            ]);
                            return TxOut;
                        }(Struct1);
                        exports.TxOut = TxOut1;
                        var Tx1 = /*#__PURE__*/ function(_Struct21) {
                            _inherits(Tx, _Struct21);
                            var _super31 = _createSuper(Tx);
                            function Tx() {
                                var versionBytesNum = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                                var txInsVi = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VarInt1.fromNumber(0);
                                var txIns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                                var txOutsVi = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : VarInt1.fromNumber(0);
                                var txOuts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
                                var nLockTime = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                                _classCallCheck2(this, Tx);
                                return _super31.call(this, {
                                    versionBytesNum: versionBytesNum,
                                    txInsVi: txInsVi,
                                    txIns: txIns,
                                    txOutsVi: txOutsVi,
                                    txOuts: txOuts,
                                    nLockTime: nLockTime
                                });
                            }
                            _createClass2(Tx, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        var txIns = [];
                                        json.txIns.forEach(function(txIn) {
                                            txIns.push(new TxIn1().fromJSON(txIn));
                                        });
                                        var txOuts = [];
                                        json.txOuts.forEach(function(txOut) {
                                            txOuts.push(new TxOut1().fromJSON(txOut));
                                        });
                                        this.fromObject({
                                            versionBytesNum: json.versionBytesNum,
                                            txInsVi: new VarInt1().fromJSON(json.txInsVi),
                                            txIns: txIns,
                                            txOutsVi: new VarInt1().fromJSON(json.txOutsVi),
                                            txOuts: txOuts,
                                            nLockTime: json.nLockTime
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var txIns = [];
                                        this.txIns.forEach(function(txIn) {
                                            txIns.push(txIn.toJSON());
                                        });
                                        var txOuts = [];
                                        this.txOuts.forEach(function(txOut) {
                                            txOuts.push(txOut.toJSON());
                                        });
                                        return {
                                            versionBytesNum: this.versionBytesNum,
                                            txInsVi: this.txInsVi.toJSON(),
                                            txIns: txIns,
                                            txOutsVi: this.txOutsVi.toJSON(),
                                            txOuts: txOuts,
                                            nLockTime: this.nLockTime
                                        };
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        this.versionBytesNum = br.readUInt32LE();
                                        this.txInsVi = new VarInt1(br.readVarIntBuf());
                                        var txInsNum = this.txInsVi.toNumber();
                                        this.txIns = [];
                                        for(var i = 0; i < txInsNum; i++)this.txIns.push(new TxIn1().fromBr(br));
                                        this.txOutsVi = new VarInt1(br.readVarIntBuf());
                                        var txOutsNum = this.txOutsVi.toNumber();
                                        this.txOuts = [];
                                        for(var _i10 = 0; _i10 < txOutsNum; _i10++)this.txOuts.push(new TxOut1().fromBr(br));
                                        this.nLockTime = br.readUInt32LE();
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        bw.writeUInt32LE(this.versionBytesNum);
                                        bw.write(this.txInsVi.buf);
                                        for(var i = 0; i < this.txIns.length; i++)this.txIns[i].toBw(bw);
                                        bw.write(this.txOutsVi.buf);
                                        for(var _i11 = 0; _i11 < this.txOuts.length; _i11++)this.txOuts[_i11].toBw(bw);
                                        bw.writeUInt32LE(this.nLockTime);
                                        return bw;
                                    }
                                },
                                {
                                    key: "hashPrevouts",
                                    value: function hashPrevouts() {
                                        var bw = new Bw1();
                                        for(var i in this.txIns){
                                            var txIn = this.txIns[i];
                                            bw.write(txIn.txHashBuf);
                                            bw.writeUInt32LE(txIn.txOutNum);
                                        }
                                        return Hash1.sha256Sha256(bw.toBuffer());
                                    }
                                },
                                {
                                    key: "hashSequence",
                                    value: function hashSequence() {
                                        var bw = new Bw1();
                                        for(var i in this.txIns){
                                            var txIn = this.txIns[i];
                                            bw.writeUInt32LE(txIn.nSequence);
                                        }
                                        return Hash1.sha256Sha256(bw.toBuffer());
                                    }
                                },
                                {
                                    key: "hashOutputs",
                                    value: function hashOutputs() {
                                        var bw = new Bw1();
                                        for(var i in this.txOuts){
                                            var txOut = this.txOuts[i];
                                            bw.write(txOut.toBuffer());
                                        }
                                        return Hash1.sha256Sha256(bw.toBuffer());
                                    }
                                },
                                {
                                    key: "sighash",
                                    value: function sighash(nHashType, nIn, subScript, valueBn) {
                                        var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                                        var hashCache = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new HashCache1();
                                        if (nHashType & Sig1.SIGHASH_FORKID && flags & Tx.SCRIPT_ENABLE_SIGHASH_FORKID) {
                                            var hashPrevouts = Buffer.alloc(32, 0);
                                            var hashSequence = Buffer.alloc(32, 0);
                                            var hashOutputs = Buffer.alloc(32, 0);
                                            if (!(nHashType & Sig1.SIGHASH_ANYONECANPAY)) hashPrevouts = hashCache.prevoutsHashBuf ? hashCache.prevoutsHashBuf : hashCache.prevoutsHashBuf = this.hashPrevouts();
                                            if (!(nHashType & Sig1.SIGHASH_ANYONECANPAY) && (nHashType & 0x1f) !== Sig1.SIGHASH_SINGLE && (nHashType & 0x1f) !== Sig1.SIGHASH_NONE) hashSequence = hashCache.sequenceHashBuf ? hashCache.sequenceHashBuf : hashCache.sequenceHashBuf = this.hashSequence();
                                            if ((nHashType & 0x1f) !== Sig1.SIGHASH_SINGLE && (nHashType & 0x1f) !== Sig1.SIGHASH_NONE) hashOutputs = hashCache.outputsHashBuf ? hashCache.outputsHashBuf : hashCache.outputsHashBuf = this.hashOutputs();
                                            else if ((nHashType & 0x1f) === Sig1.SIGHASH_SINGLE && nIn < this.txOuts.length) hashOutputs = Hash1.sha256Sha256(this.txOuts[nIn].toBuffer());
                                            var bw = new Bw1();
                                            bw.writeUInt32LE(this.versionBytesNum);
                                            bw.write(hashPrevouts);
                                            bw.write(hashSequence);
                                            bw.write(this.txIns[nIn].txHashBuf);
                                            bw.writeUInt32LE(this.txIns[nIn].txOutNum);
                                            bw.writeVarIntNum(subScript.toBuffer().length);
                                            bw.write(subScript.toBuffer());
                                            bw.writeUInt64LEBn(valueBn);
                                            bw.writeUInt32LE(this.txIns[nIn].nSequence);
                                            bw.write(hashOutputs);
                                            bw.writeUInt32LE(this.nLockTime);
                                            bw.writeUInt32LE(nHashType >>> 0);
                                            return new Br1(Hash1.sha256Sha256(bw.toBuffer())).readReverse();
                                        }
                                        var txcopy = this.cloneByBuffer();
                                        subScript = new Script1().fromBuffer(subScript.toBuffer());
                                        subScript.removeCodeseparators();
                                        for(var i = 0; i < txcopy.txIns.length; i++)txcopy.txIns[i] = TxIn1.fromBuffer(txcopy.txIns[i].toBuffer()).setScript(new Script1());
                                        txcopy.txIns[nIn] = TxIn1.fromBuffer(txcopy.txIns[nIn].toBuffer()).setScript(subScript);
                                        if ((nHashType & 31) === Sig1.SIGHASH_NONE) {
                                            txcopy.txOuts.length = 0;
                                            txcopy.txOutsVi = VarInt1.fromNumber(0);
                                            for(var _i12 = 0; _i12 < txcopy.txIns.length; _i12++)if (_i12 !== nIn) txcopy.txIns[_i12].nSequence = 0;
                                        } else if ((nHashType & 31) === Sig1.SIGHASH_SINGLE) {
                                            if (nIn > txcopy.txOuts.length - 1) return Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex");
                                            txcopy.txOuts.length = nIn + 1;
                                            txcopy.txOutsVi = VarInt1.fromNumber(nIn + 1);
                                            for(var _i13 = 0; _i13 < txcopy.txOuts.length; _i13++)if (_i13 < nIn) txcopy.txOuts[_i13] = TxOut1.fromProperties(new Bn().fromBuffer(Buffer.from("ffffffffffffffff", "hex")), new Script1());
                                            for(var _i14 = 0; _i14 < txcopy.txIns.length; _i14++)if (_i14 !== nIn) txcopy.txIns[_i14].nSequence = 0;
                                        }
                                        if (nHashType & Sig1.SIGHASH_ANYONECANPAY) {
                                            txcopy.txIns[0] = txcopy.txIns[nIn];
                                            txcopy.txIns.length = 1;
                                            txcopy.txInsVi = VarInt1.fromNumber(1);
                                        }
                                        var buf = new Bw1().write(txcopy.toBuffer()).writeInt32LE(nHashType).toBuffer();
                                        return new Br1(Hash1.sha256Sha256(buf)).readReverse();
                                    }
                                },
                                {
                                    key: "asyncSighash",
                                    value: function() {
                                        var _asyncSighash = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee64(nHashType, nIn, subScript, valueBn) {
                                            var flags, hashCache, workersResult, _args66 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee64$(_context66) {
                                                while(true)switch(_context66.prev = _context66.next){
                                                    case 0:
                                                        flags = _args66.length > 4 && _args66[4] !== undefined ? _args66[4] : 0;
                                                        hashCache = _args66.length > 5 && _args66[5] !== undefined ? _args66[5] : {};
                                                        _context66.next = 4;
                                                        return Workers1.asyncObjectMethod(this, "sighash", [
                                                            nHashType,
                                                            nIn,
                                                            subScript,
                                                            valueBn,
                                                            flags,
                                                            hashCache
                                                        ]);
                                                    case 4:
                                                        workersResult = _context66.sent;
                                                        return _context66.abrupt("return", workersResult.resbuf);
                                                    case 6:
                                                    case "end":
                                                        return _context66.stop();
                                                }
                                            }, _callee64, this);
                                        }));
                                        function asyncSighash(_x87, _x88, _x89, _x90) {
                                            return _asyncSighash.apply(this, arguments);
                                        }
                                        return asyncSighash;
                                    }()
                                },
                                {
                                    key: "sign",
                                    value: function sign(keyPair) {
                                        var nHashType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                        var nIn = arguments.length > 2 ? arguments[2] : undefined;
                                        var subScript = arguments.length > 3 ? arguments[3] : undefined;
                                        var valueBn = arguments.length > 4 ? arguments[4] : undefined;
                                        var flags = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Tx.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        var hashCache = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
                                        var hashBuf = this.sighash(nHashType, nIn, subScript, valueBn, flags, hashCache);
                                        var sig = Ecdsa1.sign(hashBuf, keyPair, "little").fromObject({
                                            nHashType: nHashType
                                        });
                                        return sig;
                                    }
                                },
                                {
                                    key: "asyncSign",
                                    value: function() {
                                        var _asyncSign4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee65(keyPair) {
                                            var nHashType, nIn, subScript, valueBn, flags, hashCache, workersResult, _args67 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee65$(_context67) {
                                                while(true)switch(_context67.prev = _context67.next){
                                                    case 0:
                                                        nHashType = _args67.length > 1 && _args67[1] !== undefined ? _args67[1] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                                        nIn = _args67.length > 2 ? _args67[2] : undefined;
                                                        subScript = _args67.length > 3 ? _args67[3] : undefined;
                                                        valueBn = _args67.length > 4 ? _args67[4] : undefined;
                                                        flags = _args67.length > 5 && _args67[5] !== undefined ? _args67[5] : Tx.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                        hashCache = _args67.length > 6 && _args67[6] !== undefined ? _args67[6] : {};
                                                        _context67.next = 8;
                                                        return Workers1.asyncObjectMethod(this, "sign", [
                                                            keyPair,
                                                            nHashType,
                                                            nIn,
                                                            subScript,
                                                            valueBn,
                                                            flags,
                                                            hashCache
                                                        ]);
                                                    case 8:
                                                        workersResult = _context67.sent;
                                                        return _context67.abrupt("return", new Sig1().fromFastBuffer(workersResult.resbuf));
                                                    case 10:
                                                    case "end":
                                                        return _context67.stop();
                                                }
                                            }, _callee65, this);
                                        }));
                                        function asyncSign(_x91) {
                                            return _asyncSign4.apply(this, arguments);
                                        }
                                        return asyncSign;
                                    }()
                                },
                                {
                                    key: "verify",
                                    value: function verify(sig, pubKey, nIn, subScript) {
                                        var enforceLowS = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
                                        var valueBn = arguments.length > 5 ? arguments[5] : undefined;
                                        var flags = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : Tx.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        var hashCache = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
                                        var hashBuf = this.sighash(sig.nHashType, nIn, subScript, valueBn, flags, hashCache);
                                        return Ecdsa1.verify(hashBuf, sig, pubKey, "little", enforceLowS);
                                    }
                                },
                                {
                                    key: "asyncVerify",
                                    value: function() {
                                        var _asyncVerify4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee66(sig, pubKey, nIn, subScript) {
                                            var enforceLowS, valueBn, flags, hashCache, workersResult, _args68 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee66$(_context68) {
                                                while(true)switch(_context68.prev = _context68.next){
                                                    case 0:
                                                        enforceLowS = _args68.length > 4 && _args68[4] !== undefined ? _args68[4] : false;
                                                        valueBn = _args68.length > 5 ? _args68[5] : undefined;
                                                        flags = _args68.length > 6 && _args68[6] !== undefined ? _args68[6] : Tx.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                        hashCache = _args68.length > 7 && _args68[7] !== undefined ? _args68[7] : {};
                                                        _context68.next = 6;
                                                        return Workers1.asyncObjectMethod(this, "verify", [
                                                            sig,
                                                            pubKey,
                                                            nIn,
                                                            subScript,
                                                            enforceLowS,
                                                            valueBn,
                                                            flags,
                                                            hashCache
                                                        ]);
                                                    case 6:
                                                        workersResult = _context68.sent;
                                                        return _context68.abrupt("return", JSON.parse(workersResult.resbuf.toString()));
                                                    case 8:
                                                    case "end":
                                                        return _context68.stop();
                                                }
                                            }, _callee66, this);
                                        }));
                                        function asyncVerify(_x92, _x93, _x94, _x95) {
                                            return _asyncVerify4.apply(this, arguments);
                                        }
                                        return asyncVerify;
                                    }()
                                },
                                {
                                    key: "hash",
                                    value: function hash() {
                                        return Hash1.sha256Sha256(this.toBuffer());
                                    }
                                },
                                {
                                    key: "asyncHash",
                                    value: function() {
                                        var _asyncHash = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee67() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee67$(_context69) {
                                                while(true)switch(_context69.prev = _context69.next){
                                                    case 0:
                                                        _context69.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "hash", []);
                                                    case 2:
                                                        workersResult = _context69.sent;
                                                        return _context69.abrupt("return", workersResult.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context69.stop();
                                                }
                                            }, _callee67, this);
                                        }));
                                        function asyncHash() {
                                            return _asyncHash.apply(this, arguments);
                                        }
                                        return asyncHash;
                                    }()
                                },
                                {
                                    key: "id",
                                    value: function id() {
                                        return new Br1(this.hash()).readReverse().toString("hex");
                                    }
                                },
                                {
                                    key: "asyncId",
                                    value: function() {
                                        var _asyncId = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee68() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee68$(_context70) {
                                                while(true)switch(_context70.prev = _context70.next){
                                                    case 0:
                                                        _context70.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "id", []);
                                                    case 2:
                                                        workersResult = _context70.sent;
                                                        return _context70.abrupt("return", JSON.parse(workersResult.resbuf.toString()));
                                                    case 4:
                                                    case "end":
                                                        return _context70.stop();
                                                }
                                            }, _callee68, this);
                                        }));
                                        function asyncId() {
                                            return _asyncId.apply(this, arguments);
                                        }
                                        return asyncId;
                                    }()
                                },
                                {
                                    key: "addTxIn",
                                    value: function addTxIn(txHashBuf, txOutNum, script, nSequence) {
                                        var txIn;
                                        if (txHashBuf instanceof TxIn1) txIn = txHashBuf;
                                        else txIn = new TxIn1().fromObject({
                                            txHashBuf: txHashBuf,
                                            txOutNum: txOutNum,
                                            nSequence: nSequence
                                        }).setScript(script);
                                        this.txIns.push(txIn);
                                        this.txInsVi = VarInt1.fromNumber(this.txInsVi.toNumber() + 1);
                                        return this;
                                    }
                                },
                                {
                                    key: "addTxOut",
                                    value: function addTxOut(valueBn, script) {
                                        var txOut;
                                        if (valueBn instanceof TxOut1) txOut = valueBn;
                                        else txOut = new TxOut1().fromObject({
                                            valueBn: valueBn
                                        }).setScript(script);
                                        this.txOuts.push(txOut);
                                        this.txOutsVi = VarInt1.fromNumber(this.txOutsVi.toNumber() + 1);
                                        return this;
                                    }
                                },
                                {
                                    key: "isCoinbase",
                                    value: function isCoinbase() {
                                        return this.txIns.length === 1 && this.txIns[0].hasNullInput();
                                    }
                                },
                                {
                                    key: "sort",
                                    value: function sort() {
                                        this.txIns.sort(function(first, second) {
                                            return new Br1(first.txHashBuf).readReverse().compare(new Br1(second.txHashBuf).readReverse()) || first.txOutNum - second.txOutNum;
                                        });
                                        this.txOuts.sort(function(first, second) {
                                            return first.valueBn.sub(second.valueBn).toNumber() || first.script.toBuffer().compare(second.script.toBuffer());
                                        });
                                        return this;
                                    }
                                }
                            ]);
                            return Tx;
                        }(Struct1);
                        exports.Tx = Tx1;
                        Tx1.MAX_MONEY = 21000000 * 1e8;
                        Tx1.SCRIPT_ENABLE_SIGHASH_FORKID = 65536;
                        var Block1 = /*#__PURE__*/ function(_Struct22) {
                            _inherits(Block, _Struct22);
                            var _super32 = _createSuper(Block);
                            function Block(blockHeader, txsVi, txs) {
                                _classCallCheck2(this, Block);
                                return _super32.call(this, {
                                    blockHeader: blockHeader,
                                    txsVi: txsVi,
                                    txs: txs
                                });
                            }
                            _createClass2(Block, [
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        var txs = [];
                                        json.txs.forEach(function(tx) {
                                            txs.push(new Tx1().fromJSON(tx));
                                        });
                                        this.fromObject({
                                            blockHeader: new BlockHeader1().fromJSON(json.blockHeader),
                                            txsVi: new VarInt1().fromJSON(json.txsVi),
                                            txs: txs
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var txs = [];
                                        this.txs.forEach(function(tx) {
                                            txs.push(tx.toJSON());
                                        });
                                        return {
                                            blockHeader: this.blockHeader.toJSON(),
                                            txsVi: this.txsVi.toJSON(),
                                            txs: txs
                                        };
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        this.blockHeader = new BlockHeader1().fromBr(br);
                                        this.txsVi = new VarInt1(br.readVarIntBuf());
                                        var txsNum = this.txsVi.toNumber();
                                        this.txs = [];
                                        for(var i = 0; i < txsNum; i++)this.txs.push(new Tx1().fromBr(br));
                                        return this;
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        bw.write(this.blockHeader.toBuffer());
                                        bw.write(this.txsVi.buf);
                                        var txsNum = this.txsVi.toNumber();
                                        for(var i = 0; i < txsNum; i++)this.txs[i].toBw(bw);
                                        return bw;
                                    }
                                },
                                {
                                    key: "hash",
                                    value: function hash() {
                                        return Hash1.sha256Sha256(this.blockHeader.toBuffer());
                                    }
                                },
                                {
                                    key: "asyncHash",
                                    value: function() {
                                        var _asyncHash2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee69() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee69$(_context71) {
                                                while(true)switch(_context71.prev = _context71.next){
                                                    case 0:
                                                        _context71.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "hash", []);
                                                    case 2:
                                                        workersResult = _context71.sent;
                                                        return _context71.abrupt("return", workersResult.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context71.stop();
                                                }
                                            }, _callee69, this);
                                        }));
                                        function asyncHash() {
                                            return _asyncHash2.apply(this, arguments);
                                        }
                                        return asyncHash;
                                    }()
                                },
                                {
                                    key: "id",
                                    value: function id() {
                                        return new Br1(this.hash()).readReverse().toString("hex");
                                    }
                                },
                                {
                                    key: "asyncId",
                                    value: function() {
                                        var _asyncId2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee70() {
                                            var workersResult;
                                            return _regeneratorRuntime().wrap(function _callee70$(_context72) {
                                                while(true)switch(_context72.prev = _context72.next){
                                                    case 0:
                                                        _context72.next = 2;
                                                        return Workers1.asyncObjectMethod(this, "id", []);
                                                    case 2:
                                                        workersResult = _context72.sent;
                                                        return _context72.abrupt("return", JSON.parse(workersResult.resbuf.toString()));
                                                    case 4:
                                                    case "end":
                                                        return _context72.stop();
                                                }
                                            }, _callee70, this);
                                        }));
                                        function asyncId() {
                                            return _asyncId2.apply(this, arguments);
                                        }
                                        return asyncId;
                                    }()
                                },
                                {
                                    key: "verifyMerkleRoot",
                                    value: function verifyMerkleRoot() {
                                        var txsbufs = this.txs.map(function(tx) {
                                            return tx.toBuffer();
                                        });
                                        var merkleRootBuf = Merkle1.fromBuffers(txsbufs).hash();
                                        return Buffer.compare(merkleRootBuf, this.blockHeader.merkleRootBuf);
                                    }
                                }
                            ], [
                                {
                                    key: "iterateTxs",
                                    value: function iterateTxs(blockBuf) {
                                        var br = new Br1(blockBuf);
                                        var blockHeader = new BlockHeader1().fromBr(br);
                                        var txsVi = new VarInt1(br.readVarIntBuf());
                                        var txsNum = txsVi.toNumber();
                                        return _defineProperty2({
                                            blockHeader: blockHeader,
                                            txsVi: txsVi,
                                            txsNum: txsNum
                                        }, Symbol.iterator, /*#__PURE__*/ _regeneratorRuntime().mark(function _callee71() {
                                            var i;
                                            return _regeneratorRuntime().wrap(function _callee71$(_context73) {
                                                while(true)switch(_context73.prev = _context73.next){
                                                    case 0:
                                                        i = 0;
                                                    case 1:
                                                        if (!(i < txsNum)) {
                                                            _context73.next = 7;
                                                            break;
                                                        }
                                                        _context73.next = 4;
                                                        return new Tx1().fromBr(br);
                                                    case 4:
                                                        i++;
                                                        _context73.next = 1;
                                                        break;
                                                    case 7:
                                                    case "end":
                                                        return _context73.stop();
                                                }
                                            }, _callee71);
                                        }));
                                    }
                                }
                            ]);
                            return Block;
                        }(Struct1);
                        exports.Block = Block1;
                        Block1.MAX_BLOCK_SIZE = 1000000;
                        var Interp1 = /*#__PURE__*/ function(_Struct23) {
                            _inherits(Interp, _Struct23);
                            var _super33 = _createSuper(Interp);
                            function Interp(script, tx, nIn) {
                                var stack = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
                                var altStack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
                                var pc = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                                var pBeginCodeHash = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                                var nOpCount = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                                var ifStack = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];
                                var errStr = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : "";
                                var flags = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : Interp.defaultFlags;
                                var valueBn = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : new Bn(0);
                                _classCallCheck2(this, Interp);
                                return _super33.call(this, {
                                    script: script,
                                    tx: tx,
                                    nIn: nIn,
                                    stack: stack,
                                    altStack: altStack,
                                    pc: pc,
                                    pBeginCodeHash: pBeginCodeHash,
                                    nOpCount: nOpCount,
                                    ifStack: ifStack,
                                    errStr: errStr,
                                    flags: flags,
                                    valueBn: valueBn
                                });
                            }
                            _createClass2(Interp, [
                                {
                                    key: "initialize",
                                    value: function initialize() {
                                        this.script = new Script1();
                                        this.stack = [];
                                        this.altStack = [];
                                        this.pc = 0;
                                        this.pBeginCodeHash = 0;
                                        this.nOpCount = 0;
                                        this.ifStack = [];
                                        this.errStr = "";
                                        this.flags = Interp.defaultFlags;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.fromJSONNoTx(json);
                                        this.tx = json.tx ? new Tx1().fromJSON(json.tx) : undefined;
                                        return this;
                                    }
                                },
                                {
                                    key: "fromJSONNoTx",
                                    value: function fromJSONNoTx(json) {
                                        this.fromObject({
                                            script: json.script !== undefined ? new Script1().fromJSON(json.script) : undefined,
                                            nIn: json.nIn
                                        });
                                        this.stack = [];
                                        json.stack.forEach((function(hex) {
                                            this.stack.push(Buffer.from(hex, "hex"));
                                        }).bind(this));
                                        this.altStack = [];
                                        json.altStack.forEach((function(hex) {
                                            this.altStack.push(Buffer.from(hex, "hex"));
                                        }).bind(this));
                                        this.fromObject({
                                            pc: json.pc,
                                            pBeginCodeHash: json.pBeginCodeHash,
                                            nOpCount: json.nOpCount,
                                            ifStack: json.ifStack,
                                            errStr: json.errStr,
                                            flags: json.flags
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "fromBr",
                                    value: function fromBr(br) {
                                        var jsonNoTxBufLEn = br.readVarIntNum();
                                        var jsonNoTxBuf = br.read(jsonNoTxBufLEn);
                                        this.fromJSONNoTx(JSON.parse(jsonNoTxBuf.toString()));
                                        var txbuflen = br.readVarIntNum();
                                        if (txbuflen > 0) {
                                            var txbuf = br.read(txbuflen);
                                            this.tx = new Tx1().fromFastBuffer(txbuf);
                                        }
                                        return this;
                                    }
                                },
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var json = this.toJSONNoTx();
                                        json.tx = this.tx ? this.tx.toJSON() : undefined;
                                        return json;
                                    }
                                },
                                {
                                    key: "toJSONNoTx",
                                    value: function toJSONNoTx() {
                                        var stack = [];
                                        this.stack.forEach(function(buf) {
                                            stack.push(buf.toString("hex"));
                                        });
                                        var altStack = [];
                                        this.altStack.forEach(function(buf) {
                                            altStack.push(buf.toString("hex"));
                                        });
                                        return {
                                            script: this.script ? this.script.toJSON() : undefined,
                                            nIn: this.nIn,
                                            stack: stack,
                                            altStack: altStack,
                                            pc: this.pc,
                                            pBeginCodeHash: this.pBeginCodeHash,
                                            nOpCount: this.nOpCount,
                                            ifStack: this.ifStack,
                                            errStr: this.errStr,
                                            flags: this.flags
                                        };
                                    }
                                },
                                {
                                    key: "toBw",
                                    value: function toBw(bw) {
                                        if (!bw) bw = new Bw1();
                                        var jsonNoTxBuf = Buffer.from(JSON.stringify(this.toJSONNoTx()));
                                        bw.writeVarIntNum(jsonNoTxBuf.length);
                                        bw.write(jsonNoTxBuf);
                                        if (this.tx) {
                                            var txbuf = this.tx.toFastBuffer();
                                            bw.writeVarIntNum(txbuf.length);
                                            bw.write(txbuf);
                                        } else bw.writeVarIntNum(0);
                                        return bw;
                                    }
                                },
                                {
                                    key: "checkSigEncoding",
                                    value: function checkSigEncoding(buf) {
                                        if (buf.length === 0) return true;
                                        if ((this.flags & (Interp.SCRIPT_VERIFY_DERSIG | Interp.SCRIPT_VERIFY_LOW_S | Interp.SCRIPT_VERIFY_STRICTENC)) !== 0 && !Sig1.IsTxDer(buf)) {
                                            this.errStr = "SCRIPT_ERR_SIG_DER";
                                            return false;
                                        } else if ((this.flags & Interp.SCRIPT_VERIFY_LOW_S) !== 0) {
                                            var sig = new Sig1().fromTxFormat(buf);
                                            if (!sig.hasLowS()) {
                                                this.errStr = "SCRIPT_ERR_SIG_DER";
                                                return false;
                                            }
                                        } else if ((this.flags & Interp.SCRIPT_VERIFY_STRICTENC) !== 0) {
                                            var _sig = new Sig1().fromTxFormat(buf);
                                            if (!_sig.hasDefinedHashType()) {
                                                this.errStr = "SCRIPT_ERR_SIG_HASHTYPE";
                                                return false;
                                            }
                                        }
                                        return true;
                                    }
                                },
                                {
                                    key: "checkPubKeyEncoding",
                                    value: function checkPubKeyEncoding(buf) {
                                        if ((this.flags & Interp.SCRIPT_VERIFY_STRICTENC) !== 0 && !PubKey1.isCompressedOrUncompressed(buf)) {
                                            this.errStr = "SCRIPT_ERR_PUBKEYTYPE";
                                            return false;
                                        }
                                        return true;
                                    }
                                },
                                {
                                    key: "checkLockTime",
                                    value: function checkLockTime(nLockTime) {
                                        if (!(this.tx.nLockTime < Interp.LOCKTIME_THRESHOLD && nLockTime < Interp.LOCKTIME_THRESHOLD || this.tx.nLockTime >= Interp.LOCKTIME_THRESHOLD && nLockTime >= Interp.LOCKTIME_THRESHOLD)) return false;
                                        if (nLockTime > this.tx.nLockTime) return false;
                                        if (TxIn1.SEQUENCE_FINAL === this.tx.txIns[this.nIn].nSequence) return false;
                                        return true;
                                    }
                                },
                                {
                                    key: "checkSequence",
                                    value: function checkSequence(nSequence) {
                                        var txToSequence = this.tx.txIns[this.nIn].nSequence;
                                        if (this.tx.versionBytesNum < 2) return false;
                                        if (txToSequence & TxIn1.SEQUENCE_LOCKTIME_DISABLE_FLAG) return false;
                                        var nLockTimeMask = TxIn1.SEQUENCE_LOCKTIME_TYPE_FLAG | TxIn1.SEQUENCE_LOCKTIME_MASK;
                                        var txToSequenceMasked = txToSequence & nLockTimeMask;
                                        var nSequenceMasked = nSequence & nLockTimeMask;
                                        if (!(txToSequenceMasked < TxIn1.SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked < TxIn1.SEQUENCE_LOCKTIME_TYPE_FLAG || txToSequenceMasked >= TxIn1.SEQUENCE_LOCKTIME_TYPE_FLAG && nSequenceMasked >= TxIn1.SEQUENCE_LOCKTIME_TYPE_FLAG)) return false;
                                        if (nSequenceMasked > txToSequenceMasked) return false;
                                        return true;
                                    }
                                },
                                {
                                    key: "eval",
                                    value: /*#__PURE__*/ _regeneratorRuntime().mark(function _eval() {
                                        var fSuccess;
                                        return _regeneratorRuntime().wrap(function _eval$(_context74) {
                                            while(true)switch(_context74.prev = _context74.next){
                                                case 0:
                                                    if (!(this.script.toBuffer().length > 10000)) {
                                                        _context74.next = 4;
                                                        break;
                                                    }
                                                    this.errStr = "SCRIPT_ERR_SCRIPT_SIZE";
                                                    _context74.next = 4;
                                                    return false;
                                                case 4:
                                                    _context74.prev = 4;
                                                case 5:
                                                    if (!(this.pc < this.script.chunks.length)) {
                                                        _context74.next = 16;
                                                        break;
                                                    }
                                                    fSuccess = this.step();
                                                    if (fSuccess) {
                                                        _context74.next = 12;
                                                        break;
                                                    }
                                                    _context74.next = 10;
                                                    return false;
                                                case 10:
                                                    _context74.next = 14;
                                                    break;
                                                case 12:
                                                    _context74.next = 14;
                                                    return fSuccess;
                                                case 14:
                                                    _context74.next = 5;
                                                    break;
                                                case 16:
                                                    if (!(this.stack.length + this.altStack.length > 1000)) {
                                                        _context74.next = 20;
                                                        break;
                                                    }
                                                    this.errStr = "SCRIPT_ERR_STACK_SIZE";
                                                    _context74.next = 20;
                                                    return false;
                                                case 20:
                                                    _context74.next = 27;
                                                    break;
                                                case 22:
                                                    _context74.prev = 22;
                                                    _context74.t0 = _context74["catch"](4);
                                                    this.errStr = "SCRIPT_ERR_UNKNOWN_ERROR: " + _context74.t0;
                                                    _context74.next = 27;
                                                    return false;
                                                case 27:
                                                    if (!(this.ifStack.length > 0)) {
                                                        _context74.next = 31;
                                                        break;
                                                    }
                                                    this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                                                    _context74.next = 31;
                                                    return false;
                                                case 31:
                                                    _context74.next = 33;
                                                    return true;
                                                case 33:
                                                case "end":
                                                    return _context74.stop();
                                            }
                                        }, _eval, this, [
                                            [
                                                4,
                                                22
                                            ]
                                        ]);
                                    })
                                },
                                {
                                    key: "step",
                                    value: function step() {
                                        var fRequireMinimal = (this.flags & Interp.SCRIPT_VERIFY_MINIMALDATA) !== 0;
                                        var fExec = !(this.ifStack.indexOf(false) + 1);
                                        var chunk = this.script.chunks[this.pc];
                                        this.pc++;
                                        var opCodeNum = chunk.opCodeNum;
                                        if (opCodeNum === undefined) {
                                            this.errStr = "SCRIPT_ERR_BAD_OPCODE";
                                            return false;
                                        }
                                        if (chunk.buf && chunk.buf.length > Interp.MAX_SCRIPT_ELEMENT_SIZE) {
                                            this.errStr = "SCRIPT_ERR_PUSH_SIZE";
                                            return false;
                                        }
                                        if (opCodeNum > OpCode1.OP_16 && ++this.nOpCount > 201) {
                                            this.errStr = "SCRIPT_ERR_OP_COUNT";
                                            return false;
                                        }
                                        if (opCodeNum === OpCode1.OP_LEFT || opCodeNum === OpCode1.OP_RIGHT || opCodeNum === OpCode1.OP_2MUL || opCodeNum === OpCode1.OP_2DIV) {
                                            this.errStr = "SCRIPT_ERR_DISABLED_OPCODE";
                                            return false;
                                        }
                                        if (fExec && opCodeNum >= 0 && opCodeNum <= OpCode1.OP_PUSHDATA4) {
                                            if (fRequireMinimal && !this.script.checkMinimalPush(this.pc - 1)) {
                                                this.errStr = "SCRIPT_ERR_MINIMALDATA";
                                                return false;
                                            }
                                            if (!chunk.buf) this.stack.push(Interp["false"]);
                                            else if (chunk.len !== chunk.buf.length) throw new Error("LEngth of push value not equal to length of data");
                                            else this.stack.push(chunk.buf);
                                        } else if (fExec || OpCode1.OP_IF <= opCodeNum && opCodeNum <= OpCode1.OP_ENDIF) switch(opCodeNum){
                                            case OpCode1.OP_1NEGATE:
                                            case OpCode1.OP_1:
                                            case OpCode1.OP_2:
                                            case OpCode1.OP_3:
                                            case OpCode1.OP_4:
                                            case OpCode1.OP_5:
                                            case OpCode1.OP_6:
                                            case OpCode1.OP_7:
                                            case OpCode1.OP_8:
                                            case OpCode1.OP_9:
                                            case OpCode1.OP_10:
                                            case OpCode1.OP_11:
                                            case OpCode1.OP_12:
                                            case OpCode1.OP_13:
                                            case OpCode1.OP_14:
                                            case OpCode1.OP_15:
                                            case OpCode1.OP_16:
                                                var n = opCodeNum - (OpCode1.OP_1 - 1);
                                                var _buf = new Bn(n).toScriptNumBuffer();
                                                this.stack.push(_buf);
                                                break;
                                            case OpCode1.OP_NOP:
                                                break;
                                            case OpCode1.OP_CHECKLOCKTIMEVERIFY:
                                                if (!(this.flags & Interp.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {
                                                    if (this.flags & Interp.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
                                                        this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS";
                                                        return false;
                                                    }
                                                    break;
                                                }
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var nLockTimebuf = this.stack[this.stack.length - 1];
                                                var nLockTimebn = new Bn().fromScriptNumBuffer(nLockTimebuf, fRequireMinimal, 5);
                                                var nLockTime = nLockTimebn.toNumber();
                                                if (nLockTime < 0) {
                                                    this.errStr = "SCRIPT_ERR_NEGATIVE_LOCKTIME";
                                                    return false;
                                                }
                                                if (!this.checkLockTime(nLockTime)) {
                                                    this.errStr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME";
                                                    return false;
                                                }
                                                break;
                                            case OpCode1.OP_CHECKSEQUENCEVERIFY:
                                                if (!(this.flags & Interp.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {
                                                    if (this.flags & Interp.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
                                                        this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS";
                                                        return false;
                                                    }
                                                    break;
                                                }
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var nSequencebuf = this.stack[this.stack.length - 1];
                                                var nSequencebn = new Bn().fromScriptNumBuffer(nSequencebuf, fRequireMinimal, 5);
                                                var nSequence = nSequencebn.toNumber();
                                                if (nSequence < 0) {
                                                    this.errStr = "SCRIPT_ERR_NEGATIVE_LOCKTIME";
                                                    return false;
                                                }
                                                if ((nSequence & TxIn1.SEQUENCE_LOCKTIME_DISABLE_FLAG) !== 0) break;
                                                if (!this.checkSequence(nSequence)) {
                                                    this.errStr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME";
                                                    return false;
                                                }
                                                break;
                                            case OpCode1.OP_NOP1:
                                            case OpCode1.OP_NOP3:
                                            case OpCode1.OP_NOP4:
                                            case OpCode1.OP_NOP5:
                                            case OpCode1.OP_NOP6:
                                            case OpCode1.OP_NOP7:
                                            case OpCode1.OP_NOP8:
                                            case OpCode1.OP_NOP9:
                                            case OpCode1.OP_NOP10:
                                                if (this.flags & Interp.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) {
                                                    this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS";
                                                    return false;
                                                }
                                                break;
                                            case OpCode1.OP_IF:
                                            case OpCode1.OP_NOTIF:
                                                var fValue = false;
                                                if (fExec) {
                                                    if (this.stack.length < 1) {
                                                        this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                                                        return false;
                                                    }
                                                    var _buf2 = this.stack.pop();
                                                    fValue = Interp.castToBool(_buf2);
                                                    if (opCodeNum === OpCode1.OP_NOTIF) fValue = !fValue;
                                                }
                                                this.ifStack.push(fValue);
                                                break;
                                            case OpCode1.OP_ELSE:
                                                if (this.ifStack.length === 0) {
                                                    this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                                                    return false;
                                                }
                                                this.ifStack[this.ifStack.length - 1] = !this.ifStack[this.ifStack.length - 1];
                                                break;
                                            case OpCode1.OP_ENDIF:
                                                if (this.ifStack.length === 0) {
                                                    this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                                                    return false;
                                                }
                                                this.ifStack.pop();
                                                break;
                                            case OpCode1.OP_VERIFY:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf3 = this.stack[this.stack.length - 1];
                                                var _fValue = Interp.castToBool(_buf3);
                                                if (_fValue) this.stack.pop();
                                                else {
                                                    this.errStr = "SCRIPT_ERR_VERIFY";
                                                    return false;
                                                }
                                                break;
                                            case OpCode1.OP_RETURN:
                                                this.errStr = "SCRIPT_ERR_OP_RETURN";
                                                return false;
                                            case OpCode1.OP_TOALTSTACK:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.altStack.push(this.stack.pop());
                                                break;
                                            case OpCode1.OP_FROMALTSTACK:
                                                if (this.altStack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_ALTSTACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.push(this.altStack.pop());
                                                break;
                                            case OpCode1.OP_2DROP:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.pop();
                                                this.stack.pop();
                                                break;
                                            case OpCode1.OP_2DUP:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf4 = this.stack[this.stack.length - 2];
                                                var _buf5 = this.stack[this.stack.length - 1];
                                                this.stack.push(_buf4);
                                                this.stack.push(_buf5);
                                                break;
                                            case OpCode1.OP_3DUP:
                                                if (this.stack.length < 3) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf6 = this.stack[this.stack.length - 3];
                                                var _buf7 = this.stack[this.stack.length - 2];
                                                var buf3 = this.stack[this.stack.length - 1];
                                                this.stack.push(_buf6);
                                                this.stack.push(_buf7);
                                                this.stack.push(buf3);
                                                break;
                                            case OpCode1.OP_2OVER:
                                                if (this.stack.length < 4) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf8 = this.stack[this.stack.length - 4];
                                                var _buf9 = this.stack[this.stack.length - 3];
                                                this.stack.push(_buf8);
                                                this.stack.push(_buf9);
                                                break;
                                            case OpCode1.OP_2ROT:
                                                if (this.stack.length < 6) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var spliced = this.stack.splice(this.stack.length - 6, 2);
                                                this.stack.push(spliced[0]);
                                                this.stack.push(spliced[1]);
                                                break;
                                            case OpCode1.OP_2SWAP:
                                                if (this.stack.length < 4) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _spliced = this.stack.splice(this.stack.length - 4, 2);
                                                this.stack.push(_spliced[0]);
                                                this.stack.push(_spliced[1]);
                                                break;
                                            case OpCode1.OP_IFDUP:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf10 = this.stack[this.stack.length - 1];
                                                var _fValue2 = Interp.castToBool(_buf10);
                                                if (_fValue2) this.stack.push(_buf10);
                                                break;
                                            case OpCode1.OP_DEPTH:
                                                var _buf11 = new Bn(this.stack.length).toScriptNumBuffer();
                                                this.stack.push(_buf11);
                                                break;
                                            case OpCode1.OP_DROP:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.pop();
                                                break;
                                            case OpCode1.OP_DUP:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.push(this.stack[this.stack.length - 1]);
                                                break;
                                            case OpCode1.OP_NIP:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.splice(this.stack.length - 2, 1);
                                                break;
                                            case OpCode1.OP_OVER:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.push(this.stack[this.stack.length - 2]);
                                                break;
                                            case OpCode1.OP_PICK:
                                            case OpCode1.OP_ROLL:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf12 = this.stack[this.stack.length - 1];
                                                var bn = new Bn().fromScriptNumBuffer(_buf12, fRequireMinimal);
                                                var _n2 = bn.toNumber();
                                                this.stack.pop();
                                                if (_n2 < 0 || _n2 >= this.stack.length) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                _buf12 = this.stack[this.stack.length - _n2 - 1];
                                                if (opCodeNum === OpCode1.OP_ROLL) this.stack.splice(this.stack.length - _n2 - 1, 1);
                                                this.stack.push(_buf12);
                                                break;
                                            case OpCode1.OP_ROT:
                                                if (this.stack.length < 3) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var x1 = this.stack[this.stack.length - 3];
                                                var x2 = this.stack[this.stack.length - 2];
                                                var x3 = this.stack[this.stack.length - 1];
                                                this.stack[this.stack.length - 3] = x2;
                                                this.stack[this.stack.length - 2] = x3;
                                                this.stack[this.stack.length - 1] = x1;
                                                break;
                                            case OpCode1.OP_SWAP:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _x96 = this.stack[this.stack.length - 2];
                                                var _x97 = this.stack[this.stack.length - 1];
                                                this.stack[this.stack.length - 2] = _x97;
                                                this.stack[this.stack.length - 1] = _x96;
                                                break;
                                            case OpCode1.OP_TUCK:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);
                                                break;
                                            case OpCode1.OP_SIZE:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _bn3 = new Bn(this.stack[this.stack.length - 1].length);
                                                this.stack.push(_bn3.toScriptNumBuffer());
                                                break;
                                            case OpCode1.OP_OR:
                                            case OpCode1.OP_AND:
                                            case OpCode1.OP_XOR:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var buf1 = this.stack[this.stack.length - 2];
                                                var buf2 = this.stack[this.stack.length - 1];
                                                if (buf1.length != buf2.length) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_OPERAND_SIZE";
                                                    return false;
                                                }
                                                switch(opCodeNum){
                                                    case OpCode1.OP_AND:
                                                        for(var i = 0; i < buf1.length; i++)buf1[i] &= buf2[i];
                                                        break;
                                                    case OpCode1.OP_OR:
                                                        for(var _i15 = 0; _i15 < buf1.length; _i15++)buf1[_i15] |= buf2[_i15];
                                                        break;
                                                    case OpCode1.OP_XOR:
                                                        for(var _i16 = 0; _i16 < buf1.length; _i16++)buf1[_i16] ^= buf2[_i16];
                                                        break;
                                                }
                                                this.stack.pop();
                                                break;
                                            case OpCode1.OP_INVERT:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var buf = this.stack[this.stack.length - 1];
                                                for(var _i17 = 0; _i17 < buf.length; _i17++)buf[_i17] = ~buf[_i17];
                                                break;
                                            case OpCode1.OP_LSHIFT:
                                            case OpCode1.OP_RSHIFT:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf13 = this.stack[this.stack.length - 2];
                                                var value = new Bn(_buf13);
                                                var _n3 = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal).toNumber();
                                                if (_n3 < 0) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_NUMBER_RANGE";
                                                    return false;
                                                }
                                                this.stack.pop();
                                                this.stack.pop();
                                                switch(opCodeNum){
                                                    case OpCode1.OP_LSHIFT:
                                                        value = value.ushln(_n3);
                                                        break;
                                                    case OpCode1.OP_RSHIFT:
                                                        value = value.ushrn(_n3);
                                                        break;
                                                }
                                                var _buf14 = value.toBuffer().slice(-_buf13.length);
                                                if (_buf14.length < _buf13.length) _buf14 = Buffer.concat([
                                                    Buffer.alloc(_buf13.length - _buf14.length),
                                                    _buf14
                                                ]);
                                                this.stack.push(_buf14);
                                                break;
                                            case OpCode1.OP_EQUAL:
                                            case OpCode1.OP_EQUALVERIFY:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf15 = this.stack[this.stack.length - 2];
                                                var _buf16 = this.stack[this.stack.length - 1];
                                                var fEqual = cmp(_buf15, _buf16);
                                                this.stack.pop();
                                                this.stack.pop();
                                                this.stack.push(fEqual ? Interp["true"] : Interp["false"]);
                                                if (opCodeNum === OpCode1.OP_EQUALVERIFY) {
                                                    if (fEqual) this.stack.pop();
                                                    else {
                                                        this.errStr = "SCRIPT_ERR_EQUALVERIFY";
                                                        return false;
                                                    }
                                                }
                                                break;
                                            case OpCode1.OP_1ADD:
                                            case OpCode1.OP_1SUB:
                                            case OpCode1.OP_NEGATE:
                                            case OpCode1.OP_ABS:
                                            case OpCode1.OP_NOT:
                                            case OpCode1.OP_0NOTEQUAL:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf17 = this.stack[this.stack.length - 1];
                                                var _bn4 = new Bn().fromScriptNumBuffer(_buf17, fRequireMinimal);
                                                switch(opCodeNum){
                                                    case OpCode1.OP_1ADD:
                                                        _bn4 = _bn4.add(1);
                                                        break;
                                                    case OpCode1.OP_1SUB:
                                                        _bn4 = _bn4.sub(1);
                                                        break;
                                                    case OpCode1.OP_NEGATE:
                                                        _bn4 = _bn4.neg();
                                                        break;
                                                    case OpCode1.OP_ABS:
                                                        if (_bn4.lt(0)) _bn4 = _bn4.neg();
                                                        break;
                                                    case OpCode1.OP_NOT:
                                                        _bn4 = new Bn(_bn4.eq(0) + 0);
                                                        break;
                                                    case OpCode1.OP_0NOTEQUAL:
                                                        _bn4 = new Bn(_bn4.neq(0) + 0);
                                                        break;
                                                }
                                                this.stack.pop();
                                                this.stack.push(_bn4.toScriptNumBuffer());
                                                break;
                                            case OpCode1.OP_ADD:
                                            case OpCode1.OP_SUB:
                                            case OpCode1.OP_MUL:
                                            case OpCode1.OP_DIV:
                                            case OpCode1.OP_MOD:
                                            case OpCode1.OP_BOOLAND:
                                            case OpCode1.OP_BOOLOR:
                                            case OpCode1.OP_NUMEQUAL:
                                            case OpCode1.OP_NUMEQUALVERIFY:
                                            case OpCode1.OP_NUMNOTEQUAL:
                                            case OpCode1.OP_LESSTHAN:
                                            case OpCode1.OP_GREATERTHAN:
                                            case OpCode1.OP_LESSTHANOREQUAL:
                                            case OpCode1.OP_GREATERTHANOREQUAL:
                                            case OpCode1.OP_MIN:
                                            case OpCode1.OP_MAX:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var bn1 = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);
                                                var bn2 = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);
                                                var _bn5 = new Bn(0);
                                                switch(opCodeNum){
                                                    case OpCode1.OP_ADD:
                                                        _bn5 = bn1.add(bn2);
                                                        break;
                                                    case OpCode1.OP_SUB:
                                                        _bn5 = bn1.sub(bn2);
                                                        break;
                                                    case OpCode1.OP_MUL:
                                                        _bn5 = bn1.mul(bn2);
                                                        break;
                                                    case OpCode1.OP_DIV:
                                                        if (bn2 == 0) {
                                                            this.errStr = "SCRIPT_ERR_DIV_BY_ZERO";
                                                            return false;
                                                        }
                                                        _bn5 = bn1.div(bn2);
                                                        break;
                                                    case OpCode1.OP_MOD:
                                                        if (bn2 == 0) {
                                                            this.errStr = "SCRIPT_ERR_DIV_BY_ZERO";
                                                            return false;
                                                        }
                                                        _bn5 = bn1.mod(bn2);
                                                        break;
                                                    case OpCode1.OP_BOOLAND:
                                                        _bn5 = new Bn((bn1.neq(0) && bn2.neq(0)) + 0);
                                                        break;
                                                    case OpCode1.OP_BOOLOR:
                                                        _bn5 = new Bn((bn1.neq(0) || bn2.neq(0)) + 0);
                                                        break;
                                                    case OpCode1.OP_NUMEQUAL:
                                                        _bn5 = new Bn(bn1.eq(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_NUMEQUALVERIFY:
                                                        _bn5 = new Bn(bn1.eq(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_NUMNOTEQUAL:
                                                        _bn5 = new Bn(bn1.neq(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_LESSTHAN:
                                                        _bn5 = new Bn(bn1.lt(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_GREATERTHAN:
                                                        _bn5 = new Bn(bn1.gt(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_LESSTHANOREQUAL:
                                                        _bn5 = new Bn(bn1.leq(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_GREATERTHANOREQUAL:
                                                        _bn5 = new Bn(bn1.geq(bn2) + 0);
                                                        break;
                                                    case OpCode1.OP_MIN:
                                                        _bn5 = bn1.lt(bn2) ? bn1 : bn2;
                                                        break;
                                                    case OpCode1.OP_MAX:
                                                        _bn5 = bn1.gt(bn2) ? bn1 : bn2;
                                                        break;
                                                }
                                                this.stack.pop();
                                                this.stack.pop();
                                                this.stack.push(_bn5.toScriptNumBuffer());
                                                if (opCodeNum === OpCode1.OP_NUMEQUALVERIFY) {
                                                    if (Interp.castToBool(this.stack[this.stack.length - 1])) this.stack.pop();
                                                    else {
                                                        this.errStr = "SCRIPT_ERR_NUMEQUALVERIFY";
                                                        return false;
                                                    }
                                                }
                                                break;
                                            case OpCode1.OP_WITHIN:
                                                if (this.stack.length < 3) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _bn6 = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 3], fRequireMinimal);
                                                var _bn7 = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 2], fRequireMinimal);
                                                var bn3 = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);
                                                var _fValue3 = _bn7.leq(_bn6) && _bn6.lt(bn3);
                                                this.stack.pop();
                                                this.stack.pop();
                                                this.stack.pop();
                                                this.stack.push(_fValue3 ? Interp["true"] : Interp["false"]);
                                                break;
                                            case OpCode1.OP_RIPEMD160:
                                            case OpCode1.OP_SHA1:
                                            case OpCode1.OP_SHA256:
                                            case OpCode1.OP_HASH160:
                                            case OpCode1.OP_HASH256:
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _buf18 = this.stack[this.stack.length - 1];
                                                var bufHash;
                                                if (opCodeNum === OpCode1.OP_RIPEMD160) bufHash = Hash1.ripemd160(_buf18);
                                                else if (opCodeNum === OpCode1.OP_SHA1) bufHash = Hash1.sha1(_buf18);
                                                else if (opCodeNum === OpCode1.OP_SHA256) bufHash = Hash1.sha256(_buf18);
                                                else if (opCodeNum === OpCode1.OP_HASH160) bufHash = Hash1.sha256Ripemd160(_buf18);
                                                else if (opCodeNum === OpCode1.OP_HASH256) bufHash = Hash1.sha256Sha256(_buf18);
                                                this.stack.pop();
                                                this.stack.push(bufHash);
                                                break;
                                            case OpCode1.OP_CODESEPARATOR:
                                                this.pBeginCodeHash = this.pc;
                                                break;
                                            case OpCode1.OP_CHECKSIG:
                                            case OpCode1.OP_CHECKSIGVERIFY:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var bufSig = this.stack[this.stack.length - 2];
                                                var bufPubKey = this.stack[this.stack.length - 1];
                                                var subScript = new Script1().fromObject({
                                                    chunks: this.script.chunks.slice(this.pBeginCodeHash)
                                                });
                                                var nHashType = bufSig.length > 0 ? bufSig.readUInt8(bufSig.length - 1) : 0;
                                                if (nHashType & Sig1.SIGHASH_FORKID) {
                                                    if (!(this.flags & Interp.SCRIPT_ENABLE_SIGHASH_FORKID)) {
                                                        this.errStr = "SCRIPT_ERR_ILLEGAL_FORKID";
                                                        return false;
                                                    }
                                                } else subScript.findAndDelete(new Script1().writeBuffer(bufSig));
                                                if (!this.checkSigEncoding(bufSig) || !this.checkPubKeyEncoding(bufPubKey)) return false;
                                                var fSuccess;
                                                try {
                                                    var sig = new Sig1().fromTxFormat(bufSig);
                                                    var pubKey = new PubKey1().fromBuffer(bufPubKey, false);
                                                    fSuccess = this.tx.verify(sig, pubKey, this.nIn, subScript, Boolean(this.flags & Interp.SCRIPT_VERIFY_LOW_S), this.valueBn, this.flags);
                                                } catch (e) {
                                                    fSuccess = false;
                                                }
                                                this.stack.pop();
                                                this.stack.pop();
                                                this.stack.push(fSuccess ? Interp["true"] : Interp["false"]);
                                                if (opCodeNum === OpCode1.OP_CHECKSIGVERIFY) {
                                                    if (fSuccess) this.stack.pop();
                                                    else {
                                                        this.errStr = "SCRIPT_ERR_CHECKSIGVERIFY";
                                                        return false;
                                                    }
                                                }
                                                break;
                                            case OpCode1.OP_CHECKMULTISIG:
                                            case OpCode1.OP_CHECKMULTISIGVERIFY:
                                                var _i18 = 1;
                                                if (this.stack.length < _i18) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var nKeysCount = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - _i18], fRequireMinimal).toNumber();
                                                if (nKeysCount < 0 || nKeysCount > 20) {
                                                    this.errStr = "SCRIPT_ERR_PUBKEY_COUNT";
                                                    return false;
                                                }
                                                this.nOpCount += nKeysCount;
                                                if (this.nOpCount > 201) {
                                                    this.errStr = "SCRIPT_ERR_OP_COUNT";
                                                    return false;
                                                }
                                                var ikey = ++_i18;
                                                _i18 += nKeysCount;
                                                if (this.stack.length < _i18) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var nSigsCount = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - _i18], fRequireMinimal).toNumber();
                                                if (nSigsCount < 0 || nSigsCount > nKeysCount) {
                                                    this.errStr = "SCRIPT_ERR_SIG_COUNT";
                                                    return false;
                                                }
                                                var isig = ++_i18;
                                                _i18 += nSigsCount;
                                                if (this.stack.length < _i18) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var _subScript = new Script1().fromObject({
                                                    chunks: this.script.chunks.slice(this.pBeginCodeHash)
                                                });
                                                for(var k = 0; k < nSigsCount; k++){
                                                    var _bufSig = this.stack[this.stack.length - isig - k];
                                                    var _nHashType = _bufSig.length > 0 ? _bufSig.readUInt8(_bufSig.length - 1) : 0;
                                                    if (_nHashType & Sig1.SIGHASH_FORKID) {
                                                        if (!(this.flags & Interp.SCRIPT_ENABLE_SIGHASH_FORKID)) {
                                                            this.errStr = "SCRIPT_ERR_ILLEGAL_FORKID";
                                                            return false;
                                                        }
                                                    } else _subScript.findAndDelete(new Script1().writeBuffer(_bufSig));
                                                }
                                                var _fSuccess = true;
                                                while(_fSuccess && nSigsCount > 0){
                                                    var _bufSig2 = this.stack[this.stack.length - isig];
                                                    var _bufPubKey = this.stack[this.stack.length - ikey];
                                                    if (!this.checkSigEncoding(_bufSig2) || !this.checkPubKeyEncoding(_bufPubKey)) return false;
                                                    var fOk = void 0;
                                                    try {
                                                        var _sig2 = new Sig1().fromTxFormat(_bufSig2);
                                                        var _pubKey = new PubKey1().fromBuffer(_bufPubKey, false);
                                                        fOk = this.tx.verify(_sig2, _pubKey, this.nIn, _subScript, Boolean(this.flags & Interp.SCRIPT_VERIFY_LOW_S), this.valueBn, this.flags);
                                                    } catch (e) {
                                                        fOk = false;
                                                    }
                                                    if (fOk) {
                                                        isig++;
                                                        nSigsCount--;
                                                    }
                                                    ikey++;
                                                    nKeysCount--;
                                                    if (nSigsCount > nKeysCount) _fSuccess = false;
                                                }
                                                while(_i18-- > 1)this.stack.pop();
                                                if (this.stack.length < 1) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                if (this.flags & Interp.SCRIPT_VERIFY_NULLDUMMY && this.stack[this.stack.length - 1].length) {
                                                    this.errStr = "SCRIPT_ERR_SIG_NULLDUMMY";
                                                    return false;
                                                }
                                                this.stack.pop();
                                                this.stack.push(_fSuccess ? Interp["true"] : Interp["false"]);
                                                if (opCodeNum === OpCode1.OP_CHECKMULTISIGVERIFY) {
                                                    if (_fSuccess) this.stack.pop();
                                                    else {
                                                        this.errStr = "SCRIPT_ERR_CHECKMULTISIGVERIFY";
                                                        return false;
                                                    }
                                                }
                                                break;
                                            case OpCode1.OP_CAT:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var vch1 = this.stack[this.stack.length - 2];
                                                var vch2 = this.stack[this.stack.length - 1];
                                                this.stack[this.stack.length - 2] = Buffer.concat([
                                                    vch1,
                                                    vch2
                                                ]);
                                                this.stack.pop();
                                                break;
                                            case OpCode1.OP_SPLIT:
                                                if (this.stack.length < 2) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION";
                                                    return false;
                                                }
                                                var data = this.stack[this.stack.length - 2];
                                                var position = new Bn().fromScriptNumBuffer(this.stack[this.stack.length - 1], fRequireMinimal);
                                                if (position.lt(0) || position.gt(data.length)) {
                                                    this.errStr = "SCRIPT_ERR_INVALID_SPLIT_RANGE";
                                                    return false;
                                                }
                                                var n1 = data.slice(0, position);
                                                var n2 = data.slice(position);
                                                this.stack.pop();
                                                this.stack.pop();
                                                this.stack.push(n1);
                                                this.stack.push(n2);
                                                break;
                                            default:
                                                this.errStr = "SCRIPT_ERR_BAD_OPCODE";
                                                return false;
                                        }
                                        return true;
                                    }
                                },
                                {
                                    key: "verify",
                                    value: function verify(scriptSig, scriptPubKey, tx, nIn, flags, valueBn) {
                                        var results = this.results(scriptSig, scriptPubKey, tx, nIn, flags, valueBn);
                                        var _iterator = _createForOfIteratorHelper(results), _step;
                                        try {
                                            for(_iterator.s(); !(_step = _iterator.n()).done;){
                                                var success = _step.value;
                                                if (!success) return false;
                                            }
                                        } catch (err) {
                                            _iterator.e(err);
                                        } finally{
                                            _iterator.f();
                                        }
                                        return true;
                                    }
                                },
                                {
                                    key: "results",
                                    value: /*#__PURE__*/ _regeneratorRuntime().mark(function results(scriptSig, scriptPubKey, tx, nIn, flags, valueBn) {
                                        var stackCopy, stack, buf, tmp, pubKeySerialized, scriptPubKey2;
                                        return _regeneratorRuntime().wrap(function results$(_context75) {
                                            while(true)switch(_context75.prev = _context75.next){
                                                case 0:
                                                    this.fromObject({
                                                        script: scriptSig,
                                                        tx: tx,
                                                        nIn: nIn,
                                                        flags: flags,
                                                        valueBn: valueBn
                                                    });
                                                    if (!((flags & Interp.SCRIPT_VERIFY_SIGPUSHONLY) !== 0 && !scriptSig.isPushOnly())) {
                                                        _context75.next = 5;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_SIG_PUSHONLY";
                                                    _context75.next = 5;
                                                    return false;
                                                case 5:
                                                    return _context75.delegateYield(this.eval(), "t0", 6);
                                                case 6:
                                                    if (flags & Interp.SCRIPT_VERIFY_P2SH) stackCopy = this.stack.slice();
                                                    stack = this.stack;
                                                    this.initialize();
                                                    this.fromObject({
                                                        script: scriptPubKey,
                                                        stack: stack,
                                                        tx: tx,
                                                        nIn: nIn,
                                                        flags: flags,
                                                        valueBn: valueBn
                                                    });
                                                    return _context75.delegateYield(this.eval(), "t1", 11);
                                                case 11:
                                                    if (!(this.stack.length === 0)) {
                                                        _context75.next = 15;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                    _context75.next = 15;
                                                    return false;
                                                case 15:
                                                    buf = this.stack[this.stack.length - 1];
                                                    if (Interp.castToBool(buf)) {
                                                        _context75.next = 20;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                    _context75.next = 20;
                                                    return false;
                                                case 20:
                                                    if (!(flags & Interp.SCRIPT_VERIFY_P2SH && scriptPubKey.isScriptHashOut())) {
                                                        _context75.next = 48;
                                                        break;
                                                    }
                                                    if (scriptSig.isPushOnly()) {
                                                        _context75.next = 25;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_SIG_PUSHONLY";
                                                    _context75.next = 25;
                                                    return false;
                                                case 25:
                                                    tmp = stack;
                                                    stack = stackCopy;
                                                    stackCopy = tmp;
                                                    if (!(stack.length === 0)) {
                                                        _context75.next = 30;
                                                        break;
                                                    }
                                                    throw new Error("internal error - stack copy empty");
                                                case 30:
                                                    pubKeySerialized = stack[stack.length - 1];
                                                    scriptPubKey2 = new Script1().fromBuffer(pubKeySerialized);
                                                    stack.pop();
                                                    this.initialize();
                                                    this.fromObject({
                                                        script: scriptPubKey2,
                                                        stack: stack,
                                                        tx: tx,
                                                        nIn: nIn,
                                                        flags: flags,
                                                        valueBn: valueBn
                                                    });
                                                    return _context75.delegateYield(this.eval(), "t2", 36);
                                                case 36:
                                                    if (!(stack.length === 0)) {
                                                        _context75.next = 40;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                    _context75.next = 40;
                                                    return false;
                                                case 40:
                                                    if (Interp.castToBool(stack[stack.length - 1])) {
                                                        _context75.next = 46;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                    _context75.next = 44;
                                                    return false;
                                                case 44:
                                                    _context75.next = 48;
                                                    break;
                                                case 46:
                                                    _context75.next = 48;
                                                    return true;
                                                case 48:
                                                    if (!((flags & Interp.SCRIPT_VERIFY_CLEANSTACK) !== 0)) {
                                                        _context75.next = 55;
                                                        break;
                                                    }
                                                    if (flags & Interp.SCRIPT_VERIFY_P2SH) {
                                                        _context75.next = 51;
                                                        break;
                                                    }
                                                    throw new Error("cannot use CLEANSTACK without P2SH");
                                                case 51:
                                                    if (!(stack.length !== 1)) {
                                                        _context75.next = 55;
                                                        break;
                                                    }
                                                    this.errStr = this.errStr || "SCRIPT_ERR_CLEANSTACK";
                                                    _context75.next = 55;
                                                    return false;
                                                case 55:
                                                    _context75.next = 57;
                                                    return true;
                                                case 57:
                                                case "end":
                                                    return _context75.stop();
                                            }
                                        }, results, this);
                                    })
                                },
                                {
                                    key: "getDebugObject",
                                    value: function getDebugObject() {
                                        var pc = this.pc - 1;
                                        return {
                                            errStr: this.errStr,
                                            scriptStr: this.script ? this.script.toString() : "no script found",
                                            pc: pc,
                                            stack: this.stack.map(function(buf) {
                                                return buf.toString("hex");
                                            }),
                                            altStack: this.altStack.map(function(buf) {
                                                return buf.toString("hex");
                                            }),
                                            opCodeStr: this.script ? OpCode1.fromNumber(this.script.chunks[pc].opCodeNum).toString() : "no script found"
                                        };
                                    }
                                },
                                {
                                    key: "getDebugString",
                                    value: function getDebugString() {
                                        return JSON.stringify(this.getDebugObject(), null, 2);
                                    }
                                }
                            ], [
                                {
                                    key: "getFlags",
                                    value: function getFlags(flagstr) {
                                        var flags = 0;
                                        if (flagstr.indexOf("NONE") !== -1) flags = flags | Interp.SCRIPT_VERIFY_NONE;
                                        if (flagstr.indexOf("P2SH") !== -1) flags = flags | Interp.SCRIPT_VERIFY_P2SH;
                                        if (flagstr.indexOf("STRICTENC") !== -1) flags = flags | Interp.SCRIPT_VERIFY_STRICTENC;
                                        if (flagstr.indexOf("DERSIG") !== -1) flags = flags | Interp.SCRIPT_VERIFY_DERSIG;
                                        if (flagstr.indexOf("LOW_S") !== -1) flags = flags | Interp.SCRIPT_VERIFY_LOW_S;
                                        if (flagstr.indexOf("NULLDUMMY") !== -1) flags = flags | Interp.SCRIPT_VERIFY_NULLDUMMY;
                                        if (flagstr.indexOf("SIGPUSHONLY") !== -1) flags = flags | Interp.SCRIPT_VERIFY_SIGPUSHONLY;
                                        if (flagstr.indexOf("MINIMALDATA") !== -1) flags = flags | Interp.SCRIPT_VERIFY_MINIMALDATA;
                                        if (flagstr.indexOf("DISCOURAGE_UPGRADABLE_NOPS") !== -1) flags = flags | Interp.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS;
                                        if (flagstr.indexOf("CLEANSTACK") !== -1) flags = flags | Interp.SCRIPT_VERIFY_CLEANSTACK;
                                        if (flagstr.indexOf("CHECKLOCKTIMEVERIFY") !== -1) flags = flags | Interp.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;
                                        if (flagstr.indexOf("CHECKSEQUENCEVERIFY") !== -1) flags = flags | Interp.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;
                                        if (flagstr.indexOf("SIGHASH_FORKID") !== -1) flags = flags | Interp.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        return flags;
                                    }
                                },
                                {
                                    key: "castToBool",
                                    value: function castToBool(buf) {
                                        for(var i = 0; i < buf.length; i++)if (buf[i] !== 0) {
                                            if (i === buf.length - 1 && buf[i] === 0x80) return false;
                                            return true;
                                        }
                                        return false;
                                    }
                                }
                            ]);
                            return Interp;
                        }(Struct1);
                        exports.Interp = Interp1;
                        Interp1["true"] = Buffer.from([
                            1
                        ]);
                        Interp1["false"] = Buffer.from([]);
                        Interp1.MAX_SCRIPT_ELEMENT_SIZE = 520;
                        Interp1.LOCKTIME_THRESHOLD = 500000000;
                        Interp1.SCRIPT_VERIFY_NONE = 0;
                        Interp1.SCRIPT_VERIFY_P2SH = 1;
                        Interp1.SCRIPT_VERIFY_STRICTENC = 2;
                        Interp1.SCRIPT_VERIFY_DERSIG = 4;
                        Interp1.SCRIPT_VERIFY_LOW_S = 8;
                        Interp1.SCRIPT_VERIFY_NULLDUMMY = 16;
                        Interp1.SCRIPT_VERIFY_SIGPUSHONLY = 32;
                        Interp1.SCRIPT_VERIFY_MINIMALDATA = 64;
                        Interp1.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 128;
                        Interp1.SCRIPT_VERIFY_CLEANSTACK = 256;
                        Interp1.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = 512;
                        Interp1.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = 1024;
                        Interp1.SCRIPT_ENABLE_SIGHASH_FORKID = 65536;
                        Interp1.defaultFlags = Interp1.SCRIPT_VERIFY_P2SH | Interp1.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;
                        var SigOperations1 = /*#__PURE__*/ function(_Struct24) {
                            _inherits(SigOperations, _Struct24);
                            var _super34 = _createSuper(SigOperations);
                            function SigOperations() {
                                var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();
                                _classCallCheck2(this, SigOperations);
                                return _super34.call(this, {
                                    map: map
                                });
                            }
                            _createClass2(SigOperations, [
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var json = {};
                                        this.map.forEach(function(arr, label) {
                                            json[label] = arr.map(function(obj) {
                                                return {
                                                    nScriptChunk: obj.nScriptChunk,
                                                    type: obj.type,
                                                    addressStr: obj.addressStr,
                                                    nHashType: obj.nHashType,
                                                    log: obj.log
                                                };
                                            });
                                        });
                                        return json;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        var _this21 = this;
                                        Object.keys(json).forEach(function(label) {
                                            _this21.map.set(label, json[label].map(function(obj) {
                                                return {
                                                    nScriptChunk: obj.nScriptChunk,
                                                    type: obj.type,
                                                    addressStr: obj.addressStr,
                                                    nHashType: obj.nHashType,
                                                    log: obj.log
                                                };
                                            }));
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "setOne",
                                    value: function setOne(txHashBuf, txOutNum, nScriptChunk) {
                                        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "sig";
                                        var addressStr = arguments.length > 4 ? arguments[4] : undefined;
                                        var nHashType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                        var label = txHashBuf.toString("hex") + ":" + txOutNum;
                                        var obj = {
                                            nScriptChunk: nScriptChunk,
                                            type: type,
                                            addressStr: addressStr,
                                            nHashType: nHashType
                                        };
                                        this.map.set(label, [
                                            obj
                                        ]);
                                        return this;
                                    }
                                },
                                {
                                    key: "setMany",
                                    value: function setMany(txHashBuf, txOutNum, arr) {
                                        var label = txHashBuf.toString("hex") + ":" + txOutNum;
                                        arr = arr.map(function(obj) {
                                            return _objectSpread3({
                                                type: obj.type || "sig",
                                                nHashType: obj.nHashType || Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID
                                            }, obj);
                                        });
                                        this.map.set(label, arr);
                                        return this;
                                    }
                                },
                                {
                                    key: "addOne",
                                    value: function addOne(txHashBuf, txOutNum, nScriptChunk) {
                                        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "sig";
                                        var addressStr = arguments.length > 4 ? arguments[4] : undefined;
                                        var nHashType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                        var arr = this.get(txHashBuf, txOutNum) || [];
                                        arr.push({
                                            nScriptChunk: nScriptChunk,
                                            type: type,
                                            addressStr: addressStr,
                                            nHashType: nHashType
                                        });
                                        this.setMany(txHashBuf, txOutNum, arr);
                                        return this;
                                    }
                                },
                                {
                                    key: "get",
                                    value: function get(txHashBuf, txOutNum) {
                                        var label = txHashBuf.toString("hex") + ":" + txOutNum;
                                        return this.map.get(label) || [];
                                    }
                                }
                            ]);
                            return SigOperations;
                        }(Struct1);
                        exports.SigOperations = SigOperations1;
                        var TxOutMap1 = /*#__PURE__*/ function(_Struct25) {
                            _inherits(TxOutMap, _Struct25);
                            var _super35 = _createSuper(TxOutMap);
                            function TxOutMap() {
                                var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();
                                _classCallCheck2(this, TxOutMap);
                                return _super35.call(this, {
                                    map: map
                                });
                            }
                            _createClass2(TxOutMap, [
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var json = {};
                                        this.map.forEach(function(txOut, label) {
                                            json[label] = txOut.toHex();
                                        });
                                        return json;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        var _this22 = this;
                                        Object.keys(json).forEach(function(label) {
                                            _this22.map.set(label, TxOut1.fromHex(json[label]));
                                        });
                                        return this;
                                    }
                                },
                                {
                                    key: "set",
                                    value: function set(txHashBuf, txOutNum, txOut) {
                                        var label = txHashBuf.toString("hex") + ":" + txOutNum;
                                        this.map.set(label, txOut);
                                        return this;
                                    }
                                },
                                {
                                    key: "get",
                                    value: function get(txHashBuf, txOutNum) {
                                        var label = txHashBuf.toString("hex") + ":" + txOutNum;
                                        return this.map.get(label);
                                    }
                                },
                                {
                                    key: "setTx",
                                    value: function setTx(tx) {
                                        var _this23 = this;
                                        var txhashhex = tx.hash().toString("hex");
                                        tx.txOuts.forEach(function(txOut, index) {
                                            var label = txhashhex + ":" + index;
                                            _this23.map.set(label, txOut);
                                        });
                                        return this;
                                    }
                                }
                            ]);
                            return TxOutMap;
                        }(Struct1);
                        exports.TxOutMap = TxOutMap1;
                        var Constants$1 = Constants.Default.TxBuilder;
                        var TxBuilder1 = /*#__PURE__*/ function(_Struct26) {
                            _inherits(TxBuilder, _Struct26);
                            var _super36 = _createSuper(TxBuilder);
                            function TxBuilder() {
                                var tx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Tx1();
                                var txIns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                                var txOuts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                                var uTxOutMap = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new TxOutMap1();
                                var sigOperations = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new SigOperations1();
                                var changeScript = arguments.length > 5 ? arguments[5] : undefined;
                                var changeAmountBn = arguments.length > 6 ? arguments[6] : undefined;
                                var feeAmountBn = arguments.length > 7 ? arguments[7] : undefined;
                                var feePerKbNum = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : Constants$1.feePerKbNum;
                                var nLockTime = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                                var versionBytesNum = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
                                var sigsPerInput = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 1;
                                var dust = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : Constants$1.dust;
                                var dustChangeToFees = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : false;
                                var hashCache = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : new HashCache1();
                                _classCallCheck2(this, TxBuilder);
                                return _super36.call(this, {
                                    tx: tx,
                                    txIns: txIns,
                                    txOuts: txOuts,
                                    uTxOutMap: uTxOutMap,
                                    sigOperations: sigOperations,
                                    changeScript: changeScript,
                                    changeAmountBn: changeAmountBn,
                                    feeAmountBn: feeAmountBn,
                                    feePerKbNum: feePerKbNum,
                                    nLockTime: nLockTime,
                                    versionBytesNum: versionBytesNum,
                                    sigsPerInput: sigsPerInput,
                                    dust: dust,
                                    dustChangeToFees: dustChangeToFees,
                                    hashCache: hashCache
                                });
                            }
                            _createClass2(TxBuilder, [
                                {
                                    key: "toJSON",
                                    value: function toJSON() {
                                        var json = {};
                                        json.tx = this.tx.toHex();
                                        json.txIns = this.txIns.map(function(txIn) {
                                            return txIn.toHex();
                                        });
                                        json.txOuts = this.txOuts.map(function(txOut) {
                                            return txOut.toHex();
                                        });
                                        json.uTxOutMap = this.uTxOutMap.toJSON();
                                        json.sigOperations = this.sigOperations.toJSON();
                                        json.changeScript = this.changeScript ? this.changeScript.toHex() : undefined;
                                        json.changeAmountBn = this.changeAmountBn ? this.changeAmountBn.toNumber() : undefined;
                                        json.feeAmountBn = this.feeAmountBn ? this.feeAmountBn.toNumber() : undefined;
                                        json.feePerKbNum = this.feePerKbNum;
                                        json.sigsPerInput = this.sigsPerInput;
                                        json.dust = this.dust;
                                        json.dustChangeToFees = this.dustChangeToFees;
                                        json.hashCache = this.hashCache.toJSON();
                                        return json;
                                    }
                                },
                                {
                                    key: "fromJSON",
                                    value: function fromJSON(json) {
                                        this.tx = new Tx1().fromHex(json.tx);
                                        this.txIns = json.txIns.map(function(txIn) {
                                            return TxIn1.fromHex(txIn);
                                        });
                                        this.txOuts = json.txOuts.map(function(txOut) {
                                            return TxOut1.fromHex(txOut);
                                        });
                                        this.uTxOutMap = new TxOutMap1().fromJSON(json.uTxOutMap);
                                        this.sigOperations = new SigOperations1().fromJSON(json.sigOperations);
                                        this.changeScript = json.changeScript ? new Script1().fromHex(json.changeScript) : undefined;
                                        this.changeAmountBn = json.changeAmountBn ? new Bn(json.changeAmountBn) : undefined;
                                        this.feeAmountBn = json.feeAmountBn ? new Bn(json.feeAmountBn) : undefined;
                                        this.feePerKbNum = json.feePerKbNum || this.feePerKbNum;
                                        this.sigsPerInput = json.sigsPerInput || this.sigsPerInput;
                                        this.dust = json.dust || this.dust;
                                        this.dustChangeToFees = json.dustChangeToFees || this.dustChangeToFees;
                                        this.hashCache = HashCache1.fromJSON(json.hashCache);
                                        return this;
                                    }
                                },
                                {
                                    key: "setFeePerKbNum",
                                    value: function setFeePerKbNum(feePerKbNum) {
                                        if (typeof feePerKbNum !== "number" || feePerKbNum < 0) throw new Error("cannot set a fee of zero or less");
                                        this.feePerKbNum = feePerKbNum;
                                        return this;
                                    }
                                },
                                {
                                    key: "setChangeAddress",
                                    value: function setChangeAddress(changeAddress) {
                                        this.changeScript = changeAddress.toTxOutScript();
                                        return this;
                                    }
                                },
                                {
                                    key: "setChangeScript",
                                    value: function setChangeScript(changeScript) {
                                        this.changeScript = changeScript;
                                        return this;
                                    }
                                },
                                {
                                    key: "setNLocktime",
                                    value: function setNLocktime(nLockTime) {
                                        this.nLockTime = nLockTime;
                                        return this;
                                    }
                                },
                                {
                                    key: "setVersion",
                                    value: function setVersion(versionBytesNum) {
                                        this.versionBytesNum = versionBytesNum;
                                        return this;
                                    }
                                },
                                {
                                    key: "setDust",
                                    value: function setDust() {
                                        var dust = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Constants$1.dust;
                                        this.dust = dust;
                                        return this;
                                    }
                                },
                                {
                                    key: "sendDustChangeToFees",
                                    value: function sendDustChangeToFees() {
                                        var dustChangeToFees = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                                        this.dustChangeToFees = dustChangeToFees;
                                        return this;
                                    }
                                },
                                {
                                    key: "importPartiallySignedTx",
                                    value: function importPartiallySignedTx(tx) {
                                        var uTxOutMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.uTxOutMap;
                                        var sigOperations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.sigOperations;
                                        this.tx = tx;
                                        this.uTxOutMap = uTxOutMap;
                                        this.sigOperations = sigOperations;
                                        return this;
                                    }
                                },
                                {
                                    key: "inputFromScript",
                                    value: function inputFromScript(txHashBuf, txOutNum, txOut, script, nSequence) {
                                        if (!Buffer.isBuffer(txHashBuf) || !(typeof txOutNum === "number") || !(txOut instanceof TxOut1) || !(script instanceof Script1)) throw new Error("invalid one of: txHashBuf, txOutNum, txOut, script");
                                        this.txIns.push(TxIn1.fromProperties(txHashBuf, txOutNum, script, nSequence));
                                        this.uTxOutMap.set(txHashBuf, txOutNum, txOut);
                                        return this;
                                    }
                                },
                                {
                                    key: "addSigOperation",
                                    value: function addSigOperation(txHashBuf, txOutNum, nScriptChunk, type, addressStr, nHashType) {
                                        this.sigOperations.addOne(txHashBuf, txOutNum, nScriptChunk, type, addressStr, nHashType);
                                        return this;
                                    }
                                },
                                {
                                    key: "inputFromPubKeyHash",
                                    value: function inputFromPubKeyHash(txHashBuf, txOutNum, txOut, pubKey, nSequence, nHashType) {
                                        if (!Buffer.isBuffer(txHashBuf) || typeof txOutNum !== "number" || !(txOut instanceof TxOut1)) throw new Error("invalid one of: txHashBuf, txOutNum, txOut");
                                        this.txIns.push(new TxIn1().fromObject({
                                            nSequence: nSequence
                                        }).fromPubKeyHashTxOut(txHashBuf, txOutNum, txOut, pubKey));
                                        this.uTxOutMap.set(txHashBuf, txOutNum, txOut);
                                        var addressStr = Address1.fromTxOutScript(txOut.script).toString();
                                        this.addSigOperation(txHashBuf, txOutNum, 0, "sig", addressStr, nHashType);
                                        this.addSigOperation(txHashBuf, txOutNum, 1, "pubKey", addressStr);
                                        return this;
                                    }
                                },
                                {
                                    key: "outputToAddress",
                                    value: function outputToAddress(valueBn, addr) {
                                        if (!(addr instanceof Address1) || !(valueBn instanceof Bn)) throw new Error("addr must be an Address, and valueBn must be a Bn");
                                        var script = new Script1().fromPubKeyHash(addr.hashBuf);
                                        this.outputToScript(valueBn, script);
                                        return this;
                                    }
                                },
                                {
                                    key: "outputToScript",
                                    value: function outputToScript(valueBn, script) {
                                        if (!(script instanceof Script1) || !(valueBn instanceof Bn)) throw new Error("script must be a Script, and valueBn must be a Bn");
                                        var txOut = TxOut1.fromProperties(valueBn, script);
                                        this.txOuts.push(txOut);
                                        return this;
                                    }
                                },
                                {
                                    key: "buildOutputs",
                                    value: function buildOutputs() {
                                        var _this24 = this;
                                        var outAmountBn = new Bn(0);
                                        this.txOuts.forEach(function(txOut) {
                                            if (txOut.valueBn.lt(_this24.dust) && !txOut.script.isOpReturn() && !txOut.script.isSafeDataOut()) throw new Error("cannot create output lesser than dust");
                                            outAmountBn = outAmountBn.add(txOut.valueBn);
                                            _this24.tx.addTxOut(txOut);
                                        });
                                        return outAmountBn;
                                    }
                                },
                                {
                                    key: "buildInputs",
                                    value: function buildInputs(outAmountBn) {
                                        var extraInputsNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                                        var inAmountBn = new Bn(0);
                                        var _iterator2 = _createForOfIteratorHelper(this.txIns), _step2;
                                        try {
                                            for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                                                var txIn = _step2.value;
                                                var txOut = this.uTxOutMap.get(txIn.txHashBuf, txIn.txOutNum);
                                                inAmountBn = inAmountBn.add(txOut.valueBn);
                                                this.tx.addTxIn(txIn);
                                                if (inAmountBn.geq(outAmountBn)) {
                                                    if (extraInputsNum <= 0) break;
                                                    extraInputsNum--;
                                                }
                                            }
                                        } catch (err) {
                                            _iterator2.e(err);
                                        } finally{
                                            _iterator2.f();
                                        }
                                        if (inAmountBn.lt(outAmountBn)) throw new Error("not enough funds for outputs: inAmountBn " + inAmountBn.toNumber() + " outAmountBn " + outAmountBn.toNumber());
                                        return inAmountBn;
                                    }
                                },
                                {
                                    key: "estimateSize",
                                    value: function estimateSize() {
                                        var _this25 = this;
                                        var sigSize = 72;
                                        var pubKeySize = 35;
                                        var size = this.tx.toBuffer().length;
                                        this.tx.txIns.forEach(function(txIn) {
                                            var txHashBuf = txIn.txHashBuf, txOutNum = txIn.txOutNum;
                                            var sigOperations = _this25.sigOperations.get(txHashBuf, txOutNum);
                                            sigOperations.forEach(function(obj) {
                                                var nScriptChunk = obj.nScriptChunk, type = obj.type;
                                                var script = new Script1([
                                                    txIn.script.chunks[nScriptChunk]
                                                ]);
                                                var scriptSize = script.toBuffer().length;
                                                size -= scriptSize;
                                                if (type === "sig") size += sigSize;
                                                else if (obj.type === "pubKey") size += pubKeySize;
                                                else throw new Error("unsupported sig operations type");
                                            });
                                        });
                                        size = size + 1;
                                        return Math.round(size);
                                    }
                                },
                                {
                                    key: "estimateFee",
                                    value: function estimateFee() {
                                        var extraFeeAmount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Bn(0);
                                        var fee = Math.ceil(this.estimateSize() / 1000 * this.feePerKbNum);
                                        return new Bn(fee).add(extraFeeAmount);
                                    }
                                },
                                {
                                    key: "build",
                                    value: function build() {
                                        var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                                            useAllInputs: false
                                        };
                                        var minFeeAmountBn;
                                        if (this.txIns.length <= 0) throw Error("tx-builder number of inputs must be greater than 0");
                                        if (!this.changeScript) throw new Error("must specify change script to use build method");
                                        for(var extraInputsNum = opts.useAllInputs ? this.txIns.length - 1 : 0; extraInputsNum < this.txIns.length; extraInputsNum++){
                                            this.tx = new Tx1();
                                            var outAmountBn = this.buildOutputs();
                                            var changeTxOut = TxOut1.fromProperties(new Bn(0), this.changeScript);
                                            this.tx.addTxOut(changeTxOut);
                                            var inAmountBn = void 0;
                                            try {
                                                inAmountBn = this.buildInputs(outAmountBn, extraInputsNum);
                                            } catch (err) {
                                                if (err.message.includes("not enough funds for outputs")) throw new Error("unable to gather enough inputs for outputs and fee");
                                                else throw err;
                                            }
                                            this.changeAmountBn = inAmountBn.sub(outAmountBn);
                                            changeTxOut.valueBn = this.changeAmountBn;
                                            minFeeAmountBn = this.estimateFee();
                                            if (this.changeAmountBn.geq(minFeeAmountBn) && this.changeAmountBn.sub(minFeeAmountBn).gt(this.dust)) break;
                                        }
                                        if (this.changeAmountBn.geq(minFeeAmountBn)) {
                                            this.feeAmountBn = minFeeAmountBn;
                                            this.changeAmountBn = this.changeAmountBn.sub(this.feeAmountBn);
                                            this.tx.txOuts[this.tx.txOuts.length - 1].valueBn = this.changeAmountBn;
                                            if (this.changeAmountBn.lt(this.dust)) {
                                                if (this.dustChangeToFees) {
                                                    this.tx.txOuts.pop();
                                                    this.tx.txOutsVi = VarInt1.fromNumber(this.tx.txOutsVi.toNumber() - 1);
                                                    this.feeAmountBn = this.feeAmountBn.add(this.changeAmountBn);
                                                    this.changeAmountBn = new Bn(0);
                                                } else throw new Error("unable to create change amount greater than dust");
                                            }
                                            this.tx.nLockTime = this.nLockTime;
                                            this.tx.versionBytesNum = this.versionBytesNum;
                                            if (this.tx.txOuts.length === 0) throw new Error("outputs length is zero - unable to create any outputs greater than dust");
                                            return this;
                                        } else throw new Error("unable to gather enough inputs for outputs and fee");
                                    }
                                },
                                {
                                    key: "sort",
                                    value: function sort() {
                                        this.tx.sort();
                                        return this;
                                    }
                                },
                                {
                                    key: "fillSig",
                                    value: function fillSig(nIn, nScriptChunk, sig) {
                                        var txIn = this.tx.txIns[nIn];
                                        txIn.script.chunks[nScriptChunk] = new Script1().writeBuffer(sig.toTxFormat()).chunks[0];
                                        txIn.scriptVi = VarInt1.fromNumber(txIn.script.toBuffer().length);
                                        return this;
                                    }
                                },
                                {
                                    key: "getSig",
                                    value: function getSig(keyPair) {
                                        var nHashType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                        var nIn = arguments.length > 2 ? arguments[2] : undefined;
                                        var subScript = arguments.length > 3 ? arguments[3] : undefined;
                                        var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Tx1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        var valueBn;
                                        if (nHashType & Sig1.SIGHASH_FORKID && flags & Tx1.SCRIPT_ENABLE_SIGHASH_FORKID) {
                                            var txHashBuf = this.tx.txIns[nIn].txHashBuf;
                                            var txOutNum = this.tx.txIns[nIn].txOutNum;
                                            var txOut = this.uTxOutMap.get(txHashBuf, txOutNum);
                                            if (!txOut) throw new Error("for SIGHASH_FORKID must provide UTXOs");
                                            valueBn = txOut.valueBn;
                                        }
                                        return this.tx.sign(keyPair, nHashType, nIn, subScript, valueBn, flags, this.hashCache);
                                    }
                                },
                                {
                                    key: "asyncGetSig",
                                    value: function asyncGetSig(keyPair) {
                                        var nHashType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                        var nIn = arguments.length > 2 ? arguments[2] : undefined;
                                        var subScript = arguments.length > 3 ? arguments[3] : undefined;
                                        var flags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Tx1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        var valueBn;
                                        if (nHashType & Sig1.SIGHASH_FORKID && flags & Tx1.SCRIPT_ENABLE_SIGHASH_FORKID) {
                                            var txHashBuf = this.tx.txIns[nIn].txHashBuf;
                                            var txOutNum = this.tx.txIns[nIn].txOutNum;
                                            var txOut = this.uTxOutMap.get(txHashBuf, txOutNum);
                                            if (!txOut) throw new Error("for SIGHASH_FORKID must provide UTXOs");
                                            valueBn = txOut.valueBn;
                                        }
                                        return this.tx.asyncSign(keyPair, nHashType, nIn, subScript, valueBn, flags, this.hashCache);
                                    }
                                },
                                {
                                    key: "signTxIn",
                                    value: function signTxIn(nIn, keyPair, txOut, nScriptChunk) {
                                        var nHashType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                        var flags = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Tx1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        var txIn = this.tx.txIns[nIn];
                                        var script = txIn.script;
                                        if (nScriptChunk === undefined && script.isPubKeyHashIn()) nScriptChunk = 0;
                                        if (nScriptChunk === undefined) throw new Error("cannot sign unknown script type for input " + nIn);
                                        var txHashBuf = txIn.txHashBuf;
                                        var txOutNum = txIn.txOutNum;
                                        if (!txOut) txOut = this.uTxOutMap.get(txHashBuf, txOutNum);
                                        var outScript = txOut.script;
                                        var subScript = outScript;
                                        var sig = this.getSig(keyPair, nHashType, nIn, subScript, flags, this.hashCache);
                                        this.fillSig(nIn, nScriptChunk, sig);
                                        return this;
                                    }
                                },
                                {
                                    key: "asyncSignTxIn",
                                    value: function() {
                                        var _asyncSignTxIn = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee72(nIn, keyPair, txOut, nScriptChunk) {
                                            var nHashType, flags, txIn, script, txHashBuf, txOutNum, outScript, subScript, sig, _args76 = arguments;
                                            return _regeneratorRuntime().wrap(function _callee72$(_context76) {
                                                while(true)switch(_context76.prev = _context76.next){
                                                    case 0:
                                                        nHashType = _args76.length > 4 && _args76[4] !== undefined ? _args76[4] : Sig1.SIGHASH_ALL | Sig1.SIGHASH_FORKID;
                                                        flags = _args76.length > 5 && _args76[5] !== undefined ? _args76[5] : Tx1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                        txIn = this.tx.txIns[nIn];
                                                        script = txIn.script;
                                                        if (nScriptChunk === undefined && script.isPubKeyHashIn()) nScriptChunk = 0;
                                                        if (!(nScriptChunk === undefined)) {
                                                            _context76.next = 7;
                                                            break;
                                                        }
                                                        throw new Error("cannot sign unknown script type for input " + nIn);
                                                    case 7:
                                                        txHashBuf = txIn.txHashBuf;
                                                        txOutNum = txIn.txOutNum;
                                                        if (!txOut) txOut = this.uTxOutMap.get(txHashBuf, txOutNum);
                                                        outScript = txOut.script;
                                                        subScript = outScript;
                                                        _context76.next = 14;
                                                        return this.asyncGetSig(keyPair, nHashType, nIn, subScript, flags, this.hashCache);
                                                    case 14:
                                                        sig = _context76.sent;
                                                        this.fillSig(nIn, nScriptChunk, sig);
                                                        return _context76.abrupt("return", this);
                                                    case 17:
                                                    case "end":
                                                        return _context76.stop();
                                                }
                                            }, _callee72, this);
                                        }));
                                        function asyncSignTxIn(_x98, _x99, _x100, _x101) {
                                            return _asyncSignTxIn.apply(this, arguments);
                                        }
                                        return asyncSignTxIn;
                                    }()
                                },
                                {
                                    key: "signWithKeyPairs",
                                    value: function signWithKeyPairs(keyPairs) {
                                        var addressStrMap = {};
                                        var _iterator3 = _createForOfIteratorHelper(keyPairs), _step3;
                                        try {
                                            for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                                                var _keyPair = _step3.value;
                                                var _addressStr = Address1.fromPubKey(_keyPair.pubKey).toString();
                                                addressStrMap[_addressStr] = _keyPair;
                                            }
                                        } catch (err) {
                                            _iterator3.e(err);
                                        } finally{
                                            _iterator3.f();
                                        }
                                        for(var nIn in this.tx.txIns){
                                            var txIn = this.tx.txIns[nIn];
                                            var arr = this.sigOperations.get(txIn.txHashBuf, txIn.txOutNum);
                                            var _iterator4 = _createForOfIteratorHelper(arr), _step4;
                                            try {
                                                for(_iterator4.s(); !(_step4 = _iterator4.n()).done;){
                                                    var obj = _step4.value;
                                                    var nScriptChunk = obj.nScriptChunk, type = obj.type, addressStr = obj.addressStr, nHashType = obj.nHashType;
                                                    var keyPair = addressStrMap[addressStr];
                                                    if (!keyPair) {
                                                        obj.log = "cannot find keyPair for addressStr ".concat(addressStr);
                                                        continue;
                                                    }
                                                    var txOut = this.uTxOutMap.get(txIn.txHashBuf, txIn.txOutNum);
                                                    if (type === "sig") {
                                                        this.signTxIn(nIn, keyPair, txOut, nScriptChunk, nHashType);
                                                        obj.log = "successfully inserted signature";
                                                    } else if (type === "pubKey") {
                                                        txIn.script.chunks[nScriptChunk] = new Script1().writeBuffer(keyPair.pubKey.toBuffer()).chunks[0];
                                                        txIn.setScript(txIn.script);
                                                        obj.log = "successfully inserted public key";
                                                    } else {
                                                        obj.log = "cannot perform operation of type ".concat(type);
                                                        continue;
                                                    }
                                                }
                                            } catch (err) {
                                                _iterator4.e(err);
                                            } finally{
                                                _iterator4.f();
                                            }
                                        }
                                        return this;
                                    }
                                }
                            ], [
                                {
                                    key: "allSigsPresent",
                                    value: function allSigsPresent(m, script) {
                                        var present = 0;
                                        for(var i = 1; i < script.chunks.length - 1; i++)if (script.chunks[i].buf) present++;
                                        return present === m;
                                    }
                                },
                                {
                                    key: "removeBlankSigs",
                                    value: function removeBlankSigs(script) {
                                        script = new Script1(script.chunks.slice());
                                        for(var i = 1; i < script.chunks.length - 1; i++)if (!script.chunks[i].buf) script.chunks.splice(i, 1);
                                        return script;
                                    }
                                }
                            ]);
                            return TxBuilder;
                        }(Struct1);
                        exports.TxBuilder = TxBuilder1;
                        var TxVerifier1 = /*#__PURE__*/ function(_Struct27) {
                            _inherits(TxVerifier, _Struct27);
                            var _super37 = _createSuper(TxVerifier);
                            function TxVerifier(tx, txOutMap, errStr, interp) {
                                _classCallCheck2(this, TxVerifier);
                                return _super37.call(this, {
                                    tx: tx,
                                    txOutMap: txOutMap,
                                    errStr: errStr,
                                    interp: interp
                                });
                            }
                            _createClass2(TxVerifier, [
                                {
                                    key: "verify",
                                    value: function verify() {
                                        var flags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Interp1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                        return !this.checkStr() && !this.verifyStr(flags);
                                    }
                                },
                                {
                                    key: "asyncVerify",
                                    value: function() {
                                        var _asyncVerify5 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee73(flags) {
                                            var verifyStr;
                                            return _regeneratorRuntime().wrap(function _callee73$(_context77) {
                                                while(true)switch(_context77.prev = _context77.next){
                                                    case 0:
                                                        _context77.next = 2;
                                                        return this.asyncVerifyStr(flags);
                                                    case 2:
                                                        verifyStr = _context77.sent;
                                                        return _context77.abrupt("return", !this.checkStr() && !verifyStr);
                                                    case 4:
                                                    case "end":
                                                        return _context77.stop();
                                                }
                                            }, _callee73, this);
                                        }));
                                        function asyncVerify(_x102) {
                                            return _asyncVerify5.apply(this, arguments);
                                        }
                                        return asyncVerify;
                                    }()
                                },
                                {
                                    key: "checkStr",
                                    value: function checkStr() {
                                        if (this.tx.txIns.length === 0 || this.tx.txInsVi.toNumber() === 0) {
                                            this.errStr = "transaction txIns empty";
                                            return this.errStr;
                                        }
                                        if (this.tx.txOuts.length === 0 || this.tx.txOutsVi.toNumber() === 0) {
                                            this.errStr = "transaction txOuts empty";
                                            return this.errStr;
                                        }
                                        if (this.tx.toBuffer().length > Block1.MAX_BLOCK_SIZE) {
                                            this.errStr = "transaction over the maximum block size";
                                            return this.errStr;
                                        }
                                        var valueoutbn = new Bn(0);
                                        for(var i = 0; i < this.tx.txOuts.length; i++){
                                            var txOut = this.tx.txOuts[i];
                                            if (txOut.valueBn.lt(0)) {
                                                this.errStr = "transaction txOut " + i + " negative";
                                                return this.errStr;
                                            }
                                            if (txOut.valueBn.gt(Tx1.MAX_MONEY)) {
                                                this.errStr = "transaction txOut " + i + " greater than MAX_MONEY";
                                                return this.errStr;
                                            }
                                            valueoutbn = valueoutbn.add(txOut.valueBn);
                                            if (valueoutbn.gt(Tx1.MAX_MONEY)) {
                                                this.errStr = "transaction txOut " + i + " total output greater than MAX_MONEY";
                                                return this.errStr;
                                            }
                                        }
                                        var txInmap = {};
                                        for(var _i19 = 0; _i19 < this.tx.txIns.length; _i19++){
                                            var txIn = this.tx.txIns[_i19];
                                            var inputid = txIn.txHashBuf.toString("hex") + ":" + txIn.txOutNum;
                                            if (txInmap[inputid] !== undefined) {
                                                this.errStr = "transaction input " + _i19 + " duplicate input";
                                                return this.errStr;
                                            }
                                            txInmap[inputid] = true;
                                        }
                                        if (this.tx.isCoinbase()) {
                                            var buf = this.tx.txIns[0].script.toBuffer();
                                            if (buf.length < 2 || buf.length > 100) {
                                                this.errStr = "coinbase trasaction script size invalid";
                                                return this.errStr;
                                            }
                                        } else {
                                            for(var _i20 = 0; _i20 < this.tx.txIns.length; _i20++)if (this.tx.txIns[_i20].hasNullInput()) {
                                                this.errStr = "transaction input " + _i20 + " has null input";
                                                return this.errStr;
                                            }
                                        }
                                        return false;
                                    }
                                },
                                {
                                    key: "verifyStr",
                                    value: function verifyStr(flags) {
                                        for(var i = 0; i < this.tx.txIns.length; i++)if (!this.verifyNIn(i, flags)) {
                                            this.errStr = "input " + i + " failed script verify";
                                            return this.errStr;
                                        }
                                        return false;
                                    }
                                },
                                {
                                    key: "asyncVerifyStr",
                                    value: function() {
                                        var _asyncVerifyStr = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee74(flags) {
                                            var i, verifyNIn;
                                            return _regeneratorRuntime().wrap(function _callee74$(_context78) {
                                                while(true)switch(_context78.prev = _context78.next){
                                                    case 0:
                                                        i = 0;
                                                    case 1:
                                                        if (!(i < this.tx.txIns.length)) {
                                                            _context78.next = 11;
                                                            break;
                                                        }
                                                        _context78.next = 4;
                                                        return this.asyncVerifyNIn(i, flags);
                                                    case 4:
                                                        verifyNIn = _context78.sent;
                                                        if (verifyNIn) {
                                                            _context78.next = 8;
                                                            break;
                                                        }
                                                        this.errStr = "input " + i + " failed script verify";
                                                        return _context78.abrupt("return", this.errStr);
                                                    case 8:
                                                        i++;
                                                        _context78.next = 1;
                                                        break;
                                                    case 11:
                                                        return _context78.abrupt("return", false);
                                                    case 12:
                                                    case "end":
                                                        return _context78.stop();
                                                }
                                            }, _callee74, this);
                                        }));
                                        function asyncVerifyStr(_x103) {
                                            return _asyncVerifyStr.apply(this, arguments);
                                        }
                                        return asyncVerifyStr;
                                    }()
                                },
                                {
                                    key: "verifyNIn",
                                    value: function verifyNIn(nIn, flags) {
                                        var txIn = this.tx.txIns[nIn];
                                        var scriptSig = txIn.script;
                                        var txOut = this.txOutMap.get(txIn.txHashBuf, txIn.txOutNum);
                                        if (!txOut) {
                                            console.log("output " + txIn.txOutNum + " not found");
                                            return false;
                                        }
                                        var scriptPubKey = txOut.script;
                                        var valueBn = txOut.valueBn;
                                        this.interp = new Interp1();
                                        var verified = this.interp.verify(scriptSig, scriptPubKey, this.tx, nIn, flags, valueBn);
                                        return verified;
                                    }
                                },
                                {
                                    key: "asyncVerifyNIn",
                                    value: function() {
                                        var _asyncVerifyNIn = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee75(nIn, flags) {
                                            var txIn, scriptSig, txOut, scriptPubKey, valueBn, workersResult, verified;
                                            return _regeneratorRuntime().wrap(function _callee75$(_context79) {
                                                while(true)switch(_context79.prev = _context79.next){
                                                    case 0:
                                                        txIn = this.tx.txIns[nIn];
                                                        scriptSig = txIn.script;
                                                        txOut = this.txOutMap.get(txIn.txHashBuf, txIn.txOutNum);
                                                        if (txOut) {
                                                            _context79.next = 6;
                                                            break;
                                                        }
                                                        console.log("output " + txIn.txOutNum + " not found");
                                                        return _context79.abrupt("return", false);
                                                    case 6:
                                                        scriptPubKey = txOut.script;
                                                        valueBn = txOut.valueBn;
                                                        this.interp = new Interp1();
                                                        _context79.next = 11;
                                                        return Workers1.asyncObjectMethod(this.interp, "verify", [
                                                            scriptSig,
                                                            scriptPubKey,
                                                            this.tx,
                                                            nIn,
                                                            flags,
                                                            valueBn
                                                        ]);
                                                    case 11:
                                                        workersResult = _context79.sent;
                                                        verified = JSON.parse(workersResult.resbuf.toString());
                                                        return _context79.abrupt("return", verified);
                                                    case 14:
                                                    case "end":
                                                        return _context79.stop();
                                                }
                                            }, _callee75, this);
                                        }));
                                        function asyncVerifyNIn(_x104, _x105) {
                                            return _asyncVerifyNIn.apply(this, arguments);
                                        }
                                        return asyncVerifyNIn;
                                    }()
                                },
                                {
                                    key: "getDebugObject",
                                    value: function getDebugObject() {
                                        return {
                                            errStr: this.errStr,
                                            interpFailure: this.interp ? this.interp.getDebugObject() : undefined
                                        };
                                    }
                                },
                                {
                                    key: "getDebugString",
                                    value: function getDebugString() {
                                        return JSON.stringify(this.getDebugObject(), null, 2);
                                    }
                                }
                            ], [
                                {
                                    key: "verify",
                                    value: function verify(tx, txOutMap, flags) {
                                        return new TxVerifier(tx, txOutMap).verify(flags);
                                    }
                                },
                                {
                                    key: "asyncVerify",
                                    value: function asyncVerify(tx, txOutMap, flags) {
                                        return new TxVerifier(tx, txOutMap).asyncVerify(flags);
                                    }
                                }
                            ]);
                            return TxVerifier;
                        }(Struct1);
                        exports.TxVerifier = TxVerifier1;
                        var Aes1 = /*#__PURE__*/ _createClass2(function Aes() {
                            _classCallCheck2(this, Aes);
                        });
                        exports.Aes = Aes1;
                        Aes1.encrypt = function(messageBuf, keyBuf) {
                            var key = Aes1.buf2Words(keyBuf);
                            var message = Aes1.buf2Words(messageBuf);
                            var a = new _aes["default"](key);
                            var enc = a.encrypt(message);
                            var encBuf = Aes1.words2Buf(enc);
                            return encBuf;
                        };
                        Aes1.decrypt = function(encBuf, keyBuf) {
                            var enc = Aes1.buf2Words(encBuf);
                            var key = Aes1.buf2Words(keyBuf);
                            var a = new _aes["default"](key);
                            var message = a.decrypt(enc);
                            var messageBuf = Aes1.words2Buf(message);
                            return messageBuf;
                        };
                        Aes1.buf2Words = function(buf) {
                            if (buf.length % 4) throw new Error("buf length must be a multiple of 4");
                            var words = [];
                            for(var i = 0; i < buf.length / 4; i++)words.push(buf.readUInt32BE(i * 4));
                            return words;
                        };
                        Aes1.words2Buf = function(words) {
                            var buf = Buffer.alloc(words.length * 4);
                            for(var i = 0; i < words.length; i++)buf.writeUInt32BE(words[i], i * 4);
                            return buf;
                        };
                        var Cbc1 = /*#__PURE__*/ _createClass2(function Cbc() {
                            _classCallCheck2(this, Cbc);
                        });
                        exports.Cbc = Cbc1;
                        Cbc1.buf2BlocksBuf = function(buf, blockSize) {
                            var bytesize = blockSize / 8;
                            var blockBufs = [];
                            for(var i = 0; i <= buf.length / bytesize; i++){
                                var blockBuf = buf.slice(i * bytesize, i * bytesize + bytesize);
                                if (blockBuf.length < blockSize) blockBuf = Cbc1.pkcs7Pad(blockBuf, blockSize);
                                blockBufs.push(blockBuf);
                            }
                            return blockBufs;
                        };
                        Cbc1.blockBufs2Buf = function(blockBufs) {
                            var last = blockBufs[blockBufs.length - 1];
                            last = Cbc1.pkcs7Unpad(last);
                            blockBufs[blockBufs.length - 1] = last;
                            var buf = Buffer.concat(blockBufs);
                            return buf;
                        };
                        Cbc1.encrypt = function(messageBuf, ivBuf, blockCipher, cipherKeyBuf) {
                            var blockSize = ivBuf.length * 8;
                            var blockBufs = Cbc1.buf2BlocksBuf(messageBuf, blockSize);
                            var encBufs = Cbc1.encryptBlocks(blockBufs, ivBuf, blockCipher, cipherKeyBuf);
                            var encBuf = Buffer.concat(encBufs);
                            return encBuf;
                        };
                        Cbc1.decrypt = function(encBuf, ivBuf, blockCipher, cipherKeyBuf) {
                            var bytesize = ivBuf.length;
                            var encBufs = [];
                            for(var i = 0; i < encBuf.length / bytesize; i++)encBufs.push(encBuf.slice(i * bytesize, i * bytesize + bytesize));
                            var blockBufs = Cbc1.decryptBlocks(encBufs, ivBuf, blockCipher, cipherKeyBuf);
                            var buf = Cbc1.blockBufs2Buf(blockBufs);
                            return buf;
                        };
                        Cbc1.encryptBlock = function(blockBuf, ivBuf, blockCipher, cipherKeyBuf) {
                            var xorbuf = Cbc1.xorBufs(blockBuf, ivBuf);
                            var encBuf = blockCipher.encrypt(xorbuf, cipherKeyBuf);
                            return encBuf;
                        };
                        Cbc1.decryptBlock = function(encBuf, ivBuf, blockCipher, cipherKeyBuf) {
                            var xorbuf = blockCipher.decrypt(encBuf, cipherKeyBuf);
                            var blockBuf = Cbc1.xorBufs(xorbuf, ivBuf);
                            return blockBuf;
                        };
                        Cbc1.encryptBlocks = function(blockBufs, ivBuf, blockCipher, cipherKeyBuf) {
                            var encBufs = [];
                            for(var i = 0; i < blockBufs.length; i++){
                                var blockBuf = blockBufs[i];
                                var encBuf = Cbc1.encryptBlock(blockBuf, ivBuf, blockCipher, cipherKeyBuf);
                                encBufs.push(encBuf);
                                ivBuf = encBuf;
                            }
                            return encBufs;
                        };
                        Cbc1.decryptBlocks = function(encBufs, ivBuf, blockCipher, cipherKeyBuf) {
                            var blockBufs = [];
                            for(var i = 0; i < encBufs.length; i++){
                                var encBuf = encBufs[i];
                                var blockBuf = Cbc1.decryptBlock(encBuf, ivBuf, blockCipher, cipherKeyBuf);
                                blockBufs.push(blockBuf);
                                ivBuf = encBuf;
                            }
                            return blockBufs;
                        };
                        Cbc1.pkcs7Pad = function(buf, blockSize) {
                            var bytesize = blockSize / 8;
                            var padbytesize = bytesize - buf.length;
                            var pad = Buffer.alloc(padbytesize);
                            pad.fill(padbytesize);
                            var paddedbuf = Buffer.concat([
                                buf,
                                pad
                            ]);
                            return paddedbuf;
                        };
                        Cbc1.pkcs7Unpad = function(paddedbuf) {
                            var padlength = paddedbuf[paddedbuf.length - 1];
                            var padbuf = paddedbuf.slice(paddedbuf.length - padlength, paddedbuf.length);
                            var padbuf2 = Buffer.alloc(padlength);
                            padbuf2.fill(padlength);
                            if (!cmp(padbuf, padbuf2)) throw new Error("invalid padding");
                            return paddedbuf.slice(0, paddedbuf.length - padlength);
                        };
                        Cbc1.xorBufs = function(buf1, buf2) {
                            if (buf1.length !== buf2.length) throw new Error("bufs must have the same length");
                            var buf = Buffer.alloc(buf1.length);
                            for(var i = 0; i < buf1.length; i++)buf[i] = buf1[i] ^ buf2[i];
                            return buf;
                        };
                        var Aescbc1 = /*#__PURE__*/ _createClass2(function Aescbc() {
                            _classCallCheck2(this, Aescbc);
                        });
                        exports.Aescbc = Aescbc1;
                        Aescbc1.encrypt = function(messageBuf, cipherKeyBuf, ivBuf) {
                            var concatIvBuf = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
                            ivBuf = ivBuf || Random1.getRandomBuffer(16);
                            var ctBuf = Cbc1.encrypt(messageBuf, ivBuf, Aes1, cipherKeyBuf);
                            if (concatIvBuf) return Buffer.concat([
                                ivBuf,
                                ctBuf
                            ]);
                            else return ctBuf;
                        };
                        Aescbc1.decrypt = function(encBuf, cipherKeyBuf) {
                            var ivBuf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                            if (!ivBuf) {
                                var _ivBuf = encBuf.slice(0, 16);
                                var ctBuf = encBuf.slice(16);
                                return Cbc1.decrypt(ctBuf, _ivBuf, Aes1, cipherKeyBuf);
                            } else {
                                var _ctBuf = encBuf;
                                return Cbc1.decrypt(_ctBuf, ivBuf, Aes1, cipherKeyBuf);
                            }
                        };
                        var Ach1 = /*#__PURE__*/ _createClass2(function Ach() {
                            _classCallCheck2(this, Ach);
                        });
                        exports.Ach = Ach1;
                        Ach1.encrypt = function(messageBuf, cipherKeyBuf, ivBuf) {
                            var encBuf = Aescbc1.encrypt(messageBuf, cipherKeyBuf, ivBuf);
                            var hmacbuf = Hash1.sha256Hmac(encBuf, cipherKeyBuf);
                            return Buffer.concat([
                                hmacbuf,
                                encBuf
                            ]);
                        };
                        Ach1.asyncEncrypt = /*#__PURE__*/ function() {
                            var _ref13 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee76(messageBuf, cipherKeyBuf, ivBuf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee76$(_context80) {
                                    while(true)switch(_context80.prev = _context80.next){
                                        case 0:
                                            if (!ivBuf) ivBuf = Random1.getRandomBuffer(16);
                                            args = [
                                                messageBuf,
                                                cipherKeyBuf,
                                                ivBuf
                                            ];
                                            _context80.next = 4;
                                            return Workers1.asyncClassMethod(Ach1, "encrypt", args);
                                        case 4:
                                            workersResult = _context80.sent;
                                            return _context80.abrupt("return", workersResult.resbuf);
                                        case 6:
                                        case "end":
                                            return _context80.stop();
                                    }
                                }, _callee76);
                            }));
                            return function(_x106, _x107, _x108) {
                                return _ref13.apply(this, arguments);
                            };
                        }();
                        Ach1.decrypt = function(encBuf, cipherKeyBuf) {
                            if (encBuf.length < 64) throw new Error("The encrypted data must be at least 256+128+128 bits, which is the length of the Hmac plus the iv plus the smallest encrypted data size");
                            var hmacbuf = encBuf.slice(0, 32);
                            encBuf = encBuf.slice(32, encBuf.length);
                            var hmacbuf2 = Hash1.sha256Hmac(encBuf, cipherKeyBuf);
                            if (!cmp(hmacbuf, hmacbuf2)) throw new Error("Message authentication failed - Hmacs are not equivalent");
                            return Aescbc1.decrypt(encBuf, cipherKeyBuf);
                        };
                        Ach1.asyncDecrypt = /*#__PURE__*/ function() {
                            var _ref14 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee77(encBuf, cipherKeyBuf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee77$(_context81) {
                                    while(true)switch(_context81.prev = _context81.next){
                                        case 0:
                                            args = [
                                                encBuf,
                                                cipherKeyBuf
                                            ];
                                            _context81.next = 3;
                                            return Workers1.asyncClassMethod(Ach1, "decrypt", args);
                                        case 3:
                                            workersResult = _context81.sent;
                                            return _context81.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context81.stop();
                                    }
                                }, _callee77);
                            }));
                            return function(_x109, _x110) {
                                return _ref14.apply(this, arguments);
                            };
                        }();
                        var Ecies1 = /*#__PURE__*/ _createClass2(function Ecies() {
                            _classCallCheck2(this, Ecies);
                        });
                        exports.Ecies = Ecies1;
                        Ecies1.ivkEkM = function(privKey, pubKey) {
                            var r = privKey.bn;
                            var KB = pubKey.point;
                            var P = KB.mul(r);
                            var S = new PubKey1(P);
                            var Sbuf = S.toBuffer();
                            var hash = Hash1.sha512(Sbuf);
                            return {
                                iv: hash.slice(0, 16),
                                kE: hash.slice(16, 32),
                                kM: hash.slice(32, 64)
                            };
                        };
                        Ecies1.electrumEncrypt = function(messageBuf, toPubKey, fromKeyPair) {
                            var noKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
                            if (!Buffer.isBuffer(messageBuf)) throw new Error("messageBuf must be a buffer");
                            var Rbuf;
                            if (fromKeyPair === null) fromKeyPair = KeyPair1.fromRandom();
                            if (!noKey) Rbuf = fromKeyPair.pubKey.toDer(true);
                            var _Ecies$ivkEkM = Ecies1.ivkEkM(fromKeyPair.privKey, toPubKey), iv = _Ecies$ivkEkM.iv, kE = _Ecies$ivkEkM.kE, kM = _Ecies$ivkEkM.kM;
                            var ciphertext = Aescbc1.encrypt(messageBuf, kE, iv, false);
                            var BIE1 = Buffer.from("BIE1");
                            var encBuf;
                            if (Rbuf) encBuf = Buffer.concat([
                                BIE1,
                                Rbuf,
                                ciphertext
                            ]);
                            else encBuf = Buffer.concat([
                                BIE1,
                                ciphertext
                            ]);
                            var hmac = Hash1.sha256Hmac(encBuf, kM);
                            return Buffer.concat([
                                encBuf,
                                hmac
                            ]);
                        };
                        Ecies1.electrumDecrypt = function(encBuf, toPrivKey) {
                            var fromPubKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                            if (!Buffer.isBuffer(encBuf)) throw new Error("encBuf must be a buffer");
                            var tagLength = 32;
                            var magic = encBuf.slice(0, 4);
                            if (!magic.equals(Buffer.from("BIE1"))) throw new Error("Invalid Magic");
                            var offset = 4;
                            if (fromPubKey === null) {
                                var pub = encBuf.slice(4, 37);
                                fromPubKey = PubKey1.fromDer(pub);
                                offset = 37;
                            }
                            var _Ecies$ivkEkM2 = Ecies1.ivkEkM(toPrivKey, fromPubKey), iv = _Ecies$ivkEkM2.iv, kE = _Ecies$ivkEkM2.kE, kM = _Ecies$ivkEkM2.kM;
                            var ciphertext = encBuf.slice(offset, encBuf.length - tagLength);
                            var hmac = encBuf.slice(encBuf.length - tagLength, encBuf.length);
                            var hmac2 = Hash1.sha256Hmac(encBuf.slice(0, encBuf.length - tagLength), kM);
                            if (!hmac.equals(hmac2)) throw new Error("Invalid checksum");
                            return Aescbc1.decrypt(ciphertext, kE, iv);
                        };
                        Ecies1.bitcoreEncrypt = function(messageBuf, toPubKey, fromKeyPair, ivBuf) {
                            if (!fromKeyPair) fromKeyPair = KeyPair1.fromRandom();
                            var r = fromKeyPair.privKey.bn;
                            var RPubKey = fromKeyPair.pubKey;
                            var RBuf = RPubKey.toDer(true);
                            var KB = toPubKey.point;
                            var P = KB.mul(r);
                            var S = P.getX();
                            var Sbuf = S.toBuffer({
                                size: 32
                            });
                            var kEkM = Hash1.sha512(Sbuf);
                            var kE = kEkM.slice(0, 32);
                            var kM = kEkM.slice(32, 64);
                            var c = Aescbc1.encrypt(messageBuf, kE, ivBuf);
                            var d = Hash1.sha256Hmac(c, kM);
                            var encBuf = Buffer.concat([
                                RBuf,
                                c,
                                d
                            ]);
                            return encBuf;
                        };
                        Ecies1.asyncBitcoreEncrypt = /*#__PURE__*/ function() {
                            var _ref15 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee78(messageBuf, toPubKey, fromKeyPair, ivBuf) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee78$(_context82) {
                                    while(true)switch(_context82.prev = _context82.next){
                                        case 0:
                                            if (fromKeyPair) {
                                                _context82.next = 4;
                                                break;
                                            }
                                            _context82.next = 3;
                                            return KeyPair1.asyncFromRandom();
                                        case 3:
                                            fromKeyPair = _context82.sent;
                                        case 4:
                                            if (!ivBuf) ivBuf = Random1.getRandomBuffer(16);
                                            args = [
                                                messageBuf,
                                                toPubKey,
                                                fromKeyPair,
                                                ivBuf
                                            ];
                                            _context82.next = 8;
                                            return Workers1.asyncClassMethod(Ecies1, "bitcoreEncrypt", args);
                                        case 8:
                                            workersResult = _context82.sent;
                                            return _context82.abrupt("return", workersResult.resbuf);
                                        case 10:
                                        case "end":
                                            return _context82.stop();
                                    }
                                }, _callee78);
                            }));
                            return function(_x111, _x112, _x113, _x114) {
                                return _ref15.apply(this, arguments);
                            };
                        }();
                        Ecies1.bitcoreDecrypt = function(encBuf, toPrivKey) {
                            var kB = toPrivKey.bn;
                            var fromPubKey = PubKey1.fromDer(encBuf.slice(0, 33));
                            var R = fromPubKey.point;
                            var P = R.mul(kB);
                            if (P.eq(new Point1())) throw new Error("P equals 0");
                            var S = P.getX();
                            var Sbuf = S.toBuffer({
                                size: 32
                            });
                            var kEkM = Hash1.sha512(Sbuf);
                            var kE = kEkM.slice(0, 32);
                            var kM = kEkM.slice(32, 64);
                            var c = encBuf.slice(33, encBuf.length - 32);
                            var d = encBuf.slice(encBuf.length - 32, encBuf.length);
                            var d2 = Hash1.sha256Hmac(c, kM);
                            if (!cmp(d, d2)) throw new Error("Invalid checksum");
                            var messageBuf = Aescbc1.decrypt(c, kE);
                            return messageBuf;
                        };
                        Ecies1.asyncBitcoreDecrypt = /*#__PURE__*/ function() {
                            var _ref16 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee79(encBuf, toPrivKey) {
                                var args, workersResult;
                                return _regeneratorRuntime().wrap(function _callee79$(_context83) {
                                    while(true)switch(_context83.prev = _context83.next){
                                        case 0:
                                            args = [
                                                encBuf,
                                                toPrivKey
                                            ];
                                            _context83.next = 3;
                                            return Workers1.asyncClassMethod(Ecies1, "bitcoreDecrypt", args);
                                        case 3:
                                            workersResult = _context83.sent;
                                            return _context83.abrupt("return", workersResult.resbuf);
                                        case 5:
                                        case "end":
                                            return _context83.stop();
                                    }
                                }, _callee79);
                            }));
                            return function(_x115, _x116) {
                                return _ref16.apply(this, arguments);
                            };
                        }();
                        var deps = {
                            aes: _aes["default"],
                            bnjs: _bn2["default"],
                            bs58: _bs["default"],
                            elliptic: _bitcoinElliptic["default"],
                            hashjs: _hash["default"],
                            pbkdf2: _pbkdf["default"]
                        };
                        exports.deps = deps;
                    }).call(this);
                }).call(this, require("_process"), require("buffer").Buffer);
            },
            {
                "_process": 163,
                "aes": 209,
                "bitcoin-elliptic": 211,
                "bn.js": 222,
                "bs58": 225,
                "buffer": 63,
                "hash.js": 229,
                "is-hex": 243,
                "pbkdf2": 249,
                "randombytes": 255
            }
        ],
        208: [
            function(require, module, exports) {
                /*globals self, window */ "use strict";
                /*eslint-disable @mysticatea/prettier */ var _ref17 = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : /* otherwise */ undefined, AbortController = _ref17.AbortController, AbortSignal = _ref17.AbortSignal;
                /*eslint-enable @mysticatea/prettier */ module.exports = AbortController;
                module.exports.AbortSignal = AbortSignal;
                module.exports["default"] = AbortController;
            },
            {}
        ],
        209: [
            function(require, module, exports) {
                module.exports = AES; //@param {Array} key The key as an array of 4, 6 or 8 words.
                function AES(key) {
                    if (!this._tables[0][0][0]) this._precompute();
                    var tmp, encKey, decKey;
                    var sbox = this._tables[0][4];
                    var decTable = this._tables[1];
                    var keyLen = key.length;
                    var rcon = 1;
                    if (keyLen !== 4 && keyLen !== 6 && keyLen !== 8) throw new Error("invalid aes key size");
                    this._key = [
                        encKey = key.slice(0),
                        decKey = []
                    ]; // schedule encryption keys
                    for(var i = keyLen; i < 4 * keyLen + 28; i++){
                        tmp = encKey[i - 1]; // apply sbox
                        if (i % keyLen === 0 || keyLen === 8 && i % keyLen === 4) {
                            tmp = sbox[tmp >>> 24] << 24 ^ sbox[tmp >> 16 & 255] << 16 ^ sbox[tmp >> 8 & 255] << 8 ^ sbox[tmp & 255]; // shift rows and add rcon
                            if (i % keyLen === 0) {
                                tmp = tmp << 8 ^ tmp >>> 24 ^ rcon << 24;
                                rcon = rcon << 1 ^ (rcon >> 7) * 283;
                            }
                        }
                        encKey[i] = encKey[i - keyLen] ^ tmp;
                    } // schedule decryption keys
                    for(var j = 0; i; j++, i--){
                        tmp = encKey[j & 3 ? i : i - 4];
                        if (i <= 4 || j < 4) decKey[j] = tmp;
                        else decKey[j] = decTable[0][sbox[tmp >>> 24]] ^ decTable[1][sbox[tmp >> 16 & 255]] ^ decTable[2][sbox[tmp >> 8 & 255]] ^ decTable[3][sbox[tmp & 255]];
                    }
                }
                AES.prototype = {
                    /**
         * Encrypt an array of 4 big-endian words.
         * @param {Array} data The plaintext.
         * @return {Array} The ciphertext.
         */ encrypt: function encrypt(data) {
                        return this._crypt(data, 0);
                    },
                    /**
         * Decrypt an array of 4 big-endian words.
         * @param {Array} data The ciphertext.
         * @return {Array} The plaintext.
         */ decrypt: function decrypt(data) {
                        return this._crypt(data, 1);
                    },
                    /**
         * The expanded S-box and inverse S-box tables.  These will be computed
         * on the client so that we don't have to send them down the wire.
         *
         * There are two tables, _tables[0] is for encryption and
         * _tables[1] is for decryption.
         *
         * The first 4 sub-tables are the expanded S-box with MixColumns.  The
         * last (_tables[01][4]) is the S-box itself.
         *
         * @private
         */ _tables: [
                        [
                            new Uint32Array(256),
                            new Uint32Array(256),
                            new Uint32Array(256),
                            new Uint32Array(256),
                            new Uint32Array(256)
                        ],
                        [
                            new Uint32Array(256),
                            new Uint32Array(256),
                            new Uint32Array(256),
                            new Uint32Array(256),
                            new Uint32Array(256)
                        ]
                    ],
                    //Expand the S-box tables.
                    _precompute: function _precompute() {
                        var encTable = this._tables[0], decTable = this._tables[1], sbox = encTable[4], sboxInv = decTable[4], i, x, xInv, d = new Uint8Array(256), th = new Uint8Array(256), x2, x4, x8, s, tEnc, tDec; // Compute double and third tables
                        for(i = 0; i < 256; i++)th[(d[i] = i << 1 ^ (i >> 7) * 283) ^ i] = i;
                        for(x = xInv = 0; !sbox[x]; x ^= x2 || 1, xInv = th[xInv] || 1){
                            // Compute sbox
                            s = xInv ^ xInv << 1 ^ xInv << 2 ^ xInv << 3 ^ xInv << 4;
                            s = s >> 8 ^ s & 255 ^ 99;
                            sbox[x] = s;
                            sboxInv[s] = x; // Compute MixColumns
                            x8 = d[x4 = d[x2 = d[x]]];
                            tDec = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
                            tEnc = d[s] * 0x101 ^ s * 0x1010100;
                            for(i = 0; i < 4; i++){
                                encTable[i][x] = tEnc = tEnc << 24 ^ tEnc >>> 8;
                                decTable[i][s] = tDec = tDec << 24 ^ tDec >>> 8;
                            }
                        }
                    },
                    /**
         * Encryption and decryption core.
         * @param {Array} input Four words to be encrypted or decrypted.
         * @param dir The direction, 0 for encrypt and 1 for decrypt.
         * @return {Array} The four encrypted or decrypted words.
         * @private
         */ _crypt: function _crypt(input, dir) {
                        if (input.length !== 4) throw new Error("invalid aes block size");
                        var key = this._key[dir], // state variables a,b,c,d are loaded with pre-whitened data
                        a = input[0] ^ key[0], b = input[dir ? 3 : 1] ^ key[1], c = input[2] ^ key[2], d = input[dir ? 1 : 3] ^ key[3], a2, b2, c2, nInnerRounds = key.length / 4 - 2, i, kIndex = 4, out = new Uint32Array(4), // <--- this is slower in Node.js, about the same in Chrome */ 
                        table = this._tables[dir], // load up the tables
                        t0 = table[0], t1 = table[1], t2 = table[2], t3 = table[3], sbox = table[4]; // Inner rounds.  Cribbed from OpenSSL.
                        for(i = 0; i < nInnerRounds; i++){
                            a2 = t0[a >>> 24] ^ t1[b >> 16 & 255] ^ t2[c >> 8 & 255] ^ t3[d & 255] ^ key[kIndex];
                            b2 = t0[b >>> 24] ^ t1[c >> 16 & 255] ^ t2[d >> 8 & 255] ^ t3[a & 255] ^ key[kIndex + 1];
                            c2 = t0[c >>> 24] ^ t1[d >> 16 & 255] ^ t2[a >> 8 & 255] ^ t3[b & 255] ^ key[kIndex + 2];
                            d = t0[d >>> 24] ^ t1[a >> 16 & 255] ^ t2[b >> 8 & 255] ^ t3[c & 255] ^ key[kIndex + 3];
                            kIndex += 4;
                            a = a2;
                            b = b2;
                            c = c2;
                        } // Last round.
                        for(i = 0; i < 4; i++){
                            out[dir ? 3 & -i : i] = sbox[a >>> 24] << 24 ^ sbox[b >> 16 & 255] << 16 ^ sbox[c >> 8 & 255] << 8 ^ sbox[d & 255] ^ key[kIndex++];
                            a2 = a;
                            a = b;
                            b = c;
                            c = d;
                            d = a2;
                        }
                        return out;
                    }
                };
            },
            {}
        ],
        210: [
            function(require, module, exports) {
                "use strict"; // base-x encoding / decoding
                // Copyright (c) 2018 base-x contributors
                // Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
                // Distributed under the MIT software license, see the accompanying
                // file LICENSE or http://www.opensource.org/licenses/mit-license.php.
                // @ts-ignore
                var _Buffer = require("safe-buffer").Buffer;
                function base(ALPHABET) {
                    if (ALPHABET.length >= 255) throw new TypeError("Alphabet too long");
                    var BASE_MAP = new Uint8Array(256);
                    for(var j1 = 0; j1 < BASE_MAP.length; j1++)BASE_MAP[j1] = 255;
                    for(var i4 = 0; i4 < ALPHABET.length; i4++){
                        var x = ALPHABET.charAt(i4);
                        var xc = x.charCodeAt(0);
                        if (BASE_MAP[xc] !== 255) throw new TypeError(x + " is ambiguous");
                        BASE_MAP[xc] = i4;
                    }
                    var BASE = ALPHABET.length;
                    var LEADER = ALPHABET.charAt(0);
                    var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up
                    var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up
                    function encode(source) {
                        if (Array.isArray(source) || source instanceof Uint8Array) source = _Buffer.from(source);
                        if (!_Buffer.isBuffer(source)) throw new TypeError("Expected Buffer");
                        if (source.length === 0) return "";
                         // Skip & count leading zeroes.
                        var zeroes = 0;
                        var length = 0;
                        var pbegin = 0;
                        var pend = source.length;
                        while(pbegin !== pend && source[pbegin] === 0){
                            pbegin++;
                            zeroes++;
                        } // Allocate enough space in big-endian base58 representation.
                        var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
                        var b58 = new Uint8Array(size); // Process the bytes.
                        while(pbegin !== pend){
                            var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".
                            var i = 0;
                            for(var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++){
                                carry += 256 * b58[it1] >>> 0;
                                b58[it1] = carry % BASE >>> 0;
                                carry = carry / BASE >>> 0;
                            }
                            if (carry !== 0) throw new Error("Non-zero carry");
                            length = i;
                            pbegin++;
                        } // Skip leading zeroes in base58 result.
                        var it2 = size - length;
                        while(it2 !== size && b58[it2] === 0)it2++;
                         // Translate the result into a string.
                        var str = LEADER.repeat(zeroes);
                        for(; it2 < size; ++it2)str += ALPHABET.charAt(b58[it2]);
                        return str;
                    }
                    function decodeUnsafe(source) {
                        if (typeof source !== "string") throw new TypeError("Expected String");
                        if (source.length === 0) return _Buffer.alloc(0);
                        var psz = 0; // Skip and count leading '1's.
                        var zeroes = 0;
                        var length = 0;
                        while(source[psz] === LEADER){
                            zeroes++;
                            psz++;
                        } // Allocate enough space in big-endian base256 representation.
                        var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.
                        var b256 = new Uint8Array(size); // Process the characters.
                        while(source[psz]){
                            // Decode character
                            var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character
                            if (carry === 255) return;
                            var i = 0;
                            for(var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++){
                                carry += BASE * b256[it3] >>> 0;
                                b256[it3] = carry % 256 >>> 0;
                                carry = carry / 256 >>> 0;
                            }
                            if (carry !== 0) throw new Error("Non-zero carry");
                            length = i;
                            psz++;
                        } // Skip leading zeroes in b256.
                        var it4 = size - length;
                        while(it4 !== size && b256[it4] === 0)it4++;
                        var vch = _Buffer.allocUnsafe(zeroes + (size - it4));
                        vch.fill(0x00, 0, zeroes);
                        var j = zeroes;
                        while(it4 !== size)vch[j++] = b256[it4++];
                        return vch;
                    }
                    function decode(string) {
                        var buffer = decodeUnsafe(string);
                        if (buffer) return buffer;
                        throw new Error("Non-base" + BASE + " character");
                    }
                    return {
                        encode: encode,
                        decodeUnsafe: decodeUnsafe,
                        decode: decode
                    };
                }
                module.exports = base;
            },
            {
                "safe-buffer": 272
            }
        ],
        211: [
            function(require, module, exports) {
                "use strict";
                var elliptic = exports;
                elliptic.version = require("../package.json").version;
                elliptic.utils = require("./elliptic/utils");
                elliptic.rand = require("brorand");
                elliptic.curve = require("./elliptic/curve");
                elliptic.curves = require("./elliptic/curves"); // Protocols
                elliptic.ec = require("./elliptic/ec");
            },
            {
                "../package.json": 221,
                "./elliptic/curve": 213,
                "./elliptic/curves": 215,
                "./elliptic/ec": 216,
                "./elliptic/utils": 220,
                "brorand": 223
            }
        ],
        212: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var getNAF = utils.getNAF;
                var getJSF = utils.getJSF;
                var assert = utils.assert;
                function BaseCurve(type, conf) {
                    this.type = type;
                    this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime
                    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves
                    this.zero = new BN(0).toRed(this.red);
                    this.one = new BN(1).toRed(this.red);
                    this.two = new BN(2).toRed(this.red); // Curve configuration, optional
                    this.n = conf.n && new BN(conf.n, 16);
                    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays
                    this._wnafT1 = new Array(4);
                    this._wnafT2 = new Array(4);
                    this._wnafT3 = new Array(4);
                    this._wnafT4 = new Array(4);
                    this._bitLength = this.n ? this.n.bitLength() : 0; // Generalized Greg Maxwell's trick
                    var adjustCount = this.n && this.p.div(this.n);
                    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
                    else {
                        this._maxwellTrick = true;
                        this.redN = this.n.toRed(this.red);
                    }
                }
                module.exports = BaseCurve;
                BaseCurve.prototype.point = function point() {
                    throw new Error("Not implemented");
                };
                BaseCurve.prototype.validate = function validate() {
                    throw new Error("Not implemented");
                };
                BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
                    assert(p.precomputed);
                    var doubles = p._getDoubles();
                    var naf = getNAF(k, 1, this._bitLength);
                    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
                    I /= 3; // Translate into more windowed form
                    var repr = [];
                    for(var j = 0; j < naf.length; j += doubles.step){
                        var nafW = 0;
                        for(var k = j + doubles.step - 1; k >= j; k--)nafW = (nafW << 1) + naf[k];
                        repr.push(nafW);
                    }
                    var a = this.jpoint(null, null, null);
                    var b = this.jpoint(null, null, null);
                    for(var i = I; i > 0; i--){
                        for(var j = 0; j < repr.length; j++){
                            var nafW = repr[j];
                            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
                            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
                        }
                        a = a.add(b);
                    }
                    return a.toP();
                };
                BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
                    var w = 4; // Precompute window
                    var nafPoints = p._getNAFPoints(w);
                    w = nafPoints.wnd;
                    var wnd = nafPoints.points; // Get NAF form
                    var naf = getNAF(k, w, this._bitLength); // Add `this`*(N+1) for every w-NAF index
                    var acc = this.jpoint(null, null, null);
                    for(var i = naf.length - 1; i >= 0; i--){
                        // Count zeroes
                        for(var k = 0; i >= 0 && naf[i] === 0; i--)k++;
                        if (i >= 0) k++;
                        acc = acc.dblp(k);
                        if (i < 0) break;
                        var z = naf[i];
                        assert(z !== 0);
                        if (p.type === "affine") {
                            // J +- P
                            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
                            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
                        } else // J +- J
                        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
                        else acc = acc.add(wnd[-z - 1 >> 1].neg());
                    }
                    return p.type === "affine" ? acc.toP() : acc;
                };
                BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
                    var wndWidth = this._wnafT1;
                    var wnd = this._wnafT2;
                    var naf = this._wnafT3; // Fill all arrays
                    var max = 0;
                    for(var i = 0; i < len; i++){
                        var p = points[i];
                        var nafPoints = p._getNAFPoints(defW);
                        wndWidth[i] = nafPoints.wnd;
                        wnd[i] = nafPoints.points;
                    } // Comb small window NAFs
                    for(var i = len - 1; i >= 1; i -= 2){
                        var a = i - 1;
                        var b = i;
                        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
                            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
                            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
                            max = Math.max(naf[a].length, max);
                            max = Math.max(naf[b].length, max);
                            continue;
                        }
                        var comb = [
                            points[a],
                            /* 1 */ null,
                            /* 3 */ null,
                            /* 5 */ points[b]
                        ]; // Try to avoid Projective points, if possible
                        if (points[a].y.cmp(points[b].y) === 0) {
                            comb[1] = points[a].add(points[b]);
                            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
                            comb[1] = points[a].toJ().mixedAdd(points[b]);
                            comb[2] = points[a].add(points[b].neg());
                        } else {
                            comb[1] = points[a].toJ().mixedAdd(points[b]);
                            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
                        }
                        var index = [
                            -3,
                            /* -1 -1 */ -1,
                            /* -1 0 */ -5,
                            /* -1 1 */ -7,
                            /* 0 -1 */ 0,
                            /* 0 0 */ 7,
                            /* 0 1 */ 5,
                            /* 1 -1 */ 1,
                            /* 1 0 */ 3
                        ];
                        var jsf = getJSF(coeffs[a], coeffs[b]);
                        max = Math.max(jsf[0].length, max);
                        naf[a] = new Array(max);
                        naf[b] = new Array(max);
                        for(var j = 0; j < max; j++){
                            var ja = jsf[0][j] | 0;
                            var jb = jsf[1][j] | 0;
                            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
                            naf[b][j] = 0;
                            wnd[a] = comb;
                        }
                    }
                    var acc = this.jpoint(null, null, null);
                    var tmp = this._wnafT4;
                    for(var i = max; i >= 0; i--){
                        var k = 0;
                        while(i >= 0){
                            var zero = true;
                            for(var j = 0; j < len; j++){
                                tmp[j] = naf[j][i] | 0;
                                if (tmp[j] !== 0) zero = false;
                            }
                            if (!zero) break;
                            k++;
                            i--;
                        }
                        if (i >= 0) k++;
                        acc = acc.dblp(k);
                        if (i < 0) break;
                        for(var j = 0; j < len; j++){
                            var z = tmp[j];
                            var p;
                            if (z === 0) continue;
                            else if (z > 0) p = wnd[j][z - 1 >> 1];
                            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
                            if (p.type === "affine") acc = acc.mixedAdd(p);
                            else acc = acc.add(p);
                        }
                    } // Zeroify references
                    for(var i = 0; i < len; i++)wnd[i] = null;
                    if (jacobianResult) return acc;
                    else return acc.toP();
                };
                function BasePoint(curve, type) {
                    this.curve = curve;
                    this.type = type;
                    this.precomputed = null;
                }
                BaseCurve.BasePoint = BasePoint;
                BasePoint.prototype.eq = function /*other*/ eq() {
                    throw new Error("Not implemented");
                };
                BasePoint.prototype.validate = function validate() {
                    return this.curve.validate(this);
                };
                BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
                    bytes = utils.toArray(bytes, enc);
                    var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even
                    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
                        if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
                        else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
                        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
                        return res;
                    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
                    throw new Error("Unknown point format");
                };
                BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
                    return this.encode(enc, true);
                };
                BasePoint.prototype._encode = function _encode(compact) {
                    var len = this.curve.p.byteLength();
                    var x = this.getX().toArray("be", len);
                    if (compact) return [
                        this.getY().isEven() ? 0x02 : 0x03
                    ].concat(x);
                    return [
                        0x04
                    ].concat(x, this.getY().toArray("be", len));
                };
                BasePoint.prototype.encode = function encode(enc, compact) {
                    return utils.encode(this._encode(compact), enc);
                };
                BasePoint.prototype.precompute = function precompute(power) {
                    if (this.precomputed) return this;
                    var precomputed = {
                        doubles: null,
                        naf: null,
                        beta: null
                    };
                    precomputed.naf = this._getNAFPoints(8);
                    precomputed.doubles = this._getDoubles(4, power);
                    precomputed.beta = this._getBeta();
                    this.precomputed = precomputed;
                    return this;
                };
                BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
                    if (!this.precomputed) return false;
                    var doubles = this.precomputed.doubles;
                    if (!doubles) return false;
                    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
                };
                BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
                    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                    var doubles = [
                        this
                    ];
                    var acc = this;
                    for(var i = 0; i < power; i += step){
                        for(var j = 0; j < step; j++)acc = acc.dbl();
                        doubles.push(acc);
                    }
                    return {
                        step: step,
                        points: doubles
                    };
                };
                BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
                    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                    var res = [
                        this
                    ];
                    var max = (1 << wnd) - 1;
                    var dbl = max === 1 ? null : this.dbl();
                    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
                    return {
                        wnd: wnd,
                        points: res
                    };
                };
                BasePoint.prototype._getBeta = function _getBeta() {
                    return null;
                };
                BasePoint.prototype.dblp = function dblp(k) {
                    var r = this;
                    for(var i = 0; i < k; i++)r = r.dbl();
                    return r;
                };
            },
            {
                "../utils": 220,
                "bn.js": 222
            }
        ],
        213: [
            function(require, module, exports) {
                "use strict";
                var curve = exports;
                curve.base = require("./base");
                curve["short"] = require("./short");
            },
            {
                "./base": 212,
                "./short": 214
            }
        ],
        214: [
            function(require, module, exports) {
                "use strict";
                var utils = require("../utils");
                var BN = require("bn.js");
                var inherits = require("inherits");
                var Base = require("./base");
                var assert = utils.assert;
                function ShortCurve(conf) {
                    Base.call(this, "short", conf);
                    this.a = new BN(conf.a, 16).toRed(this.red);
                    this.b = new BN(conf.b, 16).toRed(this.red);
                    this.tinv = this.two.redInvm();
                    this.zeroA = this.a.fromRed().cmpn(0) === 0;
                    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda
                    this.endo = this._getEndomorphism(conf);
                    this._endoWnafT1 = new Array(4);
                    this._endoWnafT2 = new Array(4);
                }
                inherits(ShortCurve, Base);
                module.exports = ShortCurve;
                ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
                    // No efficient endomorphism
                    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)
                    var beta;
                    var lambda;
                    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
                    else {
                        var betas = this._getEndoRoots(this.p); // Choose the smallest beta
                        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
                        beta = beta.toRed(this.red);
                    }
                    if (conf.lambda) lambda = new BN(conf.lambda, 16);
                    else {
                        // Choose the lambda that is matching selected beta
                        var lambdas = this._getEndoRoots(this.n);
                        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
                        else {
                            lambda = lambdas[1];
                            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
                        }
                    } // Get basis vectors, used for balanced length-two representation
                    var basis;
                    if (conf.basis) basis = conf.basis.map(function(vec) {
                        return {
                            a: new BN(vec.a, 16),
                            b: new BN(vec.b, 16)
                        };
                    });
                    else basis = this._getEndoBasis(lambda);
                    return {
                        beta: beta,
                        lambda: lambda,
                        basis: basis
                    };
                };
                ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
                    // Find roots of for x^2 + x + 1 in F
                    // Root = (-1 +- Sqrt(-3)) / 2
                    //
                    var red = num === this.p ? this.red : BN.mont(num);
                    var tinv = new BN(2).toRed(red).redInvm();
                    var ntinv = tinv.redNeg();
                    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
                    var l1 = ntinv.redAdd(s).fromRed();
                    var l2 = ntinv.redSub(s).fromRed();
                    return [
                        l1,
                        l2
                    ];
                };
                ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
                    // aprxSqrt >= sqrt(this.n)
                    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
                    // Run EGCD, until r(L + 1) < aprxSqrt
                    var u = lambda;
                    var v = this.n.clone();
                    var x1 = new BN(1);
                    var y1 = new BN(0);
                    var x2 = new BN(0);
                    var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
                    var a0;
                    var b0; // First vector
                    var a1;
                    var b1; // Second vector
                    var a2;
                    var b2;
                    var prevR;
                    var i = 0;
                    var r;
                    var x;
                    while(u.cmpn(0) !== 0){
                        var q = v.div(u);
                        r = v.sub(q.mul(u));
                        x = x2.sub(q.mul(x1));
                        var y = y2.sub(q.mul(y1));
                        if (!a1 && r.cmp(aprxSqrt) < 0) {
                            a0 = prevR.neg();
                            b0 = x1;
                            a1 = r.neg();
                            b1 = x;
                        } else if (a1 && ++i === 2) break;
                        prevR = r;
                        v = u;
                        u = r;
                        x2 = x1;
                        x1 = x;
                        y2 = y1;
                        y1 = y;
                    }
                    a2 = r.neg();
                    b2 = x;
                    var len1 = a1.sqr().add(b1.sqr());
                    var len2 = a2.sqr().add(b2.sqr());
                    if (len2.cmp(len1) >= 0) {
                        a2 = a0;
                        b2 = b0;
                    } // Normalize signs
                    if (a1.negative) {
                        a1 = a1.neg();
                        b1 = b1.neg();
                    }
                    if (a2.negative) {
                        a2 = a2.neg();
                        b2 = b2.neg();
                    }
                    return [
                        {
                            a: a1,
                            b: b1
                        },
                        {
                            a: a2,
                            b: b2
                        }
                    ];
                };
                ShortCurve.prototype._endoSplit = function _endoSplit(k) {
                    var basis = this.endo.basis;
                    var v1 = basis[0];
                    var v2 = basis[1];
                    var c1 = v2.b.mul(k).divRound(this.n);
                    var c2 = v1.b.neg().mul(k).divRound(this.n);
                    var p1 = c1.mul(v1.a);
                    var p2 = c2.mul(v2.a);
                    var q1 = c1.mul(v1.b);
                    var q2 = c2.mul(v2.b); // Calculate answer
                    var k1 = k.sub(p1).sub(p2);
                    var k2 = q1.add(q2).neg();
                    return {
                        k1: k1,
                        k2: k2
                    };
                };
                ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
                    x = new BN(x, 16);
                    if (!x.red) x = x.toRed(this.red);
                    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
                    var y = y2.redSqrt();
                    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point"); // XXX Is there any way to tell if the number is odd without converting it
                    // to non-red form?
                    var isOdd = y.fromRed().isOdd();
                    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
                    return this.point(x, y);
                };
                ShortCurve.prototype.validate = function validate(point) {
                    if (point.inf) return true;
                    var x = point.x;
                    var y = point.y;
                    var ax = this.a.redMul(x);
                    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
                    return y.redSqr().redISub(rhs).cmpn(0) === 0;
                };
                ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
                    var npoints = this._endoWnafT1;
                    var ncoeffs = this._endoWnafT2;
                    for(var i = 0; i < points.length; i++){
                        var split = this._endoSplit(coeffs[i]);
                        var p = points[i];
                        var beta = p._getBeta();
                        if (split.k1.negative) {
                            split.k1.ineg();
                            p = p.neg(true);
                        }
                        if (split.k2.negative) {
                            split.k2.ineg();
                            beta = beta.neg(true);
                        }
                        npoints[i * 2] = p;
                        npoints[i * 2 + 1] = beta;
                        ncoeffs[i * 2] = split.k1;
                        ncoeffs[i * 2 + 1] = split.k2;
                    }
                    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients
                    for(var j = 0; j < i * 2; j++){
                        npoints[j] = null;
                        ncoeffs[j] = null;
                    }
                    return res;
                };
                function Point(curve, x, y, isRed) {
                    Base.BasePoint.call(this, curve, "affine");
                    if (x === null && y === null) {
                        this.x = null;
                        this.y = null;
                        this.inf = true;
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16); // Force redgomery representation when loading from JSON
                        if (isRed) {
                            this.x.forceRed(this.curve.red);
                            this.y.forceRed(this.curve.red);
                        }
                        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                        this.inf = false;
                    }
                }
                inherits(Point, Base.BasePoint);
                ShortCurve.prototype.point = function point(x, y, isRed) {
                    return new Point(this, x, y, isRed);
                };
                ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
                    return Point.fromJSON(this, obj, red);
                };
                Point.prototype._getBeta = function _getBeta() {
                    if (!this.curve.endo) return;
                    var pre = this.precomputed;
                    if (pre && pre.beta) return pre.beta;
                    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                    if (pre) {
                        var curve = this.curve;
                        var endoMul = function endoMul(p) {
                            return curve.point(p.x.redMul(curve.endo.beta), p.y);
                        };
                        pre.beta = beta;
                        beta.precomputed = {
                            beta: null,
                            naf: pre.naf && {
                                wnd: pre.naf.wnd,
                                points: pre.naf.points.map(endoMul)
                            },
                            doubles: pre.doubles && {
                                step: pre.doubles.step,
                                points: pre.doubles.points.map(endoMul)
                            }
                        };
                    }
                    return beta;
                };
                Point.prototype.toJSON = function toJSON() {
                    if (!this.precomputed) return [
                        this.x,
                        this.y
                    ];
                    return [
                        this.x,
                        this.y,
                        this.precomputed && {
                            doubles: this.precomputed.doubles && {
                                step: this.precomputed.doubles.step,
                                points: this.precomputed.doubles.points.slice(1)
                            },
                            naf: this.precomputed.naf && {
                                wnd: this.precomputed.naf.wnd,
                                points: this.precomputed.naf.points.slice(1)
                            }
                        }
                    ];
                };
                Point.fromJSON = function fromJSON(curve, obj3, red) {
                    if (typeof obj3 === "string") obj3 = JSON.parse(obj3);
                    var res = curve.point(obj3[0], obj3[1], red);
                    if (!obj3[2]) return res;
                    function obj2point(obj) {
                        return curve.point(obj[0], obj[1], red);
                    }
                    var pre = obj3[2];
                    res.precomputed = {
                        beta: null,
                        doubles: pre.doubles && {
                            step: pre.doubles.step,
                            points: [
                                res
                            ].concat(pre.doubles.points.map(obj2point))
                        },
                        naf: pre.naf && {
                            wnd: pre.naf.wnd,
                            points: [
                                res
                            ].concat(pre.naf.points.map(obj2point))
                        }
                    };
                    return res;
                };
                Point.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC Point Infinity>";
                    return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
                };
                Point.prototype.isInfinity = function isInfinity() {
                    return this.inf;
                };
                Point.prototype.add = function add(p) {
                    // O + P = P
                    if (this.inf) return p; // P + O = P
                    if (p.inf) return this; // P + P = 2P
                    if (this.eq(p)) return this.dbl(); // P + (-P) = O
                    if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O
                    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
                    var c = this.y.redSub(p.y);
                    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
                    var nx = c.redSqr().redISub(this.x).redISub(p.x);
                    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                    return this.curve.point(nx, ny);
                };
                Point.prototype.dbl = function dbl() {
                    if (this.inf) return this; // 2P = O
                    var ys1 = this.y.redAdd(this.y);
                    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
                    var a = this.curve.a;
                    var x2 = this.x.redSqr();
                    var dyinv = ys1.redInvm();
                    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
                    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
                    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
                    return this.curve.point(nx, ny);
                };
                Point.prototype.getX = function getX() {
                    return this.x.fromRed();
                };
                Point.prototype.getY = function getY() {
                    return this.y.fromRed();
                };
                Point.prototype.mul = function mul(k) {
                    k = new BN(k, 16);
                    if (this.isInfinity()) return this;
                    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
                    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
                        this
                    ], [
                        k
                    ]);
                    else return this.curve._wnafMul(this, k);
                };
                Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
                    var points = [
                        this,
                        p2
                    ];
                    var coeffs = [
                        k1,
                        k2
                    ];
                    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
                    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
                };
                Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
                    var points = [
                        this,
                        p2
                    ];
                    var coeffs = [
                        k1,
                        k2
                    ];
                    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
                    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
                };
                Point.prototype.eq = function eq(p) {
                    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
                };
                Point.prototype.neg = function neg(_precompute) {
                    if (this.inf) return this;
                    var res = this.curve.point(this.x, this.y.redNeg());
                    if (_precompute && this.precomputed) {
                        var pre = this.precomputed;
                        var negate = function negate(p) {
                            return p.neg();
                        };
                        res.precomputed = {
                            naf: pre.naf && {
                                wnd: pre.naf.wnd,
                                points: pre.naf.points.map(negate)
                            },
                            doubles: pre.doubles && {
                                step: pre.doubles.step,
                                points: pre.doubles.points.map(negate)
                            }
                        };
                    }
                    return res;
                };
                Point.prototype.toJ = function toJ() {
                    if (this.inf) return this.curve.jpoint(null, null, null);
                    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
                    return res;
                };
                function JPoint(curve, x, y, z) {
                    Base.BasePoint.call(this, curve, "jacobian");
                    if (x === null && y === null && z === null) {
                        this.x = this.curve.one;
                        this.y = this.curve.one;
                        this.z = new BN(0);
                    } else {
                        this.x = new BN(x, 16);
                        this.y = new BN(y, 16);
                        this.z = new BN(z, 16);
                    }
                    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
                    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
                    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
                    this.zOne = this.z === this.curve.one;
                }
                inherits(JPoint, Base.BasePoint);
                ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
                    return new JPoint(this, x, y, z);
                };
                JPoint.prototype.toP = function toP() {
                    if (this.isInfinity()) return this.curve.point(null, null);
                    var zinv = this.z.redInvm();
                    var zinv2 = zinv.redSqr();
                    var ax = this.x.redMul(zinv2);
                    var ay = this.y.redMul(zinv2).redMul(zinv);
                    return this.curve.point(ax, ay);
                };
                JPoint.prototype.neg = function neg() {
                    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                };
                JPoint.prototype.add = function add(p) {
                    // O + P = P
                    if (this.isInfinity()) return p; // P + O = P
                    if (p.isInfinity()) return this; // 12M + 4S + 7A
                    var pz2 = p.z.redSqr();
                    var z2 = this.z.redSqr();
                    var u1 = this.x.redMul(pz2);
                    var u2 = p.x.redMul(z2);
                    var s1 = this.y.redMul(pz2.redMul(p.z));
                    var s2 = p.y.redMul(z2.redMul(this.z));
                    var h = u1.redSub(u2);
                    var r = s1.redSub(s2);
                    if (h.cmpn(0) === 0) {
                        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
                        else return this.dbl();
                    }
                    var h2 = h.redSqr();
                    var h3 = h2.redMul(h);
                    var v = u1.redMul(h2);
                    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                    var nz = this.z.redMul(p.z).redMul(h);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.mixedAdd = function mixedAdd(p) {
                    // O + P = P
                    if (this.isInfinity()) return p.toJ(); // P + O = P
                    if (p.isInfinity()) return this; // 8M + 3S + 7A
                    var z2 = this.z.redSqr();
                    var u1 = this.x;
                    var u2 = p.x.redMul(z2);
                    var s1 = this.y;
                    var s2 = p.y.redMul(z2).redMul(this.z);
                    var h = u1.redSub(u2);
                    var r = s1.redSub(s2);
                    if (h.cmpn(0) === 0) {
                        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
                        else return this.dbl();
                    }
                    var h2 = h.redSqr();
                    var h3 = h2.redMul(h);
                    var v = u1.redMul(h2);
                    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
                    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
                    var nz = this.z.redMul(h);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.dblp = function dblp(pow) {
                    if (pow === 0) return this;
                    if (this.isInfinity()) return this;
                    if (!pow) return this.dbl();
                    if (this.curve.zeroA || this.curve.threeA) {
                        var r = this;
                        for(var i = 0; i < pow; i++)r = r.dbl();
                        return r;
                    } // 1M + 2S + 1A + N * (4S + 5M + 8A)
                    // N = 1 => 6M + 6S + 9A
                    var a = this.curve.a;
                    var tinv = this.curve.tinv;
                    var jx = this.x;
                    var jy = this.y;
                    var jz = this.z;
                    var jz4 = jz.redSqr().redSqr(); // Reuse results
                    var jyd = jy.redAdd(jy);
                    for(var i = 0; i < pow; i++){
                        var jx2 = jx.redSqr();
                        var jyd2 = jyd.redSqr();
                        var jyd4 = jyd2.redSqr();
                        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                        var t1 = jx.redMul(jyd2);
                        var nx = c.redSqr().redISub(t1.redAdd(t1));
                        var t2 = t1.redISub(nx);
                        var dny = c.redMul(t2);
                        dny = dny.redIAdd(dny).redISub(jyd4);
                        var nz = jyd.redMul(jz);
                        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
                        jx = nx;
                        jz = nz;
                        jyd = dny;
                    }
                    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
                };
                JPoint.prototype.dbl = function dbl() {
                    if (this.isInfinity()) return this;
                    if (this.curve.zeroA) return this._zeroDbl();
                    else if (this.curve.threeA) return this._threeDbl();
                    else return this._dbl();
                };
                JPoint.prototype._zeroDbl = function _zeroDbl() {
                    var nx;
                    var ny;
                    var nz; // Z = 1
                    if (this.zOne) {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                        //     #doubling-mdbl-2007-bl
                        // 1M + 5S + 14A
                        // XX = X1^2
                        var xx = this.x.redSqr(); // YY = Y1^2
                        var yy = this.y.redSqr(); // YYYY = YY^2
                        var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                        s = s.redIAdd(s); // M = 3 * XX + a; a = 0
                        var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S
                        var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY
                        var yyyy8 = yyyy.redIAdd(yyyy);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T
                        nx = t; // Y3 = M * (S - T) - 8 * YYYY
                        ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1
                        nz = this.y.redAdd(this.y);
                    } else {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
                        //     #doubling-dbl-2009-l
                        // 2M + 5S + 13A
                        // A = X1^2
                        var a = this.x.redSqr(); // B = Y1^2
                        var b = this.y.redSqr(); // C = B^2
                        var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)
                        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
                        d = d.redIAdd(d); // E = 3 * A
                        var e = a.redAdd(a).redIAdd(a); // F = E^2
                        var f = e.redSqr(); // 8 * C
                        var c8 = c.redIAdd(c);
                        c8 = c8.redIAdd(c8);
                        c8 = c8.redIAdd(c8); // X3 = F - 2 * D
                        nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C
                        ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1
                        nz = this.y.redMul(this.z);
                        nz = nz.redIAdd(nz);
                    }
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype._threeDbl = function _threeDbl() {
                    var nx;
                    var ny;
                    var nz; // Z = 1
                    if (this.zOne) {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
                        //     #doubling-mdbl-2007-bl
                        // 1M + 5S + 15A
                        // XX = X1^2
                        var xx = this.x.redSqr(); // YY = Y1^2
                        var yy = this.y.redSqr(); // YYYY = YY^2
                        var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)
                        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                        s = s.redIAdd(s); // M = 3 * XX + a
                        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S
                        var t = m.redSqr().redISub(s).redISub(s); // X3 = T
                        nx = t; // Y3 = M * (S - T) - 8 * YYYY
                        var yyyy8 = yyyy.redIAdd(yyyy);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        yyyy8 = yyyy8.redIAdd(yyyy8);
                        ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1
                        nz = this.y.redAdd(this.y);
                    } else {
                        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
                        // 3M + 5S
                        // delta = Z1^2
                        var delta = this.z.redSqr(); // gamma = Y1^2
                        var gamma = this.y.redSqr(); // beta = X1 * gamma
                        var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)
                        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
                        alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta
                        var beta4 = beta.redIAdd(beta);
                        beta4 = beta4.redIAdd(beta4);
                        var beta8 = beta4.redAdd(beta4);
                        nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta
                        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
                        var ggamma8 = gamma.redSqr();
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ggamma8 = ggamma8.redIAdd(ggamma8);
                        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
                    }
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype._dbl = function _dbl() {
                    var a = this.curve.a; // 4M + 6S + 10A
                    var jx = this.x;
                    var jy = this.y;
                    var jz = this.z;
                    var jz4 = jz.redSqr().redSqr();
                    var jx2 = jx.redSqr();
                    var jy2 = jy.redSqr();
                    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
                    var jxd4 = jx.redAdd(jx);
                    jxd4 = jxd4.redIAdd(jxd4);
                    var t1 = jxd4.redMul(jy2);
                    var nx = c.redSqr().redISub(t1.redAdd(t1));
                    var t2 = t1.redISub(nx);
                    var jyd8 = jy2.redSqr();
                    jyd8 = jyd8.redIAdd(jyd8);
                    jyd8 = jyd8.redIAdd(jyd8);
                    jyd8 = jyd8.redIAdd(jyd8);
                    var ny = c.redMul(t2).redISub(jyd8);
                    var nz = jy.redAdd(jy).redMul(jz);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.trpl = function trpl() {
                    if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
                    // 5M + 10S + ...
                    // XX = X1^2
                    var xx = this.x.redSqr(); // YY = Y1^2
                    var yy = this.y.redSqr(); // ZZ = Z1^2
                    var zz = this.z.redSqr(); // YYYY = YY^2
                    var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0
                    var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2
                    var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
                    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
                    e = e.redIAdd(e);
                    e = e.redAdd(e).redIAdd(e);
                    e = e.redISub(mm); // EE = E^2
                    var ee = e.redSqr(); // T = 16*YYYY
                    var t = yyyy.redIAdd(yyyy);
                    t = t.redIAdd(t);
                    t = t.redIAdd(t);
                    t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T
                    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)
                    var yyu4 = yy.redMul(u);
                    yyu4 = yyu4.redIAdd(yyu4);
                    yyu4 = yyu4.redIAdd(yyu4);
                    var nx = this.x.redMul(ee).redISub(yyu4);
                    nx = nx.redIAdd(nx);
                    nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
                    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
                    ny = ny.redIAdd(ny);
                    ny = ny.redIAdd(ny);
                    ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE
                    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
                    return this.curve.jpoint(nx, ny, nz);
                };
                JPoint.prototype.mul = function mul(k, kbase) {
                    k = new BN(k, kbase);
                    return this.curve._wnafMul(this, k);
                };
                JPoint.prototype.eq = function eq(p) {
                    if (p.type === "affine") return this.eq(p.toJ());
                    if (this === p) return true; // x1 * z2^2 == x2 * z1^2
                    var z2 = this.z.redSqr();
                    var pz2 = p.z.redSqr();
                    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3
                    var z3 = z2.redMul(this.z);
                    var pz3 = pz2.redMul(p.z);
                    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
                };
                JPoint.prototype.eqXToP = function eqXToP(x) {
                    var zs = this.z.redSqr();
                    var rx = x.toRed(this.curve.red).redMul(zs);
                    if (this.x.cmp(rx) === 0) return true;
                    var xc = x.clone();
                    var t = this.curve.redN.redMul(zs);
                    for(;;){
                        xc.iadd(this.curve.n);
                        if (xc.cmp(this.curve.p) >= 0) return false;
                        rx.redIAdd(t);
                        if (this.x.cmp(rx) === 0) return true;
                    }
                };
                JPoint.prototype.inspect = function inspect() {
                    if (this.isInfinity()) return "<EC JPoint Infinity>";
                    return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
                };
                JPoint.prototype.isInfinity = function isInfinity() {
                    // XXX This code assumes that zero is always zero in red
                    return this.z.cmpn(0) === 0;
                };
            },
            {
                "../utils": 220,
                "./base": 212,
                "bn.js": 222,
                "inherits": 242
            }
        ],
        215: [
            function(require, module, exports) {
                "use strict";
                var curves = exports;
                var hash = require("hash.js");
                var curve2 = require("./curve");
                var utils = require("./utils");
                var assert = utils.assert;
                function PresetCurve(options) {
                    if (options.type !== "short") throw new Error("invalid curve type");
                    this.curve = new curve2["short"](options);
                    this.g = this.curve.g;
                    this.n = this.curve.n;
                    this.hash = options.hash;
                    assert(this.g.validate(), "Invalid curve");
                    assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                }
                curves.PresetCurve = PresetCurve;
                function defineCurve(name, options) {
                    Object.defineProperty(curves, name, {
                        configurable: true,
                        enumerable: true,
                        get: function get() {
                            var curve = new PresetCurve(options);
                            Object.defineProperty(curves, name, {
                                configurable: true,
                                enumerable: true,
                                value: curve
                            });
                            return curve;
                        }
                    });
                }
                var pre;
                try {
                    pre = require("./precomputed/secp256k1");
                } catch (e) {
                    pre = undefined;
                }
                defineCurve("secp256k1", {
                    type: "short",
                    prime: "k256",
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                    a: "0",
                    b: "7",
                    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                    h: "1",
                    hash: hash.sha256,
                    // Precomputed endomorphism
                    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                    basis: [
                        {
                            a: "3086d221a7d46bcde86c90e49284eb15",
                            b: "-e4437ed6010e88286f547fa90abfe4c3"
                        },
                        {
                            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                            b: "3086d221a7d46bcde86c90e49284eb15"
                        }
                    ],
                    gRed: false,
                    g: [
                        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                        pre
                    ]
                });
            },
            {
                "./curve": 213,
                "./precomputed/secp256k1": 219,
                "./utils": 220,
                "hash.js": 229
            }
        ],
        216: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var HmacDRBG = require("hmac-drbg");
                var utils = require("../utils");
                var curves = require("../curves");
                var rand = require("brorand");
                var assert = utils.assert;
                var KeyPair = require("./key");
                var Signature = require("./signature");
                function EC(options) {
                    if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`
                    if (typeof options === "string") {
                        assert(curves.hasOwnProperty(options), "Unknown curve " + options);
                        options = curves[options];
                    } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
                    if (options instanceof curves.PresetCurve) options = {
                        curve: options
                    };
                    this.curve = options.curve.curve;
                    this.n = this.curve.n;
                    this.nh = this.n.ushrn(1);
                    this.g = this.curve.g; // Point on curve
                    this.g = options.curve.g;
                    this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG
                    this.hash = options.hash || options.curve.hash;
                }
                module.exports = EC;
                EC.prototype.keyPair = function keyPair(options) {
                    return new KeyPair(this, options);
                };
                EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
                    return KeyPair.fromPrivate(this, priv, enc);
                };
                EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
                    return KeyPair.fromPublic(this, pub, enc);
                };
                EC.prototype.genKeyPair = function genKeyPair(options) {
                    if (!options) options = {}; // Instantiate Hmac_DRBG
                    var drbg = new HmacDRBG({
                        hash: this.hash,
                        pers: options.pers,
                        persEnc: options.persEnc || "utf8",
                        entropy: options.entropy || rand(this.hash.hmacStrength),
                        entropyEnc: options.entropy && options.entropyEnc || "utf8",
                        nonce: this.n.toArray()
                    });
                    var bytes = this.n.byteLength();
                    var ns2 = this.n.sub(new BN(2));
                    do {
                        var priv = new BN(drbg.generate(bytes));
                        if (priv.cmp(ns2) > 0) continue;
                        priv.iaddn(1);
                        return this.keyFromPrivate(priv);
                    }while (true);
                };
                EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
                    var delta = msg.byteLength() * 8 - this.n.bitLength();
                    if (delta > 0) msg = msg.ushrn(delta);
                    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
                    else return msg;
                };
                EC.prototype.sign = function sign(msg, key, enc, options) {
                    if (_typeof(enc) === "object") {
                        options = enc;
                        enc = null;
                    }
                    if (!options) options = {};
                    key = this.keyFromPrivate(key, enc);
                    msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy
                    var bytes = this.n.byteLength();
                    var bkey = key.getPrivate().toArray("be", bytes); // Zero-extend nonce to have the same byte size as N
                    var nonce = msg.toArray("be", bytes); // Instantiate Hmac_DRBG
                    var drbg = new HmacDRBG({
                        hash: this.hash,
                        entropy: bkey,
                        nonce: nonce,
                        pers: options.pers,
                        persEnc: options.persEnc || "utf8"
                    }); // Number of bytes to generate
                    var ns1 = this.n.sub(new BN(1));
                    for(var iter = 0;; iter++){
                        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
                        k = this._truncateToN(k, true);
                        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
                        var kp = this.g.mul(k);
                        if (kp.isInfinity()) continue;
                        var kpX = kp.getX();
                        var r = kpX.umod(this.n);
                        if (r.cmpn(0) === 0) continue;
                        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
                        s = s.umod(this.n);
                        if (s.cmpn(0) === 0) continue;
                        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`
                        if (options.canonical && s.cmp(this.nh) > 0) {
                            s = this.n.sub(s);
                            recoveryParam ^= 1;
                        }
                        return new Signature({
                            r: r,
                            s: s,
                            recoveryParam: recoveryParam
                        });
                    }
                };
                EC.prototype.verify = function verify(msg, signature, key, enc) {
                    msg = this._truncateToN(new BN(msg, 16));
                    key = this.keyFromPublic(key, enc);
                    signature = new Signature(signature, "hex"); // Perform primitive values validation
                    var r = signature.r;
                    var s = signature.s;
                    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
                    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature
                    var sinv = s.invm(this.n);
                    var u1 = sinv.mul(msg).umod(this.n);
                    var u2 = sinv.mul(r).umod(this.n);
                    if (!this.curve._maxwellTrick) {
                        var p = this.g.mulAdd(u1, key.getPublic(), u2);
                        if (p.isInfinity()) return false;
                        return p.getX().umod(this.n).cmp(r) === 0;
                    } // NOTE: Greg Maxwell's trick, inspired by:
                    // https://git.io/vad3K
                    var p = this.g.jmulAdd(u1, key.getPublic(), u2);
                    if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
                    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
                    // inverse of `p.z^2`
                    return p.eqXToP(r);
                };
                EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
                    assert((3 & j) === j, "The recovery param is more than two bits");
                    signature = new Signature(signature, enc);
                    var n = this.n;
                    var e = new BN(msg);
                    var r = signature.r;
                    var s = signature.s; // A set LSB signifies that the y-coordinate is odd
                    var isYOdd = j & 1;
                    var isSecondKey = j >> 1;
                    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate"); // 1.1. Let x = r + jn.
                    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
                    else r = this.curve.pointFromX(r, isYOdd);
                    var rInv = signature.r.invm(n);
                    var s1 = n.sub(e).mul(rInv).umod(n);
                    var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
                    //               Q = r^-1 (sR + -eG)
                    return this.g.mulAdd(s1, r, s2);
                };
                EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
                    signature = new Signature(signature, enc);
                    if (signature.recoveryParam !== null) return signature.recoveryParam;
                    for(var i = 0; i < 4; i++){
                        var Qprime;
                        try {
                            Qprime = this.recoverPubKey(e, signature, i);
                        } catch (e) {
                            continue;
                        }
                        if (Qprime.eq(Q)) return i;
                    }
                    throw new Error("Unable to find valid recovery factor");
                };
            },
            {
                "../curves": 215,
                "../utils": 220,
                "./key": 217,
                "./signature": 218,
                "bn.js": 222,
                "brorand": 223,
                "hmac-drbg": 241
            }
        ],
        217: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var assert = utils.assert;
                function KeyPair(ec, options) {
                    this.ec = ec;
                    this.priv = null;
                    this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })
                    if (options.priv) this._importPrivate(options.priv, options.privEnc);
                    if (options.pub) this._importPublic(options.pub, options.pubEnc);
                }
                module.exports = KeyPair;
                KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
                    if (pub instanceof KeyPair) return pub;
                    return new KeyPair(ec, {
                        pub: pub,
                        pubEnc: enc
                    });
                };
                KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
                    if (priv instanceof KeyPair) return priv;
                    return new KeyPair(ec, {
                        priv: priv,
                        privEnc: enc
                    });
                };
                KeyPair.prototype.validate = function validate() {
                    var pub = this.getPublic();
                    if (pub.isInfinity()) return {
                        result: false,
                        reason: "Invalid public key"
                    };
                    if (!pub.validate()) return {
                        result: false,
                        reason: "Public key is not a point"
                    };
                    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
                        result: false,
                        reason: "Public key * N != O"
                    };
                    return {
                        result: true,
                        reason: null
                    };
                };
                KeyPair.prototype.getPublic = function getPublic(compact, enc) {
                    // compact is optional argument
                    if (typeof compact === "string") {
                        enc = compact;
                        compact = null;
                    }
                    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
                    if (!enc) return this.pub;
                    return this.pub.encode(enc, compact);
                };
                KeyPair.prototype.getPrivate = function getPrivate(enc) {
                    if (enc === "hex") return this.priv.toString(16, 2);
                    else return this.priv;
                };
                KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
                    this.priv = new BN(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
                    // in fixed multiplication method
                    this.priv = this.priv.umod(this.ec.curve.n);
                };
                KeyPair.prototype._importPublic = function _importPublic(key, enc) {
                    if (key.x || key.y) {
                        // Montgomery points only have an `x` coordinate.
                        // Weierstrass/Edwards points on the other hand have both `x` and
                        // `y` coordinates.
                        if (this.ec.curve.type === "mont") assert(key.x, "Need x coordinate");
                        else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") assert(key.x && key.y, "Need both x and y coordinate");
                        this.pub = this.ec.curve.point(key.x, key.y);
                        return;
                    }
                    this.pub = this.ec.curve.decodePoint(key, enc);
                }; // ECDH
                KeyPair.prototype.derive = function derive(pub) {
                    return pub.mul(this.priv).getX();
                }; // ECDSA
                KeyPair.prototype.sign = function sign(msg, enc, options) {
                    return this.ec.sign(msg, this, enc, options);
                };
                KeyPair.prototype.verify = function verify(msg, signature) {
                    return this.ec.verify(msg, signature, this);
                };
                KeyPair.prototype.inspect = function inspect() {
                    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
                };
            },
            {
                "../utils": 220,
                "bn.js": 222
            }
        ],
        218: [
            function(require, module, exports) {
                "use strict";
                var BN = require("bn.js");
                var utils = require("../utils");
                var assert = utils.assert;
                function Signature(options, enc) {
                    if (options instanceof Signature) return options;
                    if (this._importDER(options, enc)) return;
                    assert(options.r && options.s, "Signature without r or s");
                    this.r = new BN(options.r, 16);
                    this.s = new BN(options.s, 16);
                    if (options.recoveryParam === undefined) this.recoveryParam = null;
                    else this.recoveryParam = options.recoveryParam;
                }
                module.exports = Signature;
                function Position() {
                    this.place = 0;
                }
                function getLength(buf, p) {
                    var initial = buf[p.place++];
                    if (!(initial & 0x80)) return initial;
                    var octetLen = initial & 0xf;
                    var val = 0;
                    for(var i = 0, off = p.place; i < octetLen; i++, off++){
                        val <<= 8;
                        val |= buf[off];
                    }
                    p.place = off;
                    return val;
                }
                function rmPadding(buf) {
                    var i = 0;
                    var len = buf.length - 1;
                    while(!buf[i] && !(buf[i + 1] & 0x80) && i < len)i++;
                    if (i === 0) return buf;
                    return buf.slice(i);
                }
                Signature.prototype._importDER = function _importDER(data, enc) {
                    data = utils.toArray(data, enc);
                    var p = new Position();
                    if (data[p.place++] !== 0x30) return false;
                    var len = getLength(data, p);
                    if (len + p.place !== data.length) return false;
                    if (data[p.place++] !== 0x02) return false;
                    var rlen = getLength(data, p);
                    var r = data.slice(p.place, rlen + p.place);
                    p.place += rlen;
                    if (data[p.place++] !== 0x02) return false;
                    var slen = getLength(data, p);
                    if (data.length !== slen + p.place) return false;
                    var s = data.slice(p.place, slen + p.place);
                    if (r[0] === 0 && r[1] & 0x80) r = r.slice(1);
                    if (s[0] === 0 && s[1] & 0x80) s = s.slice(1);
                    this.r = new BN(r);
                    this.s = new BN(s);
                    this.recoveryParam = null;
                    return true;
                };
                function constructLength(arr, len) {
                    if (len < 0x80) {
                        arr.push(len);
                        return;
                    }
                    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
                    arr.push(octets | 0x80);
                    while(--octets)arr.push(len >>> (octets << 3) & 0xff);
                    arr.push(len);
                }
                Signature.prototype.toDER = function toDER(enc) {
                    var r = this.r.toArray();
                    var s = this.s.toArray(); // Pad values
                    if (r[0] & 0x80) r = [
                        0
                    ].concat(r); // Pad values
                    if (s[0] & 0x80) s = [
                        0
                    ].concat(s);
                    r = rmPadding(r);
                    s = rmPadding(s);
                    while(!s[0] && !(s[1] & 0x80))s = s.slice(1);
                    var arr = [
                        0x02
                    ];
                    constructLength(arr, r.length);
                    arr = arr.concat(r);
                    arr.push(0x02);
                    constructLength(arr, s.length);
                    var backHalf = arr.concat(s);
                    var res = [
                        0x30
                    ];
                    constructLength(res, backHalf.length);
                    res = res.concat(backHalf);
                    return utils.encode(res, enc);
                };
            },
            {
                "../utils": 220,
                "bn.js": 222
            }
        ],
        219: [
            function(require, module, exports) {
                module.exports = {
                    doubles: {
                        step: 4,
                        points: [
                            [
                                "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                                "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
                            ],
                            [
                                "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                                "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
                            ],
                            [
                                "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                                "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
                            ],
                            [
                                "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                                "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
                            ],
                            [
                                "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                                "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
                            ],
                            [
                                "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                                "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
                            ],
                            [
                                "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                                "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
                            ],
                            [
                                "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                                "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
                            ],
                            [
                                "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                                "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
                            ],
                            [
                                "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                                "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
                            ],
                            [
                                "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                                "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
                            ],
                            [
                                "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                                "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
                            ],
                            [
                                "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                                "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
                            ],
                            [
                                "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                                "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
                            ],
                            [
                                "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                                "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
                            ],
                            [
                                "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                                "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
                            ],
                            [
                                "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                                "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
                            ],
                            [
                                "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                                "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
                            ],
                            [
                                "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                                "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
                            ],
                            [
                                "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                                "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
                            ],
                            [
                                "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                                "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
                            ],
                            [
                                "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                                "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
                            ],
                            [
                                "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                                "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
                            ],
                            [
                                "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                                "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
                            ],
                            [
                                "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                                "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
                            ],
                            [
                                "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                                "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
                            ],
                            [
                                "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                                "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
                            ],
                            [
                                "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                                "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
                            ],
                            [
                                "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                                "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
                            ],
                            [
                                "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                                "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
                            ],
                            [
                                "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                                "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
                            ],
                            [
                                "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                                "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
                            ],
                            [
                                "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                                "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
                            ],
                            [
                                "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                                "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
                            ],
                            [
                                "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                                "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
                            ],
                            [
                                "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                                "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
                            ],
                            [
                                "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                                "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
                            ],
                            [
                                "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                                "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
                            ],
                            [
                                "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                                "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
                            ],
                            [
                                "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                                "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
                            ],
                            [
                                "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                                "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
                            ],
                            [
                                "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                                "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
                            ],
                            [
                                "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                                "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
                            ],
                            [
                                "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                                "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
                            ],
                            [
                                "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                                "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
                            ],
                            [
                                "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                                "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
                            ],
                            [
                                "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                                "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
                            ],
                            [
                                "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                                "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
                            ],
                            [
                                "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                                "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
                            ],
                            [
                                "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                                "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
                            ],
                            [
                                "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                                "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
                            ],
                            [
                                "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                                "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
                            ],
                            [
                                "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                                "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
                            ],
                            [
                                "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                                "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
                            ],
                            [
                                "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                                "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
                            ],
                            [
                                "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                                "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
                            ],
                            [
                                "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                                "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
                            ],
                            [
                                "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                                "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
                            ],
                            [
                                "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                                "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
                            ],
                            [
                                "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                                "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
                            ],
                            [
                                "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                                "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
                            ],
                            [
                                "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                                "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
                            ],
                            [
                                "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                                "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
                            ],
                            [
                                "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                                "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
                            ],
                            [
                                "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                                "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
                            ]
                        ]
                    },
                    naf: {
                        wnd: 7,
                        points: [
                            [
                                "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                                "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
                            ],
                            [
                                "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                                "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
                            ],
                            [
                                "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                                "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
                            ],
                            [
                                "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                                "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
                            ],
                            [
                                "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                                "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
                            ],
                            [
                                "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                                "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
                            ],
                            [
                                "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                                "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
                            ],
                            [
                                "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                                "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
                            ],
                            [
                                "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                                "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
                            ],
                            [
                                "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                                "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
                            ],
                            [
                                "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                                "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
                            ],
                            [
                                "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                                "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
                            ],
                            [
                                "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                                "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
                            ],
                            [
                                "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                                "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
                            ],
                            [
                                "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                                "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
                            ],
                            [
                                "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                                "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
                            ],
                            [
                                "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                                "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
                            ],
                            [
                                "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                                "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
                            ],
                            [
                                "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                                "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
                            ],
                            [
                                "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                                "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
                            ],
                            [
                                "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                                "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
                            ],
                            [
                                "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                                "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
                            ],
                            [
                                "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                                "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
                            ],
                            [
                                "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                                "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
                            ],
                            [
                                "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                                "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
                            ],
                            [
                                "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                                "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
                            ],
                            [
                                "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                                "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
                            ],
                            [
                                "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                                "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
                            ],
                            [
                                "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                                "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
                            ],
                            [
                                "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                                "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
                            ],
                            [
                                "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                                "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
                            ],
                            [
                                "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                                "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
                            ],
                            [
                                "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                                "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
                            ],
                            [
                                "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                                "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
                            ],
                            [
                                "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                                "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
                            ],
                            [
                                "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                                "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
                            ],
                            [
                                "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                                "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
                            ],
                            [
                                "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                                "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
                            ],
                            [
                                "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                                "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
                            ],
                            [
                                "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                                "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
                            ],
                            [
                                "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                                "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
                            ],
                            [
                                "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                                "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
                            ],
                            [
                                "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                                "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
                            ],
                            [
                                "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                                "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
                            ],
                            [
                                "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                                "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
                            ],
                            [
                                "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                                "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
                            ],
                            [
                                "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                                "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
                            ],
                            [
                                "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                                "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
                            ],
                            [
                                "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                                "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
                            ],
                            [
                                "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                                "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
                            ],
                            [
                                "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                                "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
                            ],
                            [
                                "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                                "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
                            ],
                            [
                                "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                                "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
                            ],
                            [
                                "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                                "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
                            ],
                            [
                                "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                                "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
                            ],
                            [
                                "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                                "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
                            ],
                            [
                                "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                                "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
                            ],
                            [
                                "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                                "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
                            ],
                            [
                                "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                                "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
                            ],
                            [
                                "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                                "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
                            ],
                            [
                                "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                                "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
                            ],
                            [
                                "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                                "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
                            ],
                            [
                                "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                                "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
                            ],
                            [
                                "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                                "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
                            ],
                            [
                                "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                                "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
                            ],
                            [
                                "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                                "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
                            ],
                            [
                                "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                                "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
                            ],
                            [
                                "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                                "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
                            ],
                            [
                                "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                                "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
                            ],
                            [
                                "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                                "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
                            ],
                            [
                                "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                                "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
                            ],
                            [
                                "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                                "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
                            ],
                            [
                                "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                                "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
                            ],
                            [
                                "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                                "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
                            ],
                            [
                                "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                                "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
                            ],
                            [
                                "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                                "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
                            ],
                            [
                                "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                                "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
                            ],
                            [
                                "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                                "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
                            ],
                            [
                                "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                                "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
                            ],
                            [
                                "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                                "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
                            ],
                            [
                                "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                                "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
                            ],
                            [
                                "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                                "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
                            ],
                            [
                                "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                                "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
                            ],
                            [
                                "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                                "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
                            ],
                            [
                                "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                                "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
                            ],
                            [
                                "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                                "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
                            ],
                            [
                                "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                                "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
                            ],
                            [
                                "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                                "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
                            ],
                            [
                                "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                                "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
                            ],
                            [
                                "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                                "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
                            ],
                            [
                                "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                                "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
                            ],
                            [
                                "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                                "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
                            ],
                            [
                                "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                                "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
                            ],
                            [
                                "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                                "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
                            ],
                            [
                                "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                                "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
                            ],
                            [
                                "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                                "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
                            ],
                            [
                                "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                                "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
                            ],
                            [
                                "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                                "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
                            ],
                            [
                                "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                                "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
                            ],
                            [
                                "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                                "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
                            ],
                            [
                                "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                                "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
                            ],
                            [
                                "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                                "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
                            ],
                            [
                                "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                                "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
                            ],
                            [
                                "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                                "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
                            ],
                            [
                                "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                                "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
                            ],
                            [
                                "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                                "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
                            ],
                            [
                                "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                                "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
                            ],
                            [
                                "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                                "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
                            ],
                            [
                                "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                                "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
                            ],
                            [
                                "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                                "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
                            ],
                            [
                                "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                                "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
                            ],
                            [
                                "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                                "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
                            ],
                            [
                                "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                                "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
                            ],
                            [
                                "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                                "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
                            ],
                            [
                                "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                                "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
                            ],
                            [
                                "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                                "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
                            ],
                            [
                                "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                                "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
                            ],
                            [
                                "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                                "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
                            ],
                            [
                                "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                                "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
                            ],
                            [
                                "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                                "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
                            ],
                            [
                                "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                                "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
                            ],
                            [
                                "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                                "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
                            ],
                            [
                                "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                                "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
                            ],
                            [
                                "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                                "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
                            ],
                            [
                                "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                                "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
                            ],
                            [
                                "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                                "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
                            ],
                            [
                                "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                                "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
                            ]
                        ]
                    }
                };
            },
            {}
        ],
        220: [
            function(require, module, exports) {
                "use strict";
                var utils = exports;
                var BN = require("bn.js");
                var minAssert = require("minimalistic-assert");
                var minUtils = require("minimalistic-crypto-utils");
                utils.assert = minAssert;
                utils.toArray = minUtils.toArray;
                utils.zero2 = minUtils.zero2;
                utils.toHex = minUtils.toHex;
                utils.encode = minUtils.encode; // Represent num in a w-NAF form
                function getNAF(num, w, bits) {
                    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
                    naf.fill(0);
                    var ws = 1 << w + 1;
                    var k = num.clone();
                    for(var i = 0; i < naf.length; i++){
                        var z;
                        var mod = k.andln(ws - 1);
                        if (k.isOdd()) {
                            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
                            else z = mod;
                            k.isubn(z);
                        } else z = 0;
                        naf[i] = z;
                        k.iushrn(1);
                    }
                    return naf;
                }
                utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form
                function getJSF(k1, k2) {
                    var jsf = [
                        [],
                        []
                    ];
                    k1 = k1.clone();
                    k2 = k2.clone();
                    var d1 = 0;
                    var d2 = 0;
                    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
                        // First phase
                        var m14 = k1.andln(3) + d1 & 3;
                        var m24 = k2.andln(3) + d2 & 3;
                        if (m14 === 3) m14 = -1;
                        if (m24 === 3) m24 = -1;
                        var u1;
                        if ((m14 & 1) === 0) u1 = 0;
                        else {
                            var m8 = k1.andln(7) + d1 & 7;
                            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
                            else u1 = m14;
                        }
                        jsf[0].push(u1);
                        var u2;
                        if ((m24 & 1) === 0) u2 = 0;
                        else {
                            var m8 = k2.andln(7) + d2 & 7;
                            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
                            else u2 = m24;
                        }
                        jsf[1].push(u2); // Second phase
                        if (2 * d1 === u1 + 1) d1 = 1 - d1;
                        if (2 * d2 === u2 + 1) d2 = 1 - d2;
                        k1.iushrn(1);
                        k2.iushrn(1);
                    }
                    return jsf;
                }
                utils.getJSF = getJSF;
                function cachedProperty(obj, name, computer) {
                    var key = "_" + name;
                    obj.prototype[name] = function cachedProperty() {
                        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
                    };
                }
                utils.cachedProperty = cachedProperty;
                function parseBytes(bytes) {
                    return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
                }
                utils.parseBytes = parseBytes;
                function intFromLE(bytes) {
                    return new BN(bytes, "hex", "le");
                }
                utils.intFromLE = intFromLE;
            },
            {
                "bn.js": 222,
                "minimalistic-assert": 246,
                "minimalistic-crypto-utils": 247
            }
        ],
        221: [
            function(require, module, exports) {
                module.exports = {
                    "name": "bitcoin-elliptic",
                    "version": "7.0.1",
                    "description": "EC cryptography",
                    "main": "lib/elliptic.js",
                    "files": [
                        "lib"
                    ],
                    "scripts": {
                        "jscs": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                        "jshint": "jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js",
                        "lint": "npm run jscs && npm run jshint",
                        "unit": "istanbul test _mocha --reporter=spec test/index.js",
                        "test": "npm run lint && npm run unit",
                        "version": "grunt dist && git add dist/"
                    },
                    "repository": {
                        "type": "git",
                        "url": "git@github.com:moneybutton/elliptic"
                    },
                    "keywords": [
                        "EC",
                        "Elliptic",
                        "curve",
                        "Cryptography"
                    ],
                    "author": "Fedor Indutny <fedor@indutny.com>",
                    "contributors": [
                        {
                            "name": "Ryan X. Charles",
                            "email": "ryanxcharles@gmail.com"
                        }
                    ],
                    "license": "MIT",
                    "bugs": {
                        "url": "https://github.com/indutny/elliptic/issues"
                    },
                    "homepage": "https://github.com/moneybutton/elliptic",
                    "devDependencies": {
                        "brfs": "^2.0.2",
                        "coveralls": "^3.0.8",
                        "grunt": "^1.0.4",
                        "grunt-browserify": "^5.0.0",
                        "grunt-cli": "^1.2.0",
                        "grunt-contrib-connect": "^2.1.0",
                        "grunt-contrib-copy": "^1.0.0",
                        "grunt-contrib-uglify": "^4.0.1",
                        "grunt-mocha-istanbul": "^5.0.2",
                        "grunt-saucelabs": "^9.0.1",
                        "istanbul": "^0.4.2",
                        "jscs": "^3.0.7",
                        "jshint": "^2.11.1",
                        "mocha": "^7.1.2"
                    },
                    "dependencies": {
                        "bn.js": "^5.1.1",
                        "brorand": "^1.0.1",
                        "hash.js": "^1.0.0",
                        "hmac-drbg": "^1.0.0",
                        "inherits": "^2.0.1",
                        "minimalistic-assert": "^1.0.0",
                        "minimalistic-crypto-utils": "^1.0.0"
                    }
                };
            },
            {}
        ],
        222: [
            function(require, module4, exports4) {
                (function(module, exports) {
                    "use strict"; // Utils
                    function assert(val, msg) {
                        if (!val) throw new Error(msg || "Assertion failed");
                    } // Could use `inherits` module, but don't want to move from single file
                    // architecture yet.
                    function inherits(ctor, superCtor) {
                        ctor.super_ = superCtor;
                        var TempCtor = function TempCtor() {};
                        TempCtor.prototype = superCtor.prototype;
                        ctor.prototype = new TempCtor();
                        ctor.prototype.constructor = ctor;
                    } // BN
                    function BN(number, base, endian) {
                        if (BN.isBN(number)) return number;
                        this.negative = 0;
                        this.words = null;
                        this.length = 0; // Reduction context
                        this.red = null;
                        if (number !== null) {
                            if (base === "le" || base === "be") {
                                endian = base;
                                base = 10;
                            }
                            this._init(number || 0, base || 10, endian || "be");
                        }
                    }
                    if (_typeof(module) === "object") module.exports = BN;
                    else exports.BN = BN;
                    BN.BN = BN;
                    BN.wordSize = 26;
                    var Buffer;
                    try {
                        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") Buffer = window.Buffer;
                        else Buffer = require("buffer").Buffer;
                    } catch (e) {}
                    BN.isBN = function isBN(num) {
                        if (num instanceof BN) return true;
                        return num !== null && _typeof(num) === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
                    };
                    BN.max = function max(left, right) {
                        if (left.cmp(right) > 0) return left;
                        return right;
                    };
                    BN.min = function min(left, right) {
                        if (left.cmp(right) < 0) return left;
                        return right;
                    };
                    BN.prototype._init = function init(number, base, endian) {
                        if (typeof number === "number") return this._initNumber(number, base, endian);
                        if (_typeof(number) === "object") return this._initArray(number, base, endian);
                        if (base === "hex") base = 16;
                        assert(base === (base | 0) && base >= 2 && base <= 36);
                        number = number.toString().replace(/\s+/g, "");
                        var start = 0;
                        if (number[0] === "-") {
                            start++;
                            this.negative = 1;
                        }
                        if (start < number.length) {
                            if (base === 16) this._parseHex(number, start, endian);
                            else {
                                this._parseBase(number, base, start);
                                if (endian === "le") this._initArray(this.toArray(), base, endian);
                            }
                        }
                    };
                    BN.prototype._initNumber = function _initNumber(number, base, endian) {
                        if (number < 0) {
                            this.negative = 1;
                            number = -number;
                        }
                        if (number < 0x4000000) {
                            this.words = [
                                number & 0x3ffffff
                            ];
                            this.length = 1;
                        } else if (number < 0x10000000000000) {
                            this.words = [
                                number & 0x3ffffff,
                                number / 0x4000000 & 0x3ffffff
                            ];
                            this.length = 2;
                        } else {
                            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
                            this.words = [
                                number & 0x3ffffff,
                                number / 0x4000000 & 0x3ffffff,
                                1
                            ];
                            this.length = 3;
                        }
                        if (endian !== "le") return; // Reverse the bytes
                        this._initArray(this.toArray(), base, endian);
                    };
                    BN.prototype._initArray = function _initArray(number, base, endian) {
                        // Perhaps a Uint8Array
                        assert(typeof number.length === "number");
                        if (number.length <= 0) {
                            this.words = [
                                0
                            ];
                            this.length = 1;
                            return this;
                        }
                        this.length = Math.ceil(number.length / 3);
                        this.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)this.words[i] = 0;
                        var j, w;
                        var off = 0;
                        if (endian === "be") for(i = number.length - 1, j = 0; i >= 0; i -= 3){
                            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
                            this.words[j] |= w << off & 0x3ffffff;
                            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        else if (endian === "le") for(i = 0, j = 0; i < number.length; i += 3){
                            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
                            this.words[j] |= w << off & 0x3ffffff;
                            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
                            off += 24;
                            if (off >= 26) {
                                off -= 26;
                                j++;
                            }
                        }
                        return this._strip();
                    };
                    function parseHex4Bits(string, index) {
                        var c = string.charCodeAt(index); // '0' - '9'
                        if (c >= 48 && c <= 57) return c - 48; // 'A' - 'F'
                        else if (c >= 65 && c <= 70) return c - 55; // 'a' - 'f'
                        else if (c >= 97 && c <= 102) return c - 87;
                        else assert(false, "Invalid character in " + string);
                    }
                    function parseHexByte(string, lowerBound, index) {
                        var r = parseHex4Bits(string, index);
                        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
                        return r;
                    }
                    BN.prototype._parseHex = function _parseHex(number, start, endian) {
                        // Create possibly bigger array to ensure that it fits the number
                        this.length = Math.ceil((number.length - start) / 6);
                        this.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)this.words[i] = 0;
                         // 24-bits chunks
                        var off = 0;
                        var j = 0;
                        var w;
                        if (endian === "be") for(i = number.length - 1; i >= start; i -= 2){
                            w = parseHexByte(number, start, i) << off;
                            this.words[j] |= w & 0x3ffffff;
                            if (off >= 18) {
                                off -= 18;
                                j += 1;
                                this.words[j] |= w >>> 26;
                            } else off += 8;
                        }
                        else {
                            var parseLength = number.length - start;
                            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                                w = parseHexByte(number, start, i) << off;
                                this.words[j] |= w & 0x3ffffff;
                                if (off >= 18) {
                                    off -= 18;
                                    j += 1;
                                    this.words[j] |= w >>> 26;
                                } else off += 8;
                            }
                        }
                        this._strip();
                    };
                    function parseBase(str, start, end, mul) {
                        var r = 0;
                        var b = 0;
                        var len = Math.min(str.length, end);
                        for(var i = start; i < len; i++){
                            var c = str.charCodeAt(i) - 48;
                            r *= mul; // 'a'
                            if (c >= 49) b = c - 49 + 0xa; // 'A'
                            else if (c >= 17) b = c - 17 + 0xa; // '0' - '9'
                            else b = c;
                            assert(c >= 0 && b < mul, "Invalid character");
                            r += b;
                        }
                        return r;
                    }
                    BN.prototype._parseBase = function _parseBase(number, base, start) {
                        // Initialize as zero
                        this.words = [
                            0
                        ];
                        this.length = 1; // Find length of limb in base
                        for(var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base)limbLen++;
                        limbLen--;
                        limbPow = limbPow / base | 0;
                        var total = number.length - start;
                        var mod = total % limbLen;
                        var end = Math.min(total, total - mod) + start;
                        var word = 0;
                        for(var i = start; i < end; i += limbLen){
                            word = parseBase(number, i, i + limbLen, base);
                            this.imuln(limbPow);
                            if (this.words[0] + word < 0x4000000) this.words[0] += word;
                            else this._iaddn(word);
                        }
                        if (mod !== 0) {
                            var pow = 1;
                            word = parseBase(number, i, number.length, base);
                            for(i = 0; i < mod; i++)pow *= base;
                            this.imuln(pow);
                            if (this.words[0] + word < 0x4000000) this.words[0] += word;
                            else this._iaddn(word);
                        }
                        this._strip();
                    };
                    BN.prototype.copy = function copy(dest) {
                        dest.words = new Array(this.length);
                        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
                        dest.length = this.length;
                        dest.negative = this.negative;
                        dest.red = this.red;
                    };
                    function move(dest, src) {
                        dest.words = src.words;
                        dest.length = src.length;
                        dest.negative = src.negative;
                        dest.red = src.red;
                    }
                    BN.prototype._move = function _move(dest) {
                        move(dest, this);
                    };
                    BN.prototype.clone = function clone() {
                        var r = new BN(null);
                        this.copy(r);
                        return r;
                    };
                    BN.prototype._expand = function _expand(size) {
                        while(this.length < size)this.words[this.length++] = 0;
                        return this;
                    }; // Remove leading `0` from `this`
                    BN.prototype._strip = function strip() {
                        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
                        return this._normSign();
                    };
                    BN.prototype._normSign = function _normSign() {
                        // -0 = 0
                        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
                        return this;
                    }; // Check Symbol.for because not everywhere where Symbol defined
                    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
                    if (typeof Symbol !== "undefined" && typeof Symbol["for"] === "function") try {
                        BN.prototype[Symbol["for"]("nodejs.util.inspect.custom")] = inspect;
                    } catch (e5) {
                        BN.prototype.inspect = inspect;
                    }
                    else BN.prototype.inspect = inspect;
                    function inspect() {
                        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                    }
                    /*
         var zeros = [];
        var groupSizes = [];
        var groupBases = [];
         var s = '';
        var i = -1;
        while (++i < BN.wordSize) {
          zeros[i] = s;
          s += '0';
        }
        groupSizes[0] = 0;
        groupSizes[1] = 0;
        groupBases[0] = 0;
        groupBases[1] = 0;
        var base = 2 - 1;
        while (++base < 36 + 1) {
          var groupSize = 0;
          var groupBase = 1;
          while (groupBase < (1 << BN.wordSize) / base) {
            groupBase *= base;
            groupSize += 1;
          }
          groupSizes[base] = groupSize;
          groupBases[base] = groupBase;
        }
         */ var zeros = [
                        "",
                        "0",
                        "00",
                        "000",
                        "0000",
                        "00000",
                        "000000",
                        "0000000",
                        "00000000",
                        "000000000",
                        "0000000000",
                        "00000000000",
                        "000000000000",
                        "0000000000000",
                        "00000000000000",
                        "000000000000000",
                        "0000000000000000",
                        "00000000000000000",
                        "000000000000000000",
                        "0000000000000000000",
                        "00000000000000000000",
                        "000000000000000000000",
                        "0000000000000000000000",
                        "00000000000000000000000",
                        "000000000000000000000000",
                        "0000000000000000000000000"
                    ];
                    var groupSizes = [
                        0,
                        0,
                        25,
                        16,
                        12,
                        11,
                        10,
                        9,
                        8,
                        8,
                        7,
                        7,
                        7,
                        7,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ];
                    var groupBases = [
                        0,
                        0,
                        33554432,
                        43046721,
                        16777216,
                        48828125,
                        60466176,
                        40353607,
                        16777216,
                        43046721,
                        10000000,
                        19487171,
                        35831808,
                        62748517,
                        7529536,
                        11390625,
                        16777216,
                        24137569,
                        34012224,
                        47045881,
                        64000000,
                        4084101,
                        5153632,
                        6436343,
                        7962624,
                        9765625,
                        11881376,
                        14348907,
                        17210368,
                        20511149,
                        24300000,
                        28629151,
                        33554432,
                        39135393,
                        45435424,
                        52521875,
                        60466176
                    ];
                    BN.prototype.toString = function toString(base, padding) {
                        base = base || 10;
                        padding = padding | 0 || 1;
                        var out;
                        if (base === 16 || base === "hex") {
                            out = "";
                            var off = 0;
                            var carry = 0;
                            for(var i = 0; i < this.length; i++){
                                var w = this.words[i];
                                var word = ((w << off | carry) & 0xffffff).toString(16);
                                carry = w >>> 24 - off & 0xffffff;
                                off += 2;
                                if (off >= 26) {
                                    off -= 26;
                                    i--;
                                }
                                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                                else out = word + out;
                            }
                            if (carry !== 0) out = carry.toString(16) + out;
                            while(out.length % padding !== 0)out = "0" + out;
                            if (this.negative !== 0) out = "-" + out;
                            return out;
                        }
                        if (base === (base | 0) && base >= 2 && base <= 36) {
                            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
                            var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);
                            var groupBase = groupBases[base];
                            out = "";
                            var c = this.clone();
                            c.negative = 0;
                            while(!c.isZero()){
                                var r = c.modrn(groupBase).toString(base);
                                c = c.idivn(groupBase);
                                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                                else out = r + out;
                            }
                            if (this.isZero()) out = "0" + out;
                            while(out.length % padding !== 0)out = "0" + out;
                            if (this.negative !== 0) out = "-" + out;
                            return out;
                        }
                        assert(false, "Base should be between 2 and 36");
                    };
                    BN.prototype.toNumber = function toNumber() {
                        var ret = this.words[0];
                        if (this.length === 2) ret += this.words[1] * 0x4000000;
                        else if (this.length === 3 && this.words[2] === 0x01) // NOTE: at this stage it is known that the top bit is set
                        ret += 0x10000000000000 + this.words[1] * 0x4000000;
                        else if (this.length > 2) assert(false, "Number can only safely store up to 53 bits");
                        return this.negative !== 0 ? -ret : ret;
                    };
                    BN.prototype.toJSON = function toJSON() {
                        return this.toString(16, 2);
                    };
                    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
                        return this.toArrayLike(Buffer, endian, length);
                    };
                    BN.prototype.toArray = function toArray(endian, length) {
                        return this.toArrayLike(Array, endian, length);
                    };
                    var allocate = function allocate(ArrayType, size) {
                        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
                        return new ArrayType(size);
                    };
                    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
                        this._strip();
                        var byteLength = this.byteLength();
                        var reqLength = length || Math.max(1, byteLength);
                        assert(byteLength <= reqLength, "byte array longer than desired length");
                        assert(reqLength > 0, "Requested array length <= 0");
                        var res = allocate(ArrayType, reqLength);
                        var postfix = endian === "le" ? "LE" : "BE";
                        this["_toArrayLike" + postfix](res, byteLength);
                        return res;
                    };
                    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
                        var position = 0;
                        var carry = 0;
                        for(var i = 0, shift = 0; i < this.length; i++){
                            var word = this.words[i] << shift | carry;
                            res[position++] = word & 0xff;
                            if (position < res.length) res[position++] = word >> 8 & 0xff;
                            if (position < res.length) res[position++] = word >> 16 & 0xff;
                            if (shift === 6) {
                                if (position < res.length) res[position++] = word >> 24 & 0xff;
                                carry = 0;
                                shift = 0;
                            } else {
                                carry = word >>> 24;
                                shift += 2;
                            }
                        }
                        if (position < res.length) {
                            res[position++] = carry;
                            while(position < res.length)res[position++] = 0;
                        }
                    };
                    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
                        var position = res.length - 1;
                        var carry = 0;
                        for(var i = 0, shift = 0; i < this.length; i++){
                            var word = this.words[i] << shift | carry;
                            res[position--] = word & 0xff;
                            if (position >= 0) res[position--] = word >> 8 & 0xff;
                            if (position >= 0) res[position--] = word >> 16 & 0xff;
                            if (shift === 6) {
                                if (position >= 0) res[position--] = word >> 24 & 0xff;
                                carry = 0;
                                shift = 0;
                            } else {
                                carry = word >>> 24;
                                shift += 2;
                            }
                        }
                        if (position >= 0) {
                            res[position--] = carry;
                            while(position >= 0)res[position--] = 0;
                        }
                    };
                    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
                        return 32 - Math.clz32(w);
                    };
                    else BN.prototype._countBits = function _countBits(w) {
                        var t = w;
                        var r = 0;
                        if (t >= 0x1000) {
                            r += 13;
                            t >>>= 13;
                        }
                        if (t >= 0x40) {
                            r += 7;
                            t >>>= 7;
                        }
                        if (t >= 0x8) {
                            r += 4;
                            t >>>= 4;
                        }
                        if (t >= 0x02) {
                            r += 2;
                            t >>>= 2;
                        }
                        return r + t;
                    };
                    BN.prototype._zeroBits = function _zeroBits(w) {
                        // Short-cut
                        if (w === 0) return 26;
                        var t = w;
                        var r = 0;
                        if ((t & 0x1fff) === 0) {
                            r += 13;
                            t >>>= 13;
                        }
                        if ((t & 0x7f) === 0) {
                            r += 7;
                            t >>>= 7;
                        }
                        if ((t & 0xf) === 0) {
                            r += 4;
                            t >>>= 4;
                        }
                        if ((t & 0x3) === 0) {
                            r += 2;
                            t >>>= 2;
                        }
                        if ((t & 0x1) === 0) r++;
                        return r;
                    }; // Return number of used bits in a BN
                    BN.prototype.bitLength = function bitLength() {
                        var w = this.words[this.length - 1];
                        var hi = this._countBits(w);
                        return (this.length - 1) * 26 + hi;
                    };
                    function toBitArray(num) {
                        var w = new Array(num.bitLength());
                        for(var bit = 0; bit < w.length; bit++){
                            var off = bit / 26 | 0;
                            var wbit = bit % 26;
                            w[bit] = num.words[off] >>> wbit & 0x01;
                        }
                        return w;
                    } // Number of trailing zero bits
                    BN.prototype.zeroBits = function zeroBits() {
                        if (this.isZero()) return 0;
                        var r = 0;
                        for(var i = 0; i < this.length; i++){
                            var b = this._zeroBits(this.words[i]);
                            r += b;
                            if (b !== 26) break;
                        }
                        return r;
                    };
                    BN.prototype.byteLength = function byteLength() {
                        return Math.ceil(this.bitLength() / 8);
                    };
                    BN.prototype.toTwos = function toTwos(width) {
                        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
                        return this.clone();
                    };
                    BN.prototype.fromTwos = function fromTwos(width) {
                        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
                        return this.clone();
                    };
                    BN.prototype.isNeg = function isNeg() {
                        return this.negative !== 0;
                    }; // Return negative clone of `this`
                    BN.prototype.neg = function neg() {
                        return this.clone().ineg();
                    };
                    BN.prototype.ineg = function ineg() {
                        if (!this.isZero()) this.negative ^= 1;
                        return this;
                    }; // Or `num` with `this` in-place
                    BN.prototype.iuor = function iuor(num) {
                        while(this.length < num.length)this.words[this.length++] = 0;
                        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
                        return this._strip();
                    };
                    BN.prototype.ior = function ior(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuor(num);
                    }; // Or `num` with `this`
                    BN.prototype.or = function or(num) {
                        if (this.length > num.length) return this.clone().ior(num);
                        return num.clone().ior(this);
                    };
                    BN.prototype.uor = function uor(num) {
                        if (this.length > num.length) return this.clone().iuor(num);
                        return num.clone().iuor(this);
                    }; // And `num` with `this` in-place
                    BN.prototype.iuand = function iuand(num) {
                        // b = min-length(num, this)
                        var b;
                        if (this.length > num.length) b = num;
                        else b = this;
                        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
                        this.length = b.length;
                        return this._strip();
                    };
                    BN.prototype.iand = function iand(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuand(num);
                    }; // And `num` with `this`
                    BN.prototype.and = function and(num) {
                        if (this.length > num.length) return this.clone().iand(num);
                        return num.clone().iand(this);
                    };
                    BN.prototype.uand = function uand(num) {
                        if (this.length > num.length) return this.clone().iuand(num);
                        return num.clone().iuand(this);
                    }; // Xor `num` with `this` in-place
                    BN.prototype.iuxor = function iuxor(num) {
                        // a.length > b.length
                        var a;
                        var b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
                        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
                        this.length = a.length;
                        return this._strip();
                    };
                    BN.prototype.ixor = function ixor(num) {
                        assert((this.negative | num.negative) === 0);
                        return this.iuxor(num);
                    }; // Xor `num` with `this`
                    BN.prototype.xor = function xor(num) {
                        if (this.length > num.length) return this.clone().ixor(num);
                        return num.clone().ixor(this);
                    };
                    BN.prototype.uxor = function uxor(num) {
                        if (this.length > num.length) return this.clone().iuxor(num);
                        return num.clone().iuxor(this);
                    }; // Not ``this`` with ``width`` bitwidth
                    BN.prototype.inotn = function inotn(width) {
                        assert(typeof width === "number" && width >= 0);
                        var bytesNeeded = Math.ceil(width / 26) | 0;
                        var bitsLeft = width % 26; // Extend the buffer with leading zeroes
                        this._expand(bytesNeeded);
                        if (bitsLeft > 0) bytesNeeded--;
                         // Handle complete words
                        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 0x3ffffff;
                         // Handle the residue
                        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
                         // And remove leading zeroes
                        return this._strip();
                    };
                    BN.prototype.notn = function notn(width) {
                        return this.clone().inotn(width);
                    }; // Set `bit` of `this`
                    BN.prototype.setn = function setn(bit, val) {
                        assert(typeof bit === "number" && bit >= 0);
                        var off = bit / 26 | 0;
                        var wbit = bit % 26;
                        this._expand(off + 1);
                        if (val) this.words[off] = this.words[off] | 1 << wbit;
                        else this.words[off] = this.words[off] & ~(1 << wbit);
                        return this._strip();
                    }; // Add `num` to `this` in-place
                    BN.prototype.iadd = function iadd(num) {
                        var r; // negative + positive
                        if (this.negative !== 0 && num.negative === 0) {
                            this.negative = 0;
                            r = this.isub(num);
                            this.negative ^= 1;
                            return this._normSign(); // positive + negative
                        } else if (this.negative === 0 && num.negative !== 0) {
                            num.negative = 0;
                            r = this.isub(num);
                            num.negative = 1;
                            return r._normSign();
                        } // a.length > b.length
                        var a, b;
                        if (this.length > num.length) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        var carry = 0;
                        for(var i = 0; i < b.length; i++){
                            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        for(; carry !== 0 && i < a.length; i++){
                            r = (a.words[i] | 0) + carry;
                            this.words[i] = r & 0x3ffffff;
                            carry = r >>> 26;
                        }
                        this.length = a.length;
                        if (carry !== 0) {
                            this.words[this.length] = carry;
                            this.length++; // Copy the rest of the words
                        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
                        return this;
                    }; // Add `num` to `this`
                    BN.prototype.add = function add(num) {
                        var res;
                        if (num.negative !== 0 && this.negative === 0) {
                            num.negative = 0;
                            res = this.sub(num);
                            num.negative ^= 1;
                            return res;
                        } else if (num.negative === 0 && this.negative !== 0) {
                            this.negative = 0;
                            res = num.sub(this);
                            this.negative = 1;
                            return res;
                        }
                        if (this.length > num.length) return this.clone().iadd(num);
                        return num.clone().iadd(this);
                    }; // Subtract `num` from `this` in-place
                    BN.prototype.isub = function isub(num) {
                        // this - (-num) = this + num
                        if (num.negative !== 0) {
                            num.negative = 0;
                            var r = this.iadd(num);
                            num.negative = 1;
                            return r._normSign(); // -this - num = -(this + num)
                        } else if (this.negative !== 0) {
                            this.negative = 0;
                            this.iadd(num);
                            this.negative = 1;
                            return this._normSign();
                        } // At this point both numbers are positive
                        var cmp = this.cmp(num); // Optimization - zeroify
                        if (cmp === 0) {
                            this.negative = 0;
                            this.length = 1;
                            this.words[0] = 0;
                            return this;
                        } // a > b
                        var a, b;
                        if (cmp > 0) {
                            a = this;
                            b = num;
                        } else {
                            a = num;
                            b = this;
                        }
                        var carry = 0;
                        for(var i = 0; i < b.length; i++){
                            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        }
                        for(; carry !== 0 && i < a.length; i++){
                            r = (a.words[i] | 0) + carry;
                            carry = r >> 26;
                            this.words[i] = r & 0x3ffffff;
                        } // Copy rest of the words
                        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
                        this.length = Math.max(this.length, i);
                        if (a !== this) this.negative = 1;
                        return this._strip();
                    }; // Subtract `num` from `this`
                    BN.prototype.sub = function sub(num) {
                        return this.clone().isub(num);
                    };
                    function smallMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        var len = self.length + num.length | 0;
                        out.length = len;
                        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)
                        var a = self.words[0] | 0;
                        var b = num.words[0] | 0;
                        var r = a * b;
                        var lo = r & 0x3ffffff;
                        var carry = r / 0x4000000 | 0;
                        out.words[0] = lo;
                        for(var k = 1; k < len; k++){
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = carry >>> 26;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                                var i = k - j | 0;
                                a = self.words[i] | 0;
                                b = num.words[j] | 0;
                                r = a * b + rword;
                                ncarry += r / 0x4000000 | 0;
                                rword = r & 0x3ffffff;
                            }
                            out.words[k] = rword | 0;
                            carry = ncarry | 0;
                        }
                        if (carry !== 0) out.words[k] = carry | 0;
                        else out.length--;
                        return out._strip();
                    } // TODO(indutny): it may be reasonable to omit it for users who don't need
                    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
                    // multiplication (like elliptic secp256k1).
                    var comb10MulTo = function comb10MulTo(self, num, out) {
                        var a = self.words;
                        var b = num.words;
                        var o = out.words;
                        var c = 0;
                        var lo;
                        var mid;
                        var hi;
                        var a0 = a[0] | 0;
                        var al0 = a0 & 0x1fff;
                        var ah0 = a0 >>> 13;
                        var a1 = a[1] | 0;
                        var al1 = a1 & 0x1fff;
                        var ah1 = a1 >>> 13;
                        var a2 = a[2] | 0;
                        var al2 = a2 & 0x1fff;
                        var ah2 = a2 >>> 13;
                        var a3 = a[3] | 0;
                        var al3 = a3 & 0x1fff;
                        var ah3 = a3 >>> 13;
                        var a4 = a[4] | 0;
                        var al4 = a4 & 0x1fff;
                        var ah4 = a4 >>> 13;
                        var a5 = a[5] | 0;
                        var al5 = a5 & 0x1fff;
                        var ah5 = a5 >>> 13;
                        var a6 = a[6] | 0;
                        var al6 = a6 & 0x1fff;
                        var ah6 = a6 >>> 13;
                        var a7 = a[7] | 0;
                        var al7 = a7 & 0x1fff;
                        var ah7 = a7 >>> 13;
                        var a8 = a[8] | 0;
                        var al8 = a8 & 0x1fff;
                        var ah8 = a8 >>> 13;
                        var a9 = a[9] | 0;
                        var al9 = a9 & 0x1fff;
                        var ah9 = a9 >>> 13;
                        var b0 = b[0] | 0;
                        var bl0 = b0 & 0x1fff;
                        var bh0 = b0 >>> 13;
                        var b1 = b[1] | 0;
                        var bl1 = b1 & 0x1fff;
                        var bh1 = b1 >>> 13;
                        var b2 = b[2] | 0;
                        var bl2 = b2 & 0x1fff;
                        var bh2 = b2 >>> 13;
                        var b3 = b[3] | 0;
                        var bl3 = b3 & 0x1fff;
                        var bh3 = b3 >>> 13;
                        var b4 = b[4] | 0;
                        var bl4 = b4 & 0x1fff;
                        var bh4 = b4 >>> 13;
                        var b5 = b[5] | 0;
                        var bl5 = b5 & 0x1fff;
                        var bh5 = b5 >>> 13;
                        var b6 = b[6] | 0;
                        var bl6 = b6 & 0x1fff;
                        var bh6 = b6 >>> 13;
                        var b7 = b[7] | 0;
                        var bl7 = b7 & 0x1fff;
                        var bh7 = b7 >>> 13;
                        var b8 = b[8] | 0;
                        var bl8 = b8 & 0x1fff;
                        var bh8 = b8 >>> 13;
                        var b9 = b[9] | 0;
                        var bl9 = b9 & 0x1fff;
                        var bh9 = b9 >>> 13;
                        out.negative = self.negative ^ num.negative;
                        out.length = 19;
                        /* k = 0 */ lo = Math.imul(al0, bl0);
                        mid = Math.imul(al0, bh0);
                        mid = mid + Math.imul(ah0, bl0) | 0;
                        hi = Math.imul(ah0, bh0);
                        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
                        w0 &= 0x3ffffff;
                        /* k = 1 */ lo = Math.imul(al1, bl0);
                        mid = Math.imul(al1, bh0);
                        mid = mid + Math.imul(ah1, bl0) | 0;
                        hi = Math.imul(ah1, bh0);
                        lo = lo + Math.imul(al0, bl1) | 0;
                        mid = mid + Math.imul(al0, bh1) | 0;
                        mid = mid + Math.imul(ah0, bl1) | 0;
                        hi = hi + Math.imul(ah0, bh1) | 0;
                        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
                        w1 &= 0x3ffffff;
                        /* k = 2 */ lo = Math.imul(al2, bl0);
                        mid = Math.imul(al2, bh0);
                        mid = mid + Math.imul(ah2, bl0) | 0;
                        hi = Math.imul(ah2, bh0);
                        lo = lo + Math.imul(al1, bl1) | 0;
                        mid = mid + Math.imul(al1, bh1) | 0;
                        mid = mid + Math.imul(ah1, bl1) | 0;
                        hi = hi + Math.imul(ah1, bh1) | 0;
                        lo = lo + Math.imul(al0, bl2) | 0;
                        mid = mid + Math.imul(al0, bh2) | 0;
                        mid = mid + Math.imul(ah0, bl2) | 0;
                        hi = hi + Math.imul(ah0, bh2) | 0;
                        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
                        w2 &= 0x3ffffff;
                        /* k = 3 */ lo = Math.imul(al3, bl0);
                        mid = Math.imul(al3, bh0);
                        mid = mid + Math.imul(ah3, bl0) | 0;
                        hi = Math.imul(ah3, bh0);
                        lo = lo + Math.imul(al2, bl1) | 0;
                        mid = mid + Math.imul(al2, bh1) | 0;
                        mid = mid + Math.imul(ah2, bl1) | 0;
                        hi = hi + Math.imul(ah2, bh1) | 0;
                        lo = lo + Math.imul(al1, bl2) | 0;
                        mid = mid + Math.imul(al1, bh2) | 0;
                        mid = mid + Math.imul(ah1, bl2) | 0;
                        hi = hi + Math.imul(ah1, bh2) | 0;
                        lo = lo + Math.imul(al0, bl3) | 0;
                        mid = mid + Math.imul(al0, bh3) | 0;
                        mid = mid + Math.imul(ah0, bl3) | 0;
                        hi = hi + Math.imul(ah0, bh3) | 0;
                        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
                        w3 &= 0x3ffffff;
                        /* k = 4 */ lo = Math.imul(al4, bl0);
                        mid = Math.imul(al4, bh0);
                        mid = mid + Math.imul(ah4, bl0) | 0;
                        hi = Math.imul(ah4, bh0);
                        lo = lo + Math.imul(al3, bl1) | 0;
                        mid = mid + Math.imul(al3, bh1) | 0;
                        mid = mid + Math.imul(ah3, bl1) | 0;
                        hi = hi + Math.imul(ah3, bh1) | 0;
                        lo = lo + Math.imul(al2, bl2) | 0;
                        mid = mid + Math.imul(al2, bh2) | 0;
                        mid = mid + Math.imul(ah2, bl2) | 0;
                        hi = hi + Math.imul(ah2, bh2) | 0;
                        lo = lo + Math.imul(al1, bl3) | 0;
                        mid = mid + Math.imul(al1, bh3) | 0;
                        mid = mid + Math.imul(ah1, bl3) | 0;
                        hi = hi + Math.imul(ah1, bh3) | 0;
                        lo = lo + Math.imul(al0, bl4) | 0;
                        mid = mid + Math.imul(al0, bh4) | 0;
                        mid = mid + Math.imul(ah0, bl4) | 0;
                        hi = hi + Math.imul(ah0, bh4) | 0;
                        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
                        w4 &= 0x3ffffff;
                        /* k = 5 */ lo = Math.imul(al5, bl0);
                        mid = Math.imul(al5, bh0);
                        mid = mid + Math.imul(ah5, bl0) | 0;
                        hi = Math.imul(ah5, bh0);
                        lo = lo + Math.imul(al4, bl1) | 0;
                        mid = mid + Math.imul(al4, bh1) | 0;
                        mid = mid + Math.imul(ah4, bl1) | 0;
                        hi = hi + Math.imul(ah4, bh1) | 0;
                        lo = lo + Math.imul(al3, bl2) | 0;
                        mid = mid + Math.imul(al3, bh2) | 0;
                        mid = mid + Math.imul(ah3, bl2) | 0;
                        hi = hi + Math.imul(ah3, bh2) | 0;
                        lo = lo + Math.imul(al2, bl3) | 0;
                        mid = mid + Math.imul(al2, bh3) | 0;
                        mid = mid + Math.imul(ah2, bl3) | 0;
                        hi = hi + Math.imul(ah2, bh3) | 0;
                        lo = lo + Math.imul(al1, bl4) | 0;
                        mid = mid + Math.imul(al1, bh4) | 0;
                        mid = mid + Math.imul(ah1, bl4) | 0;
                        hi = hi + Math.imul(ah1, bh4) | 0;
                        lo = lo + Math.imul(al0, bl5) | 0;
                        mid = mid + Math.imul(al0, bh5) | 0;
                        mid = mid + Math.imul(ah0, bl5) | 0;
                        hi = hi + Math.imul(ah0, bh5) | 0;
                        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
                        w5 &= 0x3ffffff;
                        /* k = 6 */ lo = Math.imul(al6, bl0);
                        mid = Math.imul(al6, bh0);
                        mid = mid + Math.imul(ah6, bl0) | 0;
                        hi = Math.imul(ah6, bh0);
                        lo = lo + Math.imul(al5, bl1) | 0;
                        mid = mid + Math.imul(al5, bh1) | 0;
                        mid = mid + Math.imul(ah5, bl1) | 0;
                        hi = hi + Math.imul(ah5, bh1) | 0;
                        lo = lo + Math.imul(al4, bl2) | 0;
                        mid = mid + Math.imul(al4, bh2) | 0;
                        mid = mid + Math.imul(ah4, bl2) | 0;
                        hi = hi + Math.imul(ah4, bh2) | 0;
                        lo = lo + Math.imul(al3, bl3) | 0;
                        mid = mid + Math.imul(al3, bh3) | 0;
                        mid = mid + Math.imul(ah3, bl3) | 0;
                        hi = hi + Math.imul(ah3, bh3) | 0;
                        lo = lo + Math.imul(al2, bl4) | 0;
                        mid = mid + Math.imul(al2, bh4) | 0;
                        mid = mid + Math.imul(ah2, bl4) | 0;
                        hi = hi + Math.imul(ah2, bh4) | 0;
                        lo = lo + Math.imul(al1, bl5) | 0;
                        mid = mid + Math.imul(al1, bh5) | 0;
                        mid = mid + Math.imul(ah1, bl5) | 0;
                        hi = hi + Math.imul(ah1, bh5) | 0;
                        lo = lo + Math.imul(al0, bl6) | 0;
                        mid = mid + Math.imul(al0, bh6) | 0;
                        mid = mid + Math.imul(ah0, bl6) | 0;
                        hi = hi + Math.imul(ah0, bh6) | 0;
                        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
                        w6 &= 0x3ffffff;
                        /* k = 7 */ lo = Math.imul(al7, bl0);
                        mid = Math.imul(al7, bh0);
                        mid = mid + Math.imul(ah7, bl0) | 0;
                        hi = Math.imul(ah7, bh0);
                        lo = lo + Math.imul(al6, bl1) | 0;
                        mid = mid + Math.imul(al6, bh1) | 0;
                        mid = mid + Math.imul(ah6, bl1) | 0;
                        hi = hi + Math.imul(ah6, bh1) | 0;
                        lo = lo + Math.imul(al5, bl2) | 0;
                        mid = mid + Math.imul(al5, bh2) | 0;
                        mid = mid + Math.imul(ah5, bl2) | 0;
                        hi = hi + Math.imul(ah5, bh2) | 0;
                        lo = lo + Math.imul(al4, bl3) | 0;
                        mid = mid + Math.imul(al4, bh3) | 0;
                        mid = mid + Math.imul(ah4, bl3) | 0;
                        hi = hi + Math.imul(ah4, bh3) | 0;
                        lo = lo + Math.imul(al3, bl4) | 0;
                        mid = mid + Math.imul(al3, bh4) | 0;
                        mid = mid + Math.imul(ah3, bl4) | 0;
                        hi = hi + Math.imul(ah3, bh4) | 0;
                        lo = lo + Math.imul(al2, bl5) | 0;
                        mid = mid + Math.imul(al2, bh5) | 0;
                        mid = mid + Math.imul(ah2, bl5) | 0;
                        hi = hi + Math.imul(ah2, bh5) | 0;
                        lo = lo + Math.imul(al1, bl6) | 0;
                        mid = mid + Math.imul(al1, bh6) | 0;
                        mid = mid + Math.imul(ah1, bl6) | 0;
                        hi = hi + Math.imul(ah1, bh6) | 0;
                        lo = lo + Math.imul(al0, bl7) | 0;
                        mid = mid + Math.imul(al0, bh7) | 0;
                        mid = mid + Math.imul(ah0, bl7) | 0;
                        hi = hi + Math.imul(ah0, bh7) | 0;
                        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
                        w7 &= 0x3ffffff;
                        /* k = 8 */ lo = Math.imul(al8, bl0);
                        mid = Math.imul(al8, bh0);
                        mid = mid + Math.imul(ah8, bl0) | 0;
                        hi = Math.imul(ah8, bh0);
                        lo = lo + Math.imul(al7, bl1) | 0;
                        mid = mid + Math.imul(al7, bh1) | 0;
                        mid = mid + Math.imul(ah7, bl1) | 0;
                        hi = hi + Math.imul(ah7, bh1) | 0;
                        lo = lo + Math.imul(al6, bl2) | 0;
                        mid = mid + Math.imul(al6, bh2) | 0;
                        mid = mid + Math.imul(ah6, bl2) | 0;
                        hi = hi + Math.imul(ah6, bh2) | 0;
                        lo = lo + Math.imul(al5, bl3) | 0;
                        mid = mid + Math.imul(al5, bh3) | 0;
                        mid = mid + Math.imul(ah5, bl3) | 0;
                        hi = hi + Math.imul(ah5, bh3) | 0;
                        lo = lo + Math.imul(al4, bl4) | 0;
                        mid = mid + Math.imul(al4, bh4) | 0;
                        mid = mid + Math.imul(ah4, bl4) | 0;
                        hi = hi + Math.imul(ah4, bh4) | 0;
                        lo = lo + Math.imul(al3, bl5) | 0;
                        mid = mid + Math.imul(al3, bh5) | 0;
                        mid = mid + Math.imul(ah3, bl5) | 0;
                        hi = hi + Math.imul(ah3, bh5) | 0;
                        lo = lo + Math.imul(al2, bl6) | 0;
                        mid = mid + Math.imul(al2, bh6) | 0;
                        mid = mid + Math.imul(ah2, bl6) | 0;
                        hi = hi + Math.imul(ah2, bh6) | 0;
                        lo = lo + Math.imul(al1, bl7) | 0;
                        mid = mid + Math.imul(al1, bh7) | 0;
                        mid = mid + Math.imul(ah1, bl7) | 0;
                        hi = hi + Math.imul(ah1, bh7) | 0;
                        lo = lo + Math.imul(al0, bl8) | 0;
                        mid = mid + Math.imul(al0, bh8) | 0;
                        mid = mid + Math.imul(ah0, bl8) | 0;
                        hi = hi + Math.imul(ah0, bh8) | 0;
                        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
                        w8 &= 0x3ffffff;
                        /* k = 9 */ lo = Math.imul(al9, bl0);
                        mid = Math.imul(al9, bh0);
                        mid = mid + Math.imul(ah9, bl0) | 0;
                        hi = Math.imul(ah9, bh0);
                        lo = lo + Math.imul(al8, bl1) | 0;
                        mid = mid + Math.imul(al8, bh1) | 0;
                        mid = mid + Math.imul(ah8, bl1) | 0;
                        hi = hi + Math.imul(ah8, bh1) | 0;
                        lo = lo + Math.imul(al7, bl2) | 0;
                        mid = mid + Math.imul(al7, bh2) | 0;
                        mid = mid + Math.imul(ah7, bl2) | 0;
                        hi = hi + Math.imul(ah7, bh2) | 0;
                        lo = lo + Math.imul(al6, bl3) | 0;
                        mid = mid + Math.imul(al6, bh3) | 0;
                        mid = mid + Math.imul(ah6, bl3) | 0;
                        hi = hi + Math.imul(ah6, bh3) | 0;
                        lo = lo + Math.imul(al5, bl4) | 0;
                        mid = mid + Math.imul(al5, bh4) | 0;
                        mid = mid + Math.imul(ah5, bl4) | 0;
                        hi = hi + Math.imul(ah5, bh4) | 0;
                        lo = lo + Math.imul(al4, bl5) | 0;
                        mid = mid + Math.imul(al4, bh5) | 0;
                        mid = mid + Math.imul(ah4, bl5) | 0;
                        hi = hi + Math.imul(ah4, bh5) | 0;
                        lo = lo + Math.imul(al3, bl6) | 0;
                        mid = mid + Math.imul(al3, bh6) | 0;
                        mid = mid + Math.imul(ah3, bl6) | 0;
                        hi = hi + Math.imul(ah3, bh6) | 0;
                        lo = lo + Math.imul(al2, bl7) | 0;
                        mid = mid + Math.imul(al2, bh7) | 0;
                        mid = mid + Math.imul(ah2, bl7) | 0;
                        hi = hi + Math.imul(ah2, bh7) | 0;
                        lo = lo + Math.imul(al1, bl8) | 0;
                        mid = mid + Math.imul(al1, bh8) | 0;
                        mid = mid + Math.imul(ah1, bl8) | 0;
                        hi = hi + Math.imul(ah1, bh8) | 0;
                        lo = lo + Math.imul(al0, bl9) | 0;
                        mid = mid + Math.imul(al0, bh9) | 0;
                        mid = mid + Math.imul(ah0, bl9) | 0;
                        hi = hi + Math.imul(ah0, bh9) | 0;
                        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
                        w9 &= 0x3ffffff;
                        /* k = 10 */ lo = Math.imul(al9, bl1);
                        mid = Math.imul(al9, bh1);
                        mid = mid + Math.imul(ah9, bl1) | 0;
                        hi = Math.imul(ah9, bh1);
                        lo = lo + Math.imul(al8, bl2) | 0;
                        mid = mid + Math.imul(al8, bh2) | 0;
                        mid = mid + Math.imul(ah8, bl2) | 0;
                        hi = hi + Math.imul(ah8, bh2) | 0;
                        lo = lo + Math.imul(al7, bl3) | 0;
                        mid = mid + Math.imul(al7, bh3) | 0;
                        mid = mid + Math.imul(ah7, bl3) | 0;
                        hi = hi + Math.imul(ah7, bh3) | 0;
                        lo = lo + Math.imul(al6, bl4) | 0;
                        mid = mid + Math.imul(al6, bh4) | 0;
                        mid = mid + Math.imul(ah6, bl4) | 0;
                        hi = hi + Math.imul(ah6, bh4) | 0;
                        lo = lo + Math.imul(al5, bl5) | 0;
                        mid = mid + Math.imul(al5, bh5) | 0;
                        mid = mid + Math.imul(ah5, bl5) | 0;
                        hi = hi + Math.imul(ah5, bh5) | 0;
                        lo = lo + Math.imul(al4, bl6) | 0;
                        mid = mid + Math.imul(al4, bh6) | 0;
                        mid = mid + Math.imul(ah4, bl6) | 0;
                        hi = hi + Math.imul(ah4, bh6) | 0;
                        lo = lo + Math.imul(al3, bl7) | 0;
                        mid = mid + Math.imul(al3, bh7) | 0;
                        mid = mid + Math.imul(ah3, bl7) | 0;
                        hi = hi + Math.imul(ah3, bh7) | 0;
                        lo = lo + Math.imul(al2, bl8) | 0;
                        mid = mid + Math.imul(al2, bh8) | 0;
                        mid = mid + Math.imul(ah2, bl8) | 0;
                        hi = hi + Math.imul(ah2, bh8) | 0;
                        lo = lo + Math.imul(al1, bl9) | 0;
                        mid = mid + Math.imul(al1, bh9) | 0;
                        mid = mid + Math.imul(ah1, bl9) | 0;
                        hi = hi + Math.imul(ah1, bh9) | 0;
                        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
                        w10 &= 0x3ffffff;
                        /* k = 11 */ lo = Math.imul(al9, bl2);
                        mid = Math.imul(al9, bh2);
                        mid = mid + Math.imul(ah9, bl2) | 0;
                        hi = Math.imul(ah9, bh2);
                        lo = lo + Math.imul(al8, bl3) | 0;
                        mid = mid + Math.imul(al8, bh3) | 0;
                        mid = mid + Math.imul(ah8, bl3) | 0;
                        hi = hi + Math.imul(ah8, bh3) | 0;
                        lo = lo + Math.imul(al7, bl4) | 0;
                        mid = mid + Math.imul(al7, bh4) | 0;
                        mid = mid + Math.imul(ah7, bl4) | 0;
                        hi = hi + Math.imul(ah7, bh4) | 0;
                        lo = lo + Math.imul(al6, bl5) | 0;
                        mid = mid + Math.imul(al6, bh5) | 0;
                        mid = mid + Math.imul(ah6, bl5) | 0;
                        hi = hi + Math.imul(ah6, bh5) | 0;
                        lo = lo + Math.imul(al5, bl6) | 0;
                        mid = mid + Math.imul(al5, bh6) | 0;
                        mid = mid + Math.imul(ah5, bl6) | 0;
                        hi = hi + Math.imul(ah5, bh6) | 0;
                        lo = lo + Math.imul(al4, bl7) | 0;
                        mid = mid + Math.imul(al4, bh7) | 0;
                        mid = mid + Math.imul(ah4, bl7) | 0;
                        hi = hi + Math.imul(ah4, bh7) | 0;
                        lo = lo + Math.imul(al3, bl8) | 0;
                        mid = mid + Math.imul(al3, bh8) | 0;
                        mid = mid + Math.imul(ah3, bl8) | 0;
                        hi = hi + Math.imul(ah3, bh8) | 0;
                        lo = lo + Math.imul(al2, bl9) | 0;
                        mid = mid + Math.imul(al2, bh9) | 0;
                        mid = mid + Math.imul(ah2, bl9) | 0;
                        hi = hi + Math.imul(ah2, bh9) | 0;
                        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
                        w11 &= 0x3ffffff;
                        /* k = 12 */ lo = Math.imul(al9, bl3);
                        mid = Math.imul(al9, bh3);
                        mid = mid + Math.imul(ah9, bl3) | 0;
                        hi = Math.imul(ah9, bh3);
                        lo = lo + Math.imul(al8, bl4) | 0;
                        mid = mid + Math.imul(al8, bh4) | 0;
                        mid = mid + Math.imul(ah8, bl4) | 0;
                        hi = hi + Math.imul(ah8, bh4) | 0;
                        lo = lo + Math.imul(al7, bl5) | 0;
                        mid = mid + Math.imul(al7, bh5) | 0;
                        mid = mid + Math.imul(ah7, bl5) | 0;
                        hi = hi + Math.imul(ah7, bh5) | 0;
                        lo = lo + Math.imul(al6, bl6) | 0;
                        mid = mid + Math.imul(al6, bh6) | 0;
                        mid = mid + Math.imul(ah6, bl6) | 0;
                        hi = hi + Math.imul(ah6, bh6) | 0;
                        lo = lo + Math.imul(al5, bl7) | 0;
                        mid = mid + Math.imul(al5, bh7) | 0;
                        mid = mid + Math.imul(ah5, bl7) | 0;
                        hi = hi + Math.imul(ah5, bh7) | 0;
                        lo = lo + Math.imul(al4, bl8) | 0;
                        mid = mid + Math.imul(al4, bh8) | 0;
                        mid = mid + Math.imul(ah4, bl8) | 0;
                        hi = hi + Math.imul(ah4, bh8) | 0;
                        lo = lo + Math.imul(al3, bl9) | 0;
                        mid = mid + Math.imul(al3, bh9) | 0;
                        mid = mid + Math.imul(ah3, bl9) | 0;
                        hi = hi + Math.imul(ah3, bh9) | 0;
                        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
                        w12 &= 0x3ffffff;
                        /* k = 13 */ lo = Math.imul(al9, bl4);
                        mid = Math.imul(al9, bh4);
                        mid = mid + Math.imul(ah9, bl4) | 0;
                        hi = Math.imul(ah9, bh4);
                        lo = lo + Math.imul(al8, bl5) | 0;
                        mid = mid + Math.imul(al8, bh5) | 0;
                        mid = mid + Math.imul(ah8, bl5) | 0;
                        hi = hi + Math.imul(ah8, bh5) | 0;
                        lo = lo + Math.imul(al7, bl6) | 0;
                        mid = mid + Math.imul(al7, bh6) | 0;
                        mid = mid + Math.imul(ah7, bl6) | 0;
                        hi = hi + Math.imul(ah7, bh6) | 0;
                        lo = lo + Math.imul(al6, bl7) | 0;
                        mid = mid + Math.imul(al6, bh7) | 0;
                        mid = mid + Math.imul(ah6, bl7) | 0;
                        hi = hi + Math.imul(ah6, bh7) | 0;
                        lo = lo + Math.imul(al5, bl8) | 0;
                        mid = mid + Math.imul(al5, bh8) | 0;
                        mid = mid + Math.imul(ah5, bl8) | 0;
                        hi = hi + Math.imul(ah5, bh8) | 0;
                        lo = lo + Math.imul(al4, bl9) | 0;
                        mid = mid + Math.imul(al4, bh9) | 0;
                        mid = mid + Math.imul(ah4, bl9) | 0;
                        hi = hi + Math.imul(ah4, bh9) | 0;
                        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
                        w13 &= 0x3ffffff;
                        /* k = 14 */ lo = Math.imul(al9, bl5);
                        mid = Math.imul(al9, bh5);
                        mid = mid + Math.imul(ah9, bl5) | 0;
                        hi = Math.imul(ah9, bh5);
                        lo = lo + Math.imul(al8, bl6) | 0;
                        mid = mid + Math.imul(al8, bh6) | 0;
                        mid = mid + Math.imul(ah8, bl6) | 0;
                        hi = hi + Math.imul(ah8, bh6) | 0;
                        lo = lo + Math.imul(al7, bl7) | 0;
                        mid = mid + Math.imul(al7, bh7) | 0;
                        mid = mid + Math.imul(ah7, bl7) | 0;
                        hi = hi + Math.imul(ah7, bh7) | 0;
                        lo = lo + Math.imul(al6, bl8) | 0;
                        mid = mid + Math.imul(al6, bh8) | 0;
                        mid = mid + Math.imul(ah6, bl8) | 0;
                        hi = hi + Math.imul(ah6, bh8) | 0;
                        lo = lo + Math.imul(al5, bl9) | 0;
                        mid = mid + Math.imul(al5, bh9) | 0;
                        mid = mid + Math.imul(ah5, bl9) | 0;
                        hi = hi + Math.imul(ah5, bh9) | 0;
                        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
                        w14 &= 0x3ffffff;
                        /* k = 15 */ lo = Math.imul(al9, bl6);
                        mid = Math.imul(al9, bh6);
                        mid = mid + Math.imul(ah9, bl6) | 0;
                        hi = Math.imul(ah9, bh6);
                        lo = lo + Math.imul(al8, bl7) | 0;
                        mid = mid + Math.imul(al8, bh7) | 0;
                        mid = mid + Math.imul(ah8, bl7) | 0;
                        hi = hi + Math.imul(ah8, bh7) | 0;
                        lo = lo + Math.imul(al7, bl8) | 0;
                        mid = mid + Math.imul(al7, bh8) | 0;
                        mid = mid + Math.imul(ah7, bl8) | 0;
                        hi = hi + Math.imul(ah7, bh8) | 0;
                        lo = lo + Math.imul(al6, bl9) | 0;
                        mid = mid + Math.imul(al6, bh9) | 0;
                        mid = mid + Math.imul(ah6, bl9) | 0;
                        hi = hi + Math.imul(ah6, bh9) | 0;
                        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
                        w15 &= 0x3ffffff;
                        /* k = 16 */ lo = Math.imul(al9, bl7);
                        mid = Math.imul(al9, bh7);
                        mid = mid + Math.imul(ah9, bl7) | 0;
                        hi = Math.imul(ah9, bh7);
                        lo = lo + Math.imul(al8, bl8) | 0;
                        mid = mid + Math.imul(al8, bh8) | 0;
                        mid = mid + Math.imul(ah8, bl8) | 0;
                        hi = hi + Math.imul(ah8, bh8) | 0;
                        lo = lo + Math.imul(al7, bl9) | 0;
                        mid = mid + Math.imul(al7, bh9) | 0;
                        mid = mid + Math.imul(ah7, bl9) | 0;
                        hi = hi + Math.imul(ah7, bh9) | 0;
                        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
                        w16 &= 0x3ffffff;
                        /* k = 17 */ lo = Math.imul(al9, bl8);
                        mid = Math.imul(al9, bh8);
                        mid = mid + Math.imul(ah9, bl8) | 0;
                        hi = Math.imul(ah9, bh8);
                        lo = lo + Math.imul(al8, bl9) | 0;
                        mid = mid + Math.imul(al8, bh9) | 0;
                        mid = mid + Math.imul(ah8, bl9) | 0;
                        hi = hi + Math.imul(ah8, bh9) | 0;
                        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
                        w17 &= 0x3ffffff;
                        /* k = 18 */ lo = Math.imul(al9, bl9);
                        mid = Math.imul(al9, bh9);
                        mid = mid + Math.imul(ah9, bl9) | 0;
                        hi = Math.imul(ah9, bh9);
                        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
                        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
                        w18 &= 0x3ffffff;
                        o[0] = w0;
                        o[1] = w1;
                        o[2] = w2;
                        o[3] = w3;
                        o[4] = w4;
                        o[5] = w5;
                        o[6] = w6;
                        o[7] = w7;
                        o[8] = w8;
                        o[9] = w9;
                        o[10] = w10;
                        o[11] = w11;
                        o[12] = w12;
                        o[13] = w13;
                        o[14] = w14;
                        o[15] = w15;
                        o[16] = w16;
                        o[17] = w17;
                        o[18] = w18;
                        if (c !== 0) {
                            o[19] = c;
                            out.length++;
                        }
                        return out;
                    }; // Polyfill comb
                    if (!Math.imul) comb10MulTo = smallMulTo;
                    function bigMulTo(self, num, out) {
                        out.negative = num.negative ^ self.negative;
                        out.length = self.length + num.length;
                        var carry = 0;
                        var hncarry = 0;
                        for(var k = 0; k < out.length - 1; k++){
                            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
                            // note that ncarry could be >= 0x3ffffff
                            var ncarry = hncarry;
                            hncarry = 0;
                            var rword = carry & 0x3ffffff;
                            var maxJ = Math.min(k, num.length - 1);
                            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                                var i = k - j;
                                var a = self.words[i] | 0;
                                var b = num.words[j] | 0;
                                var r = a * b;
                                var lo = r & 0x3ffffff;
                                ncarry = ncarry + (r / 0x4000000 | 0) | 0;
                                lo = lo + rword | 0;
                                rword = lo & 0x3ffffff;
                                ncarry = ncarry + (lo >>> 26) | 0;
                                hncarry += ncarry >>> 26;
                                ncarry &= 0x3ffffff;
                            }
                            out.words[k] = rword;
                            carry = ncarry;
                            ncarry = hncarry;
                        }
                        if (carry !== 0) out.words[k] = carry;
                        else out.length--;
                        return out._strip();
                    }
                    function jumboMulTo(self, num, out) {
                        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
                        // var fftm = new FFTM();
                        // return fftm.mulp(self, num, out);
                        return bigMulTo(self, num, out);
                    }
                    BN.prototype.mulTo = function mulTo(num, out) {
                        var res;
                        var len = this.length + num.length;
                        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
                        else if (len < 63) res = smallMulTo(this, num, out);
                        else if (len < 1024) res = bigMulTo(this, num, out);
                        else res = jumboMulTo(this, num, out);
                        return res;
                    }; // Cooley-Tukey algorithm for FFT
                    // slightly revisited to rely on looping instead of recursion
                    function FFTM(x, y) {
                        this.x = x;
                        this.y = y;
                    }
                    FFTM.prototype.makeRBT = function makeRBT(N) {
                        var t = new Array(N);
                        var l = BN.prototype._countBits(N) - 1;
                        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
                        return t;
                    }; // Returns binary-reversed representation of `x`
                    FFTM.prototype.revBin = function revBin(x, l, N) {
                        if (x === 0 || x === N - 1) return x;
                        var rb = 0;
                        for(var i = 0; i < l; i++){
                            rb |= (x & 1) << l - i - 1;
                            x >>= 1;
                        }
                        return rb;
                    }; // Performs "tweedling" phase, therefore 'emulating'
                    // behaviour of the recursive algorithm
                    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
                        for(var i = 0; i < N; i++){
                            rtws[i] = rws[rbt[i]];
                            itws[i] = iws[rbt[i]];
                        }
                    };
                    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
                        this.permute(rbt, rws, iws, rtws, itws, N);
                        for(var s = 1; s < N; s <<= 1){
                            var l = s << 1;
                            var rtwdf = Math.cos(2 * Math.PI / l);
                            var itwdf = Math.sin(2 * Math.PI / l);
                            for(var p = 0; p < N; p += l){
                                var rtwdf_ = rtwdf;
                                var itwdf_ = itwdf;
                                for(var j = 0; j < s; j++){
                                    var re = rtws[p + j];
                                    var ie = itws[p + j];
                                    var ro = rtws[p + j + s];
                                    var io = itws[p + j + s];
                                    var rx = rtwdf_ * ro - itwdf_ * io;
                                    io = rtwdf_ * io + itwdf_ * ro;
                                    ro = rx;
                                    rtws[p + j] = re + ro;
                                    itws[p + j] = ie + io;
                                    rtws[p + j + s] = re - ro;
                                    itws[p + j + s] = ie - io;
                                    /* jshint maxdepth : false */ if (j !== l) {
                                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                                        rtwdf_ = rx;
                                    }
                                }
                            }
                        }
                    };
                    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
                        var N = Math.max(m, n) | 1;
                        var odd = N & 1;
                        var i = 0;
                        for(N = N / 2 | 0; N; N = N >>> 1)i++;
                        return 1 << i + 1 + odd;
                    };
                    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
                        if (N <= 1) return;
                        for(var i = 0; i < N / 2; i++){
                            var t = rws[i];
                            rws[i] = rws[N - i - 1];
                            rws[N - i - 1] = t;
                            t = iws[i];
                            iws[i] = -iws[N - i - 1];
                            iws[N - i - 1] = -t;
                        }
                    };
                    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
                        var carry = 0;
                        for(var i = 0; i < N / 2; i++){
                            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
                            ws[i] = w & 0x3ffffff;
                            if (w < 0x4000000) carry = 0;
                            else carry = w / 0x4000000 | 0;
                        }
                        return ws;
                    };
                    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
                        var carry = 0;
                        for(var i = 0; i < len; i++){
                            carry = carry + (ws[i] | 0);
                            rws[2 * i] = carry & 0x1fff;
                            carry = carry >>> 13;
                            rws[2 * i + 1] = carry & 0x1fff;
                            carry = carry >>> 13;
                        } // Pad with zeroes
                        for(i = 2 * len; i < N; ++i)rws[i] = 0;
                        assert(carry === 0);
                        assert((carry & -8192) === 0);
                    };
                    FFTM.prototype.stub = function stub(N) {
                        var ph = new Array(N);
                        for(var i = 0; i < N; i++)ph[i] = 0;
                        return ph;
                    };
                    FFTM.prototype.mulp = function mulp(x, y, out) {
                        var N = 2 * this.guessLen13b(x.length, y.length);
                        var rbt = this.makeRBT(N);
                        var _ = this.stub(N);
                        var rws = new Array(N);
                        var rwst = new Array(N);
                        var iwst = new Array(N);
                        var nrws = new Array(N);
                        var nrwst = new Array(N);
                        var niwst = new Array(N);
                        var rmws = out.words;
                        rmws.length = N;
                        this.convert13b(x.words, x.length, rws, N);
                        this.convert13b(y.words, y.length, nrws, N);
                        this.transform(rws, _, rwst, iwst, N, rbt);
                        this.transform(nrws, _, nrwst, niwst, N, rbt);
                        for(var i = 0; i < N; i++){
                            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
                            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
                            rwst[i] = rx;
                        }
                        this.conjugate(rwst, iwst, N);
                        this.transform(rwst, iwst, rmws, _, N, rbt);
                        this.conjugate(rmws, _, N);
                        this.normalize13b(rmws, N);
                        out.negative = x.negative ^ y.negative;
                        out.length = x.length + y.length;
                        return out._strip();
                    }; // Multiply `this` by `num`
                    BN.prototype.mul = function mul(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return this.mulTo(num, out);
                    }; // Multiply employing FFT
                    BN.prototype.mulf = function mulf(num) {
                        var out = new BN(null);
                        out.words = new Array(this.length + num.length);
                        return jumboMulTo(this, num, out);
                    }; // In-place Multiplication
                    BN.prototype.imul = function imul(num) {
                        return this.clone().mulTo(num, this);
                    };
                    BN.prototype.imuln = function imuln(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;
                        assert(typeof num === "number");
                        assert(num < 0x4000000); // Carry
                        var carry = 0;
                        for(var i = 0; i < this.length; i++){
                            var w = (this.words[i] | 0) * num;
                            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
                            carry >>= 26;
                            carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum
                            carry += lo >>> 26;
                            this.words[i] = lo & 0x3ffffff;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return isNegNum ? this.ineg() : this;
                    };
                    BN.prototype.muln = function muln(num) {
                        return this.clone().imuln(num);
                    }; // `this` * `this`
                    BN.prototype.sqr = function sqr() {
                        return this.mul(this);
                    }; // `this` * `this` in-place
                    BN.prototype.isqr = function isqr() {
                        return this.imul(this.clone());
                    }; // Math.pow(`this`, `num`)
                    BN.prototype.pow = function pow(num) {
                        var w = toBitArray(num);
                        if (w.length === 0) return new BN(1); // Skip leading zeroes
                        var res = this;
                        for(var i = 0; i < w.length; i++, res = res.sqr()){
                            if (w[i] !== 0) break;
                        }
                        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
                            if (w[i] === 0) continue;
                            res = res.mul(q);
                        }
                        return res;
                    }; // Shift-left in-place
                    BN.prototype.iushln = function iushln(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
                        var i;
                        if (r !== 0) {
                            var carry = 0;
                            for(i = 0; i < this.length; i++){
                                var newCarry = this.words[i] & carryMask;
                                var c = (this.words[i] | 0) - newCarry << r;
                                this.words[i] = c | carry;
                                carry = newCarry >>> 26 - r;
                            }
                            if (carry) {
                                this.words[i] = carry;
                                this.length++;
                            }
                        }
                        if (s !== 0) {
                            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
                            for(i = 0; i < s; i++)this.words[i] = 0;
                            this.length += s;
                        }
                        return this._strip();
                    };
                    BN.prototype.ishln = function ishln(bits) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushln(bits);
                    }; // Shift-right in-place
                    // NOTE: `hint` is a lowest bit before trailing zeroes
                    // NOTE: if `extended` is present - it will be filled with destroyed bits
                    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
                        assert(typeof bits === "number" && bits >= 0);
                        var h;
                        if (hint) h = (hint - hint % 26) / 26;
                        else h = 0;
                        var r = bits % 26;
                        var s = Math.min((bits - r) / 26, this.length);
                        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                        var maskedWords = extended;
                        h -= s;
                        h = Math.max(0, h); // Extended mode, copy masked part
                        if (maskedWords) {
                            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
                            maskedWords.length = s;
                        }
                        if (s === 0) ;
                        else if (this.length > s) {
                            this.length -= s;
                            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
                        } else {
                            this.words[0] = 0;
                            this.length = 1;
                        }
                        var carry = 0;
                        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
                            var word = this.words[i] | 0;
                            this.words[i] = carry << 26 - r | word >>> r;
                            carry = word & mask;
                        } // Push carried bits as a mask
                        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
                        if (this.length === 0) {
                            this.words[0] = 0;
                            this.length = 1;
                        }
                        return this._strip();
                    };
                    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
                        // TODO(indutny): implement me
                        assert(this.negative === 0);
                        return this.iushrn(bits, hint, extended);
                    }; // Shift-left
                    BN.prototype.shln = function shln(bits) {
                        return this.clone().ishln(bits);
                    };
                    BN.prototype.ushln = function ushln(bits) {
                        return this.clone().iushln(bits);
                    }; // Shift-right
                    BN.prototype.shrn = function shrn(bits) {
                        return this.clone().ishrn(bits);
                    };
                    BN.prototype.ushrn = function ushrn(bits) {
                        return this.clone().iushrn(bits);
                    }; // Test if n bit is set
                    BN.prototype.testn = function testn(bit) {
                        assert(typeof bit === "number" && bit >= 0);
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r; // Fast case: bit is much higher than all existing words
                        if (this.length <= s) return false; // Check bit and return
                        var w = this.words[s];
                        return !!(w & q);
                    }; // Return only lowers bits of number (in-place)
                    BN.prototype.imaskn = function imaskn(bits) {
                        assert(typeof bits === "number" && bits >= 0);
                        var r = bits % 26;
                        var s = (bits - r) / 26;
                        assert(this.negative === 0, "imaskn works only with positive numbers");
                        if (this.length <= s) return this;
                        if (r !== 0) s++;
                        this.length = Math.min(s, this.length);
                        if (r !== 0) {
                            var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
                            this.words[this.length - 1] &= mask;
                        }
                        return this._strip();
                    }; // Return only lowers bits of number
                    BN.prototype.maskn = function maskn(bits) {
                        return this.clone().imaskn(bits);
                    }; // Add plain number `num` to `this`
                    BN.prototype.iaddn = function iaddn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.isubn(-num); // Possible sign change
                        if (this.negative !== 0) {
                            if (this.length === 1 && (this.words[0] | 0) <= num) {
                                this.words[0] = num - (this.words[0] | 0);
                                this.negative = 0;
                                return this;
                            }
                            this.negative = 0;
                            this.isubn(num);
                            this.negative = 1;
                            return this;
                        } // Add without checks
                        return this._iaddn(num);
                    };
                    BN.prototype._iaddn = function _iaddn(num) {
                        this.words[0] += num; // Carry
                        for(var i = 0; i < this.length && this.words[i] >= 0x4000000; i++){
                            this.words[i] -= 0x4000000;
                            if (i === this.length - 1) this.words[i + 1] = 1;
                            else this.words[i + 1]++;
                        }
                        this.length = Math.max(this.length, i + 1);
                        return this;
                    }; // Subtract plain number `num` from `this`
                    BN.prototype.isubn = function isubn(num) {
                        assert(typeof num === "number");
                        assert(num < 0x4000000);
                        if (num < 0) return this.iaddn(-num);
                        if (this.negative !== 0) {
                            this.negative = 0;
                            this.iaddn(num);
                            this.negative = 1;
                            return this;
                        }
                        this.words[0] -= num;
                        if (this.length === 1 && this.words[0] < 0) {
                            this.words[0] = -this.words[0];
                            this.negative = 1;
                        } else // Carry
                        for(var i = 0; i < this.length && this.words[i] < 0; i++){
                            this.words[i] += 0x4000000;
                            this.words[i + 1] -= 1;
                        }
                        return this._strip();
                    };
                    BN.prototype.addn = function addn(num) {
                        return this.clone().iaddn(num);
                    };
                    BN.prototype.subn = function subn(num) {
                        return this.clone().isubn(num);
                    };
                    BN.prototype.iabs = function iabs() {
                        this.negative = 0;
                        return this;
                    };
                    BN.prototype.abs = function abs() {
                        return this.clone().iabs();
                    };
                    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
                        var len = num.length + shift;
                        var i;
                        this._expand(len);
                        var w;
                        var carry = 0;
                        for(i = 0; i < num.length; i++){
                            w = (this.words[i + shift] | 0) + carry;
                            var right = (num.words[i] | 0) * mul;
                            w -= right & 0x3ffffff;
                            carry = (w >> 26) - (right / 0x4000000 | 0);
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        for(; i < this.length - shift; i++){
                            w = (this.words[i + shift] | 0) + carry;
                            carry = w >> 26;
                            this.words[i + shift] = w & 0x3ffffff;
                        }
                        if (carry === 0) return this._strip(); // Subtraction overflow
                        assert(carry === -1);
                        carry = 0;
                        for(i = 0; i < this.length; i++){
                            w = -(this.words[i] | 0) + carry;
                            carry = w >> 26;
                            this.words[i] = w & 0x3ffffff;
                        }
                        this.negative = 1;
                        return this._strip();
                    };
                    BN.prototype._wordDiv = function _wordDiv(num, mode) {
                        var shift = this.length - num.length;
                        var a = this.clone();
                        var b = num; // Normalize
                        var bhi = b.words[b.length - 1] | 0;
                        var bhiBits = this._countBits(bhi);
                        shift = 26 - bhiBits;
                        if (shift !== 0) {
                            b = b.ushln(shift);
                            a.iushln(shift);
                            bhi = b.words[b.length - 1] | 0;
                        } // Initialize quotient
                        var m = a.length - b.length;
                        var q;
                        if (mode !== "mod") {
                            q = new BN(null);
                            q.length = m + 1;
                            q.words = new Array(q.length);
                            for(var i = 0; i < q.length; i++)q.words[i] = 0;
                        }
                        var diff = a.clone()._ishlnsubmul(b, 1, m);
                        if (diff.negative === 0) {
                            a = diff;
                            if (q) q.words[m] = 1;
                        }
                        for(var j = m - 1; j >= 0; j--){
                            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
                            // (0x7ffffff)
                            qj = Math.min(qj / bhi | 0, 0x3ffffff);
                            a._ishlnsubmul(b, qj, j);
                            while(a.negative !== 0){
                                qj--;
                                a.negative = 0;
                                a._ishlnsubmul(b, 1, j);
                                if (!a.isZero()) a.negative ^= 1;
                            }
                            if (q) q.words[j] = qj;
                        }
                        if (q) q._strip();
                        a._strip(); // Denormalize
                        if (mode !== "div" && shift !== 0) a.iushrn(shift);
                        return {
                            div: q || null,
                            mod: a
                        };
                    }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
                    //       to `div` to request div only, or be absent to
                    //       request both div & mod
                    //       2) `positive` is true if unsigned mod is requested
                    BN.prototype.divmod = function divmod(num, mode, positive) {
                        assert(!num.isZero());
                        if (this.isZero()) return {
                            div: new BN(0),
                            mod: new BN(0)
                        };
                        var div, mod, res;
                        if (this.negative !== 0 && num.negative === 0) {
                            res = this.neg().divmod(num, mode);
                            if (mode !== "mod") div = res.div.neg();
                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) mod.iadd(num);
                            }
                            return {
                                div: div,
                                mod: mod
                            };
                        }
                        if (this.negative === 0 && num.negative !== 0) {
                            res = this.divmod(num.neg(), mode);
                            if (mode !== "mod") div = res.div.neg();
                            return {
                                div: div,
                                mod: res.mod
                            };
                        }
                        if ((this.negative & num.negative) !== 0) {
                            res = this.neg().divmod(num.neg(), mode);
                            if (mode !== "div") {
                                mod = res.mod.neg();
                                if (positive && mod.negative !== 0) mod.isub(num);
                            }
                            return {
                                div: res.div,
                                mod: mod
                            };
                        } // Both numbers are positive at this point
                        // Strip both numbers to approximate shift value
                        if (num.length > this.length || this.cmp(num) < 0) return {
                            div: new BN(0),
                            mod: this
                        };
                         // Very short reduction
                        if (num.length === 1) {
                            if (mode === "div") return {
                                div: this.divn(num.words[0]),
                                mod: null
                            };
                            if (mode === "mod") return {
                                div: null,
                                mod: new BN(this.modrn(num.words[0]))
                            };
                            return {
                                div: this.divn(num.words[0]),
                                mod: new BN(this.modrn(num.words[0]))
                            };
                        }
                        return this._wordDiv(num, mode);
                    }; // Find `this` / `num`
                    BN.prototype.div = function div(num) {
                        return this.divmod(num, "div", false).div;
                    }; // Find `this` % `num`
                    BN.prototype.mod = function mod(num) {
                        return this.divmod(num, "mod", false).mod;
                    };
                    BN.prototype.umod = function umod(num) {
                        return this.divmod(num, "mod", true).mod;
                    }; // Find Round(`this` / `num`)
                    BN.prototype.divRound = function divRound(num) {
                        var dm = this.divmod(num); // Fast case - exact division
                        if (dm.mod.isZero()) return dm.div;
                        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
                        var half = num.ushrn(1);
                        var r2 = num.andln(1);
                        var cmp = mod.cmp(half); // Round down
                        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up
                        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
                    };
                    BN.prototype.modrn = function modrn(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;
                        assert(num <= 0x3ffffff);
                        var p = 67108864 % num;
                        var acc = 0;
                        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
                        return isNegNum ? -acc : acc;
                    }; // WARNING: DEPRECATED
                    BN.prototype.modn = function modn(num) {
                        return this.modrn(num);
                    }; // In-place division by number
                    BN.prototype.idivn = function idivn(num) {
                        var isNegNum = num < 0;
                        if (isNegNum) num = -num;
                        assert(num <= 0x3ffffff);
                        var carry = 0;
                        for(var i = this.length - 1; i >= 0; i--){
                            var w = (this.words[i] | 0) + carry * 0x4000000;
                            this.words[i] = w / num | 0;
                            carry = w % num;
                        }
                        this._strip();
                        return isNegNum ? this.ineg() : this;
                    };
                    BN.prototype.divn = function divn(num) {
                        return this.clone().idivn(num);
                    };
                    BN.prototype.egcd = function egcd(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());
                        var x = this;
                        var y = p.clone();
                        if (x.negative !== 0) x = x.umod(p);
                        else x = x.clone();
                         // A * x + B * y = x
                        var A = new BN(1);
                        var B = new BN(0); // C * x + D * y = y
                        var C = new BN(0);
                        var D = new BN(1);
                        var g = 0;
                        while(x.isEven() && y.isEven()){
                            x.iushrn(1);
                            y.iushrn(1);
                            ++g;
                        }
                        var yp = y.clone();
                        var xp = x.clone();
                        while(!x.isZero()){
                            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                            if (i > 0) {
                                x.iushrn(i);
                                while(i-- > 0){
                                    if (A.isOdd() || B.isOdd()) {
                                        A.iadd(yp);
                                        B.isub(xp);
                                    }
                                    A.iushrn(1);
                                    B.iushrn(1);
                                }
                            }
                            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                            if (j > 0) {
                                y.iushrn(j);
                                while(j-- > 0){
                                    if (C.isOdd() || D.isOdd()) {
                                        C.iadd(yp);
                                        D.isub(xp);
                                    }
                                    C.iushrn(1);
                                    D.iushrn(1);
                                }
                            }
                            if (x.cmp(y) >= 0) {
                                x.isub(y);
                                A.isub(C);
                                B.isub(D);
                            } else {
                                y.isub(x);
                                C.isub(A);
                                D.isub(B);
                            }
                        }
                        return {
                            a: C,
                            b: D,
                            gcd: y.iushln(g)
                        };
                    }; // This is reduced incarnation of the binary EEA
                    // above, designated to invert members of the
                    // _prime_ fields F(p) at a maximal speed
                    BN.prototype._invmp = function _invmp(p) {
                        assert(p.negative === 0);
                        assert(!p.isZero());
                        var a = this;
                        var b = p.clone();
                        if (a.negative !== 0) a = a.umod(p);
                        else a = a.clone();
                        var x1 = new BN(1);
                        var x2 = new BN(0);
                        var delta = b.clone();
                        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
                            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
                            if (i > 0) {
                                a.iushrn(i);
                                while(i-- > 0){
                                    if (x1.isOdd()) x1.iadd(delta);
                                    x1.iushrn(1);
                                }
                            }
                            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
                            if (j > 0) {
                                b.iushrn(j);
                                while(j-- > 0){
                                    if (x2.isOdd()) x2.iadd(delta);
                                    x2.iushrn(1);
                                }
                            }
                            if (a.cmp(b) >= 0) {
                                a.isub(b);
                                x1.isub(x2);
                            } else {
                                b.isub(a);
                                x2.isub(x1);
                            }
                        }
                        var res;
                        if (a.cmpn(1) === 0) res = x1;
                        else res = x2;
                        if (res.cmpn(0) < 0) res.iadd(p);
                        return res;
                    };
                    BN.prototype.gcd = function gcd(num) {
                        if (this.isZero()) return num.abs();
                        if (num.isZero()) return this.abs();
                        var a = this.clone();
                        var b = num.clone();
                        a.negative = 0;
                        b.negative = 0; // Remove common factor of two
                        for(var shift = 0; a.isEven() && b.isEven(); shift++){
                            a.iushrn(1);
                            b.iushrn(1);
                        }
                        do {
                            while(a.isEven())a.iushrn(1);
                            while(b.isEven())b.iushrn(1);
                            var r = a.cmp(b);
                            if (r < 0) {
                                // Swap `a` and `b` to make `a` always bigger than `b`
                                var t = a;
                                a = b;
                                b = t;
                            } else if (r === 0 || b.cmpn(1) === 0) break;
                            a.isub(b);
                        }while (true);
                        return b.iushln(shift);
                    }; // Invert number in the field F(num)
                    BN.prototype.invm = function invm(num) {
                        return this.egcd(num).a.umod(num);
                    };
                    BN.prototype.isEven = function isEven() {
                        return (this.words[0] & 1) === 0;
                    };
                    BN.prototype.isOdd = function isOdd() {
                        return (this.words[0] & 1) === 1;
                    }; // And first word and num
                    BN.prototype.andln = function andln(num) {
                        return this.words[0] & num;
                    }; // Increment at the bit position in-line
                    BN.prototype.bincn = function bincn(bit) {
                        assert(typeof bit === "number");
                        var r = bit % 26;
                        var s = (bit - r) / 26;
                        var q = 1 << r; // Fast case: bit is much higher than all existing words
                        if (this.length <= s) {
                            this._expand(s + 1);
                            this.words[s] |= q;
                            return this;
                        } // Add bit and propagate, if needed
                        var carry = q;
                        for(var i = s; carry !== 0 && i < this.length; i++){
                            var w = this.words[i] | 0;
                            w += carry;
                            carry = w >>> 26;
                            w &= 0x3ffffff;
                            this.words[i] = w;
                        }
                        if (carry !== 0) {
                            this.words[i] = carry;
                            this.length++;
                        }
                        return this;
                    };
                    BN.prototype.isZero = function isZero() {
                        return this.length === 1 && this.words[0] === 0;
                    };
                    BN.prototype.cmpn = function cmpn(num) {
                        var negative = num < 0;
                        if (this.negative !== 0 && !negative) return -1;
                        if (this.negative === 0 && negative) return 1;
                        this._strip();
                        var res;
                        if (this.length > 1) res = 1;
                        else {
                            if (negative) num = -num;
                            assert(num <= 0x3ffffff, "Number is too big");
                            var w = this.words[0] | 0;
                            res = w === num ? 0 : w < num ? -1 : 1;
                        }
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    }; // Compare two numbers and return:
                    // 1 - if `this` > `num`
                    // 0 - if `this` == `num`
                    // -1 - if `this` < `num`
                    BN.prototype.cmp = function cmp(num) {
                        if (this.negative !== 0 && num.negative === 0) return -1;
                        if (this.negative === 0 && num.negative !== 0) return 1;
                        var res = this.ucmp(num);
                        if (this.negative !== 0) return -res | 0;
                        return res;
                    }; // Unsigned comparison
                    BN.prototype.ucmp = function ucmp(num) {
                        // At this point both numbers have the same sign
                        if (this.length > num.length) return 1;
                        if (this.length < num.length) return -1;
                        var res = 0;
                        for(var i = this.length - 1; i >= 0; i--){
                            var a = this.words[i] | 0;
                            var b = num.words[i] | 0;
                            if (a === b) continue;
                            if (a < b) res = -1;
                            else if (a > b) res = 1;
                            break;
                        }
                        return res;
                    };
                    BN.prototype.gtn = function gtn(num) {
                        return this.cmpn(num) === 1;
                    };
                    BN.prototype.gt = function gt(num) {
                        return this.cmp(num) === 1;
                    };
                    BN.prototype.gten = function gten(num) {
                        return this.cmpn(num) >= 0;
                    };
                    BN.prototype.gte = function gte(num) {
                        return this.cmp(num) >= 0;
                    };
                    BN.prototype.ltn = function ltn(num) {
                        return this.cmpn(num) === -1;
                    };
                    BN.prototype.lt = function lt(num) {
                        return this.cmp(num) === -1;
                    };
                    BN.prototype.lten = function lten(num) {
                        return this.cmpn(num) <= 0;
                    };
                    BN.prototype.lte = function lte(num) {
                        return this.cmp(num) <= 0;
                    };
                    BN.prototype.eqn = function eqn(num) {
                        return this.cmpn(num) === 0;
                    };
                    BN.prototype.eq = function eq(num) {
                        return this.cmp(num) === 0;
                    }; //
                    // A reduce context, could be using montgomery or something better, depending
                    // on the `m` itself.
                    //
                    BN.red = function red(num) {
                        return new Red(num);
                    };
                    BN.prototype.toRed = function toRed(ctx) {
                        assert(!this.red, "Already a number in reduction context");
                        assert(this.negative === 0, "red works only with positives");
                        return ctx.convertTo(this)._forceRed(ctx);
                    };
                    BN.prototype.fromRed = function fromRed() {
                        assert(this.red, "fromRed works only with numbers in reduction context");
                        return this.red.convertFrom(this);
                    };
                    BN.prototype._forceRed = function _forceRed(ctx) {
                        this.red = ctx;
                        return this;
                    };
                    BN.prototype.forceRed = function forceRed(ctx) {
                        assert(!this.red, "Already a number in reduction context");
                        return this._forceRed(ctx);
                    };
                    BN.prototype.redAdd = function redAdd(num) {
                        assert(this.red, "redAdd works only with red numbers");
                        return this.red.add(this, num);
                    };
                    BN.prototype.redIAdd = function redIAdd(num) {
                        assert(this.red, "redIAdd works only with red numbers");
                        return this.red.iadd(this, num);
                    };
                    BN.prototype.redSub = function redSub(num) {
                        assert(this.red, "redSub works only with red numbers");
                        return this.red.sub(this, num);
                    };
                    BN.prototype.redISub = function redISub(num) {
                        assert(this.red, "redISub works only with red numbers");
                        return this.red.isub(this, num);
                    };
                    BN.prototype.redShl = function redShl(num) {
                        assert(this.red, "redShl works only with red numbers");
                        return this.red.shl(this, num);
                    };
                    BN.prototype.redMul = function redMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.mul(this, num);
                    };
                    BN.prototype.redIMul = function redIMul(num) {
                        assert(this.red, "redMul works only with red numbers");
                        this.red._verify2(this, num);
                        return this.red.imul(this, num);
                    };
                    BN.prototype.redSqr = function redSqr() {
                        assert(this.red, "redSqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqr(this);
                    };
                    BN.prototype.redISqr = function redISqr() {
                        assert(this.red, "redISqr works only with red numbers");
                        this.red._verify1(this);
                        return this.red.isqr(this);
                    }; // Square root over p
                    BN.prototype.redSqrt = function redSqrt() {
                        assert(this.red, "redSqrt works only with red numbers");
                        this.red._verify1(this);
                        return this.red.sqrt(this);
                    };
                    BN.prototype.redInvm = function redInvm() {
                        assert(this.red, "redInvm works only with red numbers");
                        this.red._verify1(this);
                        return this.red.invm(this);
                    }; // Return negative clone of `this` % `red modulo`
                    BN.prototype.redNeg = function redNeg() {
                        assert(this.red, "redNeg works only with red numbers");
                        this.red._verify1(this);
                        return this.red.neg(this);
                    };
                    BN.prototype.redPow = function redPow(num) {
                        assert(this.red && !num.red, "redPow(normalNum)");
                        this.red._verify1(this);
                        return this.red.pow(this, num);
                    }; // Prime numbers with efficient reduction
                    var primes = {
                        k256: null,
                        p224: null,
                        p192: null,
                        p25519: null
                    }; // Pseudo-Mersenne prime
                    function MPrime(name, p) {
                        // P = 2 ^ N - K
                        this.name = name;
                        this.p = new BN(p, 16);
                        this.n = this.p.bitLength();
                        this.k = new BN(1).iushln(this.n).isub(this.p);
                        this.tmp = this._tmp();
                    }
                    MPrime.prototype._tmp = function _tmp() {
                        var tmp = new BN(null);
                        tmp.words = new Array(Math.ceil(this.n / 13));
                        return tmp;
                    };
                    MPrime.prototype.ireduce = function ireduce(num) {
                        // Assumes that `num` is less than `P^2`
                        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
                        var r = num;
                        var rlen;
                        do {
                            this.split(r, this.tmp);
                            r = this.imulK(r);
                            r = r.iadd(this.tmp);
                            rlen = r.bitLength();
                        }while (rlen > this.n);
                        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
                        if (cmp === 0) {
                            r.words[0] = 0;
                            r.length = 1;
                        } else if (cmp > 0) r.isub(this.p);
                        else if (r.strip !== undefined) // r is a BN v4 instance
                        r.strip();
                        else // r is a BN v5 instance
                        r._strip();
                        return r;
                    };
                    MPrime.prototype.split = function split(input, out) {
                        input.iushrn(this.n, 0, out);
                    };
                    MPrime.prototype.imulK = function imulK(num) {
                        return num.imul(this.k);
                    };
                    function K256() {
                        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                    }
                    inherits(K256, MPrime);
                    K256.prototype.split = function split(input, output) {
                        // 256 = 9 * 26 + 22
                        var mask = 0x3fffff;
                        var outLen = Math.min(input.length, 9);
                        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
                        output.length = outLen;
                        if (input.length <= 9) {
                            input.words[0] = 0;
                            input.length = 1;
                            return;
                        } // Shift by 9 limbs
                        var prev = input.words[9];
                        output.words[output.length++] = prev & mask;
                        for(i = 10; i < input.length; i++){
                            var next = input.words[i] | 0;
                            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
                            prev = next;
                        }
                        prev >>>= 22;
                        input.words[i - 10] = prev;
                        if (prev === 0 && input.length > 10) input.length -= 10;
                        else input.length -= 9;
                    };
                    K256.prototype.imulK = function imulK(num) {
                        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
                        num.words[num.length] = 0;
                        num.words[num.length + 1] = 0;
                        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
                        var lo = 0;
                        for(var i = 0; i < num.length; i++){
                            var w = num.words[i] | 0;
                            lo += w * 0x3d1;
                            num.words[i] = lo & 0x3ffffff;
                            lo = w * 0x40 + (lo / 0x4000000 | 0);
                        } // Fast length reduction
                        if (num.words[num.length - 1] === 0) {
                            num.length--;
                            if (num.words[num.length - 1] === 0) num.length--;
                        }
                        return num;
                    };
                    function P224() {
                        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                    }
                    inherits(P224, MPrime);
                    function P192() {
                        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                    }
                    inherits(P192, MPrime);
                    function P25519() {
                        // 2 ^ 255 - 19
                        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                    }
                    inherits(P25519, MPrime);
                    P25519.prototype.imulK = function imulK(num) {
                        // K = 0x13
                        var carry = 0;
                        for(var i = 0; i < num.length; i++){
                            var hi = (num.words[i] | 0) * 0x13 + carry;
                            var lo = hi & 0x3ffffff;
                            hi >>>= 26;
                            num.words[i] = lo;
                            carry = hi;
                        }
                        if (carry !== 0) num.words[num.length++] = carry;
                        return num;
                    }; // Exported mostly for testing purposes, use plain name instead
                    BN._prime = function prime(name) {
                        // Cached version of prime
                        if (primes[name]) return primes[name];
                        var prime;
                        if (name === "k256") prime = new K256();
                        else if (name === "p224") prime = new P224();
                        else if (name === "p192") prime = new P192();
                        else if (name === "p25519") prime = new P25519();
                        else throw new Error("Unknown prime " + name);
                        primes[name] = prime;
                        return prime;
                    }; //
                    // Base reduction engine
                    //
                    function Red(m) {
                        if (typeof m === "string") {
                            var prime = BN._prime(m);
                            this.m = prime.p;
                            this.prime = prime;
                        } else {
                            assert(m.gtn(1), "modulus must be greater than 1");
                            this.m = m;
                            this.prime = null;
                        }
                    }
                    Red.prototype._verify1 = function _verify1(a) {
                        assert(a.negative === 0, "red works only with positives");
                        assert(a.red, "red works only with red numbers");
                    };
                    Red.prototype._verify2 = function _verify2(a, b) {
                        assert((a.negative | b.negative) === 0, "red works only with positives");
                        assert(a.red && a.red === b.red, "red works only with red numbers");
                    };
                    Red.prototype.imod = function imod(a) {
                        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
                        move(a, a.umod(this.m)._forceRed(this));
                        return a;
                    };
                    Red.prototype.neg = function neg(a) {
                        if (a.isZero()) return a.clone();
                        return this.m.sub(a)._forceRed(this);
                    };
                    Red.prototype.add = function add(a, b) {
                        this._verify2(a, b);
                        var res = a.add(b);
                        if (res.cmp(this.m) >= 0) res.isub(this.m);
                        return res._forceRed(this);
                    };
                    Red.prototype.iadd = function iadd(a, b) {
                        this._verify2(a, b);
                        var res = a.iadd(b);
                        if (res.cmp(this.m) >= 0) res.isub(this.m);
                        return res;
                    };
                    Red.prototype.sub = function sub(a, b) {
                        this._verify2(a, b);
                        var res = a.sub(b);
                        if (res.cmpn(0) < 0) res.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Red.prototype.isub = function isub(a, b) {
                        this._verify2(a, b);
                        var res = a.isub(b);
                        if (res.cmpn(0) < 0) res.iadd(this.m);
                        return res;
                    };
                    Red.prototype.shl = function shl(a, num) {
                        this._verify1(a);
                        return this.imod(a.ushln(num));
                    };
                    Red.prototype.imul = function imul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.imul(b));
                    };
                    Red.prototype.mul = function mul(a, b) {
                        this._verify2(a, b);
                        return this.imod(a.mul(b));
                    };
                    Red.prototype.isqr = function isqr(a) {
                        return this.imul(a, a.clone());
                    };
                    Red.prototype.sqr = function sqr(a) {
                        return this.mul(a, a);
                    };
                    Red.prototype.sqrt = function sqrt(a) {
                        if (a.isZero()) return a.clone();
                        var mod3 = this.m.andln(3);
                        assert(mod3 % 2 === 1); // Fast case
                        if (mod3 === 3) {
                            var pow = this.m.add(new BN(1)).iushrn(2);
                            return this.pow(a, pow);
                        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
                        //
                        // Find Q and S, that Q * 2 ^ S = (P - 1)
                        var q = this.m.subn(1);
                        var s = 0;
                        while(!q.isZero() && q.andln(1) === 0){
                            s++;
                            q.iushrn(1);
                        }
                        assert(!q.isZero());
                        var one = new BN(1).toRed(this);
                        var nOne = one.redNeg(); // Find quadratic non-residue
                        // NOTE: Max is such because of generalized Riemann hypothesis.
                        var lpow = this.m.subn(1).iushrn(1);
                        var z = this.m.bitLength();
                        z = new BN(2 * z * z).toRed(this);
                        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
                        var c = this.pow(z, q);
                        var r = this.pow(a, q.addn(1).iushrn(1));
                        var t = this.pow(a, q);
                        var m = s;
                        while(t.cmp(one) !== 0){
                            var tmp = t;
                            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
                            assert(i < m);
                            var b = this.pow(c, new BN(1).iushln(m - i - 1));
                            r = r.redMul(b);
                            c = b.redSqr();
                            t = t.redMul(c);
                            m = i;
                        }
                        return r;
                    };
                    Red.prototype.invm = function invm(a) {
                        var inv = a._invmp(this.m);
                        if (inv.negative !== 0) {
                            inv.negative = 0;
                            return this.imod(inv).redNeg();
                        } else return this.imod(inv);
                    };
                    Red.prototype.pow = function pow(a, num) {
                        if (num.isZero()) return new BN(1).toRed(this);
                        if (num.cmpn(1) === 0) return a.clone();
                        var windowSize = 4;
                        var wnd = new Array(1 << windowSize);
                        wnd[0] = new BN(1).toRed(this);
                        wnd[1] = a;
                        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
                        var res = wnd[0];
                        var current = 0;
                        var currentLen = 0;
                        var start = num.bitLength() % 26;
                        if (start === 0) start = 26;
                        for(i = num.length - 1; i >= 0; i--){
                            var word = num.words[i];
                            for(var j = start - 1; j >= 0; j--){
                                var bit = word >> j & 1;
                                if (res !== wnd[0]) res = this.sqr(res);
                                if (bit === 0 && current === 0) {
                                    currentLen = 0;
                                    continue;
                                }
                                current <<= 1;
                                current |= bit;
                                currentLen++;
                                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                                res = this.mul(res, wnd[current]);
                                currentLen = 0;
                                current = 0;
                            }
                            start = 26;
                        }
                        return res;
                    };
                    Red.prototype.convertTo = function convertTo(num) {
                        var r = num.umod(this.m);
                        return r === num ? r.clone() : r;
                    };
                    Red.prototype.convertFrom = function convertFrom(num) {
                        var res = num.clone();
                        res.red = null;
                        return res;
                    }; //
                    // Montgomery method engine
                    //
                    BN.mont = function mont(num) {
                        return new Mont(num);
                    };
                    function Mont(m) {
                        Red.call(this, m);
                        this.shift = this.m.bitLength();
                        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
                        this.r = new BN(1).iushln(this.shift);
                        this.r2 = this.imod(this.r.sqr());
                        this.rinv = this.r._invmp(this.m);
                        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
                        this.minv = this.minv.umod(this.r);
                        this.minv = this.r.sub(this.minv);
                    }
                    inherits(Mont, Red);
                    Mont.prototype.convertTo = function convertTo(num) {
                        return this.imod(num.ushln(this.shift));
                    };
                    Mont.prototype.convertFrom = function convertFrom(num) {
                        var r = this.imod(num.mul(this.rinv));
                        r.red = null;
                        return r;
                    };
                    Mont.prototype.imul = function imul(a, b) {
                        if (a.isZero() || b.isZero()) {
                            a.words[0] = 0;
                            a.length = 1;
                            return a;
                        }
                        var t = a.imul(b);
                        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
                        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Mont.prototype.mul = function mul(a, b) {
                        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
                        var t = a.mul(b);
                        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
                        var u = t.isub(c).iushrn(this.shift);
                        var res = u;
                        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
                        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
                        return res._forceRed(this);
                    };
                    Mont.prototype.invm = function invm(a) {
                        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
                        var res = this.imod(a._invmp(this.m).mul(this.r2));
                        return res._forceRed(this);
                    };
                })(typeof module4 === "undefined" || module4, this);
            },
            {
                "buffer": 224
            }
        ],
        223: [
            function(require, module, exports) {
                arguments[4][19][0].apply(exports, arguments);
            },
            {
                "crypto": 224,
                "dup": 19
            }
        ],
        224: [
            function(require, module, exports) {},
            {}
        ],
        225: [
            function(require, module, exports) {
                var basex = require("base-x");
                var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
                module.exports = basex(ALPHABET);
            },
            {
                "base-x": 210
            }
        ],
        226: [
            function(require, module, exports) {
                (function(process, global, Buffer) {
                    (function() {
                        /*! For license information please see bsv.module.js.LICENSE.txt */ (function() {
                            var t4 = {
                                671: function _1(t5, e7, r4) {
                                    "use strict";
                                    r4.r(e7), r4.d(e7, {
                                        Ach: function Ach() {
                                            return mt1;
                                        },
                                        Address: function Address() {
                                            return z1;
                                        },
                                        Aes: function Aes() {
                                            return lt1;
                                        },
                                        Aescbc: function Aescbc() {
                                            return bt1;
                                        },
                                        Base58: function Base58() {
                                            return _1;
                                        },
                                        Base58Check: function Base58Check() {
                                            return k4;
                                        },
                                        Bip32: function Bip32() {
                                            return G1;
                                        },
                                        Bip39: function Bip39() {
                                            return Y1;
                                        },
                                        Block: function Block() {
                                            return at1;
                                        },
                                        BlockHeader: function BlockHeader() {
                                            return $1;
                                        },
                                        Bn: function Bn() {
                                            return p3;
                                        },
                                        Br: function Br() {
                                            return g1;
                                        },
                                        Bsm: function Bsm() {
                                            return Z1;
                                        },
                                        Bw: function Bw() {
                                            return y3;
                                        },
                                        Cbc: function Cbc() {
                                            return pt1;
                                        },
                                        Constants: function Constants() {
                                            return x;
                                        },
                                        Ecdsa: function Ecdsa() {
                                            return X1;
                                        },
                                        Ecies: function Ecies() {
                                            return gt1;
                                        },
                                        Hash: function Hash() {
                                            return P1;
                                        },
                                        Interp: function Interp() {
                                            return ot1;
                                        },
                                        KeyPair: function KeyPair() {
                                            return Q1;
                                        },
                                        OpCode: function OpCode() {
                                            return T3;
                                        },
                                        Point: function Point() {
                                            return L1;
                                        },
                                        PrivKey: function PrivKey() {
                                            return V1;
                                        },
                                        PubKey: function PubKey() {
                                            return K1;
                                        },
                                        Random: function Random() {
                                            return D1;
                                        },
                                        Script: function Script() {
                                            return q3;
                                        },
                                        Sig: function Sig() {
                                            return j2;
                                        },
                                        SigOperations: function SigOperations() {
                                            return ht1;
                                        },
                                        Struct: function Struct() {
                                            return S1;
                                        },
                                        Tx: function Tx() {
                                            return nt1;
                                        },
                                        TxBuilder: function TxBuilder() {
                                            return ut1;
                                        },
                                        TxIn: function TxIn() {
                                            return it5;
                                        },
                                        TxOut: function TxOut() {
                                            return st1;
                                        },
                                        TxOutMap: function TxOutMap() {
                                            return ft1;
                                        },
                                        TxVerifier: function TxVerifier() {
                                            return dt1;
                                        },
                                        VarInt: function VarInt() {
                                            return rt1;
                                        },
                                        Workers: function Workers() {
                                            return E1;
                                        },
                                        WorkersResult: function WorkersResult() {
                                            return I1;
                                        },
                                        cmp: function cmp() {
                                            return B;
                                        },
                                        deps: function deps() {
                                            return yt;
                                        },
                                        en: function en() {
                                            return J;
                                        },
                                        getConstants: function getConstants() {
                                            return R;
                                        },
                                        jp: function jp() {
                                            return W;
                                        },
                                        version: function version() {
                                            return wt;
                                        }
                                    });
                                    var i6 = r4(297), s4 = r4.n(i6), n3 = r4(550), a10 = r4.n(n3), o3 = r4(191), h1 = r4.n(o3), f1 = r4(666), c3 = r4.n(f1), u3 = r4(715), d3 = r4.n(u3), l3 = r4(601);
                                    function p3(t, e) {
                                        var _a;
                                        for(var _len19 = arguments.length, r = new Array(_len19 > 2 ? _len19 - 2 : 0), _key19 = 2; _key19 < _len19; _key19++)r[_key19 - 2] = arguments[_key19];
                                        if (!(this instanceof p3)) return _construct(p3, [
                                            t,
                                            e
                                        ].concat(r));
                                        (_a = a10()).call.apply(_a, [
                                            this,
                                            t,
                                            e
                                        ].concat(r));
                                    }
                                    function b10(t) {
                                        var e = Buffer.alloc(t.length);
                                        for(var _r = 0; _r < t.length; _r++)e[_r] = t[t.length - 1 - _r];
                                        return e;
                                    }
                                    function m(t) {
                                        p3.prototype["_" + t] = p3.prototype[t], p3.prototype[t] = function(e) {
                                            return "string" == typeof e ? e = new p3(e) : "number" == typeof e && (e = new p3(e.toString())), this["_" + t](e);
                                        };
                                    }
                                    Object.keys(a10()).forEach(function(t) {
                                        p3[t] = a10()[t];
                                    }), p3.prototype = Object.create(a10().prototype), p3.prototype.constructor = p3, p3.prototype.fromHex = function(t, e) {
                                        return this.fromBuffer(Buffer.from(t, "hex"), e);
                                    }, p3.prototype.toHex = function(t) {
                                        return this.toBuffer(t).toString("hex");
                                    }, p3.prototype.toJSON = function() {
                                        return this.toString();
                                    }, p3.prototype.fromJSON = function(t) {
                                        return p3(t).copy(this), this;
                                    }, p3.prototype.fromNumber = function(t) {
                                        return p3(t).copy(this), this;
                                    }, p3.prototype.toNumber = function() {
                                        return parseInt(this.toString(10), 10);
                                    }, p3.prototype.fromString = function(t, e) {
                                        return p3(t, e).copy(this), this;
                                    }, p3.fromBuffer = function(t) {
                                        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                                            endian: "big"
                                        };
                                        return "little" === e.endian && (t = b10(t)), new p3(t.toString("hex"), 16);
                                    }, p3.prototype.fromBuffer = function(t, e) {
                                        return p3.fromBuffer(t, e).copy(this), this;
                                    }, p3.prototype.toBuffer = function() {
                                        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                                            size: void 0,
                                            endian: "big"
                                        };
                                        var e;
                                        if (t.size) {
                                            var _r2 = this.toString(16, 2), _i21 = _r2.length / 2;
                                            if (e = Buffer.from(_r2, "hex"), _i21 === t.size) ;
                                            else if (_i21 > t.size) e = e.slice(_i21 - e.length, e.length);
                                            else if (_i21 < t.size) {
                                                var _r3 = Buffer.alloc(t.size);
                                                for(var _t2 = 0; _t2 < e.length; _t2++)_r3[_r3.length - 1 - _t2] = e[e.length - 1 - _t2];
                                                for(var _e2 = 0; _e2 < t.size - _i21; _e2++)_r3[_e2] = 0;
                                                e = _r3;
                                            }
                                        } else {
                                            var _t3 = this.toString(16, 2);
                                            e = Buffer.from(_t3, "hex");
                                        }
                                        "little" === t.endian && (e = b10(e));
                                        var r = Buffer.from([
                                            0
                                        ]);
                                        return 0 === Buffer.compare(e, r) ? Buffer.from([]) : e;
                                    }, p3.prototype.toFastBuffer = p3.prototype.toBuffer, p3.fromFastBuffer = p3.fromBuffer, p3.prototype.fromFastBuffer = p3.prototype.fromBuffer, p3.prototype.fromSm = function(t) {
                                        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                                            endian: "big"
                                        };
                                        return 0 === t.length && this.fromBuffer(Buffer.from([
                                            0
                                        ])), "little" === e.endian && (t = b10(t)), 128 & t[0] ? (t[0] = 127 & t[0], this.fromBuffer(t), this.neg().copy(this)) : this.fromBuffer(t), this;
                                    }, p3.prototype.toSm = function() {
                                        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                                            endian: "big"
                                        };
                                        var e = t.endian;
                                        var r;
                                        return -1 === this.cmp(0) ? (r = this.neg().toBuffer(), 128 & r[0] ? r = Buffer.concat([
                                            Buffer.from([
                                                128
                                            ]),
                                            r
                                        ]) : r[0] = 128 | r[0]) : (r = this.toBuffer(), 128 & r[0] && (r = Buffer.concat([
                                            Buffer.from([
                                                0
                                            ]),
                                            r
                                        ]))), 1 === r.length & 0 === r[0] && (r = Buffer.from([])), "little" === e && (r = b10(r)), r;
                                    }, p3.prototype.fromBits = function(t) {
                                        var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
                                            strict: !1
                                        };
                                        var r = Buffer.alloc(4);
                                        if (r.writeUInt32BE(t, 0), t = r.readInt32BE(0), e.strict && 8388608 & t) throw new Error("negative bit set");
                                        var i = t >> 24, s = 8388607 & t;
                                        if (r = Buffer.alloc(4), r.writeInt32BE(s), i <= 3) r = r.slice(1, i + 1);
                                        else {
                                            var _t4 = Buffer.alloc(i - 3);
                                            _t4.fill(0), r = Buffer.concat([
                                                r,
                                                _t4
                                            ]);
                                        }
                                        return this.fromBuffer(r), 8388608 & t && p3(0).sub(this).copy(this), this;
                                    }, p3.prototype.toBits = function() {
                                        var t;
                                        t = this.lt(0) ? this.neg().toBuffer() : this.toBuffer();
                                        var e, r = t.length;
                                        if (r > 3) e = Buffer.concat([
                                            Buffer.from([
                                                0
                                            ]),
                                            t.slice(0, 3)
                                        ]).readUInt32BE(0);
                                        else if (r <= 3) {
                                            var _i22 = Buffer.alloc(3 - r + 1);
                                            _i22.fill(0), e = Buffer.concat([
                                                _i22,
                                                t.slice(0, r)
                                            ]).readUInt32BE(0);
                                        }
                                        8388608 & e && (e >>= 8, r++), this.lt(0) && (e |= 8388608);
                                        var i = r << 24 | e;
                                        return t = Buffer.alloc(4), t.writeInt32BE(i, 0), t.readUInt32BE(0);
                                    }, p3.prototype.fromScriptNumBuffer = function(t, e, r) {
                                        if (void 0 === r && (r = 4), t.length > r) throw new Error("script number overflow");
                                        if (e && t.length > 0 && 0 == (127 & t[t.length - 1]) && (t.length <= 1 || 0 == (128 & t[t.length - 2]))) throw new Error("non-minimally encoded script number");
                                        return this.fromSm(t, {
                                            endian: "little"
                                        });
                                    }, p3.prototype.toScriptNumBuffer = function(t) {
                                        return this.toSm({
                                            endian: "little"
                                        });
                                    }, p3.prototype.neg = function() {
                                        var t = a10().prototype.neg.call(this), e = Object.create(p3.prototype);
                                        return t.copy(e), e;
                                    }, p3.prototype.add = function(t) {
                                        var e = a10().prototype.add.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.sub = function(t) {
                                        var e = a10().prototype.sub.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.mul = function(t) {
                                        var e = a10().prototype.mul.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.mod = function(t) {
                                        var e = a10().prototype.mod.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.umod = function(t) {
                                        var e = a10().prototype.umod.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.invm = function(t) {
                                        var e = a10().prototype.invm.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.div = function(t) {
                                        var e = a10().prototype.div.call(this, t);
                                        return t = Object.create(p3.prototype), e.copy(t), t;
                                    }, p3.prototype.ushln = function(t) {
                                        var e = a10().prototype.ushln.call(this, t), r = Object.create(p3.prototype);
                                        return e.copy(r), r;
                                    }, p3.prototype.ushrn = function(t) {
                                        var e = a10().prototype.ushrn.call(this, t), r = Object.create(p3.prototype);
                                        return e.copy(r), r;
                                    }, p3.prototype.cmp = function(t) {
                                        return a10().prototype.cmp.call(this, t);
                                    }, p3.prototype.eq = function(t) {
                                        return 0 === this.cmp(t);
                                    }, p3.prototype.neq = function(t) {
                                        return 0 !== this.cmp(t);
                                    }, p3.prototype.gt = function(t) {
                                        return this.cmp(t) > 0;
                                    }, p3.prototype.geq = function(t) {
                                        return this.cmp(t) >= 0;
                                    }, p3.prototype.lt = function(t) {
                                        return this.cmp(t) < 0;
                                    }, p3.prototype.leq = function(t) {
                                        return this.cmp(t) <= 0;
                                    }, m("add"), m("sub"), m("mul"), m("mod"), m("invm"), m("div"), m("cmp"), m("gt"), m("geq"), m("lt"), m("leq");
                                    var g1 = /*#__PURE__*/ function() {
                                        function g(t) {
                                            _classCallCheck2(this, g);
                                            this.fromObject({
                                                buf: t
                                            });
                                        }
                                        _createClass2(g, [
                                            {
                                                key: "fromObject",
                                                value: function fromObject(t) {
                                                    return this.buf = t.buf || this.buf || void 0, this.pos = t.pos || this.pos || 0, this;
                                                }
                                            },
                                            {
                                                key: "eof",
                                                value: function eof() {
                                                    return this.pos >= this.buf.length;
                                                }
                                            },
                                            {
                                                key: "read",
                                                value: function read() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.buf.length;
                                                    var e = this.buf.slice(this.pos, this.pos + t);
                                                    return this.pos = this.pos + t, e;
                                                }
                                            },
                                            {
                                                key: "readReverse",
                                                value: function readReverse() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.buf.length;
                                                    var e = this.buf.slice(this.pos, this.pos + t);
                                                    this.pos = this.pos + t;
                                                    var r = Buffer.alloc(e.length);
                                                    for(var _t5 = 0; _t5 < r.length; _t5++)r[_t5] = e[e.length - 1 - _t5];
                                                    return r;
                                                }
                                            },
                                            {
                                                key: "readUInt8",
                                                value: function readUInt8() {
                                                    var t = this.buf.readUInt8(this.pos);
                                                    return this.pos = this.pos + 1, t;
                                                }
                                            },
                                            {
                                                key: "readInt8",
                                                value: function readInt8() {
                                                    var t = this.buf.readInt8(this.pos);
                                                    return this.pos = this.pos + 1, t;
                                                }
                                            },
                                            {
                                                key: "readUInt16BE",
                                                value: function readUInt16BE() {
                                                    var t = this.buf.readUInt16BE(this.pos);
                                                    return this.pos = this.pos + 2, t;
                                                }
                                            },
                                            {
                                                key: "readInt16BE",
                                                value: function readInt16BE() {
                                                    var t = this.buf.readInt16BE(this.pos);
                                                    return this.pos = this.pos + 2, t;
                                                }
                                            },
                                            {
                                                key: "readUInt16LE",
                                                value: function readUInt16LE() {
                                                    var t = this.buf.readUInt16LE(this.pos);
                                                    return this.pos = this.pos + 2, t;
                                                }
                                            },
                                            {
                                                key: "readInt16LE",
                                                value: function readInt16LE() {
                                                    var t = this.buf.readInt16LE(this.pos);
                                                    return this.pos = this.pos + 2, t;
                                                }
                                            },
                                            {
                                                key: "readUInt32BE",
                                                value: function readUInt32BE() {
                                                    var t = this.buf.readUInt32BE(this.pos);
                                                    return this.pos = this.pos + 4, t;
                                                }
                                            },
                                            {
                                                key: "readInt32BE",
                                                value: function readInt32BE() {
                                                    var t = this.buf.readInt32BE(this.pos);
                                                    return this.pos = this.pos + 4, t;
                                                }
                                            },
                                            {
                                                key: "readUInt32LE",
                                                value: function readUInt32LE() {
                                                    var t = this.buf.readUInt32LE(this.pos);
                                                    return this.pos = this.pos + 4, t;
                                                }
                                            },
                                            {
                                                key: "readInt32LE",
                                                value: function readInt32LE() {
                                                    var t = this.buf.readInt32LE(this.pos);
                                                    return this.pos = this.pos + 4, t;
                                                }
                                            },
                                            {
                                                key: "readUInt64BEBn",
                                                value: function readUInt64BEBn() {
                                                    var t = this.buf.slice(this.pos, this.pos + 8), e = new p3().fromBuffer(t);
                                                    return this.pos = this.pos + 8, e;
                                                }
                                            },
                                            {
                                                key: "readUInt64LEBn",
                                                value: function readUInt64LEBn() {
                                                    var t = this.readReverse(8);
                                                    return new p3().fromBuffer(t);
                                                }
                                            },
                                            {
                                                key: "readVarIntNum",
                                                value: function readVarIntNum() {
                                                    var t = this.readUInt8();
                                                    var e, r;
                                                    switch(t){
                                                        case 253:
                                                            return this.readUInt16LE();
                                                        case 254:
                                                            return this.readUInt32LE();
                                                        case 255:
                                                            if (e = this.readUInt64LEBn(), r = e.toNumber(), r <= Math.pow(2, 53)) return r;
                                                            throw new Error("number too large to retain precision - use readVarIntBn");
                                                        default:
                                                            return t;
                                                    }
                                                }
                                            },
                                            {
                                                key: "readVarIntBuf",
                                                value: function readVarIntBuf() {
                                                    switch(this.buf.readUInt8(this.pos)){
                                                        case 253:
                                                            return this.read(3);
                                                        case 254:
                                                            return this.read(5);
                                                        case 255:
                                                            return this.read(9);
                                                        default:
                                                            return this.read(1);
                                                    }
                                                }
                                            },
                                            {
                                                key: "readVarIntBn",
                                                value: function readVarIntBn() {
                                                    var t = this.readUInt8();
                                                    switch(t){
                                                        case 253:
                                                            return new p3(this.readUInt16LE());
                                                        case 254:
                                                            return new p3(this.readUInt32LE());
                                                        case 255:
                                                            return this.readUInt64LEBn();
                                                        default:
                                                            return new p3(t);
                                                    }
                                                }
                                            }
                                        ]);
                                        return g;
                                    }();
                                    var y3 = /*#__PURE__*/ function() {
                                        function y(t) {
                                            _classCallCheck2(this, y);
                                            this.fromObject({
                                                bufs: t
                                            });
                                        }
                                        _createClass2(y, [
                                            {
                                                key: "fromObject",
                                                value: function fromObject(t) {
                                                    return this.bufs = t.bufs || this.bufs || [], this;
                                                }
                                            },
                                            {
                                                key: "getLength",
                                                value: function getLength() {
                                                    var t = 0;
                                                    for(var _e3 in this.bufs)t += this.bufs[_e3].length;
                                                    return t;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return Buffer.concat(this.bufs);
                                                }
                                            },
                                            {
                                                key: "write",
                                                value: function write(t) {
                                                    return this.bufs.push(t), this;
                                                }
                                            },
                                            {
                                                key: "writeReverse",
                                                value: function writeReverse(t) {
                                                    var e = Buffer.alloc(t.length);
                                                    for(var _r4 = 0; _r4 < e.length; _r4++)e[_r4] = t[t.length - 1 - _r4];
                                                    return this.bufs.push(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt8",
                                                value: function writeUInt8(t) {
                                                    var e = Buffer.alloc(1);
                                                    return e.writeUInt8(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeInt8",
                                                value: function writeInt8(t) {
                                                    var e = Buffer.alloc(1);
                                                    return e.writeInt8(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt16BE",
                                                value: function writeUInt16BE(t) {
                                                    var e = Buffer.alloc(2);
                                                    return e.writeUInt16BE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeInt16BE",
                                                value: function writeInt16BE(t) {
                                                    var e = Buffer.alloc(2);
                                                    return e.writeInt16BE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt16LE",
                                                value: function writeUInt16LE(t) {
                                                    var e = Buffer.alloc(2);
                                                    return e.writeUInt16LE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeInt16LE",
                                                value: function writeInt16LE(t) {
                                                    var e = Buffer.alloc(2);
                                                    return e.writeInt16LE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt32BE",
                                                value: function writeUInt32BE(t) {
                                                    var e = Buffer.alloc(4);
                                                    return e.writeUInt32BE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeInt32BE",
                                                value: function writeInt32BE(t) {
                                                    var e = Buffer.alloc(4);
                                                    return e.writeInt32BE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt32LE",
                                                value: function writeUInt32LE(t) {
                                                    var e = Buffer.alloc(4);
                                                    return e.writeUInt32LE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeInt32LE",
                                                value: function writeInt32LE(t) {
                                                    var e = Buffer.alloc(4);
                                                    return e.writeInt32LE(t, 0), this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt64BEBn",
                                                value: function writeUInt64BEBn(t) {
                                                    var e = t.toBuffer({
                                                        size: 8
                                                    });
                                                    return this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeUInt64LEBn",
                                                value: function writeUInt64LEBn(t) {
                                                    var e = t.toBuffer({
                                                        size: 8
                                                    });
                                                    return this.writeReverse(e), this;
                                                }
                                            },
                                            {
                                                key: "writeVarIntNum",
                                                value: function writeVarIntNum(t) {
                                                    var e = y.varIntBufNum(t);
                                                    return this.write(e), this;
                                                }
                                            },
                                            {
                                                key: "writeVarIntBn",
                                                value: function writeVarIntBn(t) {
                                                    var e = y.varIntBufBn(t);
                                                    return this.write(e), this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "varIntBufNum",
                                                value: function varIntBufNum(t) {
                                                    var e;
                                                    return t < 253 ? (e = Buffer.alloc(1), e.writeUInt8(t, 0)) : t < 65536 ? (e = Buffer.alloc(3), e.writeUInt8(253, 0), e.writeUInt16LE(t, 1)) : t < 4294967296 ? (e = Buffer.alloc(5), e.writeUInt8(254, 0), e.writeUInt32LE(t, 1)) : (e = Buffer.alloc(9), e.writeUInt8(255, 0), e.writeInt32LE(-1 & t, 1), e.writeUInt32LE(Math.floor(t / 4294967296), 5)), e;
                                                }
                                            },
                                            {
                                                key: "varIntBufBn",
                                                value: function varIntBufBn(t) {
                                                    var e;
                                                    var r = t.toNumber();
                                                    if (r < 253) e = Buffer.alloc(1), e.writeUInt8(r, 0);
                                                    else if (r < 65536) e = Buffer.alloc(3), e.writeUInt8(253, 0), e.writeUInt16LE(r, 1);
                                                    else if (r < 4294967296) e = Buffer.alloc(5), e.writeUInt8(254, 0), e.writeUInt32LE(r, 1);
                                                    else {
                                                        var _r5 = new y();
                                                        _r5.writeUInt8(255), _r5.writeUInt64LEBn(t), e = _r5.toBuffer();
                                                    }
                                                    return e;
                                                }
                                            }
                                        ]);
                                        return y;
                                    }();
                                    var w = r4(484), v = r4.n(w);
                                    var S1 = /*#__PURE__*/ function() {
                                        function S(t) {
                                            _classCallCheck2(this, S);
                                            this.fromObject(t);
                                        }
                                        _createClass2(S, [
                                            {
                                                key: "fromObject",
                                                value: function fromObject(t) {
                                                    if (!t) return this;
                                                    for(var _i23 = 0, _Object$keys2 = Object.keys(t); _i23 < _Object$keys2.length; _i23++){
                                                        var _e4 = _Object$keys2[_i23];
                                                        void 0 !== t[_e4] && (this[_e4] = t[_e4]);
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    if (!(t instanceof g1)) throw new Error("br must be a buffer reader");
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "asyncFromBr",
                                                value: function asyncFromBr(t) {
                                                    if (!(t instanceof g1)) throw new Error("br must be a buffer reader");
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "asyncToBw",
                                                value: function asyncToBw(t) {
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "genFromBuffers",
                                                value: /*#__PURE__*/ _regeneratorRuntime().mark(function genFromBuffers() {
                                                    return _regeneratorRuntime().wrap(function genFromBuffers$(_context84) {
                                                        while(true)switch(_context84.prev = _context84.next){
                                                            case 0:
                                                                throw new Error("not implemented");
                                                            case 1:
                                                            case "end":
                                                                return _context84.stop();
                                                        }
                                                    }, genFromBuffers);
                                                })
                                            },
                                            {
                                                key: "expect",
                                                value: /*#__PURE__*/ _regeneratorRuntime().mark(function expect(t, e) {
                                                    var r, i, s, _e5, n, a;
                                                    return _regeneratorRuntime().wrap(function expect$(_context85) {
                                                        while(true)switch(_context85.prev = _context85.next){
                                                            case 0:
                                                                r = e;
                                                                i = new y3();
                                                                s = 0;
                                                                e && (i.write(e), s += e.length);
                                                            case 4:
                                                                if (!(s < t)) {
                                                                    _context85.next = 12;
                                                                    break;
                                                                }
                                                                _e5 = t - s;
                                                                _context85.next = 8;
                                                                return _e5;
                                                            case 8:
                                                                r = _context85.sent;
                                                                r && (i.write(r), s += r.length);
                                                            case 10:
                                                                _context85.next = 4;
                                                                break;
                                                            case 12:
                                                                r = i.toBuffer();
                                                                n = s - t, a = r.slice(r.length - n, r.length);
                                                                return _context85.abrupt("return", (r = r.slice(0, r.length - n), {
                                                                    buf: r,
                                                                    remainderbuf: a
                                                                }));
                                                            case 15:
                                                            case "end":
                                                                return _context85.stop();
                                                        }
                                                    }, expect);
                                                })
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    if (!Buffer.isBuffer(t)) throw new Error("buf must be a buffer");
                                                    var r = new g1(t);
                                                    for(var _len20 = arguments.length, e = new Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++)e[_key20 - 1] = arguments[_key20];
                                                    return this.fromBr.apply(this, [
                                                        r
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "asyncFromBuffer",
                                                value: function asyncFromBuffer(t) {
                                                    if (!Buffer.isBuffer(t)) throw new Error("buf must be a buffer");
                                                    var r = new g1(t);
                                                    for(var _len21 = arguments.length, e = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++)e[_key21 - 1] = arguments[_key21];
                                                    return this.asyncFromBr.apply(this, [
                                                        r
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "fromFastBuffer",
                                                value: function fromFastBuffer(t) {
                                                    for(var _len22 = arguments.length, e = new Array(_len22 > 1 ? _len22 - 1 : 0), _key22 = 1; _key22 < _len22; _key22++)e[_key22 - 1] = arguments[_key22];
                                                    return 0 === t.length ? this : this.fromBuffer.apply(this, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return this.toBw.apply(this, arguments).toBuffer();
                                                }
                                            },
                                            {
                                                key: "asyncToBuffer",
                                                value: function asyncToBuffer() {
                                                    return this.asyncToBw.apply(this, arguments).then(function(t) {
                                                        return t.toBuffer();
                                                    });
                                                }
                                            },
                                            {
                                                key: "toFastBuffer",
                                                value: function toFastBuffer() {
                                                    return 0 === Object.keys(this).length ? Buffer.alloc(0) : this.toBuffer.apply(this, arguments);
                                                }
                                            },
                                            {
                                                key: "fromHex",
                                                value: function fromHex(t) {
                                                    if (!v()(t)) throw new Error("invalid hex string");
                                                    var r = Buffer.from(t, "hex");
                                                    for(var _len23 = arguments.length, e = new Array(_len23 > 1 ? _len23 - 1 : 0), _key23 = 1; _key23 < _len23; _key23++)e[_key23 - 1] = arguments[_key23];
                                                    return this.fromBuffer.apply(this, [
                                                        r
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "asyncFromHex",
                                                value: function asyncFromHex(t) {
                                                    if (!v()(t)) throw new Error("invalid hex string");
                                                    var r = Buffer.from(t, "hex");
                                                    for(var _len24 = arguments.length, e = new Array(_len24 > 1 ? _len24 - 1 : 0), _key24 = 1; _key24 < _len24; _key24++)e[_key24 - 1] = arguments[_key24];
                                                    return this.asyncFromBuffer.apply(this, [
                                                        r
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "fromFastHex",
                                                value: function fromFastHex(t) {
                                                    if (!v()(t)) throw new Error("invalid hex string");
                                                    var r = Buffer.from(t, "hex");
                                                    for(var _len25 = arguments.length, e = new Array(_len25 > 1 ? _len25 - 1 : 0), _key25 = 1; _key25 < _len25; _key25++)e[_key25 - 1] = arguments[_key25];
                                                    return this.fromFastBuffer.apply(this, [
                                                        r
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "toHex",
                                                value: function toHex() {
                                                    return this.toBuffer.apply(this, arguments).toString("hex");
                                                }
                                            },
                                            {
                                                key: "asyncToHex",
                                                value: function asyncToHex() {
                                                    return this.asyncToBuffer.apply(this, arguments).then(function(t) {
                                                        return t.toString("hex");
                                                    });
                                                }
                                            },
                                            {
                                                key: "toFastHex",
                                                value: function toFastHex() {
                                                    return this.toFastBuffer.apply(this, arguments).toString("hex");
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    if ("string" != typeof t) throw new Error("str must be a string");
                                                    for(var _len26 = arguments.length, e = new Array(_len26 > 1 ? _len26 - 1 : 0), _key26 = 1; _key26 < _len26; _key26++)e[_key26 - 1] = arguments[_key26];
                                                    return this.fromHex.apply(this, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "asyncFromString",
                                                value: function asyncFromString(t) {
                                                    if ("string" != typeof t) throw new Error("str must be a string");
                                                    for(var _len27 = arguments.length, e = new Array(_len27 > 1 ? _len27 - 1 : 0), _key27 = 1; _key27 < _len27; _key27++)e[_key27 - 1] = arguments[_key27];
                                                    return this.asyncFromHex.apply(this, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return this.toHex.apply(this, arguments);
                                                }
                                            },
                                            {
                                                key: "asyncToString",
                                                value: function asyncToString() {
                                                    return this.asyncToHex.apply(this, arguments);
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "asyncFromJSON",
                                                value: function asyncFromJSON(t) {
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t = {};
                                                    for(var e in this){
                                                        if (Array.isArray(this[e])) {
                                                            var _i24 = [];
                                                            for(var r in this[e])"function" == typeof this[e][r].toJSON ? _i24.push(this[e][r].toJSON()) : _i24.push(JSON.stringify(this[e][r]));
                                                            t[e] = _i24;
                                                        } else if (null === this[e]) t[e] = this[e];
                                                        else if ("object" == _typeof(this[e]) && "function" == typeof this[e].toJSON) t[e] = this[e].toJSON();
                                                        else if ("boolean" == typeof this[e] || "number" == typeof this[e] || "string" == typeof this[e]) t[e] = this[e];
                                                        else if (Buffer.isBuffer(this[e])) t[e] = this[e].toString("hex");
                                                        else if (this[e] instanceof Map) t[e] = JSON.stringify(this[e]);
                                                        else if ("object" == _typeof(this[e])) throw new Error("not implemented");
                                                    }
                                                    return t;
                                                }
                                            },
                                            {
                                                key: "asyncToJSON",
                                                value: function asyncToJSON() {
                                                    throw new Error("not implemented");
                                                }
                                            },
                                            {
                                                key: "clone",
                                                value: function clone() {
                                                    return this.cloneByJSON();
                                                }
                                            },
                                            {
                                                key: "cloneByBuffer",
                                                value: function cloneByBuffer() {
                                                    return new this.constructor().fromBuffer(this.toBuffer());
                                                }
                                            },
                                            {
                                                key: "cloneByFastBuffer",
                                                value: function cloneByFastBuffer() {
                                                    return new this.constructor().fromFastBuffer(this.toFastBuffer());
                                                }
                                            },
                                            {
                                                key: "cloneByHex",
                                                value: function cloneByHex() {
                                                    return new this.constructor().fromHex(this.toHex());
                                                }
                                            },
                                            {
                                                key: "cloneByString",
                                                value: function cloneByString() {
                                                    return new this.constructor().fromString(this.toString());
                                                }
                                            },
                                            {
                                                key: "cloneByJSON",
                                                value: function cloneByJSON() {
                                                    return new this.constructor().fromJSON(this.toJSON());
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromObject",
                                                value: function fromObject(t) {
                                                    return new this().fromObject(t);
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    return new this().fromBr(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromBr",
                                                value: function asyncFromBr(t) {
                                                    return new this().asyncFromBr(t);
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer() {
                                                    var _this26;
                                                    return (_this26 = new this()).fromBuffer.apply(_this26, arguments);
                                                }
                                            },
                                            {
                                                key: "asyncFromBuffer",
                                                value: function asyncFromBuffer(t) {
                                                    var _this27;
                                                    for(var _len28 = arguments.length, e = new Array(_len28 > 1 ? _len28 - 1 : 0), _key28 = 1; _key28 < _len28; _key28++)e[_key28 - 1] = arguments[_key28];
                                                    return (_this27 = new this()).asyncFromBuffer.apply(_this27, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "fromFastBuffer",
                                                value: function fromFastBuffer() {
                                                    var _this28;
                                                    return (_this28 = new this()).fromFastBuffer.apply(_this28, arguments);
                                                }
                                            },
                                            {
                                                key: "fromHex",
                                                value: function fromHex(t) {
                                                    var _this29;
                                                    for(var _len29 = arguments.length, e = new Array(_len29 > 1 ? _len29 - 1 : 0), _key29 = 1; _key29 < _len29; _key29++)e[_key29 - 1] = arguments[_key29];
                                                    return (_this29 = new this()).fromHex.apply(_this29, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "asyncFromHex",
                                                value: function asyncFromHex(t) {
                                                    var _this30;
                                                    for(var _len30 = arguments.length, e = new Array(_len30 > 1 ? _len30 - 1 : 0), _key30 = 1; _key30 < _len30; _key30++)e[_key30 - 1] = arguments[_key30];
                                                    return (_this30 = new this()).asyncFromHex.apply(_this30, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "fromFastHex",
                                                value: function fromFastHex(t) {
                                                    var _this31;
                                                    for(var _len31 = arguments.length, e = new Array(_len31 > 1 ? _len31 - 1 : 0), _key31 = 1; _key31 < _len31; _key31++)e[_key31 - 1] = arguments[_key31];
                                                    return (_this31 = new this()).fromFastHex.apply(_this31, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var _this32;
                                                    for(var _len32 = arguments.length, e = new Array(_len32 > 1 ? _len32 - 1 : 0), _key32 = 1; _key32 < _len32; _key32++)e[_key32 - 1] = arguments[_key32];
                                                    return (_this32 = new this()).fromString.apply(_this32, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "asyncFromString",
                                                value: function asyncFromString(t) {
                                                    var _this33;
                                                    for(var _len33 = arguments.length, e = new Array(_len33 > 1 ? _len33 - 1 : 0), _key33 = 1; _key33 < _len33; _key33++)e[_key33 - 1] = arguments[_key33];
                                                    return (_this33 = new this()).asyncFromString.apply(_this33, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    var _this34;
                                                    for(var _len34 = arguments.length, e = new Array(_len34 > 1 ? _len34 - 1 : 0), _key34 = 1; _key34 < _len34; _key34++)e[_key34 - 1] = arguments[_key34];
                                                    return (_this34 = new this()).fromJSON.apply(_this34, [
                                                        t
                                                    ].concat(e));
                                                }
                                            },
                                            {
                                                key: "asyncFromJSON",
                                                value: function asyncFromJSON(t) {
                                                    var _this35;
                                                    for(var _len35 = arguments.length, e = new Array(_len35 > 1 ? _len35 - 1 : 0), _key35 = 1; _key35 < _len35; _key35++)e[_key35 - 1] = arguments[_key35];
                                                    return (_this35 = new this()).asyncFromJSON.apply(_this35, [
                                                        t
                                                    ].concat(e));
                                                }
                                            }
                                        ]);
                                        return S;
                                    }();
                                    var _1 = /*#__PURE__*/ function(_S) {
                                        _inherits(_, _S);
                                        var _super38 = _createSuper(_);
                                        function _(t) {
                                            _classCallCheck2(this, _);
                                            return _super38.call(this, {
                                                buf: t
                                            });
                                        }
                                        _createClass2(_, [
                                            {
                                                key: "fromHex",
                                                value: function fromHex(t) {
                                                    return this.fromBuffer(Buffer.from(t, "hex"));
                                                }
                                            },
                                            {
                                                key: "toHex",
                                                value: function toHex() {
                                                    return this.toBuffer().toString("hex");
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    return this.buf = t, this;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var e = _.decode(t);
                                                    return this.buf = e, this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return this.buf;
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return _.encode(this.buf);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "encode",
                                                value: function encode(t) {
                                                    if (!Buffer.isBuffer(t)) throw new Error("Input should be a buffer");
                                                    return h1().encode(t);
                                                }
                                            },
                                            {
                                                key: "decode",
                                                value: function decode(t) {
                                                    if ("string" != typeof t) throw new Error("Input should be a string");
                                                    return Buffer.from(h1().decode(t));
                                                }
                                            }
                                        ]);
                                        return _;
                                    }(S1);
                                    var B = function B(t, e) {
                                        if (!Buffer.isBuffer(t) || !Buffer.isBuffer(e)) throw new Error("buf1 and buf2 must be buffers");
                                        if (t.length !== e.length) return !1;
                                        var r = 0;
                                        for(var _i25 = 0; _i25 < t.length; _i25++)r |= t[_i25] ^ e[_i25];
                                        return 0 === r;
                                    };
                                    var I1 = /*#__PURE__*/ function(_S2) {
                                        _inherits(I, _S2);
                                        var _super39 = _createSuper(I);
                                        function I(t, e, r) {
                                            _classCallCheck2(this, I);
                                            return _super39.call(this, {
                                                resbuf: t,
                                                isError: e,
                                                id: r
                                            });
                                        }
                                        _createClass2(I, [
                                            {
                                                key: "fromResult",
                                                value: function fromResult(t, e) {
                                                    return t.toFastBuffer ? this.resbuf = t.toFastBuffer() : Buffer.isBuffer(t) ? this.resbuf = t : this.resbuf = Buffer.from(JSON.stringify(t)), this.isError = !1, this.id = e, this;
                                                }
                                            },
                                            {
                                                key: "fromError",
                                                value: function fromError(t, e) {
                                                    return this.resbuf = Buffer.from(JSON.stringify(t.message)), this.isError = !0, this.id = e, this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    return t || (t = new y3()), t.writeVarIntNum(this.resbuf.length), t.write(this.resbuf), t.writeUInt8(Number(this.isError)), t.writeVarIntNum(this.id), t;
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    var e = t.readVarIntNum();
                                                    return this.resbuf = t.read(e), this.isError = Boolean(t.readUInt8()), this.id = t.readVarIntNum(), this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromResult",
                                                value: function fromResult(t, e) {
                                                    return new this().fromResult(t, e);
                                                }
                                            }
                                        ]);
                                        return I;
                                    }(S1);
                                    var O;
                                    var E1 = /*#__PURE__*/ function() {
                                        function E() {
                                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                                            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                                            var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Map();
                                            _classCallCheck2(this, E);
                                            this.nativeWorkers = t, this.lastid = e, this.incompconsteRes = r, this.promisemap = i;
                                        }
                                        _createClass2(E, [
                                            {
                                                key: "asyncObjectMethod",
                                                value: function asyncObjectMethod(t, e, r) {
                                                    var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.lastid + 1;
                                                    if (!r) throw new Error("must specify args");
                                                    var s = t[e].apply(t, _toConsumableArray(r));
                                                    return new I1().fromResult(s, i);
                                                }
                                            },
                                            {
                                                key: "asyncClassMethod",
                                                value: function asyncClassMethod(t, e, r) {
                                                    var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.lastid + 1;
                                                    if (!r) throw new Error("must specify args");
                                                    var s = t[e].apply(t, _toConsumableArray(r));
                                                    return new I1().fromResult(s, i);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "asyncObjectMethod",
                                                value: function asyncObjectMethod(t, e, r, i) {
                                                    return O || (O = new E()), O.asyncObjectMethod(t, e, r, i);
                                                }
                                            },
                                            {
                                                key: "asyncClassMethod",
                                                value: function asyncClassMethod(t, e, r, i) {
                                                    return O || (O = new E()), O.asyncClassMethod(t, e, r, i);
                                                }
                                            },
                                            {
                                                key: "endGlobalWorkers",
                                                value: function endGlobalWorkers() {
                                                    O && !process.browser && (O = void 0);
                                                }
                                            }
                                        ]);
                                        return E;
                                    }();
                                    var P1 = /*#__PURE__*/ _createClass2(function P() {
                                        _classCallCheck2(this, P);
                                    });
                                    P1.sha1 = function(t) {
                                        if (!Buffer.isBuffer(t)) throw new Error("sha1 hash must be of a buffer");
                                        var e = new (0, d3().sha1)().update(t).digest();
                                        return Buffer.from(e);
                                    }, P1.sha1.blockSize = 512, P1.asyncSha1 = /*#__PURE__*/ function() {
                                        var _ref18 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee80(t) {
                                            var e;
                                            return _regeneratorRuntime().wrap(function _callee80$(_context86) {
                                                while(true)switch(_context86.prev = _context86.next){
                                                    case 0:
                                                        e = [
                                                            t
                                                        ];
                                                        _context86.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha1", e);
                                                    case 3:
                                                        return _context86.abrupt("return", _context86.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context86.stop();
                                                }
                                            }, _callee80);
                                        }));
                                        return function(_x117) {
                                            return _ref18.apply(this, arguments);
                                        };
                                    }(), P1.sha256 = function(t) {
                                        if (!Buffer.isBuffer(t)) throw new Error("sha256 hash must be of a buffer");
                                        var e = new (0, d3().sha256)().update(t).digest();
                                        return Buffer.from(e);
                                    }, P1.sha256.blockSize = 512, P1.asyncSha256 = /*#__PURE__*/ function() {
                                        var _ref19 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee81(t) {
                                            var e;
                                            return _regeneratorRuntime().wrap(function _callee81$(_context87) {
                                                while(true)switch(_context87.prev = _context87.next){
                                                    case 0:
                                                        e = [
                                                            t
                                                        ];
                                                        _context87.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha256", e);
                                                    case 3:
                                                        return _context87.abrupt("return", _context87.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context87.stop();
                                                }
                                            }, _callee81);
                                        }));
                                        return function(_x118) {
                                            return _ref19.apply(this, arguments);
                                        };
                                    }(), P1.sha256Sha256 = function(t) {
                                        try {
                                            return P1.sha256(P1.sha256(t));
                                        } catch (t6) {
                                            throw new Error("sha256Sha256 hash must be of a buffer: " + t6);
                                        }
                                    }, P1.asyncSha256Sha256 = /*#__PURE__*/ function() {
                                        var _ref20 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee82(t) {
                                            var e;
                                            return _regeneratorRuntime().wrap(function _callee82$(_context88) {
                                                while(true)switch(_context88.prev = _context88.next){
                                                    case 0:
                                                        e = [
                                                            t
                                                        ];
                                                        _context88.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha256Sha256", e);
                                                    case 3:
                                                        return _context88.abrupt("return", _context88.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context88.stop();
                                                }
                                            }, _callee82);
                                        }));
                                        return function(_x119) {
                                            return _ref20.apply(this, arguments);
                                        };
                                    }(), P1.ripemd160 = function(t) {
                                        if (!Buffer.isBuffer(t)) throw new Error("ripemd160 hash must be of a buffer");
                                        var e = new (0, d3().ripemd160)().update(t).digest();
                                        return Buffer.from(e);
                                    }, P1.asyncRipemd160 = /*#__PURE__*/ function() {
                                        var _ref21 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee83(t) {
                                            var e;
                                            return _regeneratorRuntime().wrap(function _callee83$(_context89) {
                                                while(true)switch(_context89.prev = _context89.next){
                                                    case 0:
                                                        e = [
                                                            t
                                                        ];
                                                        _context89.next = 3;
                                                        return E1.asyncClassMethod(P1, "ripemd160", e);
                                                    case 3:
                                                        return _context89.abrupt("return", _context89.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context89.stop();
                                                }
                                            }, _callee83);
                                        }));
                                        return function(_x120) {
                                            return _ref21.apply(this, arguments);
                                        };
                                    }(), P1.sha256Ripemd160 = function(t) {
                                        try {
                                            return P1.ripemd160(P1.sha256(t));
                                        } catch (t7) {
                                            throw new Error("sha256Ripemd160 hash must be of a buffer: " + t7);
                                        }
                                    }, P1.asyncSha256Ripemd160 = /*#__PURE__*/ function() {
                                        var _ref22 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee84(t) {
                                            var e;
                                            return _regeneratorRuntime().wrap(function _callee84$(_context90) {
                                                while(true)switch(_context90.prev = _context90.next){
                                                    case 0:
                                                        e = [
                                                            t
                                                        ];
                                                        _context90.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha256Ripemd160", e);
                                                    case 3:
                                                        return _context90.abrupt("return", _context90.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context90.stop();
                                                }
                                            }, _callee84);
                                        }));
                                        return function(_x121) {
                                            return _ref22.apply(this, arguments);
                                        };
                                    }(), P1.sha512 = function(t) {
                                        if (!Buffer.isBuffer(t)) throw new Error("sha512 hash must be of a buffer");
                                        var e = new (0, d3().sha512)().update(t).digest();
                                        return Buffer.from(e);
                                    }, P1.asyncSha512 = /*#__PURE__*/ function() {
                                        var _ref23 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee85(t) {
                                            var e;
                                            return _regeneratorRuntime().wrap(function _callee85$(_context91) {
                                                while(true)switch(_context91.prev = _context91.next){
                                                    case 0:
                                                        e = [
                                                            t
                                                        ];
                                                        _context91.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha512", e);
                                                    case 3:
                                                        return _context91.abrupt("return", _context91.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context91.stop();
                                                }
                                            }, _callee85);
                                        }));
                                        return function(_x122) {
                                            return _ref23.apply(this, arguments);
                                        };
                                    }(), P1.sha512.blockSize = 1024, P1.hmac = function(t, e, r) {
                                        if ("sha1" !== t && "sha256" !== t && "sha512" !== t) throw new Error("invalid choice of hash function");
                                        var i = P1[t];
                                        if (!Buffer.isBuffer(e) || !Buffer.isBuffer(r)) throw new Error("data and key must be buffers");
                                        var s = i.blockSize / 8;
                                        if (r.length > s && (r = i(r)), r.length < s) {
                                            var _t6 = Buffer.alloc(s);
                                            _t6.fill(0, r.length), r.copy(_t6), r = _t6;
                                        }
                                        var n = Buffer.alloc(s), a = Buffer.alloc(s);
                                        for(var _t7 = 0; _t7 < s; _t7++)n[_t7] = 92 ^ r[_t7], a[_t7] = 54 ^ r[_t7];
                                        return i(Buffer.concat([
                                            n,
                                            i(Buffer.concat([
                                                a,
                                                e
                                            ]))
                                        ]));
                                    }, P1.sha1Hmac = function(t, e) {
                                        return P1.hmac("sha1", t, e);
                                    }, P1.asyncSha1Hmac = /*#__PURE__*/ function() {
                                        var _ref24 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee86(t, e) {
                                            var r;
                                            return _regeneratorRuntime().wrap(function _callee86$(_context92) {
                                                while(true)switch(_context92.prev = _context92.next){
                                                    case 0:
                                                        r = [
                                                            t,
                                                            e
                                                        ];
                                                        _context92.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha1Hmac", r);
                                                    case 3:
                                                        return _context92.abrupt("return", _context92.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context92.stop();
                                                }
                                            }, _callee86);
                                        }));
                                        return function(_x123, _x124) {
                                            return _ref24.apply(this, arguments);
                                        };
                                    }(), P1.sha1Hmac.bitsize = 160, P1.sha256Hmac = function(t, e) {
                                        return P1.hmac("sha256", t, e);
                                    }, P1.asyncSha256Hmac = /*#__PURE__*/ function() {
                                        var _ref25 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee87(t, e) {
                                            var r;
                                            return _regeneratorRuntime().wrap(function _callee87$(_context93) {
                                                while(true)switch(_context93.prev = _context93.next){
                                                    case 0:
                                                        r = [
                                                            t,
                                                            e
                                                        ];
                                                        _context93.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha256Hmac", r);
                                                    case 3:
                                                        return _context93.abrupt("return", _context93.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context93.stop();
                                                }
                                            }, _callee87);
                                        }));
                                        return function(_x125, _x126) {
                                            return _ref25.apply(this, arguments);
                                        };
                                    }(), P1.sha256Hmac.bitsize = 256, P1.sha512Hmac = function(t, e) {
                                        return P1.hmac("sha512", t, e);
                                    }, P1.asyncSha512Hmac = /*#__PURE__*/ function() {
                                        var _ref26 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee88(t, e) {
                                            var r;
                                            return _regeneratorRuntime().wrap(function _callee88$(_context94) {
                                                while(true)switch(_context94.prev = _context94.next){
                                                    case 0:
                                                        r = [
                                                            t,
                                                            e
                                                        ];
                                                        _context94.next = 3;
                                                        return E1.asyncClassMethod(P1, "sha512Hmac", r);
                                                    case 3:
                                                        return _context94.abrupt("return", _context94.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context94.stop();
                                                }
                                            }, _callee88);
                                        }));
                                        return function(_x127, _x128) {
                                            return _ref26.apply(this, arguments);
                                        };
                                    }(), P1.sha512Hmac.bitsize = 512;
                                    var k4 = /*#__PURE__*/ function(_S3) {
                                        _inherits(k, _S3);
                                        var _super40 = _createSuper(k);
                                        function k(t) {
                                            _classCallCheck2(this, k);
                                            return _super40.call(this, {
                                                buf: t
                                            });
                                        }
                                        _createClass2(k, [
                                            {
                                                key: "fromHex",
                                                value: function fromHex(t) {
                                                    return this.fromBuffer(Buffer.from(t, "hex"));
                                                }
                                            },
                                            {
                                                key: "toHex",
                                                value: function toHex() {
                                                    return this.toBuffer().toString("hex");
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    return this.buf = t, this;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var e = k.decode(t);
                                                    return this.buf = e, this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return this.buf;
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return k.encode(this.buf);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "decode",
                                                value: function decode(t) {
                                                    if ("string" != typeof t) throw new Error("Input must be a string");
                                                    var e = _1.decode(t);
                                                    if (e.length < 4) throw new Error("Input string too short");
                                                    var r = e.slice(0, -4), i = e.slice(-4), s = P1.sha256Sha256(r).slice(0, 4);
                                                    if (!B(i, s)) throw new Error("Checksum mismatch");
                                                    return r;
                                                }
                                            },
                                            {
                                                key: "encode",
                                                value: function encode(t) {
                                                    if (!Buffer.isBuffer(t)) throw new Error("Input must be a buffer");
                                                    var e = Buffer.alloc(t.length + 4), r = P1.sha256Sha256(t);
                                                    return t.copy(e), r.copy(e, t.length), _1.encode(e);
                                                }
                                            }
                                        ]);
                                        return k;
                                    }(S1);
                                    var N1 = /*#__PURE__*/ function() {
                                        function N(t) {
                                            _classCallCheck2(this, N);
                                            this.keyDefined = function(e) {
                                                return e in t;
                                            }, this.getValue = function(e) {
                                                return t[e];
                                            };
                                        }
                                        _createClass2(N, [
                                            {
                                                key: "get",
                                                value: function get(t) {
                                                    if (this.keyDefined(t)) return this.getValue(t);
                                                    throw new Error("Unknown configuration: ".concat(t));
                                                }
                                            }
                                        ]);
                                        return N;
                                    }();
                                    var A = new /*#__PURE__*/ (function() {
                                        function _class9() {
                                            _classCallCheck2(this, _class9);
                                            this.variables = {};
                                        }
                                        _createClass2(_class9, [
                                            {
                                                key: "build",
                                                value: function build() {
                                                    return new N1(this.variables);
                                                }
                                            },
                                            {
                                                key: "addValue",
                                                value: function addValue(t, e) {
                                                    if (void 0 === e) throw new Error('Failed to add "'.concat(t, '" property. The value cannot be undefined'));
                                                    if (t in this.variables) throw new Error('"'.concat(t, '" already has a value defined.'));
                                                    return this.variables[t] = e, this;
                                                }
                                            },
                                            {
                                                key: "addValueWithDefault",
                                                value: function addValueWithDefault(t, e, r) {
                                                    if (void 0 === r) throw new Error('Failed to add "'.concat(t, '" property. Default value cannot be undefined'));
                                                    return this.addValue(t, void 0 === e ? r : e);
                                                }
                                            }
                                        ]);
                                        return _class9;
                                    }())().addValue("NETWORK", process.env.NETWORK || "mainnet").build(), x = {
                                        Mainnet: {
                                            MaxSize: 33554432,
                                            Port: 8333,
                                            Address: {
                                                pubKeyHash: 0,
                                                payToScriptHash: 5
                                            },
                                            Bip32: {
                                                pubKey: 76067358,
                                                privKey: 76066276
                                            },
                                            Block: {
                                                maxNBits: 486604799,
                                                magicNum: 3823236072
                                            },
                                            Msg: {
                                                magicNum: 3823236072,
                                                versionBytesNum: 70015
                                            },
                                            PrivKey: {
                                                versionByteNum: 128
                                            },
                                            TxBuilder: {
                                                dust: 546,
                                                feePerKbNum: 500
                                            },
                                            Workers: {
                                                timeout: 6e4
                                            }
                                        }
                                    };
                                    if (x.Testnet = Object.assign({}, x.Mainnet, {
                                        Port: 18333,
                                        Address: {
                                            pubKeyHash: 111,
                                            payToScriptHash: 196
                                        },
                                        Bip32: {
                                            pubKey: 70617039,
                                            privKey: 70615956
                                        },
                                        Block: {
                                            maxNBits: 486604799,
                                            magicNum: 4108710900
                                        },
                                        Msg: {
                                            magicNum: 4108710900,
                                            versionBytesNum: 70015
                                        },
                                        PrivKey: {
                                            versionByteNum: 239
                                        }
                                    }), x.Regtest = Object.assign({}, x.Mainnet, {
                                        Port: 18444,
                                        Address: {
                                            pubKeyHash: 111,
                                            payToScriptHash: 196
                                        },
                                        Bip32: {
                                            pubKey: 70617039,
                                            privKey: 70615956
                                        },
                                        Block: {
                                            maxNBits: 545259519,
                                            magicNum: 3669344250
                                        },
                                        Msg: {
                                            magicNum: 3669344250,
                                            versionBytesNum: 70015
                                        },
                                        PrivKey: {
                                            versionByteNum: 239
                                        }
                                    }), x.STN = Object.assign({}, x.Mainnet, {
                                        Port: 9333,
                                        Address: {
                                            pubKeyHash: 111,
                                            payToScriptHash: 196
                                        },
                                        Bip32: {
                                            pubKey: 70617039,
                                            privKey: 70615956
                                        },
                                        Block: {
                                            maxNBits: 486604799,
                                            magicNum: 4224632057
                                        },
                                        Msg: {
                                            magicNum: 4224632057,
                                            versionBytesNum: 70015
                                        },
                                        PrivKey: {
                                            versionByteNum: 239
                                        }
                                    }), "testnet" === A.get("NETWORK")) x.Default = Object.assign({}, x.Testnet);
                                    else if ("mainnet" === A.get("NETWORK")) x.Default = Object.assign({}, x.Mainnet);
                                    else if ("regtest" === A.get("NETWORK")) x.Default = Object.assign({}, x.Regtest);
                                    else {
                                        if ("stn" !== A.get("NETWORK")) throw new Error("must set network in environment variable - mainnet, testnet, regtest or stn?, received ".concat(A.get("NETWORK")));
                                        x.Default = Object.assign({}, x.STN);
                                    }
                                    var R = function R(t) {
                                        return x.Mainnet.Msg.magicNum === t ? x.Mainnet : x.Testnet.Msg.magicNum === t ? x.Testnet : x.Regtest.Msg.magicNum === t ? x.Regtest : x.STN.Msg.magicNum === t ? x.STN : x.Default;
                                    }, M = {
                                        OP_FALSE: 0,
                                        OP_0: 0,
                                        OP_PUSHDATA1: 76,
                                        OP_PUSHDATA2: 77,
                                        OP_PUSHDATA4: 78,
                                        OP_1NEGATE: 79,
                                        OP_RESERVED: 80,
                                        OP_TRUE: 81,
                                        OP_1: 81,
                                        OP_2: 82,
                                        OP_3: 83,
                                        OP_4: 84,
                                        OP_5: 85,
                                        OP_6: 86,
                                        OP_7: 87,
                                        OP_8: 88,
                                        OP_9: 89,
                                        OP_10: 90,
                                        OP_11: 91,
                                        OP_12: 92,
                                        OP_13: 93,
                                        OP_14: 94,
                                        OP_15: 95,
                                        OP_16: 96,
                                        OP_NOP: 97,
                                        OP_VER: 98,
                                        OP_IF: 99,
                                        OP_NOTIF: 100,
                                        OP_VERIF: 101,
                                        OP_VERNOTIF: 102,
                                        OP_ELSE: 103,
                                        OP_ENDIF: 104,
                                        OP_VERIFY: 105,
                                        OP_RETURN: 106,
                                        OP_TOALTSTACK: 107,
                                        OP_FROMALTSTACK: 108,
                                        OP_2DROP: 109,
                                        OP_2DUP: 110,
                                        OP_3DUP: 111,
                                        OP_2OVER: 112,
                                        OP_2ROT: 113,
                                        OP_2SWAP: 114,
                                        OP_IFDUP: 115,
                                        OP_DEPTH: 116,
                                        OP_DROP: 117,
                                        OP_DUP: 118,
                                        OP_NIP: 119,
                                        OP_OVER: 120,
                                        OP_PICK: 121,
                                        OP_ROLL: 122,
                                        OP_ROT: 123,
                                        OP_SWAP: 124,
                                        OP_TUCK: 125,
                                        OP_CAT: 126,
                                        OP_SUBSTR: 127,
                                        OP_SPLIT: 127,
                                        OP_LEFT: 128,
                                        OP_NUM2BIN: 128,
                                        OP_RIGHT: 129,
                                        OP_BIN2NUM: 129,
                                        OP_SIZE: 130,
                                        OP_INVERT: 131,
                                        OP_AND: 132,
                                        OP_OR: 133,
                                        OP_XOR: 134,
                                        OP_EQUAL: 135,
                                        OP_EQUALVERIFY: 136,
                                        OP_RESERVED1: 137,
                                        OP_RESERVED2: 138,
                                        OP_1ADD: 139,
                                        OP_1SUB: 140,
                                        OP_2MUL: 141,
                                        OP_2DIV: 142,
                                        OP_NEGATE: 143,
                                        OP_ABS: 144,
                                        OP_NOT: 145,
                                        OP_0NOTEQUAL: 146,
                                        OP_ADD: 147,
                                        OP_SUB: 148,
                                        OP_MUL: 149,
                                        OP_DIV: 150,
                                        OP_MOD: 151,
                                        OP_LSHIFT: 152,
                                        OP_RSHIFT: 153,
                                        OP_BOOLAND: 154,
                                        OP_BOOLOR: 155,
                                        OP_NUMEQUAL: 156,
                                        OP_NUMEQUALVERIFY: 157,
                                        OP_NUMNOTEQUAL: 158,
                                        OP_LESSTHAN: 159,
                                        OP_GREATERTHAN: 160,
                                        OP_LESSTHANOREQUAL: 161,
                                        OP_GREATERTHANOREQUAL: 162,
                                        OP_MIN: 163,
                                        OP_MAX: 164,
                                        OP_WITHIN: 165,
                                        OP_RIPEMD160: 166,
                                        OP_SHA1: 167,
                                        OP_SHA256: 168,
                                        OP_HASH160: 169,
                                        OP_HASH256: 170,
                                        OP_CODESEPARATOR: 171,
                                        OP_CHECKSIG: 172,
                                        OP_CHECKSIGVERIFY: 173,
                                        OP_CHECKMULTISIG: 174,
                                        OP_CHECKMULTISIGVERIFY: 175,
                                        OP_NOP1: 176,
                                        OP_NOP2: 177,
                                        OP_CHECKLOCKTIMEVERIFY: 177,
                                        OP_NOP3: 178,
                                        OP_CHECKSEQUENCEVERIFY: 178,
                                        OP_NOP4: 179,
                                        OP_NOP5: 180,
                                        OP_NOP6: 181,
                                        OP_NOP7: 182,
                                        OP_NOP8: 183,
                                        OP_NOP9: 184,
                                        OP_NOP10: 185,
                                        OP_SMALLDATA: 249,
                                        OP_SMALLINTEGER: 250,
                                        OP_PUBKEYS: 251,
                                        OP_PUBKEYHASH: 253,
                                        OP_PUBKEY: 254,
                                        OP_INVALIDOPCODE: 255
                                    };
                                    var T3 = /*#__PURE__*/ function(_S4) {
                                        _inherits(T, _S4);
                                        var _super41 = _createSuper(T);
                                        function T(t) {
                                            _classCallCheck2(this, T);
                                            return _super41.call(this, {
                                                num: t
                                            });
                                        }
                                        _createClass2(T, [
                                            {
                                                key: "fromNumber",
                                                value: function fromNumber(t) {
                                                    return this.num = t, this;
                                                }
                                            },
                                            {
                                                key: "toNumber",
                                                value: function toNumber() {
                                                    return this.num;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var e = M[t];
                                                    if (void 0 === e) throw new Error("Invalid opCodeStr");
                                                    return this.num = e, this;
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    var t = T.str[this.num];
                                                    if (void 0 === t) {
                                                        if (this.num > 0 && this.num < T.OP_PUSHDATA1) return this.num.toString();
                                                        throw new Error("OpCode does not have a string representation");
                                                    }
                                                    return t;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromNumber",
                                                value: function fromNumber(t) {
                                                    return new this().fromNumber(t);
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return new this().fromString(t);
                                                }
                                            }
                                        ]);
                                        return T;
                                    }(S1);
                                    T3.str = {};
                                    for(var _t8 in M)T3[_t8] = M[_t8], Object.prototype.hasOwnProperty.call(M, _t8) && (T3.str[M[_t8]] = _t8);
                                    var C = c3().curves.secp256k1, H = C.curve.point().constructor;
                                    var L1 = /*#__PURE__*/ function(_H) {
                                        _inherits(L, _H);
                                        var _super42 = _createSuper(L);
                                        function L(t, e, r) {
                                            _classCallCheck2(this, L);
                                            return _super42.call(this, C.curve, t, e, r);
                                        }
                                        _createClass2(L, [
                                            {
                                                key: "copyFrom",
                                                value: function copyFrom(t) {
                                                    if (!(t instanceof H)) throw new Error("point should be an external point");
                                                    return Object.keys(t).forEach((function(e) {
                                                        this[e] = t[e];
                                                    }).bind(this)), this;
                                                }
                                            },
                                            {
                                                key: "add",
                                                value: function add(t) {
                                                    return t = H.prototype.add.call(this, t), Object.create(L.prototype).copyFrom(t);
                                                }
                                            },
                                            {
                                                key: "mul",
                                                value: function mul(t) {
                                                    if (!t.lt(L.getN())) throw new Error("point mul out of range");
                                                    var e = H.prototype.mul.call(this, t);
                                                    return Object.create(L.prototype).copyFrom(e);
                                                }
                                            },
                                            {
                                                key: "mulAdd",
                                                value: function mulAdd(t, e, r) {
                                                    var i = H.prototype.mulAdd.call(this, t, e, r);
                                                    return (e = Object.create(L.prototype)).copyFrom(i);
                                                }
                                            },
                                            {
                                                key: "getX",
                                                value: function getX() {
                                                    var t = H.prototype.getX.call(this), e = Object.create(p3.prototype);
                                                    return t.copy(e), e;
                                                }
                                            },
                                            {
                                                key: "getY",
                                                value: function getY() {
                                                    var t = H.prototype.getY.call(this), e = Object.create(p3.prototype);
                                                    return t.copy(e), e;
                                                }
                                            },
                                            {
                                                key: "fromX",
                                                value: function fromX(t, e) {
                                                    var r = L.fromX(t, e);
                                                    return this.copyFrom(r);
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return {
                                                        x: this.getX().toString(),
                                                        y: this.getY().toString()
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    var e = new p3().fromString(t.x), r = new p3().fromString(t.y), i = new L(e, r);
                                                    return this.copyFrom(i);
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return JSON.stringify(this.toJSON());
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var e = JSON.parse(t), r = new L().fromJSON(e);
                                                    return this.copyFrom(r);
                                                }
                                            },
                                            {
                                                key: "validate",
                                                value: function validate() {
                                                    if (0 !== L.fromX(this.getY().isOdd(), this.getX()).getY().cmp(this.getY())) throw new Error("Invalid y value of public key");
                                                    if (!(this.getX().gt(-1) && this.getX().lt(L.getN()) && this.getY().gt(-1) && this.getY().lt(L.getN()))) throw new Error("Point does not lie on the curve");
                                                    return this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromX",
                                                value: function fromX(t, e) {
                                                    var r = C.curve.pointFromX(e, t);
                                                    return Object.create(L.prototype).copyFrom(r);
                                                }
                                            },
                                            {
                                                key: "getG",
                                                value: function getG() {
                                                    var t = C.curve.g;
                                                    return Object.create(L.prototype).copyFrom(t);
                                                }
                                            },
                                            {
                                                key: "getN",
                                                value: function getN() {
                                                    return new p3(C.curve.n.toArray());
                                                }
                                            }
                                        ]);
                                        return L;
                                    }(H);
                                    var K1 = /*#__PURE__*/ function(_S5) {
                                        _inherits(K, _S5);
                                        var _super43 = _createSuper(K);
                                        function K(t, e) {
                                            _classCallCheck2(this, K);
                                            return _super43.call(this, {
                                                point: t,
                                                compressed: e
                                            });
                                        }
                                        _createClass2(K, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromFastHex(t), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return this.toFastHex();
                                                }
                                            },
                                            {
                                                key: "fromPrivKey",
                                                value: function fromPrivKey(t) {
                                                    return this.fromObject({
                                                        point: L1.getG().mul(t.bn),
                                                        compressed: t.compressed
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "asyncFromPrivKey",
                                                value: function() {
                                                    var _asyncFromPrivKey4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee89(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee89$(_context95) {
                                                            while(true)switch(_context95.prev = _context95.next){
                                                                case 0:
                                                                    _context95.next = 2;
                                                                    return E1.asyncObjectMethod(this, "fromPrivKey", [
                                                                        t
                                                                    ]);
                                                                case 2:
                                                                    e = _context95.sent;
                                                                    return _context95.abrupt("return", this.fromFastBuffer(e.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context95.stop();
                                                            }
                                                        }, _callee89, this);
                                                    }));
                                                    function asyncFromPrivKey(_x129) {
                                                        return _asyncFromPrivKey4.apply(this, arguments);
                                                    }
                                                    return asyncFromPrivKey;
                                                }()
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t, e) {
                                                    return this.fromDer(t, e);
                                                }
                                            },
                                            {
                                                key: "asyncFromBuffer",
                                                value: function() {
                                                    var _asyncFromBuffer2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee90(t, e) {
                                                        var r, i;
                                                        return _regeneratorRuntime().wrap(function _callee90$(_context96) {
                                                            while(true)switch(_context96.prev = _context96.next){
                                                                case 0:
                                                                    r = [
                                                                        t,
                                                                        e
                                                                    ];
                                                                    _context96.next = 3;
                                                                    return E1.asyncObjectMethod(this, "fromBuffer", r);
                                                                case 3:
                                                                    i = _context96.sent;
                                                                    return _context96.abrupt("return", this.fromFastBuffer(i.resbuf));
                                                                case 5:
                                                                case "end":
                                                                    return _context96.stop();
                                                            }
                                                        }, _callee90, this);
                                                    }));
                                                    function asyncFromBuffer(_x130, _x131) {
                                                        return _asyncFromBuffer2.apply(this, arguments);
                                                    }
                                                    return asyncFromBuffer;
                                                }()
                                            },
                                            {
                                                key: "fromFastBuffer",
                                                value: function fromFastBuffer(t) {
                                                    if (0 === t.length) return this;
                                                    var e = Boolean(t[0]);
                                                    return t = t.slice(1), this.fromDer(t), this.compressed = e, this;
                                                }
                                            },
                                            {
                                                key: "fromDer",
                                                value: function fromDer(t, e) {
                                                    if (e = void 0 === e, 4 !== t[0] && (e || 6 !== t[0] && 7 !== t[0])) {
                                                        if (3 === t[0]) {
                                                            var _e6 = new p3(t.slice(1));
                                                            this.fromX(!0, _e6), this.compressed = !0;
                                                        } else {
                                                            if (2 !== t[0]) throw new Error("Invalid DER format pubKey");
                                                            var _e7 = new p3(t.slice(1));
                                                            this.fromX(!1, _e7), this.compressed = !0;
                                                        }
                                                    } else {
                                                        var _e8 = t.slice(1, 33), _r6 = t.slice(33, 65);
                                                        if (32 !== _e8.length || 32 !== _r6.length || 65 !== t.length) throw new Error("LEngth of x and y must be 32 bytes");
                                                        var _i26 = new p3(_e8), _s2 = new p3(_r6);
                                                        this.point = new L1(_i26, _s2), this.compressed = !1;
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return this.fromDer(Buffer.from(t, "hex")), this;
                                                }
                                            },
                                            {
                                                key: "fromX",
                                                value: function fromX(t, e) {
                                                    if ("boolean" != typeof t) throw new Error("Must specify whether y is odd or not (true or false)");
                                                    return this.point = L1.fromX(t, e), this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    var t = void 0 === this.compressed || this.compressed;
                                                    return this.toDer(t);
                                                }
                                            },
                                            {
                                                key: "toFastBuffer",
                                                value: function toFastBuffer() {
                                                    if (!this.point) return Buffer.alloc(0);
                                                    var t = new y3(), e = void 0 === this.compressed || Boolean(this.compressed);
                                                    return t.writeUInt8(Number(e)), t.write(this.toDer(!1)), t.toBuffer();
                                                }
                                            },
                                            {
                                                key: "toDer",
                                                value: function toDer(t) {
                                                    if ("boolean" != typeof (t = void 0 === t ? this.compressed : t)) throw new Error("Must specify whether the public key is compressed or not (true or false)");
                                                    var e = this.point.getX(), r = this.point.getY(), i = e.toBuffer({
                                                        size: 32
                                                    }), s = r.toBuffer({
                                                        size: 32
                                                    });
                                                    var n;
                                                    return t ? (n = s[s.length - 1] % 2 ? Buffer.from([
                                                        3
                                                    ]) : Buffer.from([
                                                        2
                                                    ]), Buffer.concat([
                                                        n,
                                                        i
                                                    ])) : (n = Buffer.from([
                                                        4
                                                    ]), Buffer.concat([
                                                        n,
                                                        i,
                                                        s
                                                    ]));
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    var t = void 0 === this.compressed || this.compressed;
                                                    return this.toDer(t).toString("hex");
                                                }
                                            },
                                            {
                                                key: "validate",
                                                value: function validate() {
                                                    if (this.point.isInfinity()) throw new Error("point: Point cannot be equal to Infinity");
                                                    if (this.point.eq(new L1(new p3(0), new p3(0)))) throw new Error("point: Point cannot be equal to 0, 0");
                                                    return this.point.validate(), this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromPrivKey",
                                                value: function fromPrivKey(t) {
                                                    return new this().fromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromPrivKey",
                                                value: function asyncFromPrivKey(t) {
                                                    return new this().asyncFromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "fromDer",
                                                value: function fromDer(t, e) {
                                                    return new this().fromDer(t, e);
                                                }
                                            },
                                            {
                                                key: "fromX",
                                                value: function fromX(t, e) {
                                                    return new this().fromX(t, e);
                                                }
                                            },
                                            {
                                                key: "isCompressedOrUncompressed",
                                                value: function isCompressedOrUncompressed(t) {
                                                    if (t.length < 33) return !1;
                                                    if (4 === t[0]) {
                                                        if (65 !== t.length) return !1;
                                                    } else {
                                                        if (2 !== t[0] && 3 !== t[0]) return !1;
                                                        if (33 !== t.length) return !1;
                                                    }
                                                    return !0;
                                                }
                                            }
                                        ]);
                                        return K;
                                    }(S1);
                                    var F = r4(353), U = r4.n(F);
                                    var D1 = /*#__PURE__*/ _createClass2(function D() {
                                        _classCallCheck2(this, D);
                                    });
                                    D1.getRandomBuffer = function(t) {
                                        return U()(t);
                                    };
                                    var V1 = /*#__PURE__*/ function(_S6) {
                                        _inherits(V, _S6);
                                        var _super44 = _createSuper(V);
                                        function V(t, e) {
                                            var _this36;
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                                            _classCallCheck2(this, V);
                                            _this36 = _super44.call(this, {
                                                bn: t,
                                                compressed: e
                                            }), r = r || x.Default.PrivKey, _this36.Constants = r;
                                            return _this36;
                                        }
                                        _createClass2(V, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromHex(t), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return this.toHex();
                                                }
                                            },
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    var t, e, r;
                                                    do t = D1.getRandomBuffer(32), e = new p3().fromBuffer(t), r = e.lt(L1.getN());
                                                    while (!r);
                                                    return this.fromObject({
                                                        bn: e,
                                                        compressed: !0
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    var t = this.compressed;
                                                    void 0 === t && (t = !0);
                                                    var e = this.bn.toBuffer({
                                                        size: 32
                                                    });
                                                    var r;
                                                    return r = t ? Buffer.concat([
                                                        Buffer.from([
                                                            this.Constants.versionByteNum
                                                        ]),
                                                        e,
                                                        Buffer.from([
                                                            1
                                                        ])
                                                    ]) : Buffer.concat([
                                                        Buffer.from([
                                                            this.Constants.versionByteNum
                                                        ]),
                                                        e
                                                    ]), r;
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    if (34 === t.length && 1 === t[33]) this.compressed = !0;
                                                    else {
                                                        if (33 !== t.length) throw new Error("Length of privKey buffer must be 33 (uncompressed pubKey) or 34 (compressed pubKey)");
                                                        this.compressed = !1;
                                                    }
                                                    if (t[0] !== this.Constants.versionByteNum) throw new Error("Invalid versionByteNum byte");
                                                    return this.fromBn(new p3().fromBuffer(t.slice(1, 33)));
                                                }
                                            },
                                            {
                                                key: "toBn",
                                                value: function toBn() {
                                                    return this.bn;
                                                }
                                            },
                                            {
                                                key: "fromBn",
                                                value: function fromBn(t) {
                                                    return this.bn = t, this;
                                                }
                                            },
                                            {
                                                key: "validate",
                                                value: function validate() {
                                                    if (!this.bn.lt(L1.getN())) throw new Error("Number must be less than N");
                                                    if ("boolean" != typeof this.compressed) throw new Error("Must specify whether the corresponding public key is compressed or not (true or false)");
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "toWif",
                                                value: function toWif() {
                                                    return k4.encode(this.toBuffer());
                                                }
                                            },
                                            {
                                                key: "fromWif",
                                                value: function fromWif(t) {
                                                    return this.fromBuffer(k4.decode(t));
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return this.toWif();
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return this.fromWif(t);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    return new this().fromRandom();
                                                }
                                            },
                                            {
                                                key: "fromBn",
                                                value: function fromBn(t) {
                                                    return new this().fromBn(t);
                                                }
                                            },
                                            {
                                                key: "fromWif",
                                                value: function fromWif(t) {
                                                    return new this().fromWif(t);
                                                }
                                            }
                                        ]);
                                        return V;
                                    }(S1);
                                    V1.Mainnet = /*#__PURE__*/ function(_V) {
                                        _inherits(_class10, _V);
                                        var _super45 = _createSuper(_class10);
                                        function _class10(t, e) {
                                            _classCallCheck2(this, _class10);
                                            return _super45.call(this, t, e, x.Mainnet.PrivKey);
                                        }
                                        return _createClass2(_class10);
                                    }(V1), V1.Testnet = /*#__PURE__*/ function(_V2) {
                                        _inherits(_class11, _V2);
                                        var _super46 = _createSuper(_class11);
                                        function _class11(t, e) {
                                            _classCallCheck2(this, _class11);
                                            return _super46.call(this, t, e, x.Testnet.PrivKey);
                                        }
                                        return _createClass2(_class11);
                                    }(V1);
                                    var j2 = /*#__PURE__*/ function(_S7) {
                                        _inherits(j, _S7);
                                        var _super47 = _createSuper(j);
                                        function j(t, e, r, i, s) {
                                            _classCallCheck2(this, j);
                                            return _super47.call(this, {
                                                r: t,
                                                s: e,
                                                nHashType: r,
                                                recovery: i,
                                                compressed: s
                                            });
                                        }
                                        _createClass2(j, [
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    try {
                                                        return this.fromDer(t, !0);
                                                    } catch (t8) {}
                                                    try {
                                                        return this.fromCompact(t);
                                                    } catch (t9) {}
                                                    return this.fromTxFormat(t);
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return void 0 !== this.nHashType ? this.toTxFormat() : void 0 !== this.recovery ? this.toCompact() : this.toDer();
                                                }
                                            },
                                            {
                                                key: "fromCompact",
                                                value: function fromCompact(t) {
                                                    var e = !0, r = t.slice(0, 1)[0] - 27 - 4;
                                                    if (r < 0 && (e = !1, r += 4), 0 !== r && 1 !== r && 2 !== r && 3 !== r) throw new Error("i must be 0, 1, 2, or 3");
                                                    this.compressed = e, this.recovery = r;
                                                    var i = t.slice(1);
                                                    return this.fromRS(i), this;
                                                }
                                            },
                                            {
                                                key: "fromRS",
                                                value: function fromRS(t) {
                                                    var e = t.slice(0, 32), r = t.slice(32, 64);
                                                    if (32 !== e.length) throw new Error("r must be 32 bytes");
                                                    if (32 !== r.length || t.length > 64) throw new Error("s must be 32 bytes");
                                                    return this.r = new p3().fromBuffer(e), this.s = new p3().fromBuffer(r), this;
                                                }
                                            },
                                            {
                                                key: "fromDer",
                                                value: function fromDer(t, e) {
                                                    var r = j.parseDer(t, e);
                                                    return this.r = r.r, this.s = r.s, this;
                                                }
                                            },
                                            {
                                                key: "fromTxFormat",
                                                value: function fromTxFormat(t) {
                                                    if (0 === t.length) return this.r = new p3(1), this.s = new p3(1), this.nHashType = 1, this;
                                                    var e = t.readUInt8(t.length - 1), r = t.slice(0, t.length - 1);
                                                    return this.fromDer(r, !1), this.nHashType = e, this;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return this.fromHex(t);
                                                }
                                            },
                                            {
                                                key: "hasLowS",
                                                value: function hasLowS() {
                                                    return !this.s.lt(1) && !this.s.gt(p3.fromBuffer(Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex")));
                                                }
                                            },
                                            {
                                                key: "hasDefinedHashType",
                                                value: function hasDefinedHashType() {
                                                    return !(this.nHashType < j.SIGHASH_ALL || this.nHashType > j.SIGHASH_SINGLE);
                                                }
                                            },
                                            {
                                                key: "toCompact",
                                                value: function toCompact(t, e) {
                                                    if (t = "number" == typeof t ? t : this.recovery, e = "boolean" == typeof e ? e : this.compressed, 0 !== t && 1 !== t && 2 !== t && 3 !== t) throw new Error("recovery must be equal to 0, 1, 2, or 3");
                                                    var r = t + 27 + 4;
                                                    !1 === e && (r -= 4);
                                                    var i = Buffer.from([
                                                        r
                                                    ]), s = this.r.toBuffer({
                                                        size: 32
                                                    }), n = this.s.toBuffer({
                                                        size: 32
                                                    });
                                                    return Buffer.concat([
                                                        i,
                                                        s,
                                                        n
                                                    ]);
                                                }
                                            },
                                            {
                                                key: "toRS",
                                                value: function toRS() {
                                                    return Buffer.concat([
                                                        this.r.toBuffer({
                                                            size: 32
                                                        }),
                                                        this.s.toBuffer({
                                                            size: 32
                                                        })
                                                    ]);
                                                }
                                            },
                                            {
                                                key: "toDer",
                                                value: function toDer() {
                                                    var t = this.r.toBuffer(), e = this.s.toBuffer(), r = 128 & t[0], i = 128 & e[0], s = r ? Buffer.concat([
                                                        Buffer.from([
                                                            0
                                                        ]),
                                                        t
                                                    ]) : t, n = i ? Buffer.concat([
                                                        Buffer.from([
                                                            0
                                                        ]),
                                                        e
                                                    ]) : e, a = 2 + s.length + 2 + n.length, o = s.length, h = n.length;
                                                    return Buffer.concat([
                                                        Buffer.from([
                                                            48,
                                                            a,
                                                            2,
                                                            o
                                                        ]),
                                                        s,
                                                        Buffer.from([
                                                            2,
                                                            h
                                                        ]),
                                                        n
                                                    ]);
                                                }
                                            },
                                            {
                                                key: "toTxFormat",
                                                value: function toTxFormat() {
                                                    var t = this.toDer(), e = Buffer.alloc(1);
                                                    return e.writeUInt8(this.nHashType, 0), Buffer.concat([
                                                        t,
                                                        e
                                                    ]);
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return this.toHex();
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromCompact",
                                                value: function fromCompact(t) {
                                                    return new this().fromCompact(t);
                                                }
                                            },
                                            {
                                                key: "fromRS",
                                                value: function fromRS(t) {
                                                    return new this().fromRS(t);
                                                }
                                            },
                                            {
                                                key: "fromDer",
                                                value: function fromDer(t, e) {
                                                    return new this().fromDer(t, e);
                                                }
                                            },
                                            {
                                                key: "fromTxFormat",
                                                value: function fromTxFormat(t) {
                                                    return new this().fromTxFormat(t);
                                                }
                                            },
                                            {
                                                key: "parseDer",
                                                value: function parseDer(t, e) {
                                                    if (void 0 === e && (e = !0), !Buffer.isBuffer(t)) throw new Error("DER formatted signature should be a buffer");
                                                    var r = t[0];
                                                    if (48 !== r) throw new Error("Header byte should be 0x30");
                                                    var i = t[1];
                                                    var s = t.slice(2).length;
                                                    if (e && i !== s) throw new Error("LEngth byte should length of what follows");
                                                    i = i < s ? i : s;
                                                    var n = t[2];
                                                    if (2 !== n) throw new Error("Integer byte for r should be 0x02");
                                                    var a = t[3], o = t.slice(4, 4 + a), h = new p3().fromBuffer(o), f = 0 === t[4];
                                                    if (a !== o.length) throw new Error("LEngth of r incorrect");
                                                    var c = t[4 + a + 0];
                                                    if (2 !== c) throw new Error("Integer byte for s should be 0x02");
                                                    var u = t[4 + a + 1], d = t.slice(4 + a + 2, 4 + a + 2 + u), l = new p3().fromBuffer(d), b = 0 === t[4 + a + 2 + 2];
                                                    if (u !== d.length) throw new Error("LEngth of s incorrect");
                                                    if (i !== 4 + a + 2 + u - 2) throw new Error("LEngth of signature incorrect");
                                                    return {
                                                        header: r,
                                                        length: i,
                                                        rheader: n,
                                                        rlength: a,
                                                        rneg: f,
                                                        rbuf: o,
                                                        r: h,
                                                        sheader: c,
                                                        slength: u,
                                                        sneg: b,
                                                        sbuf: d,
                                                        s: l
                                                    };
                                                }
                                            },
                                            {
                                                key: "IsTxDer",
                                                value: function IsTxDer(t) {
                                                    if (t.length < 9) return !1;
                                                    if (t.length > 73) return !1;
                                                    if (48 !== t[0]) return !1;
                                                    if (t[1] !== t.length - 3) return !1;
                                                    var e = t[3];
                                                    if (5 + e >= t.length) return !1;
                                                    var r = t[5 + e];
                                                    if (e + r + 7 !== t.length) return !1;
                                                    var i = t.slice(4);
                                                    if (2 !== t[2]) return !1;
                                                    if (0 === e) return !1;
                                                    if (128 & i[0]) return !1;
                                                    if (e > 1 && 0 === i[0] && !(128 & i[1])) return !1;
                                                    var s = t.slice(6 + e);
                                                    return !(2 !== t[6 + e - 2] || 0 === r || 128 & s[0] || r > 1 && 0 === s[0] && !(128 & s[1]));
                                                }
                                            }
                                        ]);
                                        return j;
                                    }(S1);
                                    j2.SIGHASH_ALL = 1, j2.SIGHASH_NONE = 2, j2.SIGHASH_SINGLE = 3, j2.SIGHASH_FORKID = 64, j2.SIGHASH_ANYONECANPAY = 128;
                                    var q3 = /*#__PURE__*/ function(_S8) {
                                        _inherits(q, _S8);
                                        var _super48 = _createSuper(q);
                                        function q() {
                                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                                            _classCallCheck2(this, q);
                                            return _super48.call(this, {
                                                chunks: t
                                            });
                                        }
                                        _createClass2(q, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromString(t);
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return this.toString();
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    this.chunks = [];
                                                    var e = new g1(t);
                                                    for(; !e.eof();){
                                                        var _t9 = e.readUInt8();
                                                        var _r7 = 0, _i27 = Buffer.from([]);
                                                        if (_t9 > 0 && _t9 < T3.OP_PUSHDATA1) _r7 = _t9, this.chunks.push({
                                                            buf: e.read(_r7),
                                                            len: _r7,
                                                            opCodeNum: _t9
                                                        });
                                                        else if (_t9 === T3.OP_PUSHDATA1) {
                                                            try {
                                                                _r7 = e.readUInt8(), _i27 = e.read(_r7);
                                                            } catch (t) {
                                                                e.read();
                                                            }
                                                            this.chunks.push({
                                                                buf: _i27,
                                                                len: _r7,
                                                                opCodeNum: _t9
                                                            });
                                                        } else if (_t9 === T3.OP_PUSHDATA2) {
                                                            try {
                                                                _r7 = e.readUInt16LE(), _i27 = e.read(_r7);
                                                            } catch (t) {
                                                                e.read();
                                                            }
                                                            this.chunks.push({
                                                                buf: _i27,
                                                                len: _r7,
                                                                opCodeNum: _t9
                                                            });
                                                        } else if (_t9 === T3.OP_PUSHDATA4) {
                                                            try {
                                                                _r7 = e.readUInt32LE(), _i27 = e.read(_r7);
                                                            } catch (t) {
                                                                e.read();
                                                            }
                                                            this.chunks.push({
                                                                buf: _i27,
                                                                len: _r7,
                                                                opCodeNum: _t9
                                                            });
                                                        } else this.chunks.push({
                                                            opCodeNum: _t9
                                                        });
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    var t = new y3();
                                                    for(var _e9 = 0; _e9 < this.chunks.length; _e9++){
                                                        var _r8 = this.chunks[_e9], _i28 = _r8.opCodeNum;
                                                        t.writeUInt8(_i28), _r8.buf && (_i28 < T3.OP_PUSHDATA1 ? t.write(_r8.buf) : _i28 === T3.OP_PUSHDATA1 ? (t.writeUInt8(_r8.len), t.write(_r8.buf)) : _i28 === T3.OP_PUSHDATA2 ? (t.writeUInt16LE(_r8.len), t.write(_r8.buf)) : _i28 === T3.OP_PUSHDATA4 && (t.writeUInt32LE(_r8.len), t.write(_r8.buf)));
                                                    }
                                                    return t.toBuffer();
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    if (this.chunks = [], "" === t || void 0 === t) return this;
                                                    var e = t.split(" ");
                                                    var r = 0;
                                                    for(; r < e.length;){
                                                        var _t10 = e[r];
                                                        var _i29 = void 0;
                                                        try {
                                                            _i29 = new T3().fromString(_t10).toNumber();
                                                        } catch (t) {}
                                                        if (void 0 === _i29) {
                                                            if (_i29 = parseInt(_t10, 10), _i29 > 0 && _i29 < T3.OP_PUSHDATA1) this.chunks.push({
                                                                buf: Buffer.from(e[r + 1].slice(2), "hex"),
                                                                len: _i29,
                                                                opCodeNum: _i29
                                                            }), r += 2;
                                                            else {
                                                                if (0 !== _i29) throw new Error("Invalid script");
                                                                this.chunks.push({
                                                                    opCodeNum: 0
                                                                }), r += 1;
                                                            }
                                                        } else if (_i29 === T3.OP_PUSHDATA1 || _i29 === T3.OP_PUSHDATA2 || _i29 === T3.OP_PUSHDATA4) {
                                                            if ("0x" !== e[r + 2].slice(0, 2)) throw new Error("Pushdata data must start with 0x");
                                                            this.chunks.push({
                                                                buf: Buffer.from(e[r + 2].slice(2), "hex"),
                                                                len: parseInt(e[r + 1], 10),
                                                                opCodeNum: _i29
                                                            }), r += 3;
                                                        } else this.chunks.push({
                                                            opCodeNum: _i29
                                                        }), r += 1;
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    var t = "";
                                                    for(var _e10 = 0; _e10 < this.chunks.length; _e10++){
                                                        var _r9 = this.chunks[_e10], _i30 = _r9.opCodeNum;
                                                        _r9.buf ? (_i30 !== T3.OP_PUSHDATA1 && _i30 !== T3.OP_PUSHDATA2 && _i30 !== T3.OP_PUSHDATA4 || (t = t + " " + new T3(_i30).toString()), t = t + " " + _r9.len, t = t + " 0x" + _r9.buf.toString("hex")) : t = void 0 !== T3.str[_i30] ? t + " " + new T3(_i30).toString() : t + " 0x" + _i30.toString(16);
                                                    }
                                                    return t.substr(1);
                                                }
                                            },
                                            {
                                                key: "fromBitcoindString",
                                                value: function fromBitcoindString(t) {
                                                    var e = new y3(), r = t.split(" ");
                                                    var i;
                                                    for(i = 0; i < r.length; i++){
                                                        var _t11 = r[i];
                                                        if ("" !== _t11) {
                                                            if ("0" === _t11[0] && "x" === _t11[1]) {
                                                                var _r10 = _t11.slice(2);
                                                                e.write(Buffer.from(_r10, "hex"));
                                                            } else if ("'" === _t11[0]) {
                                                                var _r11 = _t11.slice(1, _t11.length - 1), _i31 = Buffer.from(_r11), _s3 = new q().writeBuffer(_i31).toBuffer();
                                                                e.write(_s3);
                                                            } else if (void 0 !== T3["OP_" + _t11]) {
                                                                var _r12 = T3["OP_" + _t11];
                                                                e.writeUInt8(_r12);
                                                            } else if ("number" == typeof T3[_t11]) {
                                                                var _r13 = T3[_t11];
                                                                e.writeUInt8(_r13);
                                                            } else {
                                                                if (isNaN(parseInt(_t11, 10))) throw new Error("Could not determine type of script value");
                                                                var _r14 = new p3(_t11), _i32 = new q().writeBn(_r14).toBuffer();
                                                                e.write(_i32);
                                                            }
                                                        }
                                                    }
                                                    var s = e.toBuffer();
                                                    return this.fromBuffer(s);
                                                }
                                            },
                                            {
                                                key: "toBitcoindString",
                                                value: function toBitcoindString() {
                                                    var t = "";
                                                    for(var _e11 = 0; _e11 < this.chunks.length; _e11++){
                                                        var _r15 = this.chunks[_e11];
                                                        t = _r15.buf ? t + " 0x" + new q([
                                                            _r15
                                                        ]).toBuffer().toString("hex") : void 0 !== T3.str[_r15.opCodeNum] ? t + " " + new T3(_r15.opCodeNum).toString().slice(3) : t + " 0x" + _r15.opCodeNum.toString(16);
                                                    }
                                                    return t.substr(1);
                                                }
                                            },
                                            {
                                                key: "fromAsmString",
                                                value: function fromAsmString(t) {
                                                    this.chunks = [];
                                                    var e = t.split(" ");
                                                    var r = 0;
                                                    for(; r < e.length;){
                                                        var _t12 = e[r];
                                                        var _i33 = void 0, _s4 = void 0;
                                                        try {
                                                            _i33 = T3.fromString(_t12), _s4 = _i33.toNumber();
                                                        } catch (t) {
                                                            _i33 = void 0, _s4 = void 0;
                                                        }
                                                        if ("0" === _t12) _s4 = 0, this.chunks.push({
                                                            opCodeNum: _s4
                                                        }), r += 1;
                                                        else if ("-1" === _t12) _s4 = T3.OP_1NEGATE, this.chunks.push({
                                                            opCodeNum: _s4
                                                        }), r += 1;
                                                        else if (void 0 === _i33) {
                                                            var _t13 = e[r], _i34 = Buffer.from(_t13, "hex");
                                                            if (_i34.toString("hex") !== _t13) throw new Error("invalid hex string in script");
                                                            var _n4 = _i34.length;
                                                            _n4 >= 0 && _n4 < T3.OP_PUSHDATA1 ? _s4 = _n4 : _n4 < Math.pow(2, 8) ? _s4 = T3.OP_PUSHDATA1 : _n4 < Math.pow(2, 16) ? _s4 = T3.OP_PUSHDATA2 : _n4 < Math.pow(2, 32) && (_s4 = T3.OP_PUSHDATA4), this.chunks.push({
                                                                buf: _i34,
                                                                len: _i34.length,
                                                                opCodeNum: _s4
                                                            }), r += 1;
                                                        } else this.chunks.push({
                                                            opCodeNum: _s4
                                                        }), r += 1;
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "toAsmString",
                                                value: function toAsmString() {
                                                    for(var t = "", e = 0; e < this.chunks.length; e++){
                                                        var r = this.chunks[e];
                                                        t += this._chunkToString(r);
                                                    }
                                                    return t.substr(1);
                                                }
                                            },
                                            {
                                                key: "_chunkToString",
                                                value: function _chunkToString(t, e) {
                                                    var r = t.opCodeNum, i = "";
                                                    if (t.buf) t.len > 0 && (i = i + " " + t.buf.toString("hex"));
                                                    else if (void 0 !== T3.str[r]) 0 === r ? i += " 0" : 79 === r ? i += " -1" : i = i + " " + new T3(r).toString();
                                                    else {
                                                        var s = r.toString(16);
                                                        s.length % 2 != 0 && (s = "0" + s), i = i + " " + s;
                                                    }
                                                    return i;
                                                }
                                            },
                                            {
                                                key: "fromOpReturnData",
                                                value: function fromOpReturnData(t) {
                                                    return this.writeOpCode(T3.OP_RETURN), this.writeBuffer(t), this;
                                                }
                                            },
                                            {
                                                key: "fromSafeData",
                                                value: function fromSafeData(t) {
                                                    return this.writeOpCode(T3.OP_FALSE), this.writeOpCode(T3.OP_RETURN), this.writeBuffer(t), this;
                                                }
                                            },
                                            {
                                                key: "fromSafeDataArray",
                                                value: function fromSafeDataArray(t) {
                                                    this.writeOpCode(T3.OP_FALSE), this.writeOpCode(T3.OP_RETURN);
                                                    for(var _e12 in t){
                                                        var _r16 = t[_e12];
                                                        this.writeBuffer(_r16);
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "getData",
                                                value: function getData() {
                                                    if (this.isSafeDataOut()) return this.chunks.slice(2).map(function(t) {
                                                        return t.buf;
                                                    });
                                                    if (this.isOpReturn()) return this.chunks.slice(1).map(function(t) {
                                                        return t.buf;
                                                    });
                                                    throw new Error("Unrecognized script type to get data from");
                                                }
                                            },
                                            {
                                                key: "fromPubKeyHash",
                                                value: function fromPubKeyHash(t) {
                                                    if (20 !== t.length) throw new Error("hashBuf must be a 20 byte buffer");
                                                    return this.writeOpCode(T3.OP_DUP), this.writeOpCode(T3.OP_HASH160), this.writeBuffer(t), this.writeOpCode(T3.OP_EQUALVERIFY), this.writeOpCode(T3.OP_CHECKSIG), this;
                                                }
                                            },
                                            {
                                                key: "fromPubKeys",
                                                value: function fromPubKeys(t, e) {
                                                    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !0;
                                                    if ("number" != typeof t) throw new Error("m must be a number");
                                                    !0 === r && (e = q.sortPubKeys(e)), this.writeOpCode(t + T3.OP_1 - 1);
                                                    for(var _t14 in e)this.writeBuffer(e[_t14].toBuffer());
                                                    return this.writeOpCode(e.length + T3.OP_1 - 1), this.writeOpCode(T3.OP_CHECKMULTISIG), this;
                                                }
                                            },
                                            {
                                                key: "removeCodeseparators",
                                                value: function removeCodeseparators() {
                                                    var t = [];
                                                    for(var _e13 = 0; _e13 < this.chunks.length; _e13++)this.chunks[_e13].opCodeNum !== T3.OP_CODESEPARATOR && t.push(this.chunks[_e13]);
                                                    return this.chunks = t, this;
                                                }
                                            },
                                            {
                                                key: "isPushOnly",
                                                value: function isPushOnly() {
                                                    for(var _t15 = 0; _t15 < this.chunks.length; _t15++){
                                                        if (this.chunks[_t15].opCodeNum > T3.OP_16) return !1;
                                                    }
                                                    return !0;
                                                }
                                            },
                                            {
                                                key: "isNonSpendable",
                                                value: function isNonSpendable() {
                                                    var t = this.chunks[0].opCodeNum === T3.OP_FALSE, e = this.chunks[1] && this.chunks[1].opCodeNum === T3.OP_RETURN;
                                                    return !!t && !!e;
                                                }
                                            },
                                            {
                                                key: "isOpReturn",
                                                value: function isOpReturn() {
                                                    return this.chunks[0].opCodeNum === T3.OP_RETURN && this.chunks.filter(function(t) {
                                                        return Buffer.isBuffer(t.buf);
                                                    }).length === this.chunks.slice(1).length;
                                                }
                                            },
                                            {
                                                key: "isSafeDataOut",
                                                value: function isSafeDataOut() {
                                                    if (this.chunks.length < 2) return !1;
                                                    if (this.chunks[0].opCodeNum !== T3.OP_FALSE) return !1;
                                                    var t = this.chunks.slice(1);
                                                    return new q(t).isOpReturn();
                                                }
                                            },
                                            {
                                                key: "isPubKeyHashOut",
                                                value: function isPubKeyHashOut() {
                                                    return !!(this.chunks[0] && this.chunks[0].opCodeNum === T3.OP_DUP && this.chunks[1] && this.chunks[1].opCodeNum === T3.OP_HASH160 && this.chunks[2].buf && this.chunks[3] && this.chunks[3].opCodeNum === T3.OP_EQUALVERIFY && this.chunks[4] && this.chunks[4].opCodeNum === T3.OP_CHECKSIG);
                                                }
                                            },
                                            {
                                                key: "isPubKeyHashIn",
                                                value: function isPubKeyHashIn() {
                                                    return !(2 !== this.chunks.length || !this.chunks[0].buf && this.chunks[0].opCodeNum !== T3.OP_0 || !this.chunks[1].buf && this.chunks[0].opCodeNum !== T3.OP_0);
                                                }
                                            },
                                            {
                                                key: "isScriptHashOut",
                                                value: function isScriptHashOut() {
                                                    var t = this.toBuffer();
                                                    return 23 === t.length && t[0] === T3.OP_HASH160 && 20 === t[1] && t[22] === T3.OP_EQUAL;
                                                }
                                            },
                                            {
                                                key: "isScriptHashIn",
                                                value: function isScriptHashIn() {
                                                    if (!this.isPushOnly()) return !1;
                                                    try {
                                                        new q().fromBuffer(this.chunks[this.chunks.length - 1].buf);
                                                    } catch (t) {
                                                        return !1;
                                                    }
                                                    return !0;
                                                }
                                            },
                                            {
                                                key: "isMultiSigOut",
                                                value: function isMultiSigOut() {
                                                    var t10 = this.chunks[0].opCodeNum - T3.OP_1 + 1;
                                                    if (!(t10 >= 1 && t10 <= 16)) return !1;
                                                    if (!this.chunks.slice(1, this.chunks.length - 2).every(function(t) {
                                                        try {
                                                            var _e14 = t.buf;
                                                            return new K1().fromDer(_e14).validate(), !0;
                                                        } catch (t11) {
                                                            return !1;
                                                        }
                                                    })) return !1;
                                                    var e = this.chunks[this.chunks.length - 2].opCodeNum - T3.OP_1 + 1;
                                                    return e >= t10 && e <= 16 && this.chunks[1 + e + 1].opCodeNum === T3.OP_CHECKMULTISIG;
                                                }
                                            },
                                            {
                                                key: "isMultiSigIn",
                                                value: function isMultiSigIn() {
                                                    if (this.chunks[0].opCodeNum !== T3.OP_0) return !1;
                                                    var t12 = this.chunks.slice(1);
                                                    return !(t12.length < 1) && t12.every(function(t) {
                                                        return Buffer.isBuffer(t.buf) && j2.IsTxDer(t.buf);
                                                    });
                                                }
                                            },
                                            {
                                                key: "findAndDelete",
                                                value: function findAndDelete(t) {
                                                    var e = t.toBuffer();
                                                    for(var _t16 = 0; _t16 < this.chunks.length; _t16++){
                                                        var _r17 = new q([
                                                            this.chunks[_t16]
                                                        ]).toBuffer();
                                                        B(e, _r17) && this.chunks.splice(_t16, 1);
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "writeScript",
                                                value: function writeScript(t) {
                                                    return this.chunks = this.chunks.concat(t.chunks), this;
                                                }
                                            },
                                            {
                                                key: "writeString",
                                                value: function writeString(t) {
                                                    var e = new q().fromString(t);
                                                    return this.chunks = this.chunks.concat(e.chunks), this;
                                                }
                                            },
                                            {
                                                key: "writeOpCode",
                                                value: function writeOpCode(t) {
                                                    return this.chunks.push({
                                                        opCodeNum: t
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "setChunkOpCode",
                                                value: function setChunkOpCode(t, e) {
                                                    return this.chunks[t] = {
                                                        opCodeNum: e
                                                    }, this;
                                                }
                                            },
                                            {
                                                key: "writeBn",
                                                value: function writeBn(t) {
                                                    if (t.cmp(0) === T3.OP_0) this.chunks.push({
                                                        opCodeNum: T3.OP_0
                                                    });
                                                    else if (0 === t.cmp(-1)) this.chunks.push({
                                                        opCodeNum: T3.OP_1NEGATE
                                                    });
                                                    else if (t.cmp(1) >= 0 && t.cmp(16) <= 0) this.chunks.push({
                                                        opCodeNum: t.toNumber() + T3.OP_1 - 1
                                                    });
                                                    else {
                                                        var _e15 = t.toSm({
                                                            endian: "little"
                                                        });
                                                        this.writeBuffer(_e15);
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "writeNumber",
                                                value: function writeNumber(t) {
                                                    return this.writeBn(new p3().fromNumber(t)), this;
                                                }
                                            },
                                            {
                                                key: "setChunkBn",
                                                value: function setChunkBn(t, e) {
                                                    return this.chunks[t] = new q().writeBn(e).chunks[0], this;
                                                }
                                            },
                                            {
                                                key: "writeBuffer",
                                                value: function writeBuffer(t) {
                                                    var e;
                                                    var r = t.length;
                                                    if (t.length > 0 && t.length < T3.OP_PUSHDATA1) e = t.length;
                                                    else if (0 === t.length) e = T3.OP_0;
                                                    else if (t.length < Math.pow(2, 8)) e = T3.OP_PUSHDATA1;
                                                    else if (t.length < Math.pow(2, 16)) e = T3.OP_PUSHDATA2;
                                                    else {
                                                        if (!(t.length < Math.pow(2, 32))) throw new Error("You can't push that much data");
                                                        e = T3.OP_PUSHDATA4;
                                                    }
                                                    return this.chunks.push({
                                                        buf: t,
                                                        len: r,
                                                        opCodeNum: e
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "setChunkBuffer",
                                                value: function setChunkBuffer(t, e) {
                                                    return this.chunks[t] = new q().writeBuffer(e).chunks[0], this;
                                                }
                                            },
                                            {
                                                key: "checkMinimalPush",
                                                value: function checkMinimalPush(t) {
                                                    var e = this.chunks[t], r = e.buf, i = e.opCodeNum;
                                                    return !(r && (0 === r.length ? i !== T3.OP_0 : 1 === r.length && r[0] >= 1 && r[0] <= 16 ? i !== T3.OP_1 + (r[0] - 1) : 1 === r.length && 129 === r[0] ? i !== T3.OP_1NEGATE : r.length <= 75 ? i !== r.length : r.length <= 255 ? i !== T3.OP_PUSHDATA1 : r.length <= 65535 && i !== T3.OP_PUSHDATA2));
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromBitcoindString",
                                                value: function fromBitcoindString(t) {
                                                    return new this().fromBitcoindString(t);
                                                }
                                            },
                                            {
                                                key: "fromAsmString",
                                                value: function fromAsmString(t) {
                                                    return new this().fromAsmString(t);
                                                }
                                            },
                                            {
                                                key: "fromOpReturnData",
                                                value: function fromOpReturnData(t) {
                                                    return new this().fromOpReturnData(t);
                                                }
                                            },
                                            {
                                                key: "fromSafeData",
                                                value: function fromSafeData(t) {
                                                    return new this().fromSafeData(t);
                                                }
                                            },
                                            {
                                                key: "fromSafeDataArray",
                                                value: function fromSafeDataArray(t) {
                                                    return new this().fromSafeDataArray(t);
                                                }
                                            },
                                            {
                                                key: "fromPubKeyHash",
                                                value: function fromPubKeyHash(t) {
                                                    return new this().fromPubKeyHash(t);
                                                }
                                            },
                                            {
                                                key: "sortPubKeys",
                                                value: function sortPubKeys(t13) {
                                                    return t13.slice().sort(function(t, e) {
                                                        var r = t.toBuffer(), i = e.toBuffer(), s = Math.max(r.length, i.length);
                                                        for(var _t17 = 0; _t17 <= s; _t17++){
                                                            if (void 0 === r[_t17]) return -1;
                                                            if (void 0 === i[_t17]) return 1;
                                                            if (r[_t17] < i[_t17]) return -1;
                                                            if (r[_t17] > i[_t17]) return 1;
                                                        }
                                                    });
                                                }
                                            },
                                            {
                                                key: "fromPubKeys",
                                                value: function fromPubKeys(t, e, r) {
                                                    return new this().fromPubKeys(t, e, r);
                                                }
                                            },
                                            {
                                                key: "writeScript",
                                                value: function writeScript(t) {
                                                    return new this().writeScript(t);
                                                }
                                            },
                                            {
                                                key: "writeString",
                                                value: function writeString(t) {
                                                    return new this().writeString(t);
                                                }
                                            },
                                            {
                                                key: "writeOpCode",
                                                value: function writeOpCode(t) {
                                                    return new this().writeOpCode(t);
                                                }
                                            },
                                            {
                                                key: "writeBn",
                                                value: function writeBn(t) {
                                                    return new this().writeBn(t);
                                                }
                                            },
                                            {
                                                key: "writeNumber",
                                                value: function writeNumber(t) {
                                                    return new this().writeNumber(t);
                                                }
                                            },
                                            {
                                                key: "writeBuffer",
                                                value: function writeBuffer(t) {
                                                    return new this().writeBuffer(t);
                                                }
                                            }
                                        ]);
                                        return q;
                                    }(S1);
                                    var z1 = /*#__PURE__*/ function(_S9) {
                                        _inherits(z, _S9);
                                        var _super49 = _createSuper(z);
                                        function z(t, e) {
                                            var _this37;
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                                            _classCallCheck2(this, z);
                                            _this37 = _super49.call(this, {
                                                versionByteNum: t,
                                                hashBuf: e
                                            }), r = r || x.Default.Address, _this37.Constants = r;
                                            return _this37;
                                        }
                                        _createClass2(z, [
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    if (21 !== t.length) throw new Error("address buffers must be exactly 21 bytes");
                                                    if (t[0] !== this.Constants.pubKeyHash) throw new Error("address: invalid versionByteNum byte");
                                                    return this.versionByteNum = t[0], this.hashBuf = t.slice(1), this;
                                                }
                                            },
                                            {
                                                key: "fromPubKeyHashBuf",
                                                value: function fromPubKeyHashBuf(t) {
                                                    return this.hashBuf = t, this.versionByteNum = this.Constants.pubKeyHash, this;
                                                }
                                            },
                                            {
                                                key: "fromPubKey",
                                                value: function fromPubKey(t) {
                                                    var e = P1.sha256Ripemd160(t.toBuffer());
                                                    return this.fromPubKeyHashBuf(e);
                                                }
                                            },
                                            {
                                                key: "asyncFromPubKey",
                                                value: function() {
                                                    var _asyncFromPubKey2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee91(t) {
                                                        var e, r;
                                                        return _regeneratorRuntime().wrap(function _callee91$(_context97) {
                                                            while(true)switch(_context97.prev = _context97.next){
                                                                case 0:
                                                                    e = [
                                                                        t
                                                                    ];
                                                                    _context97.next = 3;
                                                                    return E1.asyncObjectMethod(this, "fromPubKey", e);
                                                                case 3:
                                                                    r = _context97.sent;
                                                                    return _context97.abrupt("return", this.fromFastBuffer(r.resbuf));
                                                                case 5:
                                                                case "end":
                                                                    return _context97.stop();
                                                            }
                                                        }, _callee91, this);
                                                    }));
                                                    function asyncFromPubKey(_x132) {
                                                        return _asyncFromPubKey2.apply(this, arguments);
                                                    }
                                                    return asyncFromPubKey;
                                                }()
                                            },
                                            {
                                                key: "fromPrivKey",
                                                value: function fromPrivKey(t) {
                                                    var e = new K1().fromPrivKey(t), r = P1.sha256Ripemd160(e.toBuffer());
                                                    return this.fromPubKeyHashBuf(r);
                                                }
                                            },
                                            {
                                                key: "asyncFromPrivKey",
                                                value: function() {
                                                    var _asyncFromPrivKey5 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee92(t) {
                                                        var e, r;
                                                        return _regeneratorRuntime().wrap(function _callee92$(_context98) {
                                                            while(true)switch(_context98.prev = _context98.next){
                                                                case 0:
                                                                    e = [
                                                                        t
                                                                    ];
                                                                    _context98.next = 3;
                                                                    return E1.asyncObjectMethod(this, "fromPrivKey", e);
                                                                case 3:
                                                                    r = _context98.sent;
                                                                    return _context98.abrupt("return", this.fromFastBuffer(r.resbuf));
                                                                case 5:
                                                                case "end":
                                                                    return _context98.stop();
                                                            }
                                                        }, _callee92, this);
                                                    }));
                                                    function asyncFromPrivKey(_x133) {
                                                        return _asyncFromPrivKey5.apply(this, arguments);
                                                    }
                                                    return asyncFromPrivKey;
                                                }()
                                            },
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    var t = new V1().fromRandom();
                                                    return this.fromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromRandom",
                                                value: function() {
                                                    var _asyncFromRandom4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee93() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee93$(_context99) {
                                                            while(true)switch(_context99.prev = _context99.next){
                                                                case 0:
                                                                    _context99.next = 2;
                                                                    return E1.asyncObjectMethod(this, "fromRandom", []);
                                                                case 2:
                                                                    t = _context99.sent;
                                                                    return _context99.abrupt("return", this.fromFastBuffer(t.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context99.stop();
                                                            }
                                                        }, _callee93, this);
                                                    }));
                                                    function asyncFromRandom() {
                                                        return _asyncFromRandom4.apply(this, arguments);
                                                    }
                                                    return asyncFromRandom;
                                                }()
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var e = k4.decode(t);
                                                    return this.fromBuffer(e);
                                                }
                                            },
                                            {
                                                key: "asyncFromString",
                                                value: function() {
                                                    var _asyncFromString3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee94(t) {
                                                        var e, r;
                                                        return _regeneratorRuntime().wrap(function _callee94$(_context100) {
                                                            while(true)switch(_context100.prev = _context100.next){
                                                                case 0:
                                                                    e = [
                                                                        t
                                                                    ];
                                                                    _context100.next = 3;
                                                                    return E1.asyncObjectMethod(this, "fromString", e);
                                                                case 3:
                                                                    r = _context100.sent;
                                                                    return _context100.abrupt("return", this.fromFastBuffer(r.resbuf));
                                                                case 5:
                                                                case "end":
                                                                    return _context100.stop();
                                                            }
                                                        }, _callee94, this);
                                                    }));
                                                    function asyncFromString(_x134) {
                                                        return _asyncFromString3.apply(this, arguments);
                                                    }
                                                    return asyncFromString;
                                                }()
                                            },
                                            {
                                                key: "isValid",
                                                value: function isValid() {
                                                    try {
                                                        return this.validate(), !0;
                                                    } catch (t) {
                                                        return !1;
                                                    }
                                                }
                                            },
                                            {
                                                key: "toTxOutScript",
                                                value: function toTxOutScript() {
                                                    var t = new q3();
                                                    return t.writeOpCode(T3.OP_DUP), t.writeOpCode(T3.OP_HASH160), t.writeBuffer(this.hashBuf), t.writeOpCode(T3.OP_EQUALVERIFY), t.writeOpCode(T3.OP_CHECKSIG), t;
                                                }
                                            },
                                            {
                                                key: "fromTxInScript",
                                                value: function fromTxInScript(t) {
                                                    var e = P1.sha256Ripemd160(t.chunks[1].buf || Buffer.from("00".repeat(32), "hex"));
                                                    return this.fromPubKeyHashBuf(e);
                                                }
                                            },
                                            {
                                                key: "fromTxOutScript",
                                                value: function fromTxOutScript(t) {
                                                    return this.fromPubKeyHashBuf(t.chunks[2].buf);
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    var t = Buffer.from([
                                                        this.versionByteNum
                                                    ]);
                                                    return Buffer.concat([
                                                        t,
                                                        this.hashBuf
                                                    ]);
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t = {};
                                                    return this.hashBuf && (t.hashBuf = this.hashBuf.toString("hex")), void 0 !== this.versionByteNum && (t.versionByteNum = this.versionByteNum), t;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return t.hashBuf && (this.hashBuf = Buffer.from(t.hashBuf, "hex")), void 0 !== t.versionByteNum && (this.versionByteNum = t.versionByteNum), this;
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return k4.encode(this.toBuffer());
                                                }
                                            },
                                            {
                                                key: "asyncToString",
                                                value: function() {
                                                    var _asyncToString3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee95() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee95$(_context101) {
                                                            while(true)switch(_context101.prev = _context101.next){
                                                                case 0:
                                                                    _context101.next = 2;
                                                                    return E1.asyncObjectMethod(this, "toString", []);
                                                                case 2:
                                                                    t = _context101.sent;
                                                                    return _context101.abrupt("return", JSON.parse(t.resbuf.toString()));
                                                                case 4:
                                                                case "end":
                                                                    return _context101.stop();
                                                            }
                                                        }, _callee95, this);
                                                    }));
                                                    function asyncToString() {
                                                        return _asyncToString3.apply(this, arguments);
                                                    }
                                                    return asyncToString;
                                                }()
                                            },
                                            {
                                                key: "validate",
                                                value: function validate() {
                                                    if (!Buffer.isBuffer(this.hashBuf) || 20 !== this.hashBuf.length) throw new Error("hashBuf must be a buffer of 20 bytes");
                                                    if (this.versionByteNum !== this.Constants.pubKeyHash) throw new Error("invalid versionByteNum");
                                                    return this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromPubKeyHashBuf",
                                                value: function fromPubKeyHashBuf(t) {
                                                    return new this().fromPubKeyHashBuf(t);
                                                }
                                            },
                                            {
                                                key: "fromPubKey",
                                                value: function fromPubKey(t) {
                                                    return new this().fromPubKey(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromPubKey",
                                                value: function asyncFromPubKey(t) {
                                                    return new this().asyncFromPubKey(t);
                                                }
                                            },
                                            {
                                                key: "fromPrivKey",
                                                value: function fromPrivKey(t) {
                                                    return new this().fromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromPrivKey",
                                                value: function asyncFromPrivKey(t) {
                                                    return new this().fromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    return new this().fromRandom();
                                                }
                                            },
                                            {
                                                key: "asyncFromRandom",
                                                value: function asyncFromRandom() {
                                                    return new this().fromRandom();
                                                }
                                            },
                                            {
                                                key: "asyncFromString",
                                                value: function asyncFromString(t) {
                                                    return new this().asyncFromString(t);
                                                }
                                            },
                                            {
                                                key: "isValid",
                                                value: function isValid(t) {
                                                    var e;
                                                    try {
                                                        e = new z().fromString(t);
                                                    } catch (t14) {
                                                        return !1;
                                                    }
                                                    return e.isValid();
                                                }
                                            },
                                            {
                                                key: "fromTxInScript",
                                                value: function fromTxInScript(t) {
                                                    return new this().fromTxInScript(t);
                                                }
                                            },
                                            {
                                                key: "fromTxOutScript",
                                                value: function fromTxOutScript(t) {
                                                    return new this().fromTxOutScript(t);
                                                }
                                            }
                                        ]);
                                        return z;
                                    }(S1);
                                    z1.Mainnet = /*#__PURE__*/ function(_z) {
                                        _inherits(_class12, _z);
                                        var _super50 = _createSuper(_class12);
                                        function _class12(t, e) {
                                            _classCallCheck2(this, _class12);
                                            return _super50.call(this, t, e, x.Mainnet.Address);
                                        }
                                        return _createClass2(_class12);
                                    }(z1), z1.Testnet = /*#__PURE__*/ function(_z2) {
                                        _inherits(_class13, _z2);
                                        var _super51 = _createSuper(_class13);
                                        function _class13(t, e) {
                                            _classCallCheck2(this, _class13);
                                            return _super51.call(this, t, e, x.Testnet.Address);
                                        }
                                        return _createClass2(_class13);
                                    }(z1);
                                    var G1 = /*#__PURE__*/ function(_S10) {
                                        _inherits(G, _S10);
                                        var _super52 = _createSuper(G);
                                        function G(t, e, r, i, s, n, a) {
                                            var _this38;
                                            var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;
                                            var h = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : V1;
                                            _classCallCheck2(this, G);
                                            _this38 = _super52.call(this, {
                                                versionBytesNum: t,
                                                depth: e,
                                                parentFingerPrint: r,
                                                childIndex: i,
                                                chainCode: s,
                                                privKey: n,
                                                pubKey: a
                                            }), o = o || x.Default.Bip32, _this38.Constants = o, _this38.PrivKey = h;
                                            return _this38;
                                        }
                                        _createClass2(G, [
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    return this.versionBytesNum = this.Constants.privKey, this.depth = 0, this.parentFingerPrint = Buffer.from([
                                                        0,
                                                        0,
                                                        0,
                                                        0
                                                    ]), this.childIndex = 0, this.chainCode = D1.getRandomBuffer(32), this.privKey = new this.PrivKey().fromRandom(), this.pubKey = new K1().fromPrivKey(this.privKey), this;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return this.fromBuffer(k4.decode(t));
                                                }
                                            },
                                            {
                                                key: "asyncFromString",
                                                value: function() {
                                                    var _asyncFromString4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee96(t) {
                                                        var e, r;
                                                        return _regeneratorRuntime().wrap(function _callee96$(_context102) {
                                                            while(true)switch(_context102.prev = _context102.next){
                                                                case 0:
                                                                    e = [
                                                                        t
                                                                    ];
                                                                    _context102.next = 3;
                                                                    return E1.asyncObjectMethod(this, "fromString", e);
                                                                case 3:
                                                                    r = _context102.sent;
                                                                    return _context102.abrupt("return", this.fromFastBuffer(r.resbuf));
                                                                case 5:
                                                                case "end":
                                                                    return _context102.stop();
                                                            }
                                                        }, _callee96, this);
                                                    }));
                                                    function asyncFromString(_x135) {
                                                        return _asyncFromString4.apply(this, arguments);
                                                    }
                                                    return asyncFromString;
                                                }()
                                            },
                                            {
                                                key: "fromSeed",
                                                value: function fromSeed(t) {
                                                    if (!Buffer.isBuffer(t)) throw new Error("bytes must be a buffer");
                                                    if (t.length < 16) throw new Error("Need more than 128 bits of entropy");
                                                    if (t.length > 64) throw new Error("More than 512 bits of entropy is nonstandard");
                                                    var e = P1.sha512Hmac(t, Buffer.from("Bitcoin seed"));
                                                    return this.depth = 0, this.parentFingerPrint = Buffer.from([
                                                        0,
                                                        0,
                                                        0,
                                                        0
                                                    ]), this.childIndex = 0, this.chainCode = e.slice(32, 64), this.versionBytesNum = this.Constants.privKey, this.privKey = new this.PrivKey().fromBn(p3().fromBuffer(e.slice(0, 32))), this.pubKey = new K1().fromPrivKey(this.privKey), this;
                                                }
                                            },
                                            {
                                                key: "asyncFromSeed",
                                                value: function() {
                                                    var _asyncFromSeed2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee97(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee97$(_context103) {
                                                            while(true)switch(_context103.prev = _context103.next){
                                                                case 0:
                                                                    _context103.next = 2;
                                                                    return E1.asyncObjectMethod(this, "fromSeed", [
                                                                        t
                                                                    ]);
                                                                case 2:
                                                                    e = _context103.sent;
                                                                    return _context103.abrupt("return", this.fromFastBuffer(e.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context103.stop();
                                                            }
                                                        }, _callee97, this);
                                                    }));
                                                    function asyncFromSeed(_x136) {
                                                        return _asyncFromSeed2.apply(this, arguments);
                                                    }
                                                    return asyncFromSeed;
                                                }()
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    if (78 !== t.length) throw new Error("incorrect bip32 data length");
                                                    this.versionBytesNum = t.slice(0, 4).readUInt32BE(0), this.depth = t.slice(4, 5).readUInt8(0), this.parentFingerPrint = t.slice(5, 9), this.childIndex = t.slice(9, 13).readUInt32BE(0), this.chainCode = t.slice(13, 45);
                                                    var e = t.slice(45, 78), r = this.versionBytesNum === this.Constants.privKey, i = this.versionBytesNum === this.Constants.pubKey;
                                                    if (r && 0 === e[0]) this.privKey = new this.PrivKey().fromBn(p3().fromBuffer(e.slice(1, 33))), this.pubKey = new K1().fromPrivKey(this.privKey);
                                                    else {
                                                        if (!i || 2 !== e[0] && 3 !== e[0]) throw new Error("Invalid key");
                                                        this.pubKey = new K1().fromDer(e);
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "fromFastBuffer",
                                                value: function fromFastBuffer(t) {
                                                    if (0 === t.length) return this;
                                                    if (78 !== t.length && 111 !== t.length) throw new Error("incorrect bip32 fastBuffer data length: " + t.length);
                                                    this.versionBytesNum = t.slice(0, 4).readUInt32BE(0), this.depth = t.slice(4, 5).readUInt8(0), this.parentFingerPrint = t.slice(5, 9), this.childIndex = t.slice(9, 13).readUInt32BE(0), this.chainCode = t.slice(13, 45);
                                                    var e = t.slice(45, t.length), r = this.versionBytesNum === this.Constants.privKey, i = this.versionBytesNum === this.Constants.pubKey;
                                                    if (r && 0 === e[0] && 78 === t.length) this.privKey = new this.PrivKey().fromBn(p3().fromBuffer(e.slice(1, 33))), this.pubKey = new K1().fromPrivKey(this.privKey);
                                                    else {
                                                        if (!i || 111 !== t.length) throw new Error("Invalid key");
                                                        this.pubKey = new K1().fromFastBuffer(e), this.pubKey.compressed = !0;
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "derive",
                                                value: function derive(t) {
                                                    var e = t.split("/");
                                                    if ("m" === t) return this;
                                                    var r = this;
                                                    for(var _t18 in e){
                                                        var _i35 = e[_t18];
                                                        if ("0" === _t18) {
                                                            if ("m" !== _i35) throw new Error("invalid path");
                                                            continue;
                                                        }
                                                        if (parseInt(_i35.replace("'", ""), 10).toString() !== _i35.replace("'", "")) throw new Error("invalid path");
                                                        var _s5 = _i35.length > 1 && "'" === _i35[_i35.length - 1];
                                                        var _n5 = 2147483647 & parseInt(_s5 ? _i35.slice(0, _i35.length - 1) : _i35, 10);
                                                        _s5 && (_n5 += 2147483648), r = r.deriveChild(_n5);
                                                    }
                                                    return r;
                                                }
                                            },
                                            {
                                                key: "asyncDerive",
                                                value: function() {
                                                    var _asyncDerive2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee98(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee98$(_context104) {
                                                            while(true)switch(_context104.prev = _context104.next){
                                                                case 0:
                                                                    _context104.next = 2;
                                                                    return E1.asyncObjectMethod(this, "derive", [
                                                                        t
                                                                    ]);
                                                                case 2:
                                                                    e = _context104.sent;
                                                                    return _context104.abrupt("return", new this.constructor().fromFastBuffer(e.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context104.stop();
                                                            }
                                                        }, _callee98, this);
                                                    }));
                                                    function asyncDerive(_x137) {
                                                        return _asyncDerive2.apply(this, arguments);
                                                    }
                                                    return asyncDerive;
                                                }()
                                            },
                                            {
                                                key: "deriveChild",
                                                value: function deriveChild(t) {
                                                    if ("number" != typeof t) throw new Error("i must be a number");
                                                    var e = [];
                                                    e.push(t >> 24 & 255), e.push(t >> 16 & 255), e.push(t >> 8 & 255), e.push(255 & t), e = Buffer.from(e);
                                                    var r = 0 != (2147483648 & t), i = this.versionBytesNum === this.Constants.privKey;
                                                    if (r && (!this.privKey || !i)) throw new Error("Cannot do private key derivation without private key");
                                                    var s = null;
                                                    if (this.privKey) {
                                                        var _t19 = null;
                                                        _t19 = r ? Buffer.concat([
                                                            Buffer.from([
                                                                0
                                                            ]),
                                                            this.privKey.bn.toBuffer({
                                                                size: 32
                                                            }),
                                                            e
                                                        ]) : Buffer.concat([
                                                            this.pubKey.toBuffer({
                                                                size: 32
                                                            }),
                                                            e
                                                        ]);
                                                        var _i36 = P1.sha512Hmac(_t19, this.chainCode), _n6 = p3().fromBuffer(_i36.slice(0, 32), {
                                                            size: 32
                                                        }), _a2 = _i36.slice(32, 64), _o = _n6.add(this.privKey.bn).mod(L1.getN());
                                                        s = new this.constructor(), s.chainCode = _a2, s.privKey = new this.PrivKey().fromBn(_o), s.pubKey = new K1().fromPrivKey(s.privKey);
                                                    } else {
                                                        var _t20 = Buffer.concat([
                                                            this.pubKey.toBuffer(),
                                                            e
                                                        ]), _r18 = P1.sha512Hmac(_t20, this.chainCode), _i37 = p3().fromBuffer(_r18.slice(0, 32)), _n7 = _r18.slice(32, 64), _a3 = L1.getG().mul(_i37), _o2 = this.pubKey.point, _h = _a3.add(_o2), _f = new K1();
                                                        _f.point = _h, s = new this.constructor(), s.chainCode = _n7, s.pubKey = _f;
                                                    }
                                                    s.childIndex = t;
                                                    var n = P1.sha256Ripemd160(this.pubKey.toBuffer());
                                                    return s.parentFingerPrint = n.slice(0, 4), s.versionBytesNum = this.versionBytesNum, s.depth = this.depth + 1, s;
                                                }
                                            },
                                            {
                                                key: "toPublic",
                                                value: function toPublic() {
                                                    var t = new this.constructor().fromObject(this);
                                                    return t.versionBytesNum = this.Constants.pubKey, t.privKey = void 0, t;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    var t = this.versionBytesNum === this.Constants.privKey, e = this.versionBytesNum === this.Constants.pubKey;
                                                    if (t) return new y3().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({
                                                        size: 32
                                                    })).toBuffer();
                                                    if (e) {
                                                        if (!1 === this.pubKey.compressed) throw new Error("cannot convert bip32 to buffer if pubKey is not compressed");
                                                        return new y3().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toBuffer()).toBuffer();
                                                    }
                                                    throw new Error("bip32: invalid versionBytesNum byte");
                                                }
                                            },
                                            {
                                                key: "toFastBuffer",
                                                value: function toFastBuffer() {
                                                    if (!this.versionBytesNum) return Buffer.alloc(0);
                                                    var t = this.versionBytesNum === this.Constants.privKey, e = this.versionBytesNum === this.Constants.pubKey;
                                                    if (t) return new y3().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).writeUInt8(0).write(this.privKey.bn.toBuffer({
                                                        size: 32
                                                    })).toBuffer();
                                                    if (e) return new y3().writeUInt32BE(this.versionBytesNum).writeUInt8(this.depth).write(this.parentFingerPrint).writeUInt32BE(this.childIndex).write(this.chainCode).write(this.pubKey.toFastBuffer()).toBuffer();
                                                    throw new Error("bip32: invalid versionBytesNum byte");
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return k4.encode(this.toBuffer());
                                                }
                                            },
                                            {
                                                key: "asyncToString",
                                                value: function() {
                                                    var _asyncToString4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee99() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee99$(_context105) {
                                                            while(true)switch(_context105.prev = _context105.next){
                                                                case 0:
                                                                    _context105.next = 2;
                                                                    return E1.asyncObjectMethod(this, "toString", []);
                                                                case 2:
                                                                    t = _context105.sent;
                                                                    return _context105.abrupt("return", JSON.parse(t.resbuf.toString()));
                                                                case 4:
                                                                case "end":
                                                                    return _context105.stop();
                                                            }
                                                        }, _callee99, this);
                                                    }));
                                                    function asyncToString() {
                                                        return _asyncToString4.apply(this, arguments);
                                                    }
                                                    return asyncToString;
                                                }()
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return this.toFastHex();
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromFastHex(t);
                                                }
                                            },
                                            {
                                                key: "isPrivate",
                                                value: function isPrivate() {
                                                    return this.versionBytesNum === this.Constants.privKey;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    return new this().fromRandom();
                                                }
                                            },
                                            {
                                                key: "fromSeed",
                                                value: function fromSeed(t) {
                                                    return new this().fromSeed(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromSeed",
                                                value: function asyncFromSeed(t) {
                                                    return new this().asyncFromSeed(t);
                                                }
                                            }
                                        ]);
                                        return G;
                                    }(S1);
                                    G1.Mainnet = /*#__PURE__*/ function(_G) {
                                        _inherits(_class14, _G);
                                        var _super53 = _createSuper(_class14);
                                        function _class14(t, e, r, i, s, n, a) {
                                            _classCallCheck2(this, _class14);
                                            return _super53.call(this, t, e, r, i, s, n, a, x.Mainnet.Bip32, V1.Mainnet);
                                        }
                                        return _createClass2(_class14);
                                    }(G1), G1.Testnet = /*#__PURE__*/ function(_G2) {
                                        _inherits(_class15, _G2);
                                        var _super54 = _createSuper(_class15);
                                        function _class15(t, e, r, i, s, n, a) {
                                            _classCallCheck2(this, _class15);
                                            return _super54.call(this, t, e, r, i, s, n, a, x.Testnet.Bip32, V1.Testnet);
                                        }
                                        return _createClass2(_class15);
                                    }(G1);
                                    var J = [
                                        "abandon",
                                        "ability",
                                        "able",
                                        "about",
                                        "above",
                                        "absent",
                                        "absorb",
                                        "abstract",
                                        "absurd",
                                        "abuse",
                                        "access",
                                        "accident",
                                        "account",
                                        "accuse",
                                        "achieve",
                                        "acid",
                                        "acoustic",
                                        "acquire",
                                        "across",
                                        "act",
                                        "action",
                                        "actor",
                                        "actress",
                                        "actual",
                                        "adapt",
                                        "add",
                                        "addict",
                                        "address",
                                        "adjust",
                                        "admit",
                                        "adult",
                                        "advance",
                                        "advice",
                                        "aerobic",
                                        "affair",
                                        "afford",
                                        "afraid",
                                        "again",
                                        "age",
                                        "agent",
                                        "agree",
                                        "ahead",
                                        "aim",
                                        "air",
                                        "airport",
                                        "aisle",
                                        "alarm",
                                        "album",
                                        "alcohol",
                                        "alert",
                                        "alien",
                                        "all",
                                        "alley",
                                        "allow",
                                        "almost",
                                        "alone",
                                        "alpha",
                                        "already",
                                        "also",
                                        "alter",
                                        "always",
                                        "amateur",
                                        "amazing",
                                        "among",
                                        "amount",
                                        "amused",
                                        "analyst",
                                        "anchor",
                                        "ancient",
                                        "anger",
                                        "angle",
                                        "angry",
                                        "animal",
                                        "ankle",
                                        "announce",
                                        "annual",
                                        "another",
                                        "answer",
                                        "antenna",
                                        "antique",
                                        "anxiety",
                                        "any",
                                        "apart",
                                        "apology",
                                        "appear",
                                        "apple",
                                        "approve",
                                        "april",
                                        "arch",
                                        "arctic",
                                        "area",
                                        "arena",
                                        "argue",
                                        "arm",
                                        "armed",
                                        "armor",
                                        "army",
                                        "around",
                                        "arrange",
                                        "arrest",
                                        "arrive",
                                        "arrow",
                                        "art",
                                        "artefact",
                                        "artist",
                                        "artwork",
                                        "ask",
                                        "aspect",
                                        "assault",
                                        "asset",
                                        "assist",
                                        "assume",
                                        "asthma",
                                        "athlete",
                                        "atom",
                                        "attack",
                                        "attend",
                                        "attitude",
                                        "attract",
                                        "auction",
                                        "audit",
                                        "august",
                                        "aunt",
                                        "author",
                                        "auto",
                                        "autumn",
                                        "average",
                                        "avocado",
                                        "avoid",
                                        "awake",
                                        "aware",
                                        "away",
                                        "awesome",
                                        "awful",
                                        "awkward",
                                        "axis",
                                        "baby",
                                        "bachelor",
                                        "bacon",
                                        "badge",
                                        "bag",
                                        "balance",
                                        "balcony",
                                        "ball",
                                        "bamboo",
                                        "banana",
                                        "banner",
                                        "bar",
                                        "barely",
                                        "bargain",
                                        "barrel",
                                        "base",
                                        "basic",
                                        "basket",
                                        "battle",
                                        "beach",
                                        "bean",
                                        "beauty",
                                        "because",
                                        "become",
                                        "beef",
                                        "before",
                                        "begin",
                                        "behave",
                                        "behind",
                                        "believe",
                                        "below",
                                        "belt",
                                        "bench",
                                        "benefit",
                                        "best",
                                        "betray",
                                        "better",
                                        "between",
                                        "beyond",
                                        "bicycle",
                                        "bid",
                                        "bike",
                                        "bind",
                                        "biology",
                                        "bird",
                                        "birth",
                                        "bitter",
                                        "black",
                                        "blade",
                                        "blame",
                                        "blanket",
                                        "blast",
                                        "bleak",
                                        "bless",
                                        "blind",
                                        "blood",
                                        "blossom",
                                        "blouse",
                                        "blue",
                                        "blur",
                                        "blush",
                                        "board",
                                        "boat",
                                        "body",
                                        "boil",
                                        "bomb",
                                        "bone",
                                        "bonus",
                                        "book",
                                        "boost",
                                        "border",
                                        "boring",
                                        "borrow",
                                        "boss",
                                        "bottom",
                                        "bounce",
                                        "box",
                                        "boy",
                                        "bracket",
                                        "brain",
                                        "brand",
                                        "brass",
                                        "brave",
                                        "bread",
                                        "breeze",
                                        "brick",
                                        "bridge",
                                        "brief",
                                        "bright",
                                        "bring",
                                        "brisk",
                                        "broccoli",
                                        "broken",
                                        "bronze",
                                        "broom",
                                        "brother",
                                        "brown",
                                        "brush",
                                        "bubble",
                                        "buddy",
                                        "budget",
                                        "buffalo",
                                        "build",
                                        "bulb",
                                        "bulk",
                                        "bullet",
                                        "bundle",
                                        "bunker",
                                        "burden",
                                        "burger",
                                        "burst",
                                        "bus",
                                        "business",
                                        "busy",
                                        "butter",
                                        "buyer",
                                        "buzz",
                                        "cabbage",
                                        "cabin",
                                        "cable",
                                        "cactus",
                                        "cage",
                                        "cake",
                                        "call",
                                        "calm",
                                        "camera",
                                        "camp",
                                        "can",
                                        "canal",
                                        "cancel",
                                        "candy",
                                        "cannon",
                                        "canoe",
                                        "canvas",
                                        "canyon",
                                        "capable",
                                        "capital",
                                        "captain",
                                        "car",
                                        "carbon",
                                        "card",
                                        "cargo",
                                        "carpet",
                                        "carry",
                                        "cart",
                                        "case",
                                        "cash",
                                        "casino",
                                        "castle",
                                        "casual",
                                        "cat",
                                        "catalog",
                                        "catch",
                                        "category",
                                        "cattle",
                                        "caught",
                                        "cause",
                                        "caution",
                                        "cave",
                                        "ceiling",
                                        "celery",
                                        "cement",
                                        "census",
                                        "century",
                                        "cereal",
                                        "certain",
                                        "chair",
                                        "chalk",
                                        "champion",
                                        "change",
                                        "chaos",
                                        "chapter",
                                        "charge",
                                        "chase",
                                        "chat",
                                        "cheap",
                                        "check",
                                        "cheese",
                                        "chef",
                                        "cherry",
                                        "chest",
                                        "chicken",
                                        "chief",
                                        "child",
                                        "chimney",
                                        "choice",
                                        "choose",
                                        "chronic",
                                        "chuckle",
                                        "chunk",
                                        "churn",
                                        "cigar",
                                        "cinnamon",
                                        "circle",
                                        "citizen",
                                        "city",
                                        "civil",
                                        "claim",
                                        "clap",
                                        "clarify",
                                        "claw",
                                        "clay",
                                        "clean",
                                        "clerk",
                                        "clever",
                                        "click",
                                        "client",
                                        "cliff",
                                        "climb",
                                        "clinic",
                                        "clip",
                                        "clock",
                                        "clog",
                                        "close",
                                        "cloth",
                                        "cloud",
                                        "clown",
                                        "club",
                                        "clump",
                                        "cluster",
                                        "clutch",
                                        "coach",
                                        "coast",
                                        "coconut",
                                        "code",
                                        "coffee",
                                        "coil",
                                        "coin",
                                        "collect",
                                        "color",
                                        "column",
                                        "combine",
                                        "come",
                                        "comfort",
                                        "comic",
                                        "common",
                                        "company",
                                        "concert",
                                        "conduct",
                                        "confirm",
                                        "congress",
                                        "connect",
                                        "consider",
                                        "control",
                                        "convince",
                                        "cook",
                                        "cool",
                                        "copper",
                                        "copy",
                                        "coral",
                                        "core",
                                        "corn",
                                        "correct",
                                        "cost",
                                        "cotton",
                                        "couch",
                                        "country",
                                        "couple",
                                        "course",
                                        "cousin",
                                        "cover",
                                        "coyote",
                                        "crack",
                                        "cradle",
                                        "craft",
                                        "cram",
                                        "crane",
                                        "crash",
                                        "crater",
                                        "crawl",
                                        "crazy",
                                        "cream",
                                        "credit",
                                        "creek",
                                        "crew",
                                        "cricket",
                                        "crime",
                                        "crisp",
                                        "critic",
                                        "crop",
                                        "cross",
                                        "crouch",
                                        "crowd",
                                        "crucial",
                                        "cruel",
                                        "cruise",
                                        "crumble",
                                        "crunch",
                                        "crush",
                                        "cry",
                                        "crystal",
                                        "cube",
                                        "culture",
                                        "cup",
                                        "cupboard",
                                        "curious",
                                        "current",
                                        "curtain",
                                        "curve",
                                        "cushion",
                                        "custom",
                                        "cute",
                                        "cycle",
                                        "dad",
                                        "damage",
                                        "damp",
                                        "dance",
                                        "danger",
                                        "daring",
                                        "dash",
                                        "daughter",
                                        "dawn",
                                        "day",
                                        "deal",
                                        "debate",
                                        "debris",
                                        "decade",
                                        "december",
                                        "decide",
                                        "decline",
                                        "decorate",
                                        "decrease",
                                        "deer",
                                        "defense",
                                        "define",
                                        "defy",
                                        "degree",
                                        "delay",
                                        "deliver",
                                        "demand",
                                        "demise",
                                        "denial",
                                        "dentist",
                                        "deny",
                                        "depart",
                                        "depend",
                                        "deposit",
                                        "depth",
                                        "deputy",
                                        "derive",
                                        "describe",
                                        "desert",
                                        "design",
                                        "desk",
                                        "despair",
                                        "destroy",
                                        "detail",
                                        "detect",
                                        "develop",
                                        "device",
                                        "devote",
                                        "diagram",
                                        "dial",
                                        "diamond",
                                        "diary",
                                        "dice",
                                        "diesel",
                                        "diet",
                                        "differ",
                                        "digital",
                                        "dignity",
                                        "dilemma",
                                        "dinner",
                                        "dinosaur",
                                        "direct",
                                        "dirt",
                                        "disagree",
                                        "discover",
                                        "disease",
                                        "dish",
                                        "dismiss",
                                        "disorder",
                                        "display",
                                        "distance",
                                        "divert",
                                        "divide",
                                        "divorce",
                                        "dizzy",
                                        "doctor",
                                        "document",
                                        "dog",
                                        "doll",
                                        "dolphin",
                                        "domain",
                                        "donate",
                                        "donkey",
                                        "donor",
                                        "door",
                                        "dose",
                                        "double",
                                        "dove",
                                        "draft",
                                        "dragon",
                                        "drama",
                                        "drastic",
                                        "draw",
                                        "dream",
                                        "dress",
                                        "drift",
                                        "drill",
                                        "drink",
                                        "drip",
                                        "drive",
                                        "drop",
                                        "drum",
                                        "dry",
                                        "duck",
                                        "dumb",
                                        "dune",
                                        "during",
                                        "dust",
                                        "dutch",
                                        "duty",
                                        "dwarf",
                                        "dynamic",
                                        "eager",
                                        "eagle",
                                        "early",
                                        "earn",
                                        "earth",
                                        "easily",
                                        "east",
                                        "easy",
                                        "echo",
                                        "ecology",
                                        "economy",
                                        "edge",
                                        "edit",
                                        "educate",
                                        "effort",
                                        "egg",
                                        "eight",
                                        "either",
                                        "elbow",
                                        "elder",
                                        "electric",
                                        "elegant",
                                        "element",
                                        "elephant",
                                        "elevator",
                                        "elite",
                                        "else",
                                        "embark",
                                        "embody",
                                        "embrace",
                                        "emerge",
                                        "emotion",
                                        "employ",
                                        "empower",
                                        "empty",
                                        "enable",
                                        "enact",
                                        "end",
                                        "endless",
                                        "endorse",
                                        "enemy",
                                        "energy",
                                        "enforce",
                                        "engage",
                                        "engine",
                                        "enhance",
                                        "enjoy",
                                        "enlist",
                                        "enough",
                                        "enrich",
                                        "enroll",
                                        "ensure",
                                        "enter",
                                        "entire",
                                        "entry",
                                        "envelope",
                                        "episode",
                                        "equal",
                                        "equip",
                                        "era",
                                        "erase",
                                        "erode",
                                        "erosion",
                                        "error",
                                        "erupt",
                                        "escape",
                                        "essay",
                                        "essence",
                                        "estate",
                                        "eternal",
                                        "ethics",
                                        "evidence",
                                        "evil",
                                        "evoke",
                                        "evolve",
                                        "exact",
                                        "example",
                                        "excess",
                                        "exchange",
                                        "excite",
                                        "exclude",
                                        "excuse",
                                        "execute",
                                        "exercise",
                                        "exhaust",
                                        "exhibit",
                                        "exile",
                                        "exist",
                                        "exit",
                                        "exotic",
                                        "expand",
                                        "expect",
                                        "expire",
                                        "explain",
                                        "expose",
                                        "express",
                                        "extend",
                                        "extra",
                                        "eye",
                                        "eyebrow",
                                        "fabric",
                                        "face",
                                        "faculty",
                                        "fade",
                                        "faint",
                                        "faith",
                                        "fall",
                                        "false",
                                        "fame",
                                        "family",
                                        "famous",
                                        "fan",
                                        "fancy",
                                        "fantasy",
                                        "farm",
                                        "fashion",
                                        "fat",
                                        "fatal",
                                        "father",
                                        "fatigue",
                                        "fault",
                                        "favorite",
                                        "feature",
                                        "february",
                                        "federal",
                                        "fee",
                                        "feed",
                                        "feel",
                                        "female",
                                        "fence",
                                        "festival",
                                        "fetch",
                                        "fever",
                                        "few",
                                        "fiber",
                                        "fiction",
                                        "field",
                                        "figure",
                                        "file",
                                        "film",
                                        "filter",
                                        "final",
                                        "find",
                                        "fine",
                                        "finger",
                                        "finish",
                                        "fire",
                                        "firm",
                                        "first",
                                        "fiscal",
                                        "fish",
                                        "fit",
                                        "fitness",
                                        "fix",
                                        "flag",
                                        "flame",
                                        "flash",
                                        "flat",
                                        "flavor",
                                        "flee",
                                        "flight",
                                        "flip",
                                        "float",
                                        "flock",
                                        "floor",
                                        "flower",
                                        "fluid",
                                        "flush",
                                        "fly",
                                        "foam",
                                        "focus",
                                        "fog",
                                        "foil",
                                        "fold",
                                        "follow",
                                        "food",
                                        "foot",
                                        "force",
                                        "forest",
                                        "forget",
                                        "fork",
                                        "fortune",
                                        "forum",
                                        "forward",
                                        "fossil",
                                        "foster",
                                        "found",
                                        "fox",
                                        "fragile",
                                        "frame",
                                        "frequent",
                                        "fresh",
                                        "friend",
                                        "fringe",
                                        "frog",
                                        "front",
                                        "frost",
                                        "frown",
                                        "frozen",
                                        "fruit",
                                        "fuel",
                                        "fun",
                                        "funny",
                                        "furnace",
                                        "fury",
                                        "future",
                                        "gadget",
                                        "gain",
                                        "galaxy",
                                        "gallery",
                                        "game",
                                        "gap",
                                        "garage",
                                        "garbage",
                                        "garden",
                                        "garlic",
                                        "garment",
                                        "gas",
                                        "gasp",
                                        "gate",
                                        "gather",
                                        "gauge",
                                        "gaze",
                                        "general",
                                        "genius",
                                        "genre",
                                        "gentle",
                                        "genuine",
                                        "gesture",
                                        "ghost",
                                        "giant",
                                        "gift",
                                        "giggle",
                                        "ginger",
                                        "giraffe",
                                        "girl",
                                        "give",
                                        "glad",
                                        "glance",
                                        "glare",
                                        "glass",
                                        "glide",
                                        "glimpse",
                                        "globe",
                                        "gloom",
                                        "glory",
                                        "glove",
                                        "glow",
                                        "glue",
                                        "goat",
                                        "goddess",
                                        "gold",
                                        "good",
                                        "goose",
                                        "gorilla",
                                        "gospel",
                                        "gossip",
                                        "govern",
                                        "gown",
                                        "grab",
                                        "grace",
                                        "grain",
                                        "grant",
                                        "grape",
                                        "grass",
                                        "gravity",
                                        "great",
                                        "green",
                                        "grid",
                                        "grief",
                                        "grit",
                                        "grocery",
                                        "group",
                                        "grow",
                                        "grunt",
                                        "guard",
                                        "guess",
                                        "guide",
                                        "guilt",
                                        "guitar",
                                        "gun",
                                        "gym",
                                        "habit",
                                        "hair",
                                        "half",
                                        "hammer",
                                        "hamster",
                                        "hand",
                                        "happy",
                                        "harbor",
                                        "hard",
                                        "harsh",
                                        "harvest",
                                        "hat",
                                        "have",
                                        "hawk",
                                        "hazard",
                                        "head",
                                        "health",
                                        "heart",
                                        "heavy",
                                        "hedgehog",
                                        "height",
                                        "hello",
                                        "helmet",
                                        "help",
                                        "hen",
                                        "hero",
                                        "hidden",
                                        "high",
                                        "hill",
                                        "hint",
                                        "hip",
                                        "hire",
                                        "history",
                                        "hobby",
                                        "hockey",
                                        "hold",
                                        "hole",
                                        "holiday",
                                        "hollow",
                                        "home",
                                        "honey",
                                        "hood",
                                        "hope",
                                        "horn",
                                        "horror",
                                        "horse",
                                        "hospital",
                                        "host",
                                        "hotel",
                                        "hour",
                                        "hover",
                                        "hub",
                                        "huge",
                                        "human",
                                        "humble",
                                        "humor",
                                        "hundred",
                                        "hungry",
                                        "hunt",
                                        "hurdle",
                                        "hurry",
                                        "hurt",
                                        "husband",
                                        "hybrid",
                                        "ice",
                                        "icon",
                                        "idea",
                                        "identify",
                                        "idle",
                                        "ignore",
                                        "ill",
                                        "illegal",
                                        "illness",
                                        "image",
                                        "imitate",
                                        "immense",
                                        "immune",
                                        "impact",
                                        "impose",
                                        "improve",
                                        "impulse",
                                        "inch",
                                        "include",
                                        "income",
                                        "increase",
                                        "index",
                                        "indicate",
                                        "indoor",
                                        "industry",
                                        "infant",
                                        "inflict",
                                        "inform",
                                        "inhale",
                                        "inherit",
                                        "initial",
                                        "inject",
                                        "injury",
                                        "inmate",
                                        "inner",
                                        "innocent",
                                        "input",
                                        "inquiry",
                                        "insane",
                                        "insect",
                                        "inside",
                                        "inspire",
                                        "install",
                                        "intact",
                                        "interest",
                                        "into",
                                        "invest",
                                        "invite",
                                        "involve",
                                        "iron",
                                        "island",
                                        "isolate",
                                        "issue",
                                        "item",
                                        "ivory",
                                        "jacket",
                                        "jaguar",
                                        "jar",
                                        "jazz",
                                        "jealous",
                                        "jeans",
                                        "jelly",
                                        "jewel",
                                        "job",
                                        "join",
                                        "joke",
                                        "journey",
                                        "joy",
                                        "judge",
                                        "juice",
                                        "jump",
                                        "jungle",
                                        "junior",
                                        "junk",
                                        "just",
                                        "kangaroo",
                                        "keen",
                                        "keep",
                                        "ketchup",
                                        "key",
                                        "kick",
                                        "kid",
                                        "kidney",
                                        "kind",
                                        "kingdom",
                                        "kiss",
                                        "kit",
                                        "kitchen",
                                        "kite",
                                        "kitten",
                                        "kiwi",
                                        "knee",
                                        "knife",
                                        "knock",
                                        "know",
                                        "lab",
                                        "label",
                                        "labor",
                                        "ladder",
                                        "lady",
                                        "lake",
                                        "lamp",
                                        "language",
                                        "laptop",
                                        "large",
                                        "later",
                                        "latin",
                                        "laugh",
                                        "laundry",
                                        "lava",
                                        "law",
                                        "lawn",
                                        "lawsuit",
                                        "layer",
                                        "lazy",
                                        "leader",
                                        "leaf",
                                        "learn",
                                        "leave",
                                        "lecture",
                                        "left",
                                        "leg",
                                        "legal",
                                        "legend",
                                        "leisure",
                                        "lemon",
                                        "lend",
                                        "length",
                                        "lens",
                                        "leopard",
                                        "lesson",
                                        "letter",
                                        "level",
                                        "liar",
                                        "liberty",
                                        "library",
                                        "license",
                                        "life",
                                        "lift",
                                        "light",
                                        "like",
                                        "limb",
                                        "limit",
                                        "link",
                                        "lion",
                                        "liquid",
                                        "list",
                                        "little",
                                        "live",
                                        "lizard",
                                        "load",
                                        "loan",
                                        "lobster",
                                        "local",
                                        "lock",
                                        "logic",
                                        "lonely",
                                        "long",
                                        "loop",
                                        "lottery",
                                        "loud",
                                        "lounge",
                                        "love",
                                        "loyal",
                                        "lucky",
                                        "luggage",
                                        "lumber",
                                        "lunar",
                                        "lunch",
                                        "luxury",
                                        "lyrics",
                                        "machine",
                                        "mad",
                                        "magic",
                                        "magnet",
                                        "maid",
                                        "mail",
                                        "main",
                                        "major",
                                        "make",
                                        "mammal",
                                        "man",
                                        "manage",
                                        "mandate",
                                        "mango",
                                        "mansion",
                                        "manual",
                                        "maple",
                                        "marble",
                                        "march",
                                        "margin",
                                        "marine",
                                        "market",
                                        "marriage",
                                        "mask",
                                        "mass",
                                        "master",
                                        "match",
                                        "material",
                                        "math",
                                        "matrix",
                                        "matter",
                                        "maximum",
                                        "maze",
                                        "meadow",
                                        "mean",
                                        "measure",
                                        "meat",
                                        "mechanic",
                                        "medal",
                                        "media",
                                        "melody",
                                        "melt",
                                        "member",
                                        "memory",
                                        "mention",
                                        "menu",
                                        "mercy",
                                        "merge",
                                        "merit",
                                        "merry",
                                        "mesh",
                                        "message",
                                        "metal",
                                        "method",
                                        "middle",
                                        "midnight",
                                        "milk",
                                        "million",
                                        "mimic",
                                        "mind",
                                        "minimum",
                                        "minor",
                                        "minute",
                                        "miracle",
                                        "mirror",
                                        "misery",
                                        "miss",
                                        "mistake",
                                        "mix",
                                        "mixed",
                                        "mixture",
                                        "mobile",
                                        "model",
                                        "modify",
                                        "mom",
                                        "moment",
                                        "monitor",
                                        "monkey",
                                        "monster",
                                        "month",
                                        "moon",
                                        "moral",
                                        "more",
                                        "morning",
                                        "mosquito",
                                        "mother",
                                        "motion",
                                        "motor",
                                        "mountain",
                                        "mouse",
                                        "move",
                                        "movie",
                                        "much",
                                        "muffin",
                                        "mule",
                                        "multiply",
                                        "muscle",
                                        "museum",
                                        "mushroom",
                                        "music",
                                        "must",
                                        "mutual",
                                        "myself",
                                        "mystery",
                                        "myth",
                                        "naive",
                                        "name",
                                        "napkin",
                                        "narrow",
                                        "nasty",
                                        "nation",
                                        "nature",
                                        "near",
                                        "neck",
                                        "need",
                                        "negative",
                                        "neglect",
                                        "neither",
                                        "nephew",
                                        "nerve",
                                        "nest",
                                        "net",
                                        "network",
                                        "neutral",
                                        "never",
                                        "news",
                                        "next",
                                        "nice",
                                        "night",
                                        "noble",
                                        "noise",
                                        "nominee",
                                        "noodle",
                                        "normal",
                                        "north",
                                        "nose",
                                        "notable",
                                        "note",
                                        "nothing",
                                        "notice",
                                        "novel",
                                        "now",
                                        "nuclear",
                                        "number",
                                        "nurse",
                                        "nut",
                                        "oak",
                                        "obey",
                                        "object",
                                        "oblige",
                                        "obscure",
                                        "observe",
                                        "obtain",
                                        "obvious",
                                        "occur",
                                        "ocean",
                                        "october",
                                        "odor",
                                        "off",
                                        "offer",
                                        "office",
                                        "often",
                                        "oil",
                                        "okay",
                                        "old",
                                        "olive",
                                        "olympic",
                                        "omit",
                                        "once",
                                        "one",
                                        "onion",
                                        "online",
                                        "only",
                                        "open",
                                        "opera",
                                        "opinion",
                                        "oppose",
                                        "option",
                                        "orange",
                                        "orbit",
                                        "orchard",
                                        "order",
                                        "ordinary",
                                        "organ",
                                        "orient",
                                        "original",
                                        "orphan",
                                        "ostrich",
                                        "other",
                                        "outdoor",
                                        "outer",
                                        "output",
                                        "outside",
                                        "oval",
                                        "oven",
                                        "over",
                                        "own",
                                        "owner",
                                        "oxygen",
                                        "oyster",
                                        "ozone",
                                        "pact",
                                        "paddle",
                                        "page",
                                        "pair",
                                        "palace",
                                        "palm",
                                        "panda",
                                        "panel",
                                        "panic",
                                        "panther",
                                        "paper",
                                        "parade",
                                        "parent",
                                        "park",
                                        "parrot",
                                        "party",
                                        "pass",
                                        "patch",
                                        "path",
                                        "patient",
                                        "patrol",
                                        "pattern",
                                        "pause",
                                        "pave",
                                        "payment",
                                        "peace",
                                        "peanut",
                                        "pear",
                                        "peasant",
                                        "pelican",
                                        "pen",
                                        "penalty",
                                        "pencil",
                                        "people",
                                        "pepper",
                                        "perfect",
                                        "permit",
                                        "person",
                                        "pet",
                                        "phone",
                                        "photo",
                                        "phrase",
                                        "physical",
                                        "piano",
                                        "picnic",
                                        "picture",
                                        "piece",
                                        "pig",
                                        "pigeon",
                                        "pill",
                                        "pilot",
                                        "pink",
                                        "pioneer",
                                        "pipe",
                                        "pistol",
                                        "pitch",
                                        "pizza",
                                        "place",
                                        "planet",
                                        "plastic",
                                        "plate",
                                        "play",
                                        "please",
                                        "pledge",
                                        "pluck",
                                        "plug",
                                        "plunge",
                                        "poem",
                                        "poet",
                                        "point",
                                        "polar",
                                        "pole",
                                        "police",
                                        "pond",
                                        "pony",
                                        "pool",
                                        "popular",
                                        "portion",
                                        "position",
                                        "possible",
                                        "post",
                                        "potato",
                                        "pottery",
                                        "poverty",
                                        "powder",
                                        "power",
                                        "practice",
                                        "praise",
                                        "predict",
                                        "prefer",
                                        "prepare",
                                        "present",
                                        "pretty",
                                        "prevent",
                                        "price",
                                        "pride",
                                        "primary",
                                        "print",
                                        "priority",
                                        "prison",
                                        "private",
                                        "prize",
                                        "problem",
                                        "process",
                                        "produce",
                                        "profit",
                                        "program",
                                        "project",
                                        "promote",
                                        "proof",
                                        "property",
                                        "prosper",
                                        "protect",
                                        "proud",
                                        "provide",
                                        "public",
                                        "pudding",
                                        "pull",
                                        "pulp",
                                        "pulse",
                                        "pumpkin",
                                        "punch",
                                        "pupil",
                                        "puppy",
                                        "purchase",
                                        "purity",
                                        "purpose",
                                        "purse",
                                        "push",
                                        "put",
                                        "puzzle",
                                        "pyramid",
                                        "quality",
                                        "quantum",
                                        "quarter",
                                        "question",
                                        "quick",
                                        "quit",
                                        "quiz",
                                        "quote",
                                        "rabbit",
                                        "raccoon",
                                        "race",
                                        "rack",
                                        "radar",
                                        "radio",
                                        "rail",
                                        "rain",
                                        "raise",
                                        "rally",
                                        "ramp",
                                        "ranch",
                                        "random",
                                        "range",
                                        "rapid",
                                        "rare",
                                        "rate",
                                        "rather",
                                        "raven",
                                        "raw",
                                        "razor",
                                        "ready",
                                        "real",
                                        "reason",
                                        "rebel",
                                        "rebuild",
                                        "recall",
                                        "receive",
                                        "recipe",
                                        "record",
                                        "recycle",
                                        "reduce",
                                        "reflect",
                                        "reform",
                                        "refuse",
                                        "region",
                                        "regret",
                                        "regular",
                                        "reject",
                                        "relax",
                                        "release",
                                        "relief",
                                        "rely",
                                        "remain",
                                        "remember",
                                        "remind",
                                        "remove",
                                        "render",
                                        "renew",
                                        "rent",
                                        "reopen",
                                        "repair",
                                        "repeat",
                                        "replace",
                                        "report",
                                        "require",
                                        "rescue",
                                        "resemble",
                                        "resist",
                                        "resource",
                                        "response",
                                        "result",
                                        "retire",
                                        "retreat",
                                        "return",
                                        "reunion",
                                        "reveal",
                                        "review",
                                        "reward",
                                        "rhythm",
                                        "rib",
                                        "ribbon",
                                        "rice",
                                        "rich",
                                        "ride",
                                        "ridge",
                                        "rifle",
                                        "right",
                                        "rigid",
                                        "ring",
                                        "riot",
                                        "ripple",
                                        "risk",
                                        "ritual",
                                        "rival",
                                        "river",
                                        "road",
                                        "roast",
                                        "robot",
                                        "robust",
                                        "rocket",
                                        "romance",
                                        "roof",
                                        "rookie",
                                        "room",
                                        "rose",
                                        "rotate",
                                        "rough",
                                        "round",
                                        "route",
                                        "royal",
                                        "rubber",
                                        "rude",
                                        "rug",
                                        "rule",
                                        "run",
                                        "runway",
                                        "rural",
                                        "sad",
                                        "saddle",
                                        "sadness",
                                        "safe",
                                        "sail",
                                        "salad",
                                        "salmon",
                                        "salon",
                                        "salt",
                                        "salute",
                                        "same",
                                        "sample",
                                        "sand",
                                        "satisfy",
                                        "satoshi",
                                        "sauce",
                                        "sausage",
                                        "save",
                                        "say",
                                        "scale",
                                        "scan",
                                        "scare",
                                        "scatter",
                                        "scene",
                                        "scheme",
                                        "school",
                                        "science",
                                        "scissors",
                                        "scorpion",
                                        "scout",
                                        "scrap",
                                        "screen",
                                        "script",
                                        "scrub",
                                        "sea",
                                        "search",
                                        "season",
                                        "seat",
                                        "second",
                                        "secret",
                                        "section",
                                        "security",
                                        "seed",
                                        "seek",
                                        "segment",
                                        "select",
                                        "sell",
                                        "seminar",
                                        "senior",
                                        "sense",
                                        "sentence",
                                        "series",
                                        "service",
                                        "session",
                                        "settle",
                                        "setup",
                                        "seven",
                                        "shadow",
                                        "shaft",
                                        "shallow",
                                        "share",
                                        "shed",
                                        "shell",
                                        "sheriff",
                                        "shield",
                                        "shift",
                                        "shine",
                                        "ship",
                                        "shiver",
                                        "shock",
                                        "shoe",
                                        "shoot",
                                        "shop",
                                        "short",
                                        "shoulder",
                                        "shove",
                                        "shrimp",
                                        "shrug",
                                        "shuffle",
                                        "shy",
                                        "sibling",
                                        "sick",
                                        "side",
                                        "siege",
                                        "sight",
                                        "sign",
                                        "silent",
                                        "silk",
                                        "silly",
                                        "silver",
                                        "similar",
                                        "simple",
                                        "since",
                                        "sing",
                                        "siren",
                                        "sister",
                                        "situate",
                                        "six",
                                        "size",
                                        "skate",
                                        "sketch",
                                        "ski",
                                        "skill",
                                        "skin",
                                        "skirt",
                                        "skull",
                                        "slab",
                                        "slam",
                                        "sleep",
                                        "slender",
                                        "slice",
                                        "slide",
                                        "slight",
                                        "slim",
                                        "slogan",
                                        "slot",
                                        "slow",
                                        "slush",
                                        "small",
                                        "smart",
                                        "smile",
                                        "smoke",
                                        "smooth",
                                        "snack",
                                        "snake",
                                        "snap",
                                        "sniff",
                                        "snow",
                                        "soap",
                                        "soccer",
                                        "social",
                                        "sock",
                                        "soda",
                                        "soft",
                                        "solar",
                                        "soldier",
                                        "solid",
                                        "solution",
                                        "solve",
                                        "someone",
                                        "song",
                                        "soon",
                                        "sorry",
                                        "sort",
                                        "soul",
                                        "sound",
                                        "soup",
                                        "source",
                                        "south",
                                        "space",
                                        "spare",
                                        "spatial",
                                        "spawn",
                                        "speak",
                                        "special",
                                        "speed",
                                        "spell",
                                        "spend",
                                        "sphere",
                                        "spice",
                                        "spider",
                                        "spike",
                                        "spin",
                                        "spirit",
                                        "split",
                                        "spoil",
                                        "sponsor",
                                        "spoon",
                                        "sport",
                                        "spot",
                                        "spray",
                                        "spread",
                                        "spring",
                                        "spy",
                                        "square",
                                        "squeeze",
                                        "squirrel",
                                        "stable",
                                        "stadium",
                                        "staff",
                                        "stage",
                                        "stairs",
                                        "stamp",
                                        "stand",
                                        "start",
                                        "state",
                                        "stay",
                                        "steak",
                                        "steel",
                                        "stem",
                                        "step",
                                        "stereo",
                                        "stick",
                                        "still",
                                        "sting",
                                        "stock",
                                        "stomach",
                                        "stone",
                                        "stool",
                                        "story",
                                        "stove",
                                        "strategy",
                                        "street",
                                        "strike",
                                        "strong",
                                        "struggle",
                                        "student",
                                        "stuff",
                                        "stumble",
                                        "style",
                                        "subject",
                                        "submit",
                                        "subway",
                                        "success",
                                        "such",
                                        "sudden",
                                        "suffer",
                                        "sugar",
                                        "suggest",
                                        "suit",
                                        "summer",
                                        "sun",
                                        "sunny",
                                        "sunset",
                                        "super",
                                        "supply",
                                        "supreme",
                                        "sure",
                                        "surface",
                                        "surge",
                                        "surprise",
                                        "surround",
                                        "survey",
                                        "suspect",
                                        "sustain",
                                        "swallow",
                                        "swamp",
                                        "swap",
                                        "swarm",
                                        "swear",
                                        "sweet",
                                        "swift",
                                        "swim",
                                        "swing",
                                        "switch",
                                        "sword",
                                        "symbol",
                                        "symptom",
                                        "syrup",
                                        "system",
                                        "table",
                                        "tackle",
                                        "tag",
                                        "tail",
                                        "talent",
                                        "talk",
                                        "tank",
                                        "tape",
                                        "target",
                                        "task",
                                        "taste",
                                        "tattoo",
                                        "taxi",
                                        "teach",
                                        "team",
                                        "tell",
                                        "ten",
                                        "tenant",
                                        "tennis",
                                        "tent",
                                        "term",
                                        "test",
                                        "text",
                                        "thank",
                                        "that",
                                        "theme",
                                        "then",
                                        "theory",
                                        "there",
                                        "they",
                                        "thing",
                                        "this",
                                        "thought",
                                        "three",
                                        "thrive",
                                        "throw",
                                        "thumb",
                                        "thunder",
                                        "ticket",
                                        "tide",
                                        "tiger",
                                        "tilt",
                                        "timber",
                                        "time",
                                        "tiny",
                                        "tip",
                                        "tired",
                                        "tissue",
                                        "title",
                                        "toast",
                                        "tobacco",
                                        "today",
                                        "toddler",
                                        "toe",
                                        "together",
                                        "toilet",
                                        "token",
                                        "tomato",
                                        "tomorrow",
                                        "tone",
                                        "tongue",
                                        "tonight",
                                        "tool",
                                        "tooth",
                                        "top",
                                        "topic",
                                        "topple",
                                        "torch",
                                        "tornado",
                                        "tortoise",
                                        "toss",
                                        "total",
                                        "tourist",
                                        "toward",
                                        "tower",
                                        "town",
                                        "toy",
                                        "track",
                                        "trade",
                                        "traffic",
                                        "tragic",
                                        "train",
                                        "transfer",
                                        "trap",
                                        "trash",
                                        "travel",
                                        "tray",
                                        "treat",
                                        "tree",
                                        "trend",
                                        "trial",
                                        "tribe",
                                        "trick",
                                        "trigger",
                                        "trim",
                                        "trip",
                                        "trophy",
                                        "trouble",
                                        "truck",
                                        "true",
                                        "truly",
                                        "trumpet",
                                        "trust",
                                        "truth",
                                        "try",
                                        "tube",
                                        "tuition",
                                        "tumble",
                                        "tuna",
                                        "tunnel",
                                        "turkey",
                                        "turn",
                                        "turtle",
                                        "twelve",
                                        "twenty",
                                        "twice",
                                        "twin",
                                        "twist",
                                        "two",
                                        "type",
                                        "typical",
                                        "ugly",
                                        "umbrella",
                                        "unable",
                                        "unaware",
                                        "uncle",
                                        "uncover",
                                        "under",
                                        "undo",
                                        "unfair",
                                        "unfold",
                                        "unhappy",
                                        "uniform",
                                        "unique",
                                        "unit",
                                        "universe",
                                        "unknown",
                                        "unlock",
                                        "until",
                                        "unusual",
                                        "unveil",
                                        "update",
                                        "upgrade",
                                        "uphold",
                                        "upon",
                                        "upper",
                                        "upset",
                                        "urban",
                                        "urge",
                                        "usage",
                                        "use",
                                        "used",
                                        "useful",
                                        "useless",
                                        "usual",
                                        "utility",
                                        "vacant",
                                        "vacuum",
                                        "vague",
                                        "valid",
                                        "valley",
                                        "valve",
                                        "van",
                                        "vanish",
                                        "vapor",
                                        "various",
                                        "vast",
                                        "vault",
                                        "vehicle",
                                        "velvet",
                                        "vendor",
                                        "venture",
                                        "venue",
                                        "verb",
                                        "verify",
                                        "version",
                                        "very",
                                        "vessel",
                                        "veteran",
                                        "viable",
                                        "vibrant",
                                        "vicious",
                                        "victory",
                                        "video",
                                        "view",
                                        "village",
                                        "vintage",
                                        "violin",
                                        "virtual",
                                        "virus",
                                        "visa",
                                        "visit",
                                        "visual",
                                        "vital",
                                        "vivid",
                                        "vocal",
                                        "voice",
                                        "void",
                                        "volcano",
                                        "volume",
                                        "vote",
                                        "voyage",
                                        "wage",
                                        "wagon",
                                        "wait",
                                        "walk",
                                        "wall",
                                        "walnut",
                                        "want",
                                        "warfare",
                                        "warm",
                                        "warrior",
                                        "wash",
                                        "wasp",
                                        "waste",
                                        "water",
                                        "wave",
                                        "way",
                                        "wealth",
                                        "weapon",
                                        "wear",
                                        "weasel",
                                        "weather",
                                        "web",
                                        "wedding",
                                        "weekend",
                                        "weird",
                                        "welcome",
                                        "west",
                                        "wet",
                                        "whale",
                                        "what",
                                        "wheat",
                                        "wheel",
                                        "when",
                                        "where",
                                        "whip",
                                        "whisper",
                                        "wide",
                                        "width",
                                        "wife",
                                        "wild",
                                        "will",
                                        "win",
                                        "window",
                                        "wine",
                                        "wing",
                                        "wink",
                                        "winner",
                                        "winter",
                                        "wire",
                                        "wisdom",
                                        "wise",
                                        "wish",
                                        "witness",
                                        "wolf",
                                        "woman",
                                        "wonder",
                                        "wood",
                                        "wool",
                                        "word",
                                        "work",
                                        "world",
                                        "worry",
                                        "worth",
                                        "wrap",
                                        "wreck",
                                        "wrestle",
                                        "wrist",
                                        "write",
                                        "wrong",
                                        "yard",
                                        "year",
                                        "yellow",
                                        "you",
                                        "young",
                                        "youth",
                                        "zebra",
                                        "zero",
                                        "zone",
                                        "zoo"
                                    ];
                                    J.space = " ";
                                    var Y1 = /*#__PURE__*/ function(_S11) {
                                        _inherits(Y, _S11);
                                        var _super55 = _createSuper(Y);
                                        function Y(t, e) {
                                            var _this39;
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : J;
                                            _classCallCheck2(this, Y);
                                            _this39 = _super55.call(this, {
                                                mnemonic: t,
                                                seed: e
                                            }), _this39.Wordlist = r;
                                            return _this39;
                                        }
                                        _createClass2(Y, [
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    if (t || (t = new y3()), this.mnemonic) {
                                                        var _e16 = Buffer.from(this.mnemonic);
                                                        t.writeVarIntNum(_e16.length), t.write(_e16);
                                                    } else t.writeVarIntNum(0);
                                                    return this.seed ? (t.writeVarIntNum(this.seed.length), t.write(this.seed)) : t.writeVarIntNum(0), t;
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    var e = t.readVarIntNum();
                                                    e > 0 && (this.mnemonic = t.read(e).toString());
                                                    var r = t.readVarIntNum();
                                                    return r > 0 && (this.seed = t.read(r)), this;
                                                }
                                            },
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom(t) {
                                                    if (t || (t = 128), t % 32 != 0) throw new Error("bits must be multiple of 32");
                                                    if (t < 128) throw new Error("bits must be at least 128");
                                                    var e = D1.getRandomBuffer(t / 8);
                                                    return this.entropy2Mnemonic(e), this.mnemonic2Seed(), this;
                                                }
                                            },
                                            {
                                                key: "asyncFromRandom",
                                                value: function() {
                                                    var _asyncFromRandom5 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee100(t) {
                                                        var e, r, i;
                                                        return _regeneratorRuntime().wrap(function _callee100$(_context106) {
                                                            while(true)switch(_context106.prev = _context106.next){
                                                                case 0:
                                                                    t || (t = 128);
                                                                    e = D1.getRandomBuffer(t / 8);
                                                                    _context106.next = 4;
                                                                    return E1.asyncObjectMethod(this, "entropy2Mnemonic", [
                                                                        e
                                                                    ]);
                                                                case 4:
                                                                    r = _context106.sent;
                                                                    i = new Y().fromFastBuffer(r.resbuf);
                                                                    _context106.next = 8;
                                                                    return E1.asyncObjectMethod(i, "mnemonic2Seed", []);
                                                                case 8:
                                                                    r = _context106.sent;
                                                                    return _context106.abrupt("return", this.fromFastBuffer(r.resbuf));
                                                                case 10:
                                                                case "end":
                                                                    return _context106.stop();
                                                            }
                                                        }, _callee100, this);
                                                    }));
                                                    function asyncFromRandom(_x138) {
                                                        return _asyncFromRandom5.apply(this, arguments);
                                                    }
                                                    return asyncFromRandom;
                                                }()
                                            },
                                            {
                                                key: "fromEntropy",
                                                value: function fromEntropy(t) {
                                                    return this.entropy2Mnemonic(t), this;
                                                }
                                            },
                                            {
                                                key: "asyncFromEntropy",
                                                value: function() {
                                                    var _asyncFromEntropy2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee101(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee101$(_context107) {
                                                            while(true)switch(_context107.prev = _context107.next){
                                                                case 0:
                                                                    _context107.next = 2;
                                                                    return E1.asyncObjectMethod(this, "fromEntropy", [
                                                                        t
                                                                    ]);
                                                                case 2:
                                                                    e = _context107.sent;
                                                                    return _context107.abrupt("return", this.fromFastBuffer(e.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context107.stop();
                                                            }
                                                        }, _callee101, this);
                                                    }));
                                                    function asyncFromEntropy(_x139) {
                                                        return _asyncFromEntropy2.apply(this, arguments);
                                                    }
                                                    return asyncFromEntropy;
                                                }()
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return this.mnemonic = t, this;
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return this.mnemonic;
                                                }
                                            },
                                            {
                                                key: "toSeed",
                                                value: function toSeed(t) {
                                                    return this.mnemonic2Seed(t), this.seed;
                                                }
                                            },
                                            {
                                                key: "asyncToSeed",
                                                value: function() {
                                                    var _asyncToSeed2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee102(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee102$(_context108) {
                                                            while(true)switch(_context108.prev = _context108.next){
                                                                case 0:
                                                                    void 0 === t && (t = "");
                                                                    e = [
                                                                        t
                                                                    ];
                                                                    _context108.next = 4;
                                                                    return E1.asyncObjectMethod(this, "toSeed", e);
                                                                case 4:
                                                                    return _context108.abrupt("return", _context108.sent.resbuf);
                                                                case 5:
                                                                case "end":
                                                                    return _context108.stop();
                                                            }
                                                        }, _callee102, this);
                                                    }));
                                                    function asyncToSeed(_x140) {
                                                        return _asyncToSeed2.apply(this, arguments);
                                                    }
                                                    return asyncToSeed;
                                                }()
                                            },
                                            {
                                                key: "entropy2Mnemonic",
                                                value: function entropy2Mnemonic(t) {
                                                    if (!Buffer.isBuffer(t) || t.length < 16) throw new Error("Entropy is less than 128 bits. It must be 128 bits or more.");
                                                    var e = P1.sha256(t);
                                                    var r = "";
                                                    var i = 8 * t.length;
                                                    for(var _e17 = 0; _e17 < t.length; _e17++)r += ("00000000" + t[_e17].toString(2)).slice(-8);
                                                    var s = e[0].toString(2);
                                                    if (s = ("00000000" + s).slice(-8).slice(0, i / 32), r += s, r.length % 11 != 0) throw new Error("internal error - entropy not an even multiple of 11 bits - " + r.length);
                                                    var n = "";
                                                    for(var _t21 = 0; _t21 < r.length / 11; _t21++){
                                                        "" !== n && (n += this.Wordlist.space);
                                                        var _e18 = parseInt(r.slice(11 * _t21, 11 * (_t21 + 1)), 2);
                                                        n += this.Wordlist[_e18];
                                                    }
                                                    return this.mnemonic = n, this;
                                                }
                                            },
                                            {
                                                key: "check",
                                                value: function check() {
                                                    var t = this.mnemonic.split(this.Wordlist.space);
                                                    var e = "";
                                                    for(var _r19 = 0; _r19 < t.length; _r19++){
                                                        var _i38 = this.Wordlist.indexOf(t[_r19]);
                                                        if (_i38 < 0) return !1;
                                                        e += ("00000000000" + _i38.toString(2)).slice(-11);
                                                    }
                                                    if (e.length % 11 != 0) throw new Error("internal error - entropy not an even multiple of 11 bits - " + e.length);
                                                    var r = e.length / 33, i = e.slice(-r), s = e.slice(0, e.length - r), n = Buffer.alloc(s.length / 8);
                                                    for(var _t22 = 0; _t22 < s.length / 8; _t22++)n.writeUInt8(parseInt(e.slice(8 * _t22, 8 * (_t22 + 1)), 2), _t22);
                                                    var a = P1.sha256(n)[0].toString(2);
                                                    return a = ("00000000" + a).slice(-8).slice(0, r), a === i;
                                                }
                                            },
                                            {
                                                key: "mnemonic2Seed",
                                                value: function mnemonic2Seed() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                                                    var e = this.mnemonic;
                                                    if (!this.check()) throw new Error("Mnemonic does not pass the check - was the mnemonic typed incorrectly? Are there extra spaces?");
                                                    if ("string" != typeof t) throw new Error("passphrase must be a string or undefined");
                                                    e = e.normalize("NFKD"), t = t.normalize("NFKD");
                                                    var r = Buffer.from(e), i = Buffer.concat([
                                                        Buffer.from("mnemonic"),
                                                        Buffer.from(t)
                                                    ]);
                                                    return this.seed = l3.pbkdf2Sync(r, i, 2048, 64, "sha512"), this;
                                                }
                                            },
                                            {
                                                key: "isValid",
                                                value: function isValid() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                                                    var e;
                                                    try {
                                                        e = !!this.mnemonic2Seed(t);
                                                    } catch (t15) {
                                                        e = !1;
                                                    }
                                                    return e;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom(t) {
                                                    return new this().fromRandom(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromRandom",
                                                value: function asyncFromRandom(t) {
                                                    return new this().asyncFromRandom(t);
                                                }
                                            },
                                            {
                                                key: "fromEntropy",
                                                value: function fromEntropy(t) {
                                                    return new this().fromEntropy(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromEntropy",
                                                value: function asyncFromEntropy(t) {
                                                    return new this().asyncFromEntropy(t);
                                                }
                                            },
                                            {
                                                key: "isValid",
                                                value: function isValid(t) {
                                                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
                                                    return new Y(t).isValid(e);
                                                }
                                            }
                                        ]);
                                        return Y;
                                    }(S1);
                                    var W = [
                                        "\u3042\u3044\u3053\u304F\u3057\u3093",
                                        "\u3042\u3044\u3055\u3064",
                                        "\u3042\u3044\u3060",
                                        "\u3042\u304A\u305E\u3089",
                                        "\u3042\u304B\u3061\u3083\u3093",
                                        "\u3042\u304D\u308B",
                                        "\u3042\u3051\u304C\u305F",
                                        "\u3042\u3051\u308B",
                                        "\u3042\u3053\u304C\u308C\u308B",
                                        "\u3042\u3055\u3044",
                                        "\u3042\u3055\u3072",
                                        "\u3042\u3057\u3042\u3068",
                                        "\u3042\u3058\u308F\u3046",
                                        "\u3042\u305A\u304B\u308B",
                                        "\u3042\u305A\u304D",
                                        "\u3042\u305D\u3076",
                                        "\u3042\u305F\u3048\u308B",
                                        "\u3042\u305F\u305F\u3081\u308B",
                                        "\u3042\u305F\u308A\u307E\u3048",
                                        "\u3042\u305F\u308B",
                                        "\u3042\u3064\u3044",
                                        "\u3042\u3064\u304B\u3046",
                                        "\u3042\u3063\u3057\u3085\u304F",
                                        "\u3042\u3064\u307E\u308A",
                                        "\u3042\u3064\u3081\u308B",
                                        "\u3042\u3066\u306A",
                                        "\u3042\u3066\u306F\u307E\u308B",
                                        "\u3042\u3072\u308B",
                                        "\u3042\u3076\u3089",
                                        "\u3042\u3076\u308B",
                                        "\u3042\u3075\u308C\u308B",
                                        "\u3042\u307E\u3044",
                                        "\u3042\u307E\u3069",
                                        "\u3042\u307E\u3084\u304B\u3059",
                                        "\u3042\u307E\u308A",
                                        "\u3042\u307F\u3082\u306E",
                                        "\u3042\u3081\u308A\u304B",
                                        "\u3042\u3084\u307E\u308B",
                                        "\u3042\u3086\u3080",
                                        "\u3042\u3089\u3044\u3050\u307E",
                                        "\u3042\u3089\u3057",
                                        "\u3042\u3089\u3059\u3058",
                                        "\u3042\u3089\u305F\u3081\u308B",
                                        "\u3042\u3089\u3086\u308B",
                                        "\u3042\u3089\u308F\u3059",
                                        "\u3042\u308A\u304C\u3068\u3046",
                                        "\u3042\u308F\u305B\u308B",
                                        "\u3042\u308F\u3066\u308B",
                                        "\u3042\u3093\u3044",
                                        "\u3042\u3093\u304C\u3044",
                                        "\u3042\u3093\u3053",
                                        "\u3042\u3093\u305C\u3093",
                                        "\u3042\u3093\u3066\u3044",
                                        "\u3042\u3093\u306A\u3044",
                                        "\u3042\u3093\u307E\u308A",
                                        "\u3044\u3044\u3060\u3059",
                                        "\u3044\u304A\u3093",
                                        "\u3044\u304C\u3044",
                                        "\u3044\u304C\u304F",
                                        "\u3044\u304D\u304A\u3044",
                                        "\u3044\u304D\u306A\u308A",
                                        "\u3044\u304D\u3082\u306E",
                                        "\u3044\u304D\u308B",
                                        "\u3044\u304F\u3058",
                                        "\u3044\u304F\u3076\u3093",
                                        "\u3044\u3051\u3070\u306A",
                                        "\u3044\u3051\u3093",
                                        "\u3044\u3053\u3046",
                                        "\u3044\u3053\u304F",
                                        "\u3044\u3053\u3064",
                                        "\u3044\u3055\u307E\u3057\u3044",
                                        "\u3044\u3055\u3093",
                                        "\u3044\u3057\u304D",
                                        "\u3044\u3058\u3085\u3046",
                                        "\u3044\u3058\u3087\u3046",
                                        "\u3044\u3058\u308F\u308B",
                                        "\u3044\u305A\u307F",
                                        "\u3044\u305A\u308C",
                                        "\u3044\u305B\u3044",
                                        "\u3044\u305B\u3048\u3073",
                                        "\u3044\u305B\u304B\u3044",
                                        "\u3044\u305B\u304D",
                                        "\u3044\u305C\u3093",
                                        "\u3044\u305D\u3046\u308D\u3046",
                                        "\u3044\u305D\u304C\u3057\u3044",
                                        "\u3044\u3060\u3044",
                                        "\u3044\u3060\u304F",
                                        "\u3044\u305F\u305A\u3089",
                                        "\u3044\u305F\u307F",
                                        "\u3044\u305F\u308A\u3042",
                                        "\u3044\u3061\u304A\u3046",
                                        "\u3044\u3061\u3058",
                                        "\u3044\u3061\u3069",
                                        "\u3044\u3061\u3070",
                                        "\u3044\u3061\u3076",
                                        "\u3044\u3061\u308A\u3085\u3046",
                                        "\u3044\u3064\u304B",
                                        "\u3044\u3063\u3057\u3085\u3093",
                                        "\u3044\u3063\u305B\u3044",
                                        "\u3044\u3063\u305D\u3046",
                                        "\u3044\u3063\u305F\u3093",
                                        "\u3044\u3063\u3061",
                                        "\u3044\u3063\u3066\u3044",
                                        "\u3044\u3063\u307D\u3046",
                                        "\u3044\u3066\u3056",
                                        "\u3044\u3066\u3093",
                                        "\u3044\u3069\u3046",
                                        "\u3044\u3068\u3053",
                                        "\u3044\u306A\u3044",
                                        "\u3044\u306A\u304B",
                                        "\u3044\u306D\u3080\u308A",
                                        "\u3044\u306E\u3061",
                                        "\u3044\u306E\u308B",
                                        "\u3044\u306F\u3064",
                                        "\u3044\u3070\u308B",
                                        "\u3044\u306F\u3093",
                                        "\u3044\u3073\u304D",
                                        "\u3044\u3072\u3093",
                                        "\u3044\u3075\u304F",
                                        "\u3044\u3078\u3093",
                                        "\u3044\u307B\u3046",
                                        "\u3044\u307F\u3093",
                                        "\u3044\u3082\u3046\u3068",
                                        "\u3044\u3082\u305F\u308C",
                                        "\u3044\u3082\u308A",
                                        "\u3044\u3084\u304C\u308B",
                                        "\u3044\u3084\u3059",
                                        "\u3044\u3088\u304B\u3093",
                                        "\u3044\u3088\u304F",
                                        "\u3044\u3089\u3044",
                                        "\u3044\u3089\u3059\u3068",
                                        "\u3044\u308A\u3050\u3061",
                                        "\u3044\u308A\u3087\u3046",
                                        "\u3044\u308C\u3044",
                                        "\u3044\u308C\u3082\u306E",
                                        "\u3044\u308C\u308B",
                                        "\u3044\u308D\u3048\u3093\u3074\u3064",
                                        "\u3044\u308F\u3044",
                                        "\u3044\u308F\u3046",
                                        "\u3044\u308F\u304B\u3093",
                                        "\u3044\u308F\u3070",
                                        "\u3044\u308F\u3086\u308B",
                                        "\u3044\u3093\u3052\u3093\u307E\u3081",
                                        "\u3044\u3093\u3055\u3064",
                                        "\u3044\u3093\u3057\u3087\u3046",
                                        "\u3044\u3093\u3088\u3046",
                                        "\u3046\u3048\u304D",
                                        "\u3046\u3048\u308B",
                                        "\u3046\u304A\u3056",
                                        "\u3046\u304C\u3044",
                                        "\u3046\u304B\u3076",
                                        "\u3046\u304B\u3079\u308B",
                                        "\u3046\u304D\u308F",
                                        "\u3046\u304F\u3089\u3044\u306A",
                                        "\u3046\u304F\u308C\u308C",
                                        "\u3046\u3051\u305F\u307E\u308F\u308B",
                                        "\u3046\u3051\u3064\u3051",
                                        "\u3046\u3051\u3068\u308B",
                                        "\u3046\u3051\u3082\u3064",
                                        "\u3046\u3051\u308B",
                                        "\u3046\u3054\u304B\u3059",
                                        "\u3046\u3054\u304F",
                                        "\u3046\u3053\u3093",
                                        "\u3046\u3055\u304E",
                                        "\u3046\u3057\u306A\u3046",
                                        "\u3046\u3057\u308D\u304C\u307F",
                                        "\u3046\u3059\u3044",
                                        "\u3046\u3059\u304E",
                                        "\u3046\u3059\u3050\u3089\u3044",
                                        "\u3046\u3059\u3081\u308B",
                                        "\u3046\u305B\u3064",
                                        "\u3046\u3061\u3042\u308F\u305B",
                                        "\u3046\u3061\u304C\u308F",
                                        "\u3046\u3061\u304D",
                                        "\u3046\u3061\u3085\u3046",
                                        "\u3046\u3063\u304B\u308A",
                                        "\u3046\u3064\u304F\u3057\u3044",
                                        "\u3046\u3063\u305F\u3048\u308B",
                                        "\u3046\u3064\u308B",
                                        "\u3046\u3069\u3093",
                                        "\u3046\u306A\u304E",
                                        "\u3046\u306A\u3058",
                                        "\u3046\u306A\u305A\u304F",
                                        "\u3046\u306A\u308B",
                                        "\u3046\u306D\u308B",
                                        "\u3046\u306E\u3046",
                                        "\u3046\u3076\u3052",
                                        "\u3046\u3076\u3054\u3048",
                                        "\u3046\u307E\u308C\u308B",
                                        "\u3046\u3081\u308B",
                                        "\u3046\u3082\u3046",
                                        "\u3046\u3084\u307E\u3046",
                                        "\u3046\u3088\u304F",
                                        "\u3046\u3089\u304C\u3048\u3059",
                                        "\u3046\u3089\u3050\u3061",
                                        "\u3046\u3089\u306A\u3044",
                                        "\u3046\u308A\u3042\u3052",
                                        "\u3046\u308A\u304D\u308C",
                                        "\u3046\u308B\u3055\u3044",
                                        "\u3046\u308C\u3057\u3044",
                                        "\u3046\u308C\u3086\u304D",
                                        "\u3046\u308C\u308B",
                                        "\u3046\u308D\u3053",
                                        "\u3046\u308F\u304D",
                                        "\u3046\u308F\u3055",
                                        "\u3046\u3093\u3053\u3046",
                                        "\u3046\u3093\u3061\u3093",
                                        "\u3046\u3093\u3066\u3093",
                                        "\u3046\u3093\u3069\u3046",
                                        "\u3048\u3044\u3048\u3093",
                                        "\u3048\u3044\u304C",
                                        "\u3048\u3044\u304D\u3087\u3046",
                                        "\u3048\u3044\u3054",
                                        "\u3048\u3044\u305B\u3044",
                                        "\u3048\u3044\u3076\u3093",
                                        "\u3048\u3044\u3088\u3046",
                                        "\u3048\u3044\u308F",
                                        "\u3048\u304A\u308A",
                                        "\u3048\u304C\u304A",
                                        "\u3048\u304C\u304F",
                                        "\u3048\u304D\u305F\u3044",
                                        "\u3048\u304F\u305B\u308B",
                                        "\u3048\u3057\u3083\u304F",
                                        "\u3048\u3059\u3066",
                                        "\u3048\u3064\u3089\u3093",
                                        "\u3048\u306E\u3050",
                                        "\u3048\u307B\u3046\u307E\u304D",
                                        "\u3048\u307B\u3093",
                                        "\u3048\u307E\u304D",
                                        "\u3048\u3082\u3058",
                                        "\u3048\u3082\u306E",
                                        "\u3048\u3089\u3044",
                                        "\u3048\u3089\u3076",
                                        "\u3048\u308A\u3042",
                                        "\u3048\u3093\u3048\u3093",
                                        "\u3048\u3093\u304B\u3044",
                                        "\u3048\u3093\u304E",
                                        "\u3048\u3093\u3052\u304D",
                                        "\u3048\u3093\u3057\u3085\u3046",
                                        "\u3048\u3093\u305C\u3064",
                                        "\u3048\u3093\u305D\u304F",
                                        "\u3048\u3093\u3061\u3087\u3046",
                                        "\u3048\u3093\u3068\u3064",
                                        "\u304A\u3044\u304B\u3051\u308B",
                                        "\u304A\u3044\u3053\u3059",
                                        "\u304A\u3044\u3057\u3044",
                                        "\u304A\u3044\u3064\u304F",
                                        "\u304A\u3046\u3048\u3093",
                                        "\u304A\u3046\u3055\u307E",
                                        "\u304A\u3046\u3058",
                                        "\u304A\u3046\u305B\u3064",
                                        "\u304A\u3046\u305F\u3044",
                                        "\u304A\u3046\u3075\u304F",
                                        "\u304A\u3046\u3079\u3044",
                                        "\u304A\u3046\u3088\u3046",
                                        "\u304A\u3048\u308B",
                                        "\u304A\u304A\u3044",
                                        "\u304A\u304A\u3046",
                                        "\u304A\u304A\u3069\u304A\u308A",
                                        "\u304A\u304A\u3084",
                                        "\u304A\u304A\u3088\u305D",
                                        "\u304A\u304B\u3048\u308A",
                                        "\u304A\u304B\u305A",
                                        "\u304A\u304C\u3080",
                                        "\u304A\u304B\u308F\u308A",
                                        "\u304A\u304E\u306A\u3046",
                                        "\u304A\u304D\u308B",
                                        "\u304A\u304F\u3055\u307E",
                                        "\u304A\u304F\u3058\u3087\u3046",
                                        "\u304A\u304F\u308A\u304C\u306A",
                                        "\u304A\u304F\u308B",
                                        "\u304A\u304F\u308C\u308B",
                                        "\u304A\u3053\u3059",
                                        "\u304A\u3053\u306A\u3046",
                                        "\u304A\u3053\u308B",
                                        "\u304A\u3055\u3048\u308B",
                                        "\u304A\u3055\u306A\u3044",
                                        "\u304A\u3055\u3081\u308B",
                                        "\u304A\u3057\u3044\u308C",
                                        "\u304A\u3057\u3048\u308B",
                                        "\u304A\u3058\u304E",
                                        "\u304A\u3058\u3055\u3093",
                                        "\u304A\u3057\u3083\u308C",
                                        "\u304A\u305D\u3089\u304F",
                                        "\u304A\u305D\u308F\u308B",
                                        "\u304A\u305F\u304C\u3044",
                                        "\u304A\u305F\u304F",
                                        "\u304A\u3060\u3084\u304B",
                                        "\u304A\u3061\u3064\u304F",
                                        "\u304A\u3063\u3068",
                                        "\u304A\u3064\u308A",
                                        "\u304A\u3067\u304B\u3051",
                                        "\u304A\u3068\u3057\u3082\u306E",
                                        "\u304A\u3068\u306A\u3057\u3044",
                                        "\u304A\u3069\u308A",
                                        "\u304A\u3069\u308D\u304B\u3059",
                                        "\u304A\u3070\u3055\u3093",
                                        "\u304A\u307E\u3044\u308A",
                                        "\u304A\u3081\u3067\u3068\u3046",
                                        "\u304A\u3082\u3044\u3067",
                                        "\u304A\u3082\u3046",
                                        "\u304A\u3082\u305F\u3044",
                                        "\u304A\u3082\u3061\u3083",
                                        "\u304A\u3084\u3064",
                                        "\u304A\u3084\u3086\u3073",
                                        "\u304A\u3088\u307C\u3059",
                                        "\u304A\u3089\u3093\u3060",
                                        "\u304A\u308D\u3059",
                                        "\u304A\u3093\u304C\u304F",
                                        "\u304A\u3093\u3051\u3044",
                                        "\u304A\u3093\u3057\u3083",
                                        "\u304A\u3093\u305B\u3093",
                                        "\u304A\u3093\u3060\u3093",
                                        "\u304A\u3093\u3061\u3085\u3046",
                                        "\u304A\u3093\u3069\u3051\u3044",
                                        "\u304B\u3042\u3064",
                                        "\u304B\u3044\u304C",
                                        "\u304C\u3044\u304D",
                                        "\u304C\u3044\u3051\u3093",
                                        "\u304C\u3044\u3053\u3046",
                                        "\u304B\u3044\u3055\u3064",
                                        "\u304B\u3044\u3057\u3083",
                                        "\u304B\u3044\u3059\u3044\u3088\u304F",
                                        "\u304B\u3044\u305C\u3093",
                                        "\u304B\u3044\u305E\u3046\u3069",
                                        "\u304B\u3044\u3064\u3046",
                                        "\u304B\u3044\u3066\u3093",
                                        "\u304B\u3044\u3068\u3046",
                                        "\u304B\u3044\u3075\u304F",
                                        "\u304C\u3044\u3078\u304D",
                                        "\u304B\u3044\u307B\u3046",
                                        "\u304B\u3044\u3088\u3046",
                                        "\u304C\u3044\u3089\u3044",
                                        "\u304B\u3044\u308F",
                                        "\u304B\u3048\u308B",
                                        "\u304B\u304A\u308A",
                                        "\u304B\u304B\u3048\u308B",
                                        "\u304B\u304C\u304F",
                                        "\u304B\u304C\u3057",
                                        "\u304B\u304C\u307F",
                                        "\u304B\u304F\u3054",
                                        "\u304B\u304F\u3068\u304F",
                                        "\u304B\u3056\u308B",
                                        "\u304C\u305E\u3046",
                                        "\u304B\u305F\u3044",
                                        "\u304B\u305F\u3061",
                                        "\u304C\u3061\u3087\u3046",
                                        "\u304C\u3063\u304D\u3085\u3046",
                                        "\u304C\u3063\u3053\u3046",
                                        "\u304C\u3063\u3055\u3093",
                                        "\u304C\u3063\u3057\u3087\u3046",
                                        "\u304B\u306A\u3056\u308F\u3057",
                                        "\u304B\u306E\u3046",
                                        "\u304C\u306F\u304F",
                                        "\u304B\u3076\u304B",
                                        "\u304B\u307B\u3046",
                                        "\u304B\u307B\u3054",
                                        "\u304B\u307E\u3046",
                                        "\u304B\u307E\u307C\u3053",
                                        "\u304B\u3081\u308C\u304A\u3093",
                                        "\u304B\u3086\u3044",
                                        "\u304B\u3088\u3046\u3073",
                                        "\u304B\u3089\u3044",
                                        "\u304B\u308B\u3044",
                                        "\u304B\u308D\u3046",
                                        "\u304B\u308F\u304F",
                                        "\u304B\u308F\u3089",
                                        "\u304C\u3093\u304B",
                                        "\u304B\u3093\u3051\u3044",
                                        "\u304B\u3093\u3053\u3046",
                                        "\u304B\u3093\u3057\u3083",
                                        "\u304B\u3093\u305D\u3046",
                                        "\u304B\u3093\u305F\u3093",
                                        "\u304B\u3093\u3061",
                                        "\u304C\u3093\u3070\u308B",
                                        "\u304D\u3042\u3044",
                                        "\u304D\u3042\u3064",
                                        "\u304D\u3044\u308D",
                                        "\u304E\u3044\u3093",
                                        "\u304D\u3046\u3044",
                                        "\u304D\u3046\u3093",
                                        "\u304D\u3048\u308B",
                                        "\u304D\u304A\u3046",
                                        "\u304D\u304A\u304F",
                                        "\u304D\u304A\u3061",
                                        "\u304D\u304A\u3093",
                                        "\u304D\u304B\u3044",
                                        "\u304D\u304B\u304F",
                                        "\u304D\u304B\u3093\u3057\u3083",
                                        "\u304D\u304D\u3066",
                                        "\u304D\u304F\u3070\u308A",
                                        "\u304D\u304F\u3089\u3052",
                                        "\u304D\u3051\u3093\u305B\u3044",
                                        "\u304D\u3053\u3046",
                                        "\u304D\u3053\u3048\u308B",
                                        "\u304D\u3053\u304F",
                                        "\u304D\u3055\u3044",
                                        "\u304D\u3055\u304F",
                                        "\u304D\u3055\u307E",
                                        "\u304D\u3055\u3089\u304E",
                                        "\u304E\u3058\u304B\u304C\u304F",
                                        "\u304E\u3057\u304D",
                                        "\u304E\u3058\u305F\u3044\u3051\u3093",
                                        "\u304E\u3058\u306B\u3063\u3066\u3044",
                                        "\u304E\u3058\u3085\u3064\u3057\u3083",
                                        "\u304D\u3059\u3046",
                                        "\u304D\u305B\u3044",
                                        "\u304D\u305B\u304D",
                                        "\u304D\u305B\u3064",
                                        "\u304D\u305D\u3046",
                                        "\u304D\u305E\u304F",
                                        "\u304D\u305E\u3093",
                                        "\u304D\u305F\u3048\u308B",
                                        "\u304D\u3061\u3087\u3046",
                                        "\u304D\u3064\u3048\u3093",
                                        "\u304E\u3063\u3061\u308A",
                                        "\u304D\u3064\u3064\u304D",
                                        "\u304D\u3064\u306D",
                                        "\u304D\u3066\u3044",
                                        "\u304D\u3069\u3046",
                                        "\u304D\u3069\u304F",
                                        "\u304D\u306A\u3044",
                                        "\u304D\u306A\u304C",
                                        "\u304D\u306A\u3053",
                                        "\u304D\u306C\u3054\u3057",
                                        "\u304D\u306D\u3093",
                                        "\u304D\u306E\u3046",
                                        "\u304D\u306E\u3057\u305F",
                                        "\u304D\u306F\u304F",
                                        "\u304D\u3073\u3057\u3044",
                                        "\u304D\u3072\u3093",
                                        "\u304D\u3075\u304F",
                                        "\u304D\u3076\u3093",
                                        "\u304D\u307C\u3046",
                                        "\u304D\u307B\u3093",
                                        "\u304D\u307E\u308B",
                                        "\u304D\u307F\u3064",
                                        "\u304D\u3080\u305A\u304B\u3057\u3044",
                                        "\u304D\u3081\u308B",
                                        "\u304D\u3082\u3060\u3081\u3057",
                                        "\u304D\u3082\u3061",
                                        "\u304D\u3082\u306E",
                                        "\u304D\u3083\u304F",
                                        "\u304D\u3084\u304F",
                                        "\u304E\u3085\u3046\u306B\u304F",
                                        "\u304D\u3088\u3046",
                                        "\u304D\u3087\u3046\u308A\u3085\u3046",
                                        "\u304D\u3089\u3044",
                                        "\u304D\u3089\u304F",
                                        "\u304D\u308A\u3093",
                                        "\u304D\u308C\u3044",
                                        "\u304D\u308C\u3064",
                                        "\u304D\u308D\u304F",
                                        "\u304E\u308D\u3093",
                                        "\u304D\u308F\u3081\u308B",
                                        "\u304E\u3093\u3044\u308D",
                                        "\u304D\u3093\u304B\u304F\u3058",
                                        "\u304D\u3093\u3058\u3087",
                                        "\u304D\u3093\u3088\u3046\u3073",
                                        "\u3050\u3042\u3044",
                                        "\u304F\u3044\u305A",
                                        "\u304F\u3046\u304B\u3093",
                                        "\u304F\u3046\u304D",
                                        "\u304F\u3046\u3050\u3093",
                                        "\u304F\u3046\u3053\u3046",
                                        "\u3050\u3046\u305B\u3044",
                                        "\u304F\u3046\u305D\u3046",
                                        "\u3050\u3046\u305F\u3089",
                                        "\u304F\u3046\u3075\u304F",
                                        "\u304F\u3046\u307C",
                                        "\u304F\u304B\u3093",
                                        "\u304F\u304D\u3087\u3046",
                                        "\u304F\u3052\u3093",
                                        "\u3050\u3053\u3046",
                                        "\u304F\u3055\u3044",
                                        "\u304F\u3055\u304D",
                                        "\u304F\u3055\u3070\u306A",
                                        "\u304F\u3055\u308B",
                                        "\u304F\u3057\u3083\u307F",
                                        "\u304F\u3057\u3087\u3046",
                                        "\u304F\u3059\u306E\u304D",
                                        "\u304F\u3059\u308A\u3086\u3073",
                                        "\u304F\u305B\u3052",
                                        "\u304F\u305B\u3093",
                                        "\u3050\u305F\u3044\u3066\u304D",
                                        "\u304F\u3060\u3055\u308B",
                                        "\u304F\u305F\u3073\u308C\u308B",
                                        "\u304F\u3061\u3053\u307F",
                                        "\u304F\u3061\u3055\u304D",
                                        "\u304F\u3064\u3057\u305F",
                                        "\u3050\u3063\u3059\u308A",
                                        "\u304F\u3064\u308D\u3050",
                                        "\u304F\u3068\u3046\u3066\u3093",
                                        "\u304F\u3069\u304F",
                                        "\u304F\u306A\u3093",
                                        "\u304F\u306D\u304F\u306D",
                                        "\u304F\u306E\u3046",
                                        "\u304F\u3075\u3046",
                                        "\u304F\u307F\u3042\u308F\u305B",
                                        "\u304F\u307F\u305F\u3066\u308B",
                                        "\u304F\u3081\u308B",
                                        "\u304F\u3084\u304F\u3057\u3087",
                                        "\u304F\u3089\u3059",
                                        "\u304F\u3089\u3079\u308B",
                                        "\u304F\u308B\u307E",
                                        "\u304F\u308C\u308B",
                                        "\u304F\u308D\u3046",
                                        "\u304F\u308F\u3057\u3044",
                                        "\u3050\u3093\u304B\u3093",
                                        "\u3050\u3093\u3057\u3087\u304F",
                                        "\u3050\u3093\u305F\u3044",
                                        "\u3050\u3093\u3066",
                                        "\u3051\u3042\u306A",
                                        "\u3051\u3044\u304B\u304F",
                                        "\u3051\u3044\u3051\u3093",
                                        "\u3051\u3044\u3053",
                                        "\u3051\u3044\u3055\u3064",
                                        "\u3052\u3044\u3058\u3085\u3064",
                                        "\u3051\u3044\u305F\u3044",
                                        "\u3052\u3044\u306E\u3046\u3058\u3093",
                                        "\u3051\u3044\u308C\u304D",
                                        "\u3051\u3044\u308D",
                                        "\u3051\u304A\u3068\u3059",
                                        "\u3051\u304A\u308A\u3082\u306E",
                                        "\u3052\u304D\u304B",
                                        "\u3052\u304D\u3052\u3093",
                                        "\u3052\u304D\u3060\u3093",
                                        "\u3052\u304D\u3061\u3093",
                                        "\u3052\u304D\u3068\u3064",
                                        "\u3052\u304D\u306F",
                                        "\u3052\u304D\u3084\u304F",
                                        "\u3052\u3053\u3046",
                                        "\u3052\u3053\u304F\u3058\u3087\u3046",
                                        "\u3052\u3056\u3044",
                                        "\u3051\u3055\u304D",
                                        "\u3052\u3056\u3093",
                                        "\u3051\u3057\u304D",
                                        "\u3051\u3057\u3054\u3080",
                                        "\u3051\u3057\u3087\u3046",
                                        "\u3052\u3059\u3068",
                                        "\u3051\u305F\u3070",
                                        "\u3051\u3061\u3083\u3063\u3077",
                                        "\u3051\u3061\u3089\u3059",
                                        "\u3051\u3064\u3042\u3064",
                                        "\u3051\u3064\u3044",
                                        "\u3051\u3064\u3048\u304D",
                                        "\u3051\u3063\u3053\u3093",
                                        "\u3051\u3064\u3058\u3087",
                                        "\u3051\u3063\u305B\u304D",
                                        "\u3051\u3063\u3066\u3044",
                                        "\u3051\u3064\u307E\u3064",
                                        "\u3052\u3064\u3088\u3046\u3073",
                                        "\u3052\u3064\u308C\u3044",
                                        "\u3051\u3064\u308D\u3093",
                                        "\u3052\u3069\u304F",
                                        "\u3051\u3068\u3070\u3059",
                                        "\u3051\u3068\u308B",
                                        "\u3051\u306A\u3052",
                                        "\u3051\u306A\u3059",
                                        "\u3051\u306A\u307F",
                                        "\u3051\u306C\u304D",
                                        "\u3052\u306D\u3064",
                                        "\u3051\u306D\u3093",
                                        "\u3051\u306F\u3044",
                                        "\u3052\u3072\u3093",
                                        "\u3051\u3076\u304B\u3044",
                                        "\u3052\u307C\u304F",
                                        "\u3051\u307E\u308A",
                                        "\u3051\u307F\u304B\u308B",
                                        "\u3051\u3080\u3057",
                                        "\u3051\u3080\u308A",
                                        "\u3051\u3082\u306E",
                                        "\u3051\u3089\u3044",
                                        "\u3051\u308D\u3051\u308D",
                                        "\u3051\u308F\u3057\u3044",
                                        "\u3051\u3093\u3044",
                                        "\u3051\u3093\u3048\u3064",
                                        "\u3051\u3093\u304A",
                                        "\u3051\u3093\u304B",
                                        "\u3052\u3093\u304D",
                                        "\u3051\u3093\u3052\u3093",
                                        "\u3051\u3093\u3053\u3046",
                                        "\u3051\u3093\u3055\u304F",
                                        "\u3051\u3093\u3057\u3085\u3046",
                                        "\u3051\u3093\u3059\u3046",
                                        "\u3052\u3093\u305D\u3046",
                                        "\u3051\u3093\u3061\u304F",
                                        "\u3051\u3093\u3066\u3044",
                                        "\u3051\u3093\u3068\u3046",
                                        "\u3051\u3093\u306A\u3044",
                                        "\u3051\u3093\u306B\u3093",
                                        "\u3052\u3093\u3076\u3064",
                                        "\u3051\u3093\u307E",
                                        "\u3051\u3093\u307F\u3093",
                                        "\u3051\u3093\u3081\u3044",
                                        "\u3051\u3093\u3089\u3093",
                                        "\u3051\u3093\u308A",
                                        "\u3053\u3042\u304F\u307E",
                                        "\u3053\u3044\u306C",
                                        "\u3053\u3044\u3073\u3068",
                                        "\u3054\u3046\u3044",
                                        "\u3053\u3046\u3048\u3093",
                                        "\u3053\u3046\u304A\u3093",
                                        "\u3053\u3046\u304B\u3093",
                                        "\u3054\u3046\u304D\u3085\u3046",
                                        "\u3054\u3046\u3051\u3044",
                                        "\u3053\u3046\u3053\u3046",
                                        "\u3053\u3046\u3055\u3044",
                                        "\u3053\u3046\u3058",
                                        "\u3053\u3046\u3059\u3044",
                                        "\u3054\u3046\u305B\u3044",
                                        "\u3053\u3046\u305D\u304F",
                                        "\u3053\u3046\u305F\u3044",
                                        "\u3053\u3046\u3061\u3083",
                                        "\u3053\u3046\u3064\u3046",
                                        "\u3053\u3046\u3066\u3044",
                                        "\u3053\u3046\u3069\u3046",
                                        "\u3053\u3046\u306A\u3044",
                                        "\u3053\u3046\u306F\u3044",
                                        "\u3054\u3046\u307B\u3046",
                                        "\u3054\u3046\u307E\u3093",
                                        "\u3053\u3046\u3082\u304F",
                                        "\u3053\u3046\u308A\u3064",
                                        "\u3053\u3048\u308B",
                                        "\u3053\u304A\u308A",
                                        "\u3054\u304B\u3044",
                                        "\u3054\u304C\u3064",
                                        "\u3054\u304B\u3093",
                                        "\u3053\u304F\u3054",
                                        "\u3053\u304F\u3055\u3044",
                                        "\u3053\u304F\u3068\u3046",
                                        "\u3053\u304F\u306A\u3044",
                                        "\u3053\u304F\u306F\u304F",
                                        "\u3053\u3050\u307E",
                                        "\u3053\u3051\u3044",
                                        "\u3053\u3051\u308B",
                                        "\u3053\u3053\u306E\u304B",
                                        "\u3053\u3053\u308D",
                                        "\u3053\u3055\u3081",
                                        "\u3053\u3057\u3064",
                                        "\u3053\u3059\u3046",
                                        "\u3053\u305B\u3044",
                                        "\u3053\u305B\u304D",
                                        "\u3053\u305C\u3093",
                                        "\u3053\u305D\u3060\u3066",
                                        "\u3053\u305F\u3044",
                                        "\u3053\u305F\u3048\u308B",
                                        "\u3053\u305F\u3064",
                                        "\u3053\u3061\u3087\u3046",
                                        "\u3053\u3063\u304B",
                                        "\u3053\u3064\u3053\u3064",
                                        "\u3053\u3064\u3070\u3093",
                                        "\u3053\u3064\u3076",
                                        "\u3053\u3066\u3044",
                                        "\u3053\u3066\u3093",
                                        "\u3053\u3068\u304C\u3089",
                                        "\u3053\u3068\u3057",
                                        "\u3053\u3068\u3070",
                                        "\u3053\u3068\u308A",
                                        "\u3053\u306A\u3054\u306A",
                                        "\u3053\u306D\u3053\u306D",
                                        "\u3053\u306E\u307E\u307E",
                                        "\u3053\u306E\u307F",
                                        "\u3053\u306E\u3088",
                                        "\u3054\u306F\u3093",
                                        "\u3053\u3072\u3064\u3058",
                                        "\u3053\u3075\u3046",
                                        "\u3053\u3075\u3093",
                                        "\u3053\u307C\u308C\u308B",
                                        "\u3054\u307E\u3042\u3076\u3089",
                                        "\u3053\u307E\u304B\u3044",
                                        "\u3054\u307E\u3059\u308A",
                                        "\u3053\u307E\u3064\u306A",
                                        "\u3053\u307E\u308B",
                                        "\u3053\u3080\u304E\u3053",
                                        "\u3053\u3082\u3058",
                                        "\u3053\u3082\u3061",
                                        "\u3053\u3082\u306E",
                                        "\u3053\u3082\u3093",
                                        "\u3053\u3084\u304F",
                                        "\u3053\u3084\u307E",
                                        "\u3053\u3086\u3046",
                                        "\u3053\u3086\u3073",
                                        "\u3053\u3088\u3044",
                                        "\u3053\u3088\u3046",
                                        "\u3053\u308A\u308B",
                                        "\u3053\u308C\u304F\u3057\u3087\u3093",
                                        "\u3053\u308D\u3063\u3051",
                                        "\u3053\u308F\u3082\u3066",
                                        "\u3053\u308F\u308C\u308B",
                                        "\u3053\u3093\u3044\u3093",
                                        "\u3053\u3093\u304B\u3044",
                                        "\u3053\u3093\u304D",
                                        "\u3053\u3093\u3057\u3085\u3046",
                                        "\u3053\u3093\u3059\u3044",
                                        "\u3053\u3093\u3060\u3066",
                                        "\u3053\u3093\u3068\u3093",
                                        "\u3053\u3093\u306A\u3093",
                                        "\u3053\u3093\u3073\u306B",
                                        "\u3053\u3093\u307D\u3093",
                                        "\u3053\u3093\u307E\u3051",
                                        "\u3053\u3093\u3084",
                                        "\u3053\u3093\u308C\u3044",
                                        "\u3053\u3093\u308F\u304F",
                                        "\u3056\u3044\u3048\u304D",
                                        "\u3055\u3044\u304B\u3044",
                                        "\u3055\u3044\u304D\u3093",
                                        "\u3056\u3044\u3052\u3093",
                                        "\u3056\u3044\u3053",
                                        "\u3055\u3044\u3057\u3087",
                                        "\u3055\u3044\u305B\u3044",
                                        "\u3056\u3044\u305F\u304F",
                                        "\u3056\u3044\u3061\u3085\u3046",
                                        "\u3055\u3044\u3066\u304D",
                                        "\u3056\u3044\u308A\u3087\u3046",
                                        "\u3055\u3046\u306A",
                                        "\u3055\u304B\u3044\u3057",
                                        "\u3055\u304C\u3059",
                                        "\u3055\u304B\u306A",
                                        "\u3055\u304B\u307F\u3061",
                                        "\u3055\u304C\u308B",
                                        "\u3055\u304E\u3087\u3046",
                                        "\u3055\u304F\u3057",
                                        "\u3055\u304F\u3072\u3093",
                                        "\u3055\u304F\u3089",
                                        "\u3055\u3053\u304F",
                                        "\u3055\u3053\u3064",
                                        "\u3055\u305A\u304B\u308B",
                                        "\u3056\u305B\u304D",
                                        "\u3055\u305F\u3093",
                                        "\u3055\u3064\u3048\u3044",
                                        "\u3056\u3064\u304A\u3093",
                                        "\u3056\u3063\u304B",
                                        "\u3056\u3064\u304C\u304F",
                                        "\u3055\u3063\u304D\u3087\u304F",
                                        "\u3056\u3063\u3057",
                                        "\u3055\u3064\u3058\u3093",
                                        "\u3056\u3063\u305D\u3046",
                                        "\u3055\u3064\u305F\u3070",
                                        "\u3055\u3064\u307E\u3044\u3082",
                                        "\u3055\u3066\u3044",
                                        "\u3055\u3068\u3044\u3082",
                                        "\u3055\u3068\u3046",
                                        "\u3055\u3068\u304A\u3084",
                                        "\u3055\u3068\u3057",
                                        "\u3055\u3068\u308B",
                                        "\u3055\u306E\u3046",
                                        "\u3055\u3070\u304F",
                                        "\u3055\u3073\u3057\u3044",
                                        "\u3055\u3079\u3064",
                                        "\u3055\u307B\u3046",
                                        "\u3055\u307B\u3069",
                                        "\u3055\u307E\u3059",
                                        "\u3055\u307F\u3057\u3044",
                                        "\u3055\u307F\u3060\u308C",
                                        "\u3055\u3080\u3051",
                                        "\u3055\u3081\u308B",
                                        "\u3055\u3084\u3048\u3093\u3069\u3046",
                                        "\u3055\u3086\u3046",
                                        "\u3055\u3088\u3046",
                                        "\u3055\u3088\u304F",
                                        "\u3055\u3089\u3060",
                                        "\u3056\u308B\u305D\u3070",
                                        "\u3055\u308F\u3084\u304B",
                                        "\u3055\u308F\u308B",
                                        "\u3055\u3093\u3044\u3093",
                                        "\u3055\u3093\u304B",
                                        "\u3055\u3093\u304D\u3083\u304F",
                                        "\u3055\u3093\u3053\u3046",
                                        "\u3055\u3093\u3055\u3044",
                                        "\u3056\u3093\u3057\u3087",
                                        "\u3055\u3093\u3059\u3046",
                                        "\u3055\u3093\u305B\u3044",
                                        "\u3055\u3093\u305D",
                                        "\u3055\u3093\u3061",
                                        "\u3055\u3093\u307E",
                                        "\u3055\u3093\u307F",
                                        "\u3055\u3093\u3089\u3093",
                                        "\u3057\u3042\u3044",
                                        "\u3057\u3042\u3052",
                                        "\u3057\u3042\u3055\u3063\u3066",
                                        "\u3057\u3042\u308F\u305B",
                                        "\u3057\u3044\u304F",
                                        "\u3057\u3044\u3093",
                                        "\u3057\u3046\u3061",
                                        "\u3057\u3048\u3044",
                                        "\u3057\u304A\u3051",
                                        "\u3057\u304B\u3044",
                                        "\u3057\u304B\u304F",
                                        "\u3058\u304B\u3093",
                                        "\u3057\u3054\u3068",
                                        "\u3057\u3059\u3046",
                                        "\u3058\u3060\u3044",
                                        "\u3057\u305F\u3046\u3051",
                                        "\u3057\u305F\u304E",
                                        "\u3057\u305F\u3066",
                                        "\u3057\u305F\u307F",
                                        "\u3057\u3061\u3087\u3046",
                                        "\u3057\u3061\u308A\u3093",
                                        "\u3057\u3063\u304B\u308A",
                                        "\u3057\u3064\u3058",
                                        "\u3057\u3064\u3082\u3093",
                                        "\u3057\u3066\u3044",
                                        "\u3057\u3066\u304D",
                                        "\u3057\u3066\u3064",
                                        "\u3058\u3066\u3093",
                                        "\u3058\u3069\u3046",
                                        "\u3057\u306A\u304E\u308C",
                                        "\u3057\u306A\u3082\u306E",
                                        "\u3057\u306A\u3093",
                                        "\u3057\u306D\u307E",
                                        "\u3057\u306D\u3093",
                                        "\u3057\u306E\u3050",
                                        "\u3057\u306E\u3076",
                                        "\u3057\u306F\u3044",
                                        "\u3057\u3070\u304B\u308A",
                                        "\u3057\u306F\u3064",
                                        "\u3057\u306F\u3089\u3044",
                                        "\u3057\u306F\u3093",
                                        "\u3057\u3072\u3087\u3046",
                                        "\u3057\u3075\u304F",
                                        "\u3058\u3076\u3093",
                                        "\u3057\u3078\u3044",
                                        "\u3057\u307B\u3046",
                                        "\u3057\u307B\u3093",
                                        "\u3057\u307E\u3046",
                                        "\u3057\u307E\u308B",
                                        "\u3057\u307F\u3093",
                                        "\u3057\u3080\u3051\u308B",
                                        "\u3058\u3080\u3057\u3087",
                                        "\u3057\u3081\u3044",
                                        "\u3057\u3081\u308B",
                                        "\u3057\u3082\u3093",
                                        "\u3057\u3083\u3044\u3093",
                                        "\u3057\u3083\u3046\u3093",
                                        "\u3057\u3083\u304A\u3093",
                                        "\u3058\u3083\u304C\u3044\u3082",
                                        "\u3057\u3084\u304F\u3057\u3087",
                                        "\u3057\u3083\u304F\u307B\u3046",
                                        "\u3057\u3083\u3051\u3093",
                                        "\u3057\u3083\u3053",
                                        "\u3057\u3083\u3056\u3044",
                                        "\u3057\u3083\u3057\u3093",
                                        "\u3057\u3083\u305B\u3093",
                                        "\u3057\u3083\u305D\u3046",
                                        "\u3057\u3083\u305F\u3044",
                                        "\u3057\u3083\u3061\u3087\u3046",
                                        "\u3057\u3083\u3063\u304D\u3093",
                                        "\u3058\u3083\u307E",
                                        "\u3057\u3083\u308A\u3093",
                                        "\u3057\u3083\u308C\u3044",
                                        "\u3058\u3086\u3046",
                                        "\u3058\u3085\u3046\u3057\u3087",
                                        "\u3057\u3085\u304F\u306F\u304F",
                                        "\u3058\u3085\u3057\u3093",
                                        "\u3057\u3085\u3063\u305B\u304D",
                                        "\u3057\u3085\u307F",
                                        "\u3057\u3085\u3089\u3070",
                                        "\u3058\u3085\u3093\u3070\u3093",
                                        "\u3057\u3087\u3046\u304B\u3044",
                                        "\u3057\u3087\u304F\u305F\u304F",
                                        "\u3057\u3087\u3063\u3051\u3093",
                                        "\u3057\u3087\u3069\u3046",
                                        "\u3057\u3087\u3082\u3064",
                                        "\u3057\u3089\u305B\u308B",
                                        "\u3057\u3089\u3079\u308B",
                                        "\u3057\u3093\u304B",
                                        "\u3057\u3093\u3053\u3046",
                                        "\u3058\u3093\u3058\u3083",
                                        "\u3057\u3093\u305B\u3044\u3058",
                                        "\u3057\u3093\u3061\u304F",
                                        "\u3057\u3093\u308A\u3093",
                                        "\u3059\u3042\u3052",
                                        "\u3059\u3042\u3057",
                                        "\u3059\u3042\u306A",
                                        "\u305A\u3042\u3093",
                                        "\u3059\u3044\u3048\u3044",
                                        "\u3059\u3044\u304B",
                                        "\u3059\u3044\u3068\u3046",
                                        "\u305A\u3044\u3076\u3093",
                                        "\u3059\u3044\u3088\u3046\u3073",
                                        "\u3059\u3046\u304C\u304F",
                                        "\u3059\u3046\u3058\u3064",
                                        "\u3059\u3046\u305B\u3093",
                                        "\u3059\u304A\u3069\u308A",
                                        "\u3059\u304D\u307E",
                                        "\u3059\u304F\u3046",
                                        "\u3059\u304F\u306A\u3044",
                                        "\u3059\u3051\u308B",
                                        "\u3059\u3054\u3044",
                                        "\u3059\u3053\u3057",
                                        "\u305A\u3055\u3093",
                                        "\u3059\u305A\u3057\u3044",
                                        "\u3059\u3059\u3080",
                                        "\u3059\u3059\u3081\u308B",
                                        "\u3059\u3063\u304B\u308A",
                                        "\u305A\u3063\u3057\u308A",
                                        "\u305A\u3063\u3068",
                                        "\u3059\u3066\u304D",
                                        "\u3059\u3066\u308B",
                                        "\u3059\u306D\u308B",
                                        "\u3059\u306E\u3053",
                                        "\u3059\u306F\u3060",
                                        "\u3059\u3070\u3089\u3057\u3044",
                                        "\u305A\u3072\u3087\u3046",
                                        "\u305A\u3076\u306C\u308C",
                                        "\u3059\u3076\u308A",
                                        "\u3059\u3075\u308C",
                                        "\u3059\u3079\u3066",
                                        "\u3059\u3079\u308B",
                                        "\u305A\u307B\u3046",
                                        "\u3059\u307C\u3093",
                                        "\u3059\u307E\u3044",
                                        "\u3059\u3081\u3057",
                                        "\u3059\u3082\u3046",
                                        "\u3059\u3084\u304D",
                                        "\u3059\u3089\u3059\u3089",
                                        "\u3059\u308B\u3081",
                                        "\u3059\u308C\u3061\u304C\u3046",
                                        "\u3059\u308D\u3063\u3068",
                                        "\u3059\u308F\u308B",
                                        "\u3059\u3093\u305C\u3093",
                                        "\u3059\u3093\u307D\u3046",
                                        "\u305B\u3042\u3076\u3089",
                                        "\u305B\u3044\u304B\u3064",
                                        "\u305B\u3044\u3052\u3093",
                                        "\u305B\u3044\u3058",
                                        "\u305B\u3044\u3088\u3046",
                                        "\u305B\u304A\u3046",
                                        "\u305B\u304B\u3044\u304B\u3093",
                                        "\u305B\u304D\u306B\u3093",
                                        "\u305B\u304D\u3080",
                                        "\u305B\u304D\u3086",
                                        "\u305B\u304D\u3089\u3093\u3046\u3093",
                                        "\u305B\u3051\u3093",
                                        "\u305B\u3053\u3046",
                                        "\u305B\u3059\u3058",
                                        "\u305B\u305F\u3044",
                                        "\u305B\u305F\u3051",
                                        "\u305B\u3063\u304B\u304F",
                                        "\u305B\u3063\u304D\u3083\u304F",
                                        "\u305C\u3063\u304F",
                                        "\u305B\u3063\u3051\u3093",
                                        "\u305B\u3063\u3053\u3064",
                                        "\u305B\u3063\u3055\u305F\u304F\u307E",
                                        "\u305B\u3064\u305E\u304F",
                                        "\u305B\u3064\u3060\u3093",
                                        "\u305B\u3064\u3067\u3093",
                                        "\u305B\u3063\u3071\u3093",
                                        "\u305B\u3064\u3073",
                                        "\u305B\u3064\u3076\u3093",
                                        "\u305B\u3064\u3081\u3044",
                                        "\u305B\u3064\u308A\u3064",
                                        "\u305B\u306A\u304B",
                                        "\u305B\u306E\u3073",
                                        "\u305B\u306F\u3070",
                                        "\u305B\u3073\u308D",
                                        "\u305B\u307C\u306D",
                                        "\u305B\u307E\u3044",
                                        "\u305B\u307E\u308B",
                                        "\u305B\u3081\u308B",
                                        "\u305B\u3082\u305F\u308C",
                                        "\u305B\u308A\u3075",
                                        "\u305C\u3093\u3042\u304F",
                                        "\u305B\u3093\u3044",
                                        "\u305B\u3093\u3048\u3044",
                                        "\u305B\u3093\u304B",
                                        "\u305B\u3093\u304D\u3087",
                                        "\u305B\u3093\u304F",
                                        "\u305B\u3093\u3052\u3093",
                                        "\u305C\u3093\u3054",
                                        "\u305B\u3093\u3055\u3044",
                                        "\u305B\u3093\u3057\u3085",
                                        "\u305B\u3093\u3059\u3044",
                                        "\u305B\u3093\u305B\u3044",
                                        "\u305B\u3093\u305E",
                                        "\u305B\u3093\u305F\u304F",
                                        "\u305B\u3093\u3061\u3087\u3046",
                                        "\u305B\u3093\u3066\u3044",
                                        "\u305B\u3093\u3068\u3046",
                                        "\u305B\u3093\u306C\u304D",
                                        "\u305B\u3093\u306D\u3093",
                                        "\u305B\u3093\u3071\u3044",
                                        "\u305C\u3093\u3076",
                                        "\u305C\u3093\u307D\u3046",
                                        "\u305B\u3093\u3080",
                                        "\u305B\u3093\u3081\u3093\u3058\u3087",
                                        "\u305B\u3093\u3082\u3093",
                                        "\u305B\u3093\u3084\u304F",
                                        "\u305B\u3093\u3086\u3046",
                                        "\u305B\u3093\u3088\u3046",
                                        "\u305C\u3093\u3089",
                                        "\u305C\u3093\u308A\u3083\u304F",
                                        "\u305B\u3093\u308C\u3044",
                                        "\u305B\u3093\u308D",
                                        "\u305D\u3042\u304F",
                                        "\u305D\u3044\u3068\u3052\u308B",
                                        "\u305D\u3044\u306D",
                                        "\u305D\u3046\u304C\u3093\u304D\u3087\u3046",
                                        "\u305D\u3046\u304D",
                                        "\u305D\u3046\u3054",
                                        "\u305D\u3046\u3057\u3093",
                                        "\u305D\u3046\u3060\u3093",
                                        "\u305D\u3046\u306A\u3093",
                                        "\u305D\u3046\u3073",
                                        "\u305D\u3046\u3081\u3093",
                                        "\u305D\u3046\u308A",
                                        "\u305D\u3048\u3082\u306E",
                                        "\u305D\u3048\u3093",
                                        "\u305D\u304C\u3044",
                                        "\u305D\u3052\u304D",
                                        "\u305D\u3053\u3046",
                                        "\u305D\u3053\u305D\u3053",
                                        "\u305D\u3056\u3044",
                                        "\u305D\u3057\u306A",
                                        "\u305D\u305B\u3044",
                                        "\u305D\u305B\u3093",
                                        "\u305D\u305D\u3050",
                                        "\u305D\u3060\u3066\u308B",
                                        "\u305D\u3064\u3046",
                                        "\u305D\u3064\u3048\u3093",
                                        "\u305D\u3063\u304B\u3093",
                                        "\u305D\u3064\u304E\u3087\u3046",
                                        "\u305D\u3063\u3051\u3064",
                                        "\u305D\u3063\u3053\u3046",
                                        "\u305D\u3063\u305B\u3093",
                                        "\u305D\u3063\u3068",
                                        "\u305D\u3068\u304C\u308F",
                                        "\u305D\u3068\u3065\u3089",
                                        "\u305D\u306A\u3048\u308B",
                                        "\u305D\u306A\u305F",
                                        "\u305D\u3075\u307C",
                                        "\u305D\u307C\u304F",
                                        "\u305D\u307C\u308D",
                                        "\u305D\u307E\u3064",
                                        "\u305D\u307E\u308B",
                                        "\u305D\u3080\u304F",
                                        "\u305D\u3080\u308A\u3048",
                                        "\u305D\u3081\u308B",
                                        "\u305D\u3082\u305D\u3082",
                                        "\u305D\u3088\u304B\u305C",
                                        "\u305D\u3089\u307E\u3081",
                                        "\u305D\u308D\u3046",
                                        "\u305D\u3093\u304B\u3044",
                                        "\u305D\u3093\u3051\u3044",
                                        "\u305D\u3093\u3056\u3044",
                                        "\u305D\u3093\u3057\u3064",
                                        "\u305D\u3093\u305E\u304F",
                                        "\u305D\u3093\u3061\u3087\u3046",
                                        "\u305E\u3093\u3073",
                                        "\u305E\u3093\u3076\u3093",
                                        "\u305D\u3093\u307F\u3093",
                                        "\u305F\u3042\u3044",
                                        "\u305F\u3044\u3044\u3093",
                                        "\u305F\u3044\u3046\u3093",
                                        "\u305F\u3044\u3048\u304D",
                                        "\u305F\u3044\u304A\u3046",
                                        "\u3060\u3044\u304C\u304F",
                                        "\u305F\u3044\u304D",
                                        "\u305F\u3044\u3050\u3046",
                                        "\u305F\u3044\u3051\u3093",
                                        "\u305F\u3044\u3053",
                                        "\u305F\u3044\u3056\u3044",
                                        "\u3060\u3044\u3058\u3087\u3046\u3076",
                                        "\u3060\u3044\u3059\u304D",
                                        "\u305F\u3044\u305B\u3064",
                                        "\u305F\u3044\u305D\u3046",
                                        "\u3060\u3044\u305F\u3044",
                                        "\u305F\u3044\u3061\u3087\u3046",
                                        "\u305F\u3044\u3066\u3044",
                                        "\u3060\u3044\u3069\u3053\u308D",
                                        "\u305F\u3044\u306A\u3044",
                                        "\u305F\u3044\u306D\u3064",
                                        "\u305F\u3044\u306E\u3046",
                                        "\u305F\u3044\u306F\u3093",
                                        "\u3060\u3044\u3072\u3087\u3046",
                                        "\u305F\u3044\u3075\u3046",
                                        "\u305F\u3044\u3078\u3093",
                                        "\u305F\u3044\u307B",
                                        "\u305F\u3044\u307E\u3064\u3070\u306A",
                                        "\u305F\u3044\u307F\u3093\u3050",
                                        "\u305F\u3044\u3080",
                                        "\u305F\u3044\u3081\u3093",
                                        "\u305F\u3044\u3084\u304D",
                                        "\u305F\u3044\u3088\u3046",
                                        "\u305F\u3044\u3089",
                                        "\u305F\u3044\u308A\u3087\u304F",
                                        "\u305F\u3044\u308B",
                                        "\u305F\u3044\u308F\u3093",
                                        "\u305F\u3046\u3048",
                                        "\u305F\u3048\u308B",
                                        "\u305F\u304A\u3059",
                                        "\u305F\u304A\u308B",
                                        "\u305F\u304A\u308C\u308B",
                                        "\u305F\u304B\u3044",
                                        "\u305F\u304B\u306D",
                                        "\u305F\u304D\u3073",
                                        "\u305F\u304F\u3055\u3093",
                                        "\u305F\u3053\u304F",
                                        "\u305F\u3053\u3084\u304D",
                                        "\u305F\u3055\u3044",
                                        "\u305F\u3057\u3056\u3093",
                                        "\u3060\u3058\u3083\u308C",
                                        "\u305F\u3059\u3051\u308B",
                                        "\u305F\u305A\u3055\u308F\u308B",
                                        "\u305F\u305D\u304C\u308C",
                                        "\u305F\u305F\u304B\u3046",
                                        "\u305F\u305F\u304F",
                                        "\u305F\u3060\u3057\u3044",
                                        "\u305F\u305F\u307F",
                                        "\u305F\u3061\u3070\u306A",
                                        "\u3060\u3063\u304B\u3044",
                                        "\u3060\u3063\u304D\u3083\u304F",
                                        "\u3060\u3063\u3053",
                                        "\u3060\u3063\u3057\u3085\u3064",
                                        "\u3060\u3063\u305F\u3044",
                                        "\u305F\u3066\u308B",
                                        "\u305F\u3068\u3048\u308B",
                                        "\u305F\u306A\u3070\u305F",
                                        "\u305F\u306B\u3093",
                                        "\u305F\u306C\u304D",
                                        "\u305F\u306E\u3057\u307F",
                                        "\u305F\u306F\u3064",
                                        "\u305F\u3076\u3093",
                                        "\u305F\u3079\u308B",
                                        "\u305F\u307C\u3046",
                                        "\u305F\u307E\u3054",
                                        "\u305F\u307E\u308B",
                                        "\u3060\u3080\u308B",
                                        "\u305F\u3081\u3044\u304D",
                                        "\u305F\u3081\u3059",
                                        "\u305F\u3081\u308B",
                                        "\u305F\u3082\u3064",
                                        "\u305F\u3084\u3059\u3044",
                                        "\u305F\u3088\u308B",
                                        "\u305F\u3089\u3059",
                                        "\u305F\u308A\u304D\u307B\u3093\u304C\u3093",
                                        "\u305F\u308A\u3087\u3046",
                                        "\u305F\u308A\u308B",
                                        "\u305F\u308B\u3068",
                                        "\u305F\u308C\u308B",
                                        "\u305F\u308C\u3093\u3068",
                                        "\u305F\u308D\u3063\u3068",
                                        "\u305F\u308F\u3080\u308C\u308B",
                                        "\u3060\u3093\u3042\u3064",
                                        "\u305F\u3093\u3044",
                                        "\u305F\u3093\u304A\u3093",
                                        "\u305F\u3093\u304B",
                                        "\u305F\u3093\u304D",
                                        "\u305F\u3093\u3051\u3093",
                                        "\u305F\u3093\u3054",
                                        "\u305F\u3093\u3055\u3093",
                                        "\u305F\u3093\u3058\u3087\u3046\u3073",
                                        "\u3060\u3093\u305B\u3044",
                                        "\u305F\u3093\u305D\u304F",
                                        "\u305F\u3093\u305F\u3044",
                                        "\u3060\u3093\u3061",
                                        "\u305F\u3093\u3066\u3044",
                                        "\u305F\u3093\u3068\u3046",
                                        "\u3060\u3093\u306A",
                                        "\u305F\u3093\u306B\u3093",
                                        "\u3060\u3093\u306D\u3064",
                                        "\u305F\u3093\u306E\u3046",
                                        "\u305F\u3093\u3074\u3093",
                                        "\u3060\u3093\u307C\u3046",
                                        "\u305F\u3093\u307E\u3064",
                                        "\u305F\u3093\u3081\u3044",
                                        "\u3060\u3093\u308C\u3064",
                                        "\u3060\u3093\u308D",
                                        "\u3060\u3093\u308F",
                                        "\u3061\u3042\u3044",
                                        "\u3061\u3042\u3093",
                                        "\u3061\u3044\u304D",
                                        "\u3061\u3044\u3055\u3044",
                                        "\u3061\u3048\u3093",
                                        "\u3061\u304B\u3044",
                                        "\u3061\u304B\u3089",
                                        "\u3061\u304D\u3085\u3046",
                                        "\u3061\u304D\u3093",
                                        "\u3061\u3051\u3044\u305A",
                                        "\u3061\u3051\u3093",
                                        "\u3061\u3053\u304F",
                                        "\u3061\u3055\u3044",
                                        "\u3061\u3057\u304D",
                                        "\u3061\u3057\u308A\u3087\u3046",
                                        "\u3061\u305B\u3044",
                                        "\u3061\u305D\u3046",
                                        "\u3061\u305F\u3044",
                                        "\u3061\u305F\u3093",
                                        "\u3061\u3061\u304A\u3084",
                                        "\u3061\u3064\u3058\u3087",
                                        "\u3061\u3066\u304D",
                                        "\u3061\u3066\u3093",
                                        "\u3061\u306C\u304D",
                                        "\u3061\u306C\u308A",
                                        "\u3061\u306E\u3046",
                                        "\u3061\u3072\u3087\u3046",
                                        "\u3061\u3078\u3044\u305B\u3093",
                                        "\u3061\u307B\u3046",
                                        "\u3061\u307E\u305F",
                                        "\u3061\u307F\u3064",
                                        "\u3061\u307F\u3069\u308D",
                                        "\u3061\u3081\u3044\u3069",
                                        "\u3061\u3083\u3093\u3053\u306A\u3079",
                                        "\u3061\u3085\u3046\u3044",
                                        "\u3061\u3086\u308A\u3087\u304F",
                                        "\u3061\u3087\u3046\u3057",
                                        "\u3061\u3087\u3055\u304F\u3051\u3093",
                                        "\u3061\u3089\u3057",
                                        "\u3061\u3089\u307F",
                                        "\u3061\u308A\u304C\u307F",
                                        "\u3061\u308A\u3087\u3046",
                                        "\u3061\u308B\u3069",
                                        "\u3061\u308F\u308F",
                                        "\u3061\u3093\u305F\u3044",
                                        "\u3061\u3093\u3082\u304F",
                                        "\u3064\u3044\u304B",
                                        "\u3064\u3044\u305F\u3061",
                                        "\u3064\u3046\u304B",
                                        "\u3064\u3046\u3058\u3087\u3046",
                                        "\u3064\u3046\u306F\u3093",
                                        "\u3064\u3046\u308F",
                                        "\u3064\u304B\u3046",
                                        "\u3064\u304B\u308C\u308B",
                                        "\u3064\u304F\u306D",
                                        "\u3064\u304F\u308B",
                                        "\u3064\u3051\u306D",
                                        "\u3064\u3051\u308B",
                                        "\u3064\u3054\u3046",
                                        "\u3064\u305F\u3048\u308B",
                                        "\u3064\u3065\u304F",
                                        "\u3064\u3064\u3058",
                                        "\u3064\u3064\u3080",
                                        "\u3064\u3068\u3081\u308B",
                                        "\u3064\u306A\u304C\u308B",
                                        "\u3064\u306A\u307F",
                                        "\u3064\u306D\u3065\u306D",
                                        "\u3064\u306E\u308B",
                                        "\u3064\u3076\u3059",
                                        "\u3064\u307E\u3089\u306A\u3044",
                                        "\u3064\u307E\u308B",
                                        "\u3064\u307F\u304D",
                                        "\u3064\u3081\u305F\u3044",
                                        "\u3064\u3082\u308A",
                                        "\u3064\u3082\u308B",
                                        "\u3064\u3088\u3044",
                                        "\u3064\u308B\u307C",
                                        "\u3064\u308B\u307F\u304F",
                                        "\u3064\u308F\u3082\u306E",
                                        "\u3064\u308F\u308A",
                                        "\u3066\u3042\u3057",
                                        "\u3066\u3042\u3066",
                                        "\u3066\u3042\u307F",
                                        "\u3066\u3044\u304A\u3093",
                                        "\u3066\u3044\u304B",
                                        "\u3066\u3044\u304D",
                                        "\u3066\u3044\u3051\u3044",
                                        "\u3066\u3044\u3053\u304F",
                                        "\u3066\u3044\u3055\u3064",
                                        "\u3066\u3044\u3057",
                                        "\u3066\u3044\u305B\u3044",
                                        "\u3066\u3044\u305F\u3044",
                                        "\u3066\u3044\u3069",
                                        "\u3066\u3044\u306D\u3044",
                                        "\u3066\u3044\u3072\u3087\u3046",
                                        "\u3066\u3044\u3078\u3093",
                                        "\u3066\u3044\u307C\u3046",
                                        "\u3066\u3046\u3061",
                                        "\u3066\u304A\u304F\u308C",
                                        "\u3066\u304D\u3068\u3046",
                                        "\u3066\u304F\u3073",
                                        "\u3067\u3053\u307C\u3053",
                                        "\u3066\u3055\u304E\u3087\u3046",
                                        "\u3066\u3055\u3052",
                                        "\u3066\u3059\u308A",
                                        "\u3066\u305D\u3046",
                                        "\u3066\u3061\u304C\u3044",
                                        "\u3066\u3061\u3087\u3046",
                                        "\u3066\u3064\u304C\u304F",
                                        "\u3066\u3064\u3065\u304D",
                                        "\u3067\u3063\u3071",
                                        "\u3066\u3064\u307C\u3046",
                                        "\u3066\u3064\u3084",
                                        "\u3067\u306C\u304B\u3048",
                                        "\u3066\u306C\u304D",
                                        "\u3066\u306C\u3050\u3044",
                                        "\u3066\u306E\u3072\u3089",
                                        "\u3066\u306F\u3044",
                                        "\u3066\u3076\u304F\u308D",
                                        "\u3066\u3075\u3060",
                                        "\u3066\u307B\u3069\u304D",
                                        "\u3066\u307B\u3093",
                                        "\u3066\u307E\u3048",
                                        "\u3066\u307E\u304D\u305A\u3057",
                                        "\u3066\u307F\u3058\u304B",
                                        "\u3066\u307F\u3084\u3052",
                                        "\u3066\u3089\u3059",
                                        "\u3066\u308C\u3073",
                                        "\u3066\u308F\u3051",
                                        "\u3066\u308F\u305F\u3057",
                                        "\u3067\u3093\u3042\u3064",
                                        "\u3066\u3093\u3044\u3093",
                                        "\u3066\u3093\u304B\u3044",
                                        "\u3066\u3093\u304D",
                                        "\u3066\u3093\u3050",
                                        "\u3066\u3093\u3051\u3093",
                                        "\u3066\u3093\u3054\u304F",
                                        "\u3066\u3093\u3055\u3044",
                                        "\u3066\u3093\u3057",
                                        "\u3066\u3093\u3059\u3046",
                                        "\u3067\u3093\u3061",
                                        "\u3066\u3093\u3066\u304D",
                                        "\u3066\u3093\u3068\u3046",
                                        "\u3066\u3093\u306A\u3044",
                                        "\u3066\u3093\u3077\u3089",
                                        "\u3066\u3093\u307C\u3046\u3060\u3044",
                                        "\u3066\u3093\u3081\u3064",
                                        "\u3066\u3093\u3089\u3093\u304B\u3044",
                                        "\u3067\u3093\u308A\u3087\u304F",
                                        "\u3067\u3093\u308F",
                                        "\u3069\u3042\u3044",
                                        "\u3068\u3044\u308C",
                                        "\u3069\u3046\u304B\u3093",
                                        "\u3068\u3046\u304D\u3085\u3046",
                                        "\u3069\u3046\u3050",
                                        "\u3068\u3046\u3057",
                                        "\u3068\u3046\u3080\u304E",
                                        "\u3068\u304A\u3044",
                                        "\u3068\u304A\u304B",
                                        "\u3068\u304A\u304F",
                                        "\u3068\u304A\u3059",
                                        "\u3068\u304A\u308B",
                                        "\u3068\u304B\u3044",
                                        "\u3068\u304B\u3059",
                                        "\u3068\u304D\u304A\u308A",
                                        "\u3068\u304D\u3069\u304D",
                                        "\u3068\u304F\u3044",
                                        "\u3068\u304F\u3057\u3085\u3046",
                                        "\u3068\u304F\u3066\u3093",
                                        "\u3068\u304F\u306B",
                                        "\u3068\u304F\u3079\u3064",
                                        "\u3068\u3051\u3044",
                                        "\u3068\u3051\u308B",
                                        "\u3068\u3053\u3084",
                                        "\u3068\u3055\u304B",
                                        "\u3068\u3057\u3087\u304B\u3093",
                                        "\u3068\u305D\u3046",
                                        "\u3068\u305F\u3093",
                                        "\u3068\u3061\u3085\u3046",
                                        "\u3068\u3063\u304D\u3085\u3046",
                                        "\u3068\u3063\u304F\u3093",
                                        "\u3068\u3064\u305C\u3093",
                                        "\u3068\u3064\u306B\u3085\u3046",
                                        "\u3068\u3069\u3051\u308B",
                                        "\u3068\u3068\u306E\u3048\u308B",
                                        "\u3068\u306A\u3044",
                                        "\u3068\u306A\u3048\u308B",
                                        "\u3068\u306A\u308A",
                                        "\u3068\u306E\u3055\u307E",
                                        "\u3068\u3070\u3059",
                                        "\u3069\u3076\u304C\u308F",
                                        "\u3068\u307B\u3046",
                                        "\u3068\u307E\u308B",
                                        "\u3068\u3081\u308B",
                                        "\u3068\u3082\u3060\u3061",
                                        "\u3068\u3082\u308B",
                                        "\u3069\u3088\u3046\u3073",
                                        "\u3068\u3089\u3048\u308B",
                                        "\u3068\u3093\u304B\u3064",
                                        "\u3069\u3093\u3076\u308A",
                                        "\u306A\u3044\u304B\u304F",
                                        "\u306A\u3044\u3053\u3046",
                                        "\u306A\u3044\u3057\u3087",
                                        "\u306A\u3044\u3059",
                                        "\u306A\u3044\u305B\u3093",
                                        "\u306A\u3044\u305D\u3046",
                                        "\u306A\u304A\u3059",
                                        "\u306A\u304C\u3044",
                                        "\u306A\u304F\u3059",
                                        "\u306A\u3052\u308B",
                                        "\u306A\u3053\u3046\u3069",
                                        "\u306A\u3055\u3051",
                                        "\u306A\u305F\u3067\u3053\u3053",
                                        "\u306A\u3063\u3068\u3046",
                                        "\u306A\u3064\u3084\u3059\u307F",
                                        "\u306A\u306A\u304A\u3057",
                                        "\u306A\u306B\u3054\u3068",
                                        "\u306A\u306B\u3082\u306E",
                                        "\u306A\u306B\u308F",
                                        "\u306A\u306E\u304B",
                                        "\u306A\u3075\u3060",
                                        "\u306A\u307E\u3044\u304D",
                                        "\u306A\u307E\u3048",
                                        "\u306A\u307E\u307F",
                                        "\u306A\u307F\u3060",
                                        "\u306A\u3081\u3089\u304B",
                                        "\u306A\u3081\u308B",
                                        "\u306A\u3084\u3080",
                                        "\u306A\u3089\u3046",
                                        "\u306A\u3089\u3073",
                                        "\u306A\u3089\u3076",
                                        "\u306A\u308C\u308B",
                                        "\u306A\u308F\u3068\u3073",
                                        "\u306A\u308F\u3070\u308A",
                                        "\u306B\u3042\u3046",
                                        "\u306B\u3044\u304C\u305F",
                                        "\u306B\u3046\u3051",
                                        "\u306B\u304A\u3044",
                                        "\u306B\u304B\u3044",
                                        "\u306B\u304C\u3066",
                                        "\u306B\u304D\u3073",
                                        "\u306B\u304F\u3057\u307F",
                                        "\u306B\u304F\u307E\u3093",
                                        "\u306B\u3052\u308B",
                                        "\u306B\u3055\u3093\u304B\u305F\u3093\u305D",
                                        "\u306B\u3057\u304D",
                                        "\u306B\u305B\u3082\u306E",
                                        "\u306B\u3061\u3058\u3087\u3046",
                                        "\u306B\u3061\u3088\u3046\u3073",
                                        "\u306B\u3063\u304B",
                                        "\u306B\u3063\u304D",
                                        "\u306B\u3063\u3051\u3044",
                                        "\u306B\u3063\u3053\u3046",
                                        "\u306B\u3063\u3055\u3093",
                                        "\u306B\u3063\u3057\u3087\u304F",
                                        "\u306B\u3063\u3059\u3046",
                                        "\u306B\u3063\u305B\u304D",
                                        "\u306B\u3063\u3066\u3044",
                                        "\u306B\u306A\u3046",
                                        "\u306B\u307B\u3093",
                                        "\u306B\u307E\u3081",
                                        "\u306B\u3082\u3064",
                                        "\u306B\u3084\u308A",
                                        "\u306B\u3085\u3046\u3044\u3093",
                                        "\u306B\u308A\u3093\u3057\u3083",
                                        "\u306B\u308F\u3068\u308A",
                                        "\u306B\u3093\u3044",
                                        "\u306B\u3093\u304B",
                                        "\u306B\u3093\u304D",
                                        "\u306B\u3093\u3052\u3093",
                                        "\u306B\u3093\u3057\u304D",
                                        "\u306B\u3093\u305A\u3046",
                                        "\u306B\u3093\u305D\u3046",
                                        "\u306B\u3093\u305F\u3044",
                                        "\u306B\u3093\u3061",
                                        "\u306B\u3093\u3066\u3044",
                                        "\u306B\u3093\u306B\u304F",
                                        "\u306B\u3093\u3077",
                                        "\u306B\u3093\u307E\u308A",
                                        "\u306B\u3093\u3080",
                                        "\u306B\u3093\u3081\u3044",
                                        "\u306B\u3093\u3088\u3046",
                                        "\u306C\u3044\u304F\u304E",
                                        "\u306C\u304B\u3059",
                                        "\u306C\u3050\u3044\u3068\u308B",
                                        "\u306C\u3050\u3046",
                                        "\u306C\u304F\u3082\u308A",
                                        "\u306C\u3059\u3080",
                                        "\u306C\u307E\u3048\u3073",
                                        "\u306C\u3081\u308A",
                                        "\u306C\u3089\u3059",
                                        "\u306C\u3093\u3061\u3083\u304F",
                                        "\u306D\u3042\u3052",
                                        "\u306D\u3044\u304D",
                                        "\u306D\u3044\u308B",
                                        "\u306D\u3044\u308D",
                                        "\u306D\u3050\u305B",
                                        "\u306D\u304F\u305F\u3044",
                                        "\u306D\u304F\u3089",
                                        "\u306D\u3053\u305C",
                                        "\u306D\u3053\u3080",
                                        "\u306D\u3055\u3052",
                                        "\u306D\u3059\u3054\u3059",
                                        "\u306D\u305D\u3079\u308B",
                                        "\u306D\u3060\u3093",
                                        "\u306D\u3064\u3044",
                                        "\u306D\u3063\u3057\u3093",
                                        "\u306D\u3064\u305E\u3046",
                                        "\u306D\u3063\u305F\u3044\u304E\u3087",
                                        "\u306D\u3076\u305D\u304F",
                                        "\u306D\u3075\u3060",
                                        "\u306D\u307C\u3046",
                                        "\u306D\u307B\u308A\u306F\u307B\u308A",
                                        "\u306D\u307E\u304D",
                                        "\u306D\u307E\u308F\u3057",
                                        "\u306D\u307F\u307F",
                                        "\u306D\u3080\u3044",
                                        "\u306D\u3080\u305F\u3044",
                                        "\u306D\u3082\u3068",
                                        "\u306D\u3089\u3046",
                                        "\u306D\u308F\u3056",
                                        "\u306D\u3093\u3044\u308A",
                                        "\u306D\u3093\u304A\u3057",
                                        "\u306D\u3093\u304B\u3093",
                                        "\u306D\u3093\u304D\u3093",
                                        "\u306D\u3093\u3050",
                                        "\u306D\u3093\u3056",
                                        "\u306D\u3093\u3057",
                                        "\u306D\u3093\u3061\u3083\u304F",
                                        "\u306D\u3093\u3069",
                                        "\u306D\u3093\u3074",
                                        "\u306D\u3093\u3076\u3064",
                                        "\u306D\u3093\u307E\u3064",
                                        "\u306D\u3093\u308A\u3087\u3046",
                                        "\u306D\u3093\u308C\u3044",
                                        "\u306E\u3044\u305A",
                                        "\u306E\u304A\u3065\u307E",
                                        "\u306E\u304C\u3059",
                                        "\u306E\u304D\u306A\u307F",
                                        "\u306E\u3053\u304E\u308A",
                                        "\u306E\u3053\u3059",
                                        "\u306E\u3053\u308B",
                                        "\u306E\u305B\u308B",
                                        "\u306E\u305E\u304F",
                                        "\u306E\u305E\u3080",
                                        "\u306E\u305F\u307E\u3046",
                                        "\u306E\u3061\u307B\u3069",
                                        "\u306E\u3063\u304F",
                                        "\u306E\u3070\u3059",
                                        "\u306E\u306F\u3089",
                                        "\u306E\u3079\u308B",
                                        "\u306E\u307C\u308B",
                                        "\u306E\u307F\u3082\u306E",
                                        "\u306E\u3084\u307E",
                                        "\u306E\u3089\u3044\u306C",
                                        "\u306E\u3089\u306D\u3053",
                                        "\u306E\u308A\u3082\u306E",
                                        "\u306E\u308A\u3086\u304D",
                                        "\u306E\u308C\u3093",
                                        "\u306E\u3093\u304D",
                                        "\u3070\u3042\u3044",
                                        "\u306F\u3042\u304F",
                                        "\u3070\u3042\u3055\u3093",
                                        "\u3070\u3044\u304B",
                                        "\u3070\u3044\u304F",
                                        "\u306F\u3044\u3051\u3093",
                                        "\u306F\u3044\u3054",
                                        "\u306F\u3044\u3057\u3093",
                                        "\u306F\u3044\u3059\u3044",
                                        "\u306F\u3044\u305B\u3093",
                                        "\u306F\u3044\u305D\u3046",
                                        "\u306F\u3044\u3061",
                                        "\u3070\u3044\u3070\u3044",
                                        "\u306F\u3044\u308C\u3064",
                                        "\u306F\u3048\u308B",
                                        "\u306F\u304A\u308B",
                                        "\u306F\u304B\u3044",
                                        "\u3070\u304B\u308A",
                                        "\u306F\u304B\u308B",
                                        "\u306F\u304F\u3057\u3085",
                                        "\u306F\u3051\u3093",
                                        "\u306F\u3053\u3076",
                                        "\u306F\u3055\u307F",
                                        "\u306F\u3055\u3093",
                                        "\u306F\u3057\u3054",
                                        "\u3070\u3057\u3087",
                                        "\u306F\u3057\u308B",
                                        "\u306F\u305B\u308B",
                                        "\u3071\u305D\u3053\u3093",
                                        "\u306F\u305D\u3093",
                                        "\u306F\u305F\u3093",
                                        "\u306F\u3061\u307F\u3064",
                                        "\u306F\u3064\u304A\u3093",
                                        "\u306F\u3063\u304B\u304F",
                                        "\u306F\u3065\u304D",
                                        "\u306F\u3063\u304D\u308A",
                                        "\u306F\u3063\u304F\u3064",
                                        "\u306F\u3063\u3051\u3093",
                                        "\u306F\u3063\u3053\u3046",
                                        "\u306F\u3063\u3055\u3093",
                                        "\u306F\u3063\u3057\u3093",
                                        "\u306F\u3063\u305F\u3064",
                                        "\u306F\u3063\u3061\u3085\u3046",
                                        "\u306F\u3063\u3066\u3093",
                                        "\u306F\u3063\u3074\u3087\u3046",
                                        "\u306F\u3063\u307D\u3046",
                                        "\u306F\u306A\u3059",
                                        "\u306F\u306A\u3073",
                                        "\u306F\u306B\u304B\u3080",
                                        "\u306F\u3076\u3089\u3057",
                                        "\u306F\u307F\u304C\u304D",
                                        "\u306F\u3080\u304B\u3046",
                                        "\u306F\u3081\u3064",
                                        "\u306F\u3084\u3044",
                                        "\u306F\u3084\u3057",
                                        "\u306F\u3089\u3046",
                                        "\u306F\u308D\u3046\u3043\u3093",
                                        "\u306F\u308F\u3044",
                                        "\u306F\u3093\u3044",
                                        "\u306F\u3093\u3048\u3044",
                                        "\u306F\u3093\u304A\u3093",
                                        "\u306F\u3093\u304B\u304F",
                                        "\u306F\u3093\u304D\u3087\u3046",
                                        "\u3070\u3093\u3050\u307F",
                                        "\u306F\u3093\u3053",
                                        "\u306F\u3093\u3057\u3083",
                                        "\u306F\u3093\u3059\u3046",
                                        "\u306F\u3093\u3060\u3093",
                                        "\u3071\u3093\u3061",
                                        "\u3071\u3093\u3064",
                                        "\u306F\u3093\u3066\u3044",
                                        "\u306F\u3093\u3068\u3057",
                                        "\u306F\u3093\u306E\u3046",
                                        "\u306F\u3093\u3071",
                                        "\u306F\u3093\u3076\u3093",
                                        "\u306F\u3093\u307A\u3093",
                                        "\u306F\u3093\u307C\u3046\u304D",
                                        "\u306F\u3093\u3081\u3044",
                                        "\u306F\u3093\u3089\u3093",
                                        "\u306F\u3093\u308D\u3093",
                                        "\u3072\u3044\u304D",
                                        "\u3072\u3046\u3093",
                                        "\u3072\u3048\u308B",
                                        "\u3072\u304B\u304F",
                                        "\u3072\u304B\u308A",
                                        "\u3072\u304B\u308B",
                                        "\u3072\u304B\u3093",
                                        "\u3072\u304F\u3044",
                                        "\u3072\u3051\u3064",
                                        "\u3072\u3053\u3046\u304D",
                                        "\u3072\u3053\u304F",
                                        "\u3072\u3055\u3044",
                                        "\u3072\u3055\u3057\u3076\u308A",
                                        "\u3072\u3055\u3093",
                                        "\u3073\u3058\u3085\u3064\u304B\u3093",
                                        "\u3072\u3057\u3087",
                                        "\u3072\u305D\u304B",
                                        "\u3072\u305D\u3080",
                                        "\u3072\u305F\u3080\u304D",
                                        "\u3072\u3060\u308A",
                                        "\u3072\u305F\u308B",
                                        "\u3072\u3064\u304E",
                                        "\u3072\u3063\u3053\u3057",
                                        "\u3072\u3063\u3057",
                                        "\u3072\u3064\u3058\u3085\u3072\u3093",
                                        "\u3072\u3063\u3059",
                                        "\u3072\u3064\u305C\u3093",
                                        "\u3074\u3063\u305F\u308A",
                                        "\u3074\u3063\u3061\u308A",
                                        "\u3072\u3064\u3088\u3046",
                                        "\u3072\u3066\u3044",
                                        "\u3072\u3068\u3054\u307F",
                                        "\u3072\u306A\u307E\u3064\u308A",
                                        "\u3072\u306A\u3093",
                                        "\u3072\u306D\u308B",
                                        "\u3072\u306F\u3093",
                                        "\u3072\u3073\u304F",
                                        "\u3072\u3072\u3087\u3046",
                                        "\u3072\u307B\u3046",
                                        "\u3072\u307E\u308F\u308A",
                                        "\u3072\u307E\u3093",
                                        "\u3072\u307F\u3064",
                                        "\u3072\u3081\u3044",
                                        "\u3072\u3081\u3058\u3057",
                                        "\u3072\u3084\u3051",
                                        "\u3072\u3084\u3059",
                                        "\u3072\u3088\u3046",
                                        "\u3073\u3087\u3046\u304D",
                                        "\u3072\u3089\u304C\u306A",
                                        "\u3072\u3089\u304F",
                                        "\u3072\u308A\u3064",
                                        "\u3072\u308A\u3087\u3046",
                                        "\u3072\u308B\u307E",
                                        "\u3072\u308B\u3084\u3059\u307F",
                                        "\u3072\u308C\u3044",
                                        "\u3072\u308D\u3044",
                                        "\u3072\u308D\u3046",
                                        "\u3072\u308D\u304D",
                                        "\u3072\u308D\u3086\u304D",
                                        "\u3072\u3093\u304B\u304F",
                                        "\u3072\u3093\u3051\u3064",
                                        "\u3072\u3093\u3053\u3093",
                                        "\u3072\u3093\u3057\u3085",
                                        "\u3072\u3093\u305D\u3046",
                                        "\u3074\u3093\u3061",
                                        "\u3072\u3093\u3071\u3093",
                                        "\u3073\u3093\u307C\u3046",
                                        "\u3075\u3042\u3093",
                                        "\u3075\u3044\u3046\u3061",
                                        "\u3075\u3046\u3051\u3044",
                                        "\u3075\u3046\u305B\u3093",
                                        "\u3077\u3046\u305F\u308D\u3046",
                                        "\u3075\u3046\u3068\u3046",
                                        "\u3075\u3046\u3075",
                                        "\u3075\u3048\u308B",
                                        "\u3075\u304A\u3093",
                                        "\u3075\u304B\u3044",
                                        "\u3075\u304D\u3093",
                                        "\u3075\u304F\u3056\u3064",
                                        "\u3075\u304F\u3076\u304F\u308D",
                                        "\u3075\u3053\u3046",
                                        "\u3075\u3055\u3044",
                                        "\u3075\u3057\u304E",
                                        "\u3075\u3058\u307F",
                                        "\u3075\u3059\u307E",
                                        "\u3075\u305B\u3044",
                                        "\u3075\u305B\u3050",
                                        "\u3075\u305D\u304F",
                                        "\u3076\u305F\u306B\u304F",
                                        "\u3075\u305F\u3093",
                                        "\u3075\u3061\u3087\u3046",
                                        "\u3075\u3064\u3046",
                                        "\u3075\u3064\u304B",
                                        "\u3075\u3063\u304B\u3064",
                                        "\u3075\u3063\u304D",
                                        "\u3075\u3063\u3053\u304F",
                                        "\u3076\u3069\u3046",
                                        "\u3075\u3068\u308B",
                                        "\u3075\u3068\u3093",
                                        "\u3075\u306E\u3046",
                                        "\u3075\u306F\u3044",
                                        "\u3075\u3072\u3087\u3046",
                                        "\u3075\u3078\u3093",
                                        "\u3075\u307E\u3093",
                                        "\u3075\u307F\u3093",
                                        "\u3075\u3081\u3064",
                                        "\u3075\u3081\u3093",
                                        "\u3075\u3088\u3046",
                                        "\u3075\u308A\u3053",
                                        "\u3075\u308A\u308B",
                                        "\u3075\u308B\u3044",
                                        "\u3075\u3093\u3044\u304D",
                                        "\u3076\u3093\u304C\u304F",
                                        "\u3076\u3093\u3050",
                                        "\u3075\u3093\u3057\u3064",
                                        "\u3076\u3093\u305B\u304D",
                                        "\u3075\u3093\u305D\u3046",
                                        "\u3076\u3093\u307D\u3046",
                                        "\u3078\u3044\u3042\u3093",
                                        "\u3078\u3044\u304A\u3093",
                                        "\u3078\u3044\u304C\u3044",
                                        "\u3078\u3044\u304D",
                                        "\u3078\u3044\u3052\u3093",
                                        "\u3078\u3044\u3053\u3046",
                                        "\u3078\u3044\u3055",
                                        "\u3078\u3044\u3057\u3083",
                                        "\u3078\u3044\u305B\u3064",
                                        "\u3078\u3044\u305D",
                                        "\u3078\u3044\u305F\u304F",
                                        "\u3078\u3044\u3066\u3093",
                                        "\u3078\u3044\u306D\u3064",
                                        "\u3078\u3044\u308F",
                                        "\u3078\u304D\u304C",
                                        "\u3078\u3053\u3080",
                                        "\u3079\u306B\u3044\u308D",
                                        "\u3079\u306B\u3057\u3087\u3046\u304C",
                                        "\u3078\u3089\u3059",
                                        "\u3078\u3093\u304B\u3093",
                                        "\u3079\u3093\u304D\u3087\u3046",
                                        "\u3079\u3093\u3054\u3057",
                                        "\u3078\u3093\u3055\u3044",
                                        "\u3078\u3093\u305F\u3044",
                                        "\u3079\u3093\u308A",
                                        "\u307B\u3042\u3093",
                                        "\u307B\u3044\u304F",
                                        "\u307C\u3046\u304E\u3087",
                                        "\u307B\u3046\u3053\u304F",
                                        "\u307B\u3046\u305D\u3046",
                                        "\u307B\u3046\u307B\u3046",
                                        "\u307B\u3046\u3082\u3093",
                                        "\u307B\u3046\u308A\u3064",
                                        "\u307B\u3048\u308B",
                                        "\u307B\u304A\u3093",
                                        "\u307B\u304B\u3093",
                                        "\u307B\u304D\u3087\u3046",
                                        "\u307C\u304D\u3093",
                                        "\u307B\u304F\u308D",
                                        "\u307B\u3051\u3064",
                                        "\u307B\u3051\u3093",
                                        "\u307B\u3053\u3046",
                                        "\u307B\u3053\u308B",
                                        "\u307B\u3057\u3044",
                                        "\u307B\u3057\u3064",
                                        "\u307B\u3057\u3085",
                                        "\u307B\u3057\u3087\u3046",
                                        "\u307B\u305B\u3044",
                                        "\u307B\u305D\u3044",
                                        "\u307B\u305D\u304F",
                                        "\u307B\u305F\u3066",
                                        "\u307B\u305F\u308B",
                                        "\u307D\u3061\u3076\u304F\u308D",
                                        "\u307B\u3063\u304D\u3087\u304F",
                                        "\u307B\u3063\u3055",
                                        "\u307B\u3063\u305F\u3093",
                                        "\u307B\u3068\u3093\u3069",
                                        "\u307B\u3081\u308B",
                                        "\u307B\u3093\u3044",
                                        "\u307B\u3093\u304D",
                                        "\u307B\u3093\u3051",
                                        "\u307B\u3093\u3057\u3064",
                                        "\u307B\u3093\u3084\u304F",
                                        "\u307E\u3044\u306B\u3061",
                                        "\u307E\u304B\u3044",
                                        "\u307E\u304B\u305B\u308B",
                                        "\u307E\u304C\u308B",
                                        "\u307E\u3051\u308B",
                                        "\u307E\u3053\u3068",
                                        "\u307E\u3055\u3064",
                                        "\u307E\u3058\u3081",
                                        "\u307E\u3059\u304F",
                                        "\u307E\u305C\u308B",
                                        "\u307E\u3064\u308A",
                                        "\u307E\u3068\u3081",
                                        "\u307E\u306A\u3076",
                                        "\u307E\u306C\u3051",
                                        "\u307E\u306D\u304F",
                                        "\u307E\u307B\u3046",
                                        "\u307E\u3082\u308B",
                                        "\u307E\u3086\u3052",
                                        "\u307E\u3088\u3046",
                                        "\u307E\u308D\u3084\u304B",
                                        "\u307E\u308F\u3059",
                                        "\u307E\u308F\u308A",
                                        "\u307E\u308F\u308B",
                                        "\u307E\u3093\u304C",
                                        "\u307E\u3093\u304D\u3064",
                                        "\u307E\u3093\u305E\u304F",
                                        "\u307E\u3093\u306A\u304B",
                                        "\u307F\u3044\u3089",
                                        "\u307F\u3046\u3061",
                                        "\u307F\u3048\u308B",
                                        "\u307F\u304C\u304F",
                                        "\u307F\u304B\u305F",
                                        "\u307F\u304B\u3093",
                                        "\u307F\u3051\u3093",
                                        "\u307F\u3053\u3093",
                                        "\u307F\u3058\u304B\u3044",
                                        "\u307F\u3059\u3044",
                                        "\u307F\u3059\u3048\u308B",
                                        "\u307F\u305B\u308B",
                                        "\u307F\u3063\u304B",
                                        "\u307F\u3064\u304B\u308B",
                                        "\u307F\u3064\u3051\u308B",
                                        "\u307F\u3066\u3044",
                                        "\u307F\u3068\u3081\u308B",
                                        "\u307F\u306A\u3068",
                                        "\u307F\u306A\u307F\u304B\u3055\u3044",
                                        "\u307F\u306D\u3089\u308B",
                                        "\u307F\u306E\u3046",
                                        "\u307F\u306E\u304C\u3059",
                                        "\u307F\u307B\u3093",
                                        "\u307F\u3082\u3068",
                                        "\u307F\u3084\u3052",
                                        "\u307F\u3089\u3044",
                                        "\u307F\u308A\u3087\u304F",
                                        "\u307F\u308F\u304F",
                                        "\u307F\u3093\u304B",
                                        "\u307F\u3093\u305E\u304F",
                                        "\u3080\u3044\u304B",
                                        "\u3080\u3048\u304D",
                                        "\u3080\u3048\u3093",
                                        "\u3080\u304B\u3044",
                                        "\u3080\u304B\u3046",
                                        "\u3080\u304B\u3048",
                                        "\u3080\u304B\u3057",
                                        "\u3080\u304E\u3061\u3083",
                                        "\u3080\u3051\u308B",
                                        "\u3080\u3052\u3093",
                                        "\u3080\u3055\u307C\u308B",
                                        "\u3080\u3057\u3042\u3064\u3044",
                                        "\u3080\u3057\u3070",
                                        "\u3080\u3058\u3085\u3093",
                                        "\u3080\u3057\u308D",
                                        "\u3080\u3059\u3046",
                                        "\u3080\u3059\u3053",
                                        "\u3080\u3059\u3076",
                                        "\u3080\u3059\u3081",
                                        "\u3080\u305B\u308B",
                                        "\u3080\u305B\u3093",
                                        "\u3080\u3061\u3085\u3046",
                                        "\u3080\u306A\u3057\u3044",
                                        "\u3080\u306E\u3046",
                                        "\u3080\u3084\u307F",
                                        "\u3080\u3088\u3046",
                                        "\u3080\u3089\u3055\u304D",
                                        "\u3080\u308A\u3087\u3046",
                                        "\u3080\u308D\u3093",
                                        "\u3081\u3044\u3042\u3093",
                                        "\u3081\u3044\u3046\u3093",
                                        "\u3081\u3044\u3048\u3093",
                                        "\u3081\u3044\u304B\u304F",
                                        "\u3081\u3044\u304D\u3087\u304F",
                                        "\u3081\u3044\u3055\u3044",
                                        "\u3081\u3044\u3057",
                                        "\u3081\u3044\u305D\u3046",
                                        "\u3081\u3044\u3076\u3064",
                                        "\u3081\u3044\u308C\u3044",
                                        "\u3081\u3044\u308F\u304F",
                                        "\u3081\u3050\u307E\u308C\u308B",
                                        "\u3081\u3056\u3059",
                                        "\u3081\u3057\u305F",
                                        "\u3081\u305A\u3089\u3057\u3044",
                                        "\u3081\u3060\u3064",
                                        "\u3081\u307E\u3044",
                                        "\u3081\u3084\u3059",
                                        "\u3081\u3093\u304D\u3087",
                                        "\u3081\u3093\u305B\u304D",
                                        "\u3081\u3093\u3069\u3046",
                                        "\u3082\u3046\u3057\u3042\u3052\u308B",
                                        "\u3082\u3046\u3069\u3046\u3051\u3093",
                                        "\u3082\u3048\u308B",
                                        "\u3082\u304F\u3057",
                                        "\u3082\u304F\u3066\u304D",
                                        "\u3082\u304F\u3088\u3046\u3073",
                                        "\u3082\u3061\u308D\u3093",
                                        "\u3082\u3069\u308B",
                                        "\u3082\u3089\u3046",
                                        "\u3082\u3093\u304F",
                                        "\u3082\u3093\u3060\u3044",
                                        "\u3084\u304A\u3084",
                                        "\u3084\u3051\u308B",
                                        "\u3084\u3055\u3044",
                                        "\u3084\u3055\u3057\u3044",
                                        "\u3084\u3059\u3044",
                                        "\u3084\u3059\u305F\u308D\u3046",
                                        "\u3084\u3059\u307F",
                                        "\u3084\u305B\u308B",
                                        "\u3084\u305D\u3046",
                                        "\u3084\u305F\u3044",
                                        "\u3084\u3061\u3093",
                                        "\u3084\u3063\u3068",
                                        "\u3084\u3063\u3071\u308A",
                                        "\u3084\u3076\u308B",
                                        "\u3084\u3081\u308B",
                                        "\u3084\u3084\u3053\u3057\u3044",
                                        "\u3084\u3088\u3044",
                                        "\u3084\u308F\u3089\u304B\u3044",
                                        "\u3086\u3046\u304D",
                                        "\u3086\u3046\u3073\u3093\u304D\u3087\u304F",
                                        "\u3086\u3046\u3079",
                                        "\u3086\u3046\u3081\u3044",
                                        "\u3086\u3051\u3064",
                                        "\u3086\u3057\u3085\u3064",
                                        "\u3086\u305B\u3093",
                                        "\u3086\u305D\u3046",
                                        "\u3086\u305F\u304B",
                                        "\u3086\u3061\u3083\u304F",
                                        "\u3086\u3067\u308B",
                                        "\u3086\u306B\u3085\u3046",
                                        "\u3086\u3073\u308F",
                                        "\u3086\u3089\u3044",
                                        "\u3086\u308C\u308B",
                                        "\u3088\u3046\u3044",
                                        "\u3088\u3046\u304B",
                                        "\u3088\u3046\u304D\u3085\u3046",
                                        "\u3088\u3046\u3058",
                                        "\u3088\u3046\u3059",
                                        "\u3088\u3046\u3061\u3048\u3093",
                                        "\u3088\u304B\u305C",
                                        "\u3088\u304B\u3093",
                                        "\u3088\u304D\u3093",
                                        "\u3088\u304F\u305B\u3044",
                                        "\u3088\u304F\u307C\u3046",
                                        "\u3088\u3051\u3044",
                                        "\u3088\u3054\u308C\u308B",
                                        "\u3088\u3055\u3093",
                                        "\u3088\u3057\u3085\u3046",
                                        "\u3088\u305D\u3046",
                                        "\u3088\u305D\u304F",
                                        "\u3088\u3063\u304B",
                                        "\u3088\u3066\u3044",
                                        "\u3088\u3069\u304C\u308F\u304F",
                                        "\u3088\u306D\u3064",
                                        "\u3088\u3084\u304F",
                                        "\u3088\u3086\u3046",
                                        "\u3088\u308D\u3053\u3076",
                                        "\u3088\u308D\u3057\u3044",
                                        "\u3089\u3044\u3046",
                                        "\u3089\u304F\u304C\u304D",
                                        "\u3089\u304F\u3054",
                                        "\u3089\u304F\u3055\u3064",
                                        "\u3089\u304F\u3060",
                                        "\u3089\u3057\u3093\u3070\u3093",
                                        "\u3089\u305B\u3093",
                                        "\u3089\u305E\u304F",
                                        "\u3089\u305F\u3044",
                                        "\u3089\u3063\u304B",
                                        "\u3089\u308C\u3064",
                                        "\u308A\u3048\u304D",
                                        "\u308A\u304B\u3044",
                                        "\u308A\u304D\u3055\u304F",
                                        "\u308A\u304D\u305B\u3064",
                                        "\u308A\u304F\u3050\u3093",
                                        "\u308A\u304F\u3064",
                                        "\u308A\u3051\u3093",
                                        "\u308A\u3053\u3046",
                                        "\u308A\u305B\u3044",
                                        "\u308A\u305D\u3046",
                                        "\u308A\u305D\u304F",
                                        "\u308A\u3066\u3093",
                                        "\u308A\u306D\u3093",
                                        "\u308A\u3086\u3046",
                                        "\u308A\u3085\u3046\u304C\u304F",
                                        "\u308A\u3088\u3046",
                                        "\u308A\u3087\u3046\u308A",
                                        "\u308A\u3087\u304B\u3093",
                                        "\u308A\u3087\u304F\u3061\u3083",
                                        "\u308A\u3087\u3053\u3046",
                                        "\u308A\u308A\u304F",
                                        "\u308A\u308C\u304D",
                                        "\u308A\u308D\u3093",
                                        "\u308A\u3093\u3054",
                                        "\u308B\u3044\u3051\u3044",
                                        "\u308B\u3044\u3055\u3044",
                                        "\u308B\u3044\u3058",
                                        "\u308B\u3044\u305B\u304D",
                                        "\u308B\u3059\u3070\u3093",
                                        "\u308B\u308A\u304C\u308F\u3089",
                                        "\u308C\u3044\u304B\u3093",
                                        "\u308C\u3044\u304E",
                                        "\u308C\u3044\u305B\u3044",
                                        "\u308C\u3044\u305E\u3046\u3053",
                                        "\u308C\u3044\u3068\u3046",
                                        "\u308C\u3044\u307C\u3046",
                                        "\u308C\u304D\u3057",
                                        "\u308C\u304D\u3060\u3044",
                                        "\u308C\u3093\u3042\u3044",
                                        "\u308C\u3093\u3051\u3044",
                                        "\u308C\u3093\u3053\u3093",
                                        "\u308C\u3093\u3055\u3044",
                                        "\u308C\u3093\u3057\u3085\u3046",
                                        "\u308C\u3093\u305E\u304F",
                                        "\u308C\u3093\u3089\u304F",
                                        "\u308D\u3046\u304B",
                                        "\u308D\u3046\u3054",
                                        "\u308D\u3046\u3058\u3093",
                                        "\u308D\u3046\u305D\u304F",
                                        "\u308D\u304F\u304C",
                                        "\u308D\u3053\u3064",
                                        "\u308D\u3058\u3046\u3089",
                                        "\u308D\u3057\u3085\u3064",
                                        "\u308D\u305B\u3093",
                                        "\u308D\u3066\u3093",
                                        "\u308D\u3081\u3093",
                                        "\u308D\u308C\u3064",
                                        "\u308D\u3093\u304E",
                                        "\u308D\u3093\u3071",
                                        "\u308D\u3093\u3076\u3093",
                                        "\u308D\u3093\u308A",
                                        "\u308F\u304B\u3059",
                                        "\u308F\u304B\u3081",
                                        "\u308F\u304B\u3084\u307E",
                                        "\u308F\u304B\u308C\u308B",
                                        "\u308F\u3057\u3064",
                                        "\u308F\u3058\u307E\u3057",
                                        "\u308F\u3059\u308C\u3082\u306E",
                                        "\u308F\u3089\u3046",
                                        "\u308F\u308C\u308B"
                                    ];
                                    W.space = "\u3000";
                                    var Q1 = /*#__PURE__*/ function(_S12) {
                                        _inherits(Q, _S12);
                                        var _super56 = _createSuper(Q);
                                        function Q(t, e) {
                                            var _this40;
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : V1;
                                            _classCallCheck2(this, Q);
                                            _this40 = _super56.call(this, {
                                                privKey: t,
                                                pubKey: e
                                            }), _this40.PrivKey = r;
                                            return _this40;
                                        }
                                        _createClass2(Q, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return t.privKey && (this.privKey = this.PrivKey.fromJSON(t.privKey)), t.pubKey && (this.pubKey = K1.fromJSON(t.pubKey)), this;
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    var e = t.readUInt8();
                                                    e > 0 && (this.privKey = new this.PrivKey().fromFastBuffer(t.read(e)));
                                                    var r = t.readUInt8();
                                                    return r > 0 && (this.pubKey = new K1().fromFastBuffer(t.read(r))), this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    if (t || (t = new y3()), this.privKey) {
                                                        var _e19 = this.privKey.toFastBuffer();
                                                        t.writeUInt8(_e19.length), t.write(_e19);
                                                    } else t.writeUInt8(0);
                                                    if (this.pubKey) {
                                                        var _e20 = this.pubKey.toFastBuffer();
                                                        t.writeUInt8(_e20.length), t.write(_e20);
                                                    } else t.writeUInt8(0);
                                                    return t;
                                                }
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    return this.fromJSON(JSON.parse(t));
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    return JSON.stringify(this.toJSON());
                                                }
                                            },
                                            {
                                                key: "toPublic",
                                                value: function toPublic() {
                                                    var t = new Q().fromObject(this);
                                                    return t.privKey = void 0, t;
                                                }
                                            },
                                            {
                                                key: "fromPrivKey",
                                                value: function fromPrivKey(t) {
                                                    return this.privKey = t, this.pubKey = new K1().fromPrivKey(t), this;
                                                }
                                            },
                                            {
                                                key: "asyncFromPrivKey",
                                                value: function() {
                                                    var _asyncFromPrivKey6 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee103(t) {
                                                        return _regeneratorRuntime().wrap(function _callee103$(_context109) {
                                                            while(true)switch(_context109.prev = _context109.next){
                                                                case 0:
                                                                    this.privKey = t;
                                                                    _context109.next = 3;
                                                                    return new K1().asyncFromPrivKey(t);
                                                                case 3:
                                                                    this.pubKey = _context109.sent;
                                                                    return _context109.abrupt("return", this);
                                                                case 5:
                                                                case "end":
                                                                    return _context109.stop();
                                                            }
                                                        }, _callee103, this);
                                                    }));
                                                    function asyncFromPrivKey(_x141) {
                                                        return _asyncFromPrivKey6.apply(this, arguments);
                                                    }
                                                    return asyncFromPrivKey;
                                                }()
                                            },
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    return this.privKey = new this.PrivKey().fromRandom(), this.pubKey = new K1().fromPrivKey(this.privKey), this;
                                                }
                                            },
                                            {
                                                key: "asyncFromRandom",
                                                value: function() {
                                                    var _asyncFromRandom6 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee104() {
                                                        return _regeneratorRuntime().wrap(function _callee104$(_context110) {
                                                            while(true)switch(_context110.prev = _context110.next){
                                                                case 0:
                                                                    return _context110.abrupt("return", (this.privKey = new this.PrivKey().fromRandom(), this.asyncFromPrivKey(this.privKey)));
                                                                case 1:
                                                                case "end":
                                                                    return _context110.stop();
                                                            }
                                                        }, _callee104, this);
                                                    }));
                                                    function asyncFromRandom() {
                                                        return _asyncFromRandom6.apply(this, arguments);
                                                    }
                                                    return asyncFromRandom;
                                                }()
                                            }
                                        ], [
                                            {
                                                key: "fromPrivKey",
                                                value: function fromPrivKey(t) {
                                                    return new this().fromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "asyncFromPrivKey",
                                                value: function asyncFromPrivKey(t) {
                                                    return new this().asyncFromPrivKey(t);
                                                }
                                            },
                                            {
                                                key: "fromRandom",
                                                value: function fromRandom() {
                                                    return new this().fromRandom();
                                                }
                                            },
                                            {
                                                key: "asyncFromRandom",
                                                value: function asyncFromRandom() {
                                                    return new this().asyncFromRandom();
                                                }
                                            }
                                        ]);
                                        return Q;
                                    }(S1);
                                    Q1.Mainnet = /*#__PURE__*/ function(_Q) {
                                        _inherits(_class16, _Q);
                                        var _super57 = _createSuper(_class16);
                                        function _class16(t, e) {
                                            _classCallCheck2(this, _class16);
                                            return _super57.call(this, t, e, V1.Mainnet);
                                        }
                                        return _createClass2(_class16);
                                    }(Q1), Q1.Testnet = /*#__PURE__*/ function(_Q2) {
                                        _inherits(_class17, _Q2);
                                        var _super58 = _createSuper(_class17);
                                        function _class17(t, e) {
                                            _classCallCheck2(this, _class17);
                                            return _super58.call(this, t, e, V1.Testnet);
                                        }
                                        return _createClass2(_class17);
                                    }(Q1);
                                    var X1 = /*#__PURE__*/ function(_S13) {
                                        _inherits(X, _S13);
                                        var _super59 = _createSuper(X);
                                        function X(t, e, r, i, s, n) {
                                            _classCallCheck2(this, X);
                                            return _super59.call(this, {
                                                sig: t,
                                                keyPair: e,
                                                hashBuf: r,
                                                k: i,
                                                endian: s,
                                                verified: n
                                            });
                                        }
                                        _createClass2(X, [
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return {
                                                        sig: this.sig ? this.sig.toString() : void 0,
                                                        keyPair: this.keyPair ? this.keyPair.toBuffer().toString("hex") : void 0,
                                                        hashBuf: this.hashBuf ? this.hashBuf.toString("hex") : void 0,
                                                        k: this.k ? this.k.toString() : void 0,
                                                        endian: this.endian,
                                                        verified: this.verified
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.sig = t.sig ? new j2().fromString(t.sig) : void 0, this.keyPair = t.keyPair ? new Q1().fromBuffer(Buffer.from(t.keyPair, "hex")) : void 0, this.hashBuf = t.hashBuf ? Buffer.from(t.hashBuf, "hex") : void 0, this.k = t.k ? new p3().fromString(t.k) : void 0, this.endian = t.endian, this.verified = t.verified, this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    var t = JSON.stringify(this.toJSON());
                                                    return Buffer.from(t);
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    var e = JSON.parse(t.toString());
                                                    return this.fromJSON(e);
                                                }
                                            },
                                            {
                                                key: "calcrecovery",
                                                value: function calcrecovery() {
                                                    for(var _t23 = 0; _t23 < 4; _t23++){
                                                        var _e21 = void 0;
                                                        this.sig.recovery = _t23;
                                                        try {
                                                            _e21 = this.sig2PubKey();
                                                        } catch (t) {
                                                            continue;
                                                        }
                                                        if (_e21.point.eq(this.keyPair.pubKey.point)) {
                                                            var _t24 = this.keyPair.pubKey.compressed;
                                                            return this.sig.compressed = void 0 === this.keyPair.pubKey.compressed || _t24, this;
                                                        }
                                                    }
                                                    throw this.sig.recovery = void 0, new Error("Unable to find valid recovery factor");
                                                }
                                            },
                                            {
                                                key: "asyncCalcrecovery",
                                                value: function() {
                                                    var _asyncCalcrecovery3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee105() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee105$(_context111) {
                                                            while(true)switch(_context111.prev = _context111.next){
                                                                case 0:
                                                                    _context111.next = 2;
                                                                    return E1.asyncObjectMethod(this, "calcrecovery", []);
                                                                case 2:
                                                                    t = _context111.sent;
                                                                    return _context111.abrupt("return", this.fromFastBuffer(t.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context111.stop();
                                                            }
                                                        }, _callee105, this);
                                                    }));
                                                    function asyncCalcrecovery() {
                                                        return _asyncCalcrecovery3.apply(this, arguments);
                                                    }
                                                    return asyncCalcrecovery;
                                                }()
                                            },
                                            {
                                                key: "fromString",
                                                value: function fromString(t) {
                                                    var e = JSON.parse(t);
                                                    return e.hashBuf && (this.hashBuf = Buffer.from(e.hashBuf, "hex")), e.keyPair && (this.keyPair = new Q1().fromString(e.keyPair)), e.sig && (this.sig = new j2().fromString(e.sig)), e.k && (this.k = new p3(e.k, 10)), this;
                                                }
                                            },
                                            {
                                                key: "randomK",
                                                value: function randomK() {
                                                    var t = L1.getN();
                                                    var e;
                                                    do e = new p3().fromBuffer(D1.getRandomBuffer(32));
                                                    while (!e.lt(t) || !e.gt(0));
                                                    return this.k = e, this;
                                                }
                                            },
                                            {
                                                key: "deterministicK",
                                                value: function deterministicK(t) {
                                                    var e = Buffer.alloc(32);
                                                    e.fill(1);
                                                    var r = Buffer.alloc(32);
                                                    r.fill(0);
                                                    var i = this.keyPair.privKey.bn.toBuffer({
                                                        size: 32
                                                    });
                                                    r = P1.sha256Hmac(Buffer.concat([
                                                        e,
                                                        Buffer.from([
                                                            0
                                                        ]),
                                                        i,
                                                        this.hashBuf
                                                    ]), r), e = P1.sha256Hmac(e, r), r = P1.sha256Hmac(Buffer.concat([
                                                        e,
                                                        Buffer.from([
                                                            1
                                                        ]),
                                                        i,
                                                        this.hashBuf
                                                    ]), r), e = P1.sha256Hmac(e, r), e = P1.sha256Hmac(e, r);
                                                    var s = new p3().fromBuffer(e);
                                                    var n = L1.getN();
                                                    void 0 === t && (t = 0);
                                                    for(var _i39 = 0; _i39 < t || !s.lt(n) || !s.gt(0); _i39++)r = P1.sha256Hmac(Buffer.concat([
                                                        e,
                                                        Buffer.from([
                                                            0
                                                        ])
                                                    ]), r), e = P1.sha256Hmac(e, r), e = P1.sha256Hmac(e, r), s = new p3().fromBuffer(e);
                                                    return this.k = s, this;
                                                }
                                            },
                                            {
                                                key: "sig2PubKey",
                                                value: function sig2PubKey() {
                                                    var t = this.sig.recovery;
                                                    if (0 !== t && 1 !== t && 2 !== t && 3 !== t) throw new Error("i must be equal to 0, 1, 2, or 3");
                                                    var e = new p3().fromBuffer(this.hashBuf), r = this.sig.r, i = this.sig.s, s = 1 & t, n = t >> 1, a = L1.getN(), o = L1.getG(), h = n ? r.add(a) : r, f = L1.fromX(s, h);
                                                    var c = "";
                                                    try {
                                                        f.mul(a);
                                                    } catch (t16) {
                                                        c = t16.message;
                                                    }
                                                    if ("point mul out of range" !== c) throw new Error("nR is not a valid curve point");
                                                    var u = e.neg().umod(a), d = r.invm(a), l = f.mul(i).add(o.mul(u)).mul(d), b = new K1(l);
                                                    return b.compressed = this.sig.compressed, b.validate(), b;
                                                }
                                            },
                                            {
                                                key: "asyncSig2PubKey",
                                                value: function() {
                                                    var _asyncSig2PubKey3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee106() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee106$(_context112) {
                                                            while(true)switch(_context112.prev = _context112.next){
                                                                case 0:
                                                                    _context112.next = 2;
                                                                    return E1.asyncObjectMethod(this, "sig2PubKey", []);
                                                                case 2:
                                                                    t = _context112.sent;
                                                                    return _context112.abrupt("return", K1.fromFastBuffer(t.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context112.stop();
                                                            }
                                                        }, _callee106, this);
                                                    }));
                                                    function asyncSig2PubKey() {
                                                        return _asyncSig2PubKey3.apply(this, arguments);
                                                    }
                                                    return asyncSig2PubKey;
                                                }()
                                            },
                                            {
                                                key: "verifyStr",
                                                value: function verifyStr() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
                                                    if (!Buffer.isBuffer(this.hashBuf) || 32 !== this.hashBuf.length) return "hashBuf must be a 32 byte buffer";
                                                    try {
                                                        this.keyPair.pubKey.validate();
                                                    } catch (i7) {
                                                        return "Invalid pubKey: " + i7;
                                                    }
                                                    var e = this.sig.r, r = this.sig.s;
                                                    if (!(e.gt(0) && e.lt(L1.getN()) && r.gt(0) && r.lt(L1.getN()))) return "r and s not in range";
                                                    if (t && !this.sig.hasLowS()) return "s is too high and does not satisfy low s contraint - see bip 62";
                                                    var i = new p3().fromBuffer(this.hashBuf, this.endian ? {
                                                        endian: this.endian
                                                    } : void 0), s = L1.getN(), n = r.invm(s), a = n.mul(i).mod(s), o = n.mul(e).mod(s), h = L1.getG().mulAdd(a, this.keyPair.pubKey.point, o);
                                                    return h.isInfinity() ? "p is infinity" : 0 !== h.getX().mod(s).cmp(e) && "Invalid signature";
                                                }
                                            },
                                            {
                                                key: "sign",
                                                value: function sign() {
                                                    var t = "little" === this.endian ? new g1(this.hashBuf).readReverse() : this.hashBuf, e = this.keyPair.privKey, r = e.bn;
                                                    if (!t || !e || !r) throw new Error("invalid parameters");
                                                    if (!Buffer.isBuffer(t) || 32 !== t.length) throw new Error("hashBuf must be a 32 byte buffer");
                                                    var i = L1.getN(), s = L1.getG(), n = new p3().fromBuffer(t);
                                                    var a, o, h, f, c = 0;
                                                    do (!this.k || c > 0) && this.deterministicK(c), c++, a = this.k, o = s.mul(a), h = o.getX().mod(i), f = a.invm(i).mul(n.add(r.mul(h))).mod(i);
                                                    while (h.cmp(0) <= 0 || f.cmp(0) <= 0);
                                                    return f.gt(new p3().fromBuffer(Buffer.from("7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0", "hex"))) && (f = L1.getN().sub(f)), this.sig = j2.fromObject({
                                                        r: h,
                                                        s: f,
                                                        compressed: this.keyPair.pubKey.compressed
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "asyncSign",
                                                value: function() {
                                                    var _asyncSign5 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee107() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee107$(_context113) {
                                                            while(true)switch(_context113.prev = _context113.next){
                                                                case 0:
                                                                    _context113.next = 2;
                                                                    return E1.asyncObjectMethod(this, "sign", []);
                                                                case 2:
                                                                    t = _context113.sent;
                                                                    return _context113.abrupt("return", this.fromFastBuffer(t.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context113.stop();
                                                            }
                                                        }, _callee107, this);
                                                    }));
                                                    function asyncSign() {
                                                        return _asyncSign5.apply(this, arguments);
                                                    }
                                                    return asyncSign;
                                                }()
                                            },
                                            {
                                                key: "signRandomK",
                                                value: function signRandomK() {
                                                    return this.randomK(), this.sign();
                                                }
                                            },
                                            {
                                                key: "toString",
                                                value: function toString() {
                                                    var t = {};
                                                    return this.hashBuf && (t.hashBuf = this.hashBuf.toString("hex")), this.keyPair && (t.keyPair = this.keyPair.toString()), this.sig && (t.sig = this.sig.toString()), this.k && (t.k = this.k.toString()), JSON.stringify(t);
                                                }
                                            },
                                            {
                                                key: "verify",
                                                value: function verify() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !0;
                                                    return this.verifyStr(t) ? this.verified = !1 : this.verified = !0, this;
                                                }
                                            },
                                            {
                                                key: "asyncVerify",
                                                value: function() {
                                                    var _asyncVerify6 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee108() {
                                                        var t, e, _args114 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee108$(_context114) {
                                                            while(true)switch(_context114.prev = _context114.next){
                                                                case 0:
                                                                    t = _args114.length > 0 && _args114[0] !== undefined ? _args114[0] : !0;
                                                                    _context114.next = 3;
                                                                    return E1.asyncObjectMethod(this, "verify", [
                                                                        t
                                                                    ]);
                                                                case 3:
                                                                    e = _context114.sent;
                                                                    return _context114.abrupt("return", this.fromFastBuffer(e.resbuf));
                                                                case 5:
                                                                case "end":
                                                                    return _context114.stop();
                                                            }
                                                        }, _callee108, this);
                                                    }));
                                                    function asyncVerify() {
                                                        return _asyncVerify6.apply(this, arguments);
                                                    }
                                                    return asyncVerify;
                                                }()
                                            }
                                        ], [
                                            {
                                                key: "calcrecovery",
                                                value: function calcrecovery(t, e, r) {
                                                    return new X().fromObject({
                                                        sig: t,
                                                        keyPair: new Q1().fromObject({
                                                            pubKey: e
                                                        }),
                                                        hashBuf: r
                                                    }).calcrecovery().sig;
                                                }
                                            },
                                            {
                                                key: "asyncCalcrecovery",
                                                value: function() {
                                                    var _asyncCalcrecovery4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee109(t, e, r) {
                                                        var i;
                                                        return _regeneratorRuntime().wrap(function _callee109$(_context115) {
                                                            while(true)switch(_context115.prev = _context115.next){
                                                                case 0:
                                                                    _context115.next = 2;
                                                                    return E1.asyncClassMethod(X, "calcrecovery", [
                                                                        t,
                                                                        e,
                                                                        r
                                                                    ]);
                                                                case 2:
                                                                    i = _context115.sent;
                                                                    return _context115.abrupt("return", new j2().fromFastBuffer(i.resbuf));
                                                                case 4:
                                                                case "end":
                                                                    return _context115.stop();
                                                            }
                                                        }, _callee109);
                                                    }));
                                                    function asyncCalcrecovery(_x142, _x143, _x144) {
                                                        return _asyncCalcrecovery4.apply(this, arguments);
                                                    }
                                                    return asyncCalcrecovery;
                                                }()
                                            },
                                            {
                                                key: "sig2PubKey",
                                                value: function sig2PubKey(t, e) {
                                                    return new X().fromObject({
                                                        sig: t,
                                                        hashBuf: e
                                                    }).sig2PubKey();
                                                }
                                            },
                                            {
                                                key: "asyncSig2PubKey",
                                                value: function() {
                                                    var _asyncSig2PubKey4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee110(t, e) {
                                                        var r;
                                                        return _regeneratorRuntime().wrap(function _callee110$(_context116) {
                                                            while(true)switch(_context116.prev = _context116.next){
                                                                case 0:
                                                                    r = new X().fromObject({
                                                                        sig: t,
                                                                        hashBuf: e
                                                                    });
                                                                    _context116.next = 3;
                                                                    return r.asyncSig2PubKey();
                                                                case 3:
                                                                    return _context116.abrupt("return", _context116.sent);
                                                                case 4:
                                                                case "end":
                                                                    return _context116.stop();
                                                            }
                                                        }, _callee110);
                                                    }));
                                                    function asyncSig2PubKey(_x145, _x146) {
                                                        return _asyncSig2PubKey4.apply(this, arguments);
                                                    }
                                                    return asyncSig2PubKey;
                                                }()
                                            },
                                            {
                                                key: "sign",
                                                value: function sign(t, e, r) {
                                                    return new X().fromObject({
                                                        hashBuf: t,
                                                        endian: r,
                                                        keyPair: e
                                                    }).sign().sig;
                                                }
                                            },
                                            {
                                                key: "asyncSign",
                                                value: function() {
                                                    var _asyncSign6 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee111(t, e, r) {
                                                        var i;
                                                        return _regeneratorRuntime().wrap(function _callee111$(_context117) {
                                                            while(true)switch(_context117.prev = _context117.next){
                                                                case 0:
                                                                    i = new X().fromObject({
                                                                        hashBuf: t,
                                                                        endian: r,
                                                                        keyPair: e
                                                                    });
                                                                    _context117.next = 3;
                                                                    return i.asyncSign();
                                                                case 3:
                                                                    return _context117.abrupt("return", i.sig);
                                                                case 4:
                                                                case "end":
                                                                    return _context117.stop();
                                                            }
                                                        }, _callee111);
                                                    }));
                                                    function asyncSign(_x147, _x148, _x149) {
                                                        return _asyncSign6.apply(this, arguments);
                                                    }
                                                    return asyncSign;
                                                }()
                                            },
                                            {
                                                key: "verify",
                                                value: function verify(t, e, r, i) {
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !0;
                                                    return new X().fromObject({
                                                        hashBuf: t,
                                                        endian: i,
                                                        sig: e,
                                                        keyPair: new Q1().fromObject({
                                                            pubKey: r
                                                        })
                                                    }).verify(s).verified;
                                                }
                                            },
                                            {
                                                key: "asyncVerify",
                                                value: function() {
                                                    var _asyncVerify7 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee112(t, e, r, i) {
                                                        var s, n, _args118 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee112$(_context118) {
                                                            while(true)switch(_context118.prev = _context118.next){
                                                                case 0:
                                                                    s = _args118.length > 4 && _args118[4] !== undefined ? _args118[4] : !0;
                                                                    n = new X().fromObject({
                                                                        hashBuf: t,
                                                                        endian: i,
                                                                        sig: e,
                                                                        keyPair: new Q1().fromObject({
                                                                            pubKey: r
                                                                        })
                                                                    });
                                                                    _context118.next = 4;
                                                                    return n.asyncVerify(s);
                                                                case 4:
                                                                    return _context118.abrupt("return", n.verified);
                                                                case 5:
                                                                case "end":
                                                                    return _context118.stop();
                                                            }
                                                        }, _callee112);
                                                    }));
                                                    function asyncVerify(_x150, _x151, _x152, _x153) {
                                                        return _asyncVerify7.apply(this, arguments);
                                                    }
                                                    return asyncVerify;
                                                }()
                                            }
                                        ]);
                                        return X;
                                    }(S1);
                                    var Z1 = /*#__PURE__*/ function(_S14) {
                                        _inherits(Z, _S14);
                                        var _super60 = _createSuper(Z);
                                        function Z(t, e, r, i, s) {
                                            _classCallCheck2(this, Z);
                                            return _super60.call(this, {
                                                messageBuf: t,
                                                keyPair: e,
                                                sig: r,
                                                address: i,
                                                verified: s
                                            });
                                        }
                                        _createClass2(Z, [
                                            {
                                                key: "sign",
                                                value: function sign() {
                                                    var t = Z.magicHash(this.messageBuf), e = new X1().fromObject({
                                                        hashBuf: t,
                                                        keyPair: this.keyPair
                                                    });
                                                    return e.sign(), e.calcrecovery(), this.sig = e.sig, this;
                                                }
                                            },
                                            {
                                                key: "verify",
                                                value: function verify() {
                                                    var t = Z.magicHash(this.messageBuf), e = new X1();
                                                    if (e.hashBuf = t, e.sig = this.sig, e.keyPair = new Q1(), e.keyPair.pubKey = e.sig2PubKey(), !e.verify()) return this.verified = !1, this;
                                                    var r = new z1().fromPubKey(e.keyPair.pubKey, void 0, this.sig.compressed);
                                                    return B(r.hashBuf, this.address.hashBuf) ? this.verified = !0 : this.verified = !1, this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "magicHash",
                                                value: function magicHash(t) {
                                                    if (!Buffer.isBuffer(t)) throw new Error("messageBuf must be a buffer");
                                                    var e = new y3();
                                                    e.writeVarIntNum(Z.magicBytes.length), e.write(Z.magicBytes), e.writeVarIntNum(t.length), e.write(t);
                                                    var r = e.toBuffer();
                                                    return P1.sha256Sha256(r);
                                                }
                                            },
                                            {
                                                key: "asyncMagicHash",
                                                value: function() {
                                                    var _asyncMagicHash2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee113(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee113$(_context119) {
                                                            while(true)switch(_context119.prev = _context119.next){
                                                                case 0:
                                                                    e = [
                                                                        t
                                                                    ];
                                                                    _context119.next = 3;
                                                                    return E1.asyncClassMethod(Z, "magicHash", e);
                                                                case 3:
                                                                    return _context119.abrupt("return", _context119.sent.resbuf);
                                                                case 4:
                                                                case "end":
                                                                    return _context119.stop();
                                                            }
                                                        }, _callee113);
                                                    }));
                                                    function asyncMagicHash(_x154) {
                                                        return _asyncMagicHash2.apply(this, arguments);
                                                    }
                                                    return asyncMagicHash;
                                                }()
                                            },
                                            {
                                                key: "sign",
                                                value: function sign(t, e) {
                                                    var r = new Z(t, e);
                                                    return r.sign(), r.sig.toCompact().toString("base64");
                                                }
                                            },
                                            {
                                                key: "asyncSign",
                                                value: function() {
                                                    var _asyncSign7 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee114(t, e) {
                                                        var r, i;
                                                        return _regeneratorRuntime().wrap(function _callee114$(_context120) {
                                                            while(true)switch(_context120.prev = _context120.next){
                                                                case 0:
                                                                    r = [
                                                                        t,
                                                                        e
                                                                    ];
                                                                    _context120.next = 3;
                                                                    return E1.asyncClassMethod(Z, "sign", r);
                                                                case 3:
                                                                    i = _context120.sent;
                                                                    return _context120.abrupt("return", JSON.parse(i.resbuf.toString()));
                                                                case 5:
                                                                case "end":
                                                                    return _context120.stop();
                                                            }
                                                        }, _callee114);
                                                    }));
                                                    function asyncSign(_x155, _x156) {
                                                        return _asyncSign7.apply(this, arguments);
                                                    }
                                                    return asyncSign;
                                                }()
                                            },
                                            {
                                                key: "verify",
                                                value: function verify(t, e, r) {
                                                    var i = Buffer.from(e, "base64"), s = new Z();
                                                    return s.messageBuf = t, s.sig = new j2().fromCompact(i), s.address = r, s.verify().verified;
                                                }
                                            },
                                            {
                                                key: "asyncVerify",
                                                value: function() {
                                                    var _asyncVerify8 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee115(t, e, r) {
                                                        var i, s;
                                                        return _regeneratorRuntime().wrap(function _callee115$(_context121) {
                                                            while(true)switch(_context121.prev = _context121.next){
                                                                case 0:
                                                                    i = [
                                                                        t,
                                                                        e,
                                                                        r
                                                                    ];
                                                                    _context121.next = 3;
                                                                    return E1.asyncClassMethod(Z, "verify", i);
                                                                case 3:
                                                                    s = _context121.sent;
                                                                    return _context121.abrupt("return", JSON.parse(s.resbuf.toString()));
                                                                case 5:
                                                                case "end":
                                                                    return _context121.stop();
                                                            }
                                                        }, _callee115);
                                                    }));
                                                    function asyncVerify(_x157, _x158, _x159) {
                                                        return _asyncVerify8.apply(this, arguments);
                                                    }
                                                    return asyncVerify;
                                                }()
                                            }
                                        ]);
                                        return Z;
                                    }(S1);
                                    Z1.magicBytes = Buffer.from("Bitcoin Signed Message:\n");
                                    var $1 = /*#__PURE__*/ function(_S15) {
                                        _inherits($, _S15);
                                        var _super61 = _createSuper($);
                                        function $(t, e, r, i, s, n) {
                                            _classCallCheck2(this, $);
                                            return _super61.call(this, {
                                                versionBytesNum: t,
                                                prevBlockHashBuf: e,
                                                merkleRootBuf: r,
                                                time: i,
                                                bits: s,
                                                nonce: n
                                            });
                                        }
                                        _createClass2($, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromObject({
                                                        versionBytesNum: t.versionBytesNum,
                                                        prevBlockHashBuf: Buffer.from(t.prevBlockHashBuf, "hex"),
                                                        merkleRootBuf: Buffer.from(t.merkleRootBuf, "hex"),
                                                        time: t.time,
                                                        bits: t.bits,
                                                        nonce: t.nonce
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return {
                                                        versionBytesNum: this.versionBytesNum,
                                                        prevBlockHashBuf: this.prevBlockHashBuf.toString("hex"),
                                                        merkleRootBuf: this.merkleRootBuf.toString("hex"),
                                                        time: this.time,
                                                        bits: this.bits,
                                                        nonce: this.nonce
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    return this.versionBytesNum = t.readUInt32LE(), this.prevBlockHashBuf = t.read(32), this.merkleRootBuf = t.read(32), this.time = t.readUInt32LE(), this.bits = t.readUInt32LE(), this.nonce = t.readUInt32LE(), this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    return t || (t = new y3()), t.writeUInt32LE(this.versionBytesNum), t.write(this.prevBlockHashBuf), t.write(this.merkleRootBuf), t.writeUInt32LE(this.time), t.writeUInt32LE(this.bits), t.writeUInt32LE(this.nonce), t;
                                                }
                                            }
                                        ]);
                                        return $;
                                    }(S1);
                                    var tt1 = /*#__PURE__*/ function(_S16) {
                                        _inherits(tt, _S16);
                                        var _super62 = _createSuper(tt);
                                        function tt(t, e, r, i) {
                                            _classCallCheck2(this, tt);
                                            return _super62.call(this, {
                                                hashBuf: t,
                                                buf: e,
                                                merkle1: r,
                                                merkle2: i
                                            });
                                        }
                                        _createClass2(tt, [
                                            {
                                                key: "hash",
                                                value: function hash() {
                                                    if (this.hashBuf) return this.hashBuf;
                                                    if (this.buf) return P1.sha256Sha256(this.buf);
                                                    var t = this.merkle1.hash(), e = this.merkle2.hash();
                                                    return this.buf = Buffer.concat([
                                                        t,
                                                        e
                                                    ]), P1.sha256Sha256(this.buf);
                                                }
                                            },
                                            {
                                                key: "fromBuffers",
                                                value: function fromBuffers(t) {
                                                    if (t.length < 1) throw new Error("buffers must have a length");
                                                    t = t.slice();
                                                    var e = Math.log2(t.length);
                                                    if (!Number.isInteger(e)) {
                                                        var _i40 = t[t.length - 1];
                                                        var r = Math.pow(2, Math.ceil(e));
                                                        for(var _e22 = t.length; _e22 < r; _e22++)t.push(_i40);
                                                    }
                                                    var i = t.slice(0, t.length / 2), s = t.slice(t.length / 2);
                                                    return this.fromBufferArrays(i, s), this;
                                                }
                                            },
                                            {
                                                key: "fromBufferArrays",
                                                value: function fromBufferArrays(t, e) {
                                                    if (1 === t.length) return this.merkle1 = new tt(void 0, t[0]), this.merkle2 = new tt(void 0, e[0]), this;
                                                    var r = t.slice(0, t.length / 2), i = t.slice(t.length / 2);
                                                    this.merkle1 = new tt().fromBufferArrays(r, i);
                                                    var s = e.slice(0, e.length / 2), n = e.slice(e.length / 2);
                                                    return this.merkle2 = new tt().fromBufferArrays(s, n), this;
                                                }
                                            },
                                            {
                                                key: "leavesNum",
                                                value: function leavesNum() {
                                                    if (this.merkle1) return this.merkle1.leavesNum() + this.merkle2.leavesNum();
                                                    if (this.buf) return 1;
                                                    throw new Error("invalid number of leaves");
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromBuffers",
                                                value: function fromBuffers(t) {
                                                    return new this().fromBuffers(t);
                                                }
                                            },
                                            {
                                                key: "fromBufferArrays",
                                                value: function fromBufferArrays(t, e) {
                                                    return new this().fromBufferArrays(t, e);
                                                }
                                            }
                                        ]);
                                        return tt;
                                    }(S1);
                                    var et1 = /*#__PURE__*/ function(_S17) {
                                        _inherits(et, _S17);
                                        var _super63 = _createSuper(et);
                                        function et(t, e, r) {
                                            var _this41;
                                            _classCallCheck2(this, et);
                                            _this41 = _super63.call(this), _this41.fromObject({
                                                prevoutsHashBuf: t,
                                                sequenceHashBuf: e,
                                                outputsHashBuf: r
                                            });
                                            return _this41;
                                        }
                                        _createClass2(et, [
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    return this.fromJSON(JSON.parse(t.toString()));
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return Buffer.from(JSON.stringify(this.toJSON()));
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.prevoutsHashBuf = t.prevoutsHashBuf ? Buffer.from(t.prevoutsHashBuf, "hex") : void 0, this.sequenceHashBuf = t.sequenceHashBuf ? Buffer.from(t.sequenceHashBuf, "hex") : void 0, this.outputsHashBuf = t.outputsHashBuf ? Buffer.from(t.outputsHashBuf, "hex") : void 0, this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return {
                                                        prevoutsHashBuf: this.prevoutsHashBuf ? this.prevoutsHashBuf.toString("hex") : void 0,
                                                        sequenceHashBuf: this.sequenceHashBuf ? this.sequenceHashBuf.toString("hex") : void 0,
                                                        outputsHashBuf: this.outputsHashBuf ? this.outputsHashBuf.toString("hex") : void 0
                                                    };
                                                }
                                            }
                                        ]);
                                        return et;
                                    }(S1);
                                    var rt1 = /*#__PURE__*/ function(_S18) {
                                        _inherits(rt, _S18);
                                        var _super64 = _createSuper(rt);
                                        function rt(t) {
                                            _classCallCheck2(this, rt);
                                            return _super64.call(this, {
                                                buf: t
                                            });
                                        }
                                        _createClass2(rt, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromObject({
                                                        buf: Buffer.from(t, "hex")
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return this.buf.toString("hex");
                                                }
                                            },
                                            {
                                                key: "fromBuffer",
                                                value: function fromBuffer(t) {
                                                    return this.buf = t, this;
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    return this.buf = t.readVarIntBuf(), this;
                                                }
                                            },
                                            {
                                                key: "fromBn",
                                                value: function fromBn(t) {
                                                    return this.buf = new y3().writeVarIntBn(t).toBuffer(), this;
                                                }
                                            },
                                            {
                                                key: "fromNumber",
                                                value: function fromNumber(t) {
                                                    return this.buf = new y3().writeVarIntNum(t).toBuffer(), this;
                                                }
                                            },
                                            {
                                                key: "toBuffer",
                                                value: function toBuffer() {
                                                    return this.buf;
                                                }
                                            },
                                            {
                                                key: "toBn",
                                                value: function toBn() {
                                                    return new g1(this.buf).readVarIntBn();
                                                }
                                            },
                                            {
                                                key: "toNumber",
                                                value: function toNumber() {
                                                    return new g1(this.buf).readVarIntNum();
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromBn",
                                                value: function fromBn(t) {
                                                    return new this().fromBn(t);
                                                }
                                            },
                                            {
                                                key: "fromNumber",
                                                value: function fromNumber(t) {
                                                    return new this().fromNumber(t);
                                                }
                                            }
                                        ]);
                                        return rt;
                                    }(S1);
                                    var it5 = /*#__PURE__*/ function(_S19) {
                                        _inherits(it, _S19);
                                        var _super65 = _createSuper(it);
                                        function it(t, e, r, i) {
                                            var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 4294967295;
                                            _classCallCheck2(this, it);
                                            return _super65.call(this, {
                                                txHashBuf: t,
                                                txOutNum: e,
                                                scriptVi: r,
                                                script: i,
                                                nSequence: s
                                            });
                                        }
                                        _createClass2(it, [
                                            {
                                                key: "setScript",
                                                value: function setScript(t) {
                                                    return this.scriptVi = rt1.fromNumber(t.toBuffer().length), this.script = t, this;
                                                }
                                            },
                                            {
                                                key: "fromProperties",
                                                value: function fromProperties(t, e, r, i) {
                                                    return this.fromObject({
                                                        txHashBuf: t,
                                                        txOutNum: e,
                                                        nSequence: i
                                                    }), this.setScript(r), this;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromObject({
                                                        txHashBuf: void 0 !== t.txHashBuf ? Buffer.from(t.txHashBuf, "hex") : void 0,
                                                        txOutNum: t.txOutNum,
                                                        scriptVi: void 0 !== t.scriptVi ? rt1.fromJSON(t.scriptVi) : void 0,
                                                        script: void 0 !== t.script ? q3.fromJSON(t.script) : void 0,
                                                        nSequence: t.nSequence
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return {
                                                        txHashBuf: void 0 !== this.txHashBuf ? this.txHashBuf.toString("hex") : void 0,
                                                        txOutNum: this.txOutNum,
                                                        scriptVi: void 0 !== this.scriptVi ? this.scriptVi.toJSON() : void 0,
                                                        script: void 0 !== this.script ? this.script.toJSON() : void 0,
                                                        nSequence: this.nSequence
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    return this.txHashBuf = t.read(32), this.txOutNum = t.readUInt32LE(), this.scriptVi = rt1.fromBuffer(t.readVarIntBuf()), this.script = q3.fromBuffer(t.read(this.scriptVi.toNumber())), this.nSequence = t.readUInt32LE(), this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    return t || (t = new y3()), t.write(this.txHashBuf), t.writeUInt32LE(this.txOutNum), t.write(this.scriptVi.buf), t.write(this.script.toBuffer()), t.writeUInt32LE(this.nSequence), t;
                                                }
                                            },
                                            {
                                                key: "fromPubKeyHashTxOut",
                                                value: function fromPubKeyHashTxOut(t, e, r, i) {
                                                    var s = new q3();
                                                    if (!r.script.isPubKeyHashOut()) throw new Error("txOut must be of type pubKeyHash");
                                                    return s.writeOpCode(T3.OP_0), i ? s.writeBuffer(i.toBuffer()) : s.writeOpCode(T3.OP_0), this.txHashBuf = t, this.txOutNum = e, this.setScript(s), this;
                                                }
                                            },
                                            {
                                                key: "hasNullInput",
                                                value: function hasNullInput() {
                                                    return "0000000000000000000000000000000000000000000000000000000000000000" === this.txHashBuf.toString("hex") && 4294967295 === this.txOutNum;
                                                }
                                            },
                                            {
                                                key: "setNullInput",
                                                value: function setNullInput() {
                                                    this.txHashBuf = Buffer.alloc(32), this.txHashBuf.fill(0), this.txOutNum = 4294967295;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromProperties",
                                                value: function fromProperties(t, e, r, i) {
                                                    return new this().fromProperties(t, e, r, i);
                                                }
                                            }
                                        ]);
                                        return it;
                                    }(S1);
                                    it5.LOCKTIME_VERIFY_SEQUENCE = 1, it5.SEQUENCE_FINAL = 4294967295, it5.SEQUENCE_LOCKTIME_DISABLE_FLAG = -2147483648, it5.SEQUENCE_LOCKTIME_TYPE_FLAG = 4194304, it5.SEQUENCE_LOCKTIME_MASK = 65535, it5.SEQUENCE_LOCKTIME_GRANULARITY = 9;
                                    var st1 = /*#__PURE__*/ function(_S20) {
                                        _inherits(st, _S20);
                                        var _super66 = _createSuper(st);
                                        function st(t, e, r) {
                                            _classCallCheck2(this, st);
                                            return _super66.call(this, {
                                                valueBn: t,
                                                scriptVi: e,
                                                script: r
                                            });
                                        }
                                        _createClass2(st, [
                                            {
                                                key: "setScript",
                                                value: function setScript(t) {
                                                    return this.scriptVi = rt1.fromNumber(t.toBuffer().length), this.script = t, this;
                                                }
                                            },
                                            {
                                                key: "fromProperties",
                                                value: function fromProperties(t, e) {
                                                    return this.fromObject({
                                                        valueBn: t
                                                    }), this.setScript(e), this;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromObject({
                                                        valueBn: new p3().fromJSON(t.valueBn),
                                                        scriptVi: new rt1().fromJSON(t.scriptVi),
                                                        script: new q3().fromJSON(t.script)
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    return {
                                                        valueBn: this.valueBn.toJSON(),
                                                        scriptVi: this.scriptVi.toJSON(),
                                                        script: this.script.toJSON()
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    return this.valueBn = t.readUInt64LEBn(), this.scriptVi = rt1.fromNumber(t.readVarIntNum()), this.script = new q3().fromBuffer(t.read(this.scriptVi.toNumber())), this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    return t || (t = new y3()), t.writeUInt64LEBn(this.valueBn), t.write(this.scriptVi.buf), t.write(this.script.toBuffer()), t;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "fromProperties",
                                                value: function fromProperties(t, e) {
                                                    return new this().fromProperties(t, e);
                                                }
                                            }
                                        ]);
                                        return st;
                                    }(S1);
                                    var nt1 = /*#__PURE__*/ function(_S21) {
                                        _inherits(nt, _S21);
                                        var _super67 = _createSuper(nt);
                                        function nt() {
                                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                                            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rt1.fromNumber(0);
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                                            var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : rt1.fromNumber(0);
                                            var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
                                            var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                                            _classCallCheck2(this, nt);
                                            return _super67.call(this, {
                                                versionBytesNum: t,
                                                txInsVi: e,
                                                txIns: r,
                                                txOutsVi: i,
                                                txOuts: s,
                                                nLockTime: n
                                            });
                                        }
                                        _createClass2(nt, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t17) {
                                                    var e = [];
                                                    t17.txIns.forEach(function(t) {
                                                        e.push(new it5().fromJSON(t));
                                                    });
                                                    var r = [];
                                                    return t17.txOuts.forEach(function(t) {
                                                        r.push(new st1().fromJSON(t));
                                                    }), this.fromObject({
                                                        versionBytesNum: t17.versionBytesNum,
                                                        txInsVi: new rt1().fromJSON(t17.txInsVi),
                                                        txIns: e,
                                                        txOutsVi: new rt1().fromJSON(t17.txOutsVi),
                                                        txOuts: r,
                                                        nLockTime: t17.nLockTime
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t18 = [];
                                                    this.txIns.forEach(function(e) {
                                                        t18.push(e.toJSON());
                                                    });
                                                    var e8 = [];
                                                    return this.txOuts.forEach(function(t) {
                                                        e8.push(t.toJSON());
                                                    }), {
                                                        versionBytesNum: this.versionBytesNum,
                                                        txInsVi: this.txInsVi.toJSON(),
                                                        txIns: t18,
                                                        txOutsVi: this.txOutsVi.toJSON(),
                                                        txOuts: e8,
                                                        nLockTime: this.nLockTime
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    this.versionBytesNum = t.readUInt32LE(), this.txInsVi = new rt1(t.readVarIntBuf());
                                                    var e = this.txInsVi.toNumber();
                                                    this.txIns = [];
                                                    for(var _r20 = 0; _r20 < e; _r20++)this.txIns.push(new it5().fromBr(t));
                                                    this.txOutsVi = new rt1(t.readVarIntBuf());
                                                    var r = this.txOutsVi.toNumber();
                                                    this.txOuts = [];
                                                    for(var _e23 = 0; _e23 < r; _e23++)this.txOuts.push(new st1().fromBr(t));
                                                    return this.nLockTime = t.readUInt32LE(), this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    t || (t = new y3()), t.writeUInt32LE(this.versionBytesNum), t.write(this.txInsVi.buf);
                                                    for(var _e24 = 0; _e24 < this.txIns.length; _e24++)this.txIns[_e24].toBw(t);
                                                    t.write(this.txOutsVi.buf);
                                                    for(var _e25 = 0; _e25 < this.txOuts.length; _e25++)this.txOuts[_e25].toBw(t);
                                                    return t.writeUInt32LE(this.nLockTime), t;
                                                }
                                            },
                                            {
                                                key: "hashPrevouts",
                                                value: function hashPrevouts() {
                                                    var t = new y3();
                                                    for(var _e26 in this.txIns){
                                                        var _r21 = this.txIns[_e26];
                                                        t.write(_r21.txHashBuf), t.writeUInt32LE(_r21.txOutNum);
                                                    }
                                                    return P1.sha256Sha256(t.toBuffer());
                                                }
                                            },
                                            {
                                                key: "hashSequence",
                                                value: function hashSequence() {
                                                    var t = new y3();
                                                    for(var _e27 in this.txIns){
                                                        var _r22 = this.txIns[_e27];
                                                        t.writeUInt32LE(_r22.nSequence);
                                                    }
                                                    return P1.sha256Sha256(t.toBuffer());
                                                }
                                            },
                                            {
                                                key: "hashOutputs",
                                                value: function hashOutputs() {
                                                    var t = new y3();
                                                    for(var _e28 in this.txOuts){
                                                        var _r23 = this.txOuts[_e28];
                                                        t.write(_r23.toBuffer());
                                                    }
                                                    return P1.sha256Sha256(t.toBuffer());
                                                }
                                            },
                                            {
                                                key: "sighash",
                                                value: function sighash(t, e, r, i) {
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                                                    var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new et1();
                                                    var a = this.sighashPreimage(t, e, r, i, s, n);
                                                    return 0 === a.compare(Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex")) ? a : new g1(P1.sha256Sha256(a)).readReverse();
                                                }
                                            },
                                            {
                                                key: "asyncSighash",
                                                value: function() {
                                                    var _asyncSighash2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee116(t, e, r, i) {
                                                        var s, n, _args122 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee116$(_context122) {
                                                            while(true)switch(_context122.prev = _context122.next){
                                                                case 0:
                                                                    s = _args122.length > 4 && _args122[4] !== undefined ? _args122[4] : 0;
                                                                    n = _args122.length > 5 && _args122[5] !== undefined ? _args122[5] : {};
                                                                    _context122.next = 4;
                                                                    return E1.asyncObjectMethod(this, "sighash", [
                                                                        t,
                                                                        e,
                                                                        r,
                                                                        i,
                                                                        s,
                                                                        n
                                                                    ]);
                                                                case 4:
                                                                    return _context122.abrupt("return", _context122.sent.resbuf);
                                                                case 5:
                                                                case "end":
                                                                    return _context122.stop();
                                                            }
                                                        }, _callee116, this);
                                                    }));
                                                    function asyncSighash(_x160, _x161, _x162, _x163) {
                                                        return _asyncSighash2.apply(this, arguments);
                                                    }
                                                    return asyncSighash;
                                                }()
                                            },
                                            {
                                                key: "sighashPreimage",
                                                value: function sighashPreimage(t, e, r, i) {
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
                                                    var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new et1();
                                                    if (t & j2.SIGHASH_FORKID && s & nt.SCRIPT_ENABLE_SIGHASH_FORKID) {
                                                        var _s6 = Buffer.alloc(32, 0), _a4 = Buffer.alloc(32, 0), _o3 = Buffer.alloc(32, 0);
                                                        t & j2.SIGHASH_ANYONECANPAY || (_s6 = n.prevoutsHashBuf ? n.prevoutsHashBuf : n.prevoutsHashBuf = this.hashPrevouts()), t & j2.SIGHASH_ANYONECANPAY || (31 & t) === j2.SIGHASH_SINGLE || (31 & t) === j2.SIGHASH_NONE || (_a4 = n.sequenceHashBuf ? n.sequenceHashBuf : n.sequenceHashBuf = this.hashSequence()), (31 & t) !== j2.SIGHASH_SINGLE && (31 & t) !== j2.SIGHASH_NONE ? _o3 = n.outputsHashBuf ? n.outputsHashBuf : n.outputsHashBuf = this.hashOutputs() : (31 & t) === j2.SIGHASH_SINGLE && e < this.txOuts.length && (_o3 = P1.sha256Sha256(this.txOuts[e].toBuffer()));
                                                        var _h2 = new y3();
                                                        return _h2.writeUInt32LE(this.versionBytesNum), _h2.write(_s6), _h2.write(_a4), _h2.write(this.txIns[e].txHashBuf), _h2.writeUInt32LE(this.txIns[e].txOutNum), _h2.writeVarIntNum(r.toBuffer().length), _h2.write(r.toBuffer()), _h2.writeUInt64LEBn(i), _h2.writeUInt32LE(this.txIns[e].nSequence), _h2.write(_o3), _h2.writeUInt32LE(this.nLockTime), _h2.writeUInt32LE(t >>> 0), _h2.toBuffer();
                                                    }
                                                    var a = this.cloneByBuffer();
                                                    (r = new q3().fromBuffer(r.toBuffer())).removeCodeseparators();
                                                    for(var _t25 = 0; _t25 < a.txIns.length; _t25++)a.txIns[_t25] = it5.fromBuffer(a.txIns[_t25].toBuffer()).setScript(new q3());
                                                    if (a.txIns[e] = it5.fromBuffer(a.txIns[e].toBuffer()).setScript(r), (31 & t) === j2.SIGHASH_NONE) {
                                                        a.txOuts.length = 0, a.txOutsVi = rt1.fromNumber(0);
                                                        for(var _t26 = 0; _t26 < a.txIns.length; _t26++)_t26 !== e && (a.txIns[_t26].nSequence = 0);
                                                    } else if ((31 & t) === j2.SIGHASH_SINGLE) {
                                                        if (e > a.txOuts.length - 1) return Buffer.from("0000000000000000000000000000000000000000000000000000000000000001", "hex");
                                                        a.txOuts.length = e + 1, a.txOutsVi = rt1.fromNumber(e + 1);
                                                        for(var _t27 = 0; _t27 < a.txOuts.length; _t27++)_t27 < e && (a.txOuts[_t27] = st1.fromProperties(new p3().fromBuffer(Buffer.from("ffffffffffffffff", "hex")), new q3()));
                                                        for(var _t28 = 0; _t28 < a.txIns.length; _t28++)_t28 !== e && (a.txIns[_t28].nSequence = 0);
                                                    }
                                                    return t & j2.SIGHASH_ANYONECANPAY && (a.txIns[0] = a.txIns[e], a.txIns.length = 1, a.txInsVi = rt1.fromNumber(1)), new y3().write(a.toBuffer()).writeInt32LE(t).toBuffer();
                                                }
                                            },
                                            {
                                                key: "asyncSighashPreimage",
                                                value: function() {
                                                    var _asyncSighashPreimage = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee117(t, e, r, i) {
                                                        var s, n, _args123 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee117$(_context123) {
                                                            while(true)switch(_context123.prev = _context123.next){
                                                                case 0:
                                                                    s = _args123.length > 4 && _args123[4] !== undefined ? _args123[4] : 0;
                                                                    n = _args123.length > 5 && _args123[5] !== undefined ? _args123[5] : {};
                                                                    _context123.next = 4;
                                                                    return E1.asyncObjectMethod(this, "sighashPreimage", [
                                                                        t,
                                                                        e,
                                                                        r,
                                                                        i,
                                                                        s,
                                                                        n
                                                                    ]);
                                                                case 4:
                                                                    return _context123.abrupt("return", _context123.sent.resbuf);
                                                                case 5:
                                                                case "end":
                                                                    return _context123.stop();
                                                            }
                                                        }, _callee117, this);
                                                    }));
                                                    function asyncSighashPreimage(_x164, _x165, _x166, _x167) {
                                                        return _asyncSighashPreimage.apply(this, arguments);
                                                    }
                                                    return asyncSighashPreimage;
                                                }()
                                            },
                                            {
                                                key: "sign",
                                                value: function sign(t) {
                                                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                    var r = arguments.length > 2 ? arguments[2] : undefined;
                                                    var i = arguments.length > 3 ? arguments[3] : undefined;
                                                    var s = arguments.length > 4 ? arguments[4] : undefined;
                                                    var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : nt.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                    var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
                                                    var o = this.sighash(e, r, i, s, n, a);
                                                    return X1.sign(o, t, "little").fromObject({
                                                        nHashType: e
                                                    });
                                                }
                                            },
                                            {
                                                key: "asyncSign",
                                                value: function() {
                                                    var _asyncSign8 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee118(t) {
                                                        var e, r, i, s, n, a, o, _args124 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee118$(_context124) {
                                                            while(true)switch(_context124.prev = _context124.next){
                                                                case 0:
                                                                    e = _args124.length > 1 && _args124[1] !== undefined ? _args124[1] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                                    r = _args124.length > 2 ? _args124[2] : undefined;
                                                                    i = _args124.length > 3 ? _args124[3] : undefined;
                                                                    s = _args124.length > 4 ? _args124[4] : undefined;
                                                                    n = _args124.length > 5 && _args124[5] !== undefined ? _args124[5] : nt.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                                    a = _args124.length > 6 && _args124[6] !== undefined ? _args124[6] : {};
                                                                    _context124.next = 8;
                                                                    return E1.asyncObjectMethod(this, "sign", [
                                                                        t,
                                                                        e,
                                                                        r,
                                                                        i,
                                                                        s,
                                                                        n,
                                                                        a
                                                                    ]);
                                                                case 8:
                                                                    o = _context124.sent;
                                                                    return _context124.abrupt("return", new j2().fromFastBuffer(o.resbuf));
                                                                case 10:
                                                                case "end":
                                                                    return _context124.stop();
                                                            }
                                                        }, _callee118, this);
                                                    }));
                                                    function asyncSign(_x168) {
                                                        return _asyncSign8.apply(this, arguments);
                                                    }
                                                    return asyncSign;
                                                }()
                                            },
                                            {
                                                key: "verify",
                                                value: function verify(t, e, r, i) {
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : !1;
                                                    var n = arguments.length > 5 ? arguments[5] : undefined;
                                                    var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : nt.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                    var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};
                                                    var h = this.sighash(t.nHashType, r, i, n, a, o);
                                                    return X1.verify(h, t, e, "little", s);
                                                }
                                            },
                                            {
                                                key: "asyncVerify",
                                                value: function() {
                                                    var _asyncVerify9 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee119(t, e, r, i) {
                                                        var s, n, a, o, h, _args125 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee119$(_context125) {
                                                            while(true)switch(_context125.prev = _context125.next){
                                                                case 0:
                                                                    s = _args125.length > 4 && _args125[4] !== undefined ? _args125[4] : !1;
                                                                    n = _args125.length > 5 ? _args125[5] : undefined;
                                                                    a = _args125.length > 6 && _args125[6] !== undefined ? _args125[6] : nt.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                                    o = _args125.length > 7 && _args125[7] !== undefined ? _args125[7] : {};
                                                                    _context125.next = 6;
                                                                    return E1.asyncObjectMethod(this, "verify", [
                                                                        t,
                                                                        e,
                                                                        r,
                                                                        i,
                                                                        s,
                                                                        n,
                                                                        a,
                                                                        o
                                                                    ]);
                                                                case 6:
                                                                    h = _context125.sent;
                                                                    return _context125.abrupt("return", JSON.parse(h.resbuf.toString()));
                                                                case 8:
                                                                case "end":
                                                                    return _context125.stop();
                                                            }
                                                        }, _callee119, this);
                                                    }));
                                                    function asyncVerify(_x169, _x170, _x171, _x172) {
                                                        return _asyncVerify9.apply(this, arguments);
                                                    }
                                                    return asyncVerify;
                                                }()
                                            },
                                            {
                                                key: "hash",
                                                value: function hash() {
                                                    return P1.sha256Sha256(this.toBuffer());
                                                }
                                            },
                                            {
                                                key: "asyncHash",
                                                value: function() {
                                                    var _asyncHash3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee120() {
                                                        return _regeneratorRuntime().wrap(function _callee120$(_context126) {
                                                            while(true)switch(_context126.prev = _context126.next){
                                                                case 0:
                                                                    _context126.next = 2;
                                                                    return E1.asyncObjectMethod(this, "hash", []);
                                                                case 2:
                                                                    return _context126.abrupt("return", _context126.sent.resbuf);
                                                                case 3:
                                                                case "end":
                                                                    return _context126.stop();
                                                            }
                                                        }, _callee120, this);
                                                    }));
                                                    function asyncHash() {
                                                        return _asyncHash3.apply(this, arguments);
                                                    }
                                                    return asyncHash;
                                                }()
                                            },
                                            {
                                                key: "id",
                                                value: function id() {
                                                    return new g1(this.hash()).readReverse().toString("hex");
                                                }
                                            },
                                            {
                                                key: "asyncId",
                                                value: function() {
                                                    var _asyncId3 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee121() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee121$(_context127) {
                                                            while(true)switch(_context127.prev = _context127.next){
                                                                case 0:
                                                                    _context127.next = 2;
                                                                    return E1.asyncObjectMethod(this, "id", []);
                                                                case 2:
                                                                    t = _context127.sent;
                                                                    return _context127.abrupt("return", JSON.parse(t.resbuf.toString()));
                                                                case 4:
                                                                case "end":
                                                                    return _context127.stop();
                                                            }
                                                        }, _callee121, this);
                                                    }));
                                                    function asyncId() {
                                                        return _asyncId3.apply(this, arguments);
                                                    }
                                                    return asyncId;
                                                }()
                                            },
                                            {
                                                key: "addTxIn",
                                                value: function addTxIn(t, e, r, i) {
                                                    var s;
                                                    return s = t instanceof it5 ? t : new it5().fromObject({
                                                        txHashBuf: t,
                                                        txOutNum: e,
                                                        nSequence: i
                                                    }).setScript(r), this.txIns.push(s), this.txInsVi = rt1.fromNumber(this.txInsVi.toNumber() + 1), this;
                                                }
                                            },
                                            {
                                                key: "addTxOut",
                                                value: function addTxOut(t, e) {
                                                    var r;
                                                    return r = t instanceof st1 ? t : new st1().fromObject({
                                                        valueBn: t
                                                    }).setScript(e), this.txOuts.push(r), this.txOutsVi = rt1.fromNumber(this.txOutsVi.toNumber() + 1), this;
                                                }
                                            },
                                            {
                                                key: "isCoinbase",
                                                value: function isCoinbase() {
                                                    return 1 === this.txIns.length && this.txIns[0].hasNullInput();
                                                }
                                            },
                                            {
                                                key: "sort",
                                                value: function sort() {
                                                    return this.txIns.sort(function(t, e) {
                                                        return new g1(t.txHashBuf).readReverse().compare(new g1(e.txHashBuf).readReverse()) || t.txOutNum - e.txOutNum;
                                                    }), this.txOuts.sort(function(t, e) {
                                                        return t.valueBn.sub(e.valueBn).toNumber() || t.script.toBuffer().compare(e.script.toBuffer());
                                                    }), this;
                                                }
                                            }
                                        ]);
                                        return nt;
                                    }(S1);
                                    nt1.MAX_MONEY = 21e14, nt1.SCRIPT_ENABLE_SIGHASH_FORKID = 65536;
                                    var at1 = /*#__PURE__*/ function(_S22) {
                                        _inherits(at, _S22);
                                        var _super68 = _createSuper(at);
                                        function at(t, e, r) {
                                            _classCallCheck2(this, at);
                                            return _super68.call(this, {
                                                blockHeader: t,
                                                txsVi: e,
                                                txs: r
                                            });
                                        }
                                        _createClass2(at, [
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t19) {
                                                    var e = [];
                                                    return t19.txs.forEach(function(t) {
                                                        e.push(new nt1().fromJSON(t));
                                                    }), this.fromObject({
                                                        blockHeader: new $1().fromJSON(t19.blockHeader),
                                                        txsVi: new rt1().fromJSON(t19.txsVi),
                                                        txs: e
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t = [];
                                                    return this.txs.forEach(function(e) {
                                                        t.push(e.toJSON());
                                                    }), {
                                                        blockHeader: this.blockHeader.toJSON(),
                                                        txsVi: this.txsVi.toJSON(),
                                                        txs: t
                                                    };
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    this.blockHeader = new $1().fromBr(t), this.txsVi = new rt1(t.readVarIntBuf());
                                                    var e = this.txsVi.toNumber();
                                                    this.txs = [];
                                                    for(var _r24 = 0; _r24 < e; _r24++)this.txs.push(new nt1().fromBr(t));
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    t || (t = new y3()), t.write(this.blockHeader.toBuffer()), t.write(this.txsVi.buf);
                                                    var e = this.txsVi.toNumber();
                                                    for(var _r25 = 0; _r25 < e; _r25++)this.txs[_r25].toBw(t);
                                                    return t;
                                                }
                                            },
                                            {
                                                key: "hash",
                                                value: function hash() {
                                                    return P1.sha256Sha256(this.blockHeader.toBuffer());
                                                }
                                            },
                                            {
                                                key: "asyncHash",
                                                value: function() {
                                                    var _asyncHash4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee122() {
                                                        return _regeneratorRuntime().wrap(function _callee122$(_context128) {
                                                            while(true)switch(_context128.prev = _context128.next){
                                                                case 0:
                                                                    _context128.next = 2;
                                                                    return E1.asyncObjectMethod(this, "hash", []);
                                                                case 2:
                                                                    return _context128.abrupt("return", _context128.sent.resbuf);
                                                                case 3:
                                                                case "end":
                                                                    return _context128.stop();
                                                            }
                                                        }, _callee122, this);
                                                    }));
                                                    function asyncHash() {
                                                        return _asyncHash4.apply(this, arguments);
                                                    }
                                                    return asyncHash;
                                                }()
                                            },
                                            {
                                                key: "id",
                                                value: function id() {
                                                    return new g1(this.hash()).readReverse().toString("hex");
                                                }
                                            },
                                            {
                                                key: "asyncId",
                                                value: function() {
                                                    var _asyncId4 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee123() {
                                                        var t;
                                                        return _regeneratorRuntime().wrap(function _callee123$(_context129) {
                                                            while(true)switch(_context129.prev = _context129.next){
                                                                case 0:
                                                                    _context129.next = 2;
                                                                    return E1.asyncObjectMethod(this, "id", []);
                                                                case 2:
                                                                    t = _context129.sent;
                                                                    return _context129.abrupt("return", JSON.parse(t.resbuf.toString()));
                                                                case 4:
                                                                case "end":
                                                                    return _context129.stop();
                                                            }
                                                        }, _callee123, this);
                                                    }));
                                                    function asyncId() {
                                                        return _asyncId4.apply(this, arguments);
                                                    }
                                                    return asyncId;
                                                }()
                                            },
                                            {
                                                key: "verifyMerkleRoot",
                                                value: function verifyMerkleRoot() {
                                                    var t20 = this.txs.map(function(t) {
                                                        return t.toBuffer();
                                                    }), e = tt1.fromBuffers(t20).hash();
                                                    return Buffer.compare(e, this.blockHeader.merkleRootBuf);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "iterateTxs",
                                                value: function iterateTxs(t) {
                                                    var e = new g1(t), r = new $1().fromBr(e), i = new rt1(e.readVarIntBuf()), s = i.toNumber();
                                                    return _defineProperty2({
                                                        blockHeader: r,
                                                        txsVi: i,
                                                        txsNum: s
                                                    }, Symbol.iterator, /*#__PURE__*/ _regeneratorRuntime().mark(function _callee124() {
                                                        var _t29;
                                                        return _regeneratorRuntime().wrap(function _callee124$(_context130) {
                                                            while(true)switch(_context130.prev = _context130.next){
                                                                case 0:
                                                                    _t29 = 0;
                                                                case 1:
                                                                    if (!(_t29 < s)) {
                                                                        _context130.next = 7;
                                                                        break;
                                                                    }
                                                                    _context130.next = 4;
                                                                    return new nt1().fromBr(e);
                                                                case 4:
                                                                    _t29++;
                                                                    _context130.next = 1;
                                                                    break;
                                                                case 7:
                                                                case "end":
                                                                    return _context130.stop();
                                                            }
                                                        }, _callee124);
                                                    }));
                                                }
                                            }
                                        ]);
                                        return at;
                                    }(S1);
                                    at1.MAX_BLOCK_SIZE = 1e6;
                                    var ot1 = /*#__PURE__*/ function(_S23) {
                                        _inherits(ot, _S23);
                                        var _super69 = _createSuper(ot);
                                        function ot(t, e, r) {
                                            var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
                                            var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
                                            var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
                                            var a = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
                                            var o = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
                                            var h = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : [];
                                            var f = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : "";
                                            var c = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : ot.defaultFlags;
                                            var u = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : new p3(0);
                                            _classCallCheck2(this, ot);
                                            return _super69.call(this, {
                                                script: t,
                                                tx: e,
                                                nIn: r,
                                                stack: i,
                                                altStack: s,
                                                pc: n,
                                                pBeginCodeHash: a,
                                                nOpCount: o,
                                                ifStack: h,
                                                errStr: f,
                                                flags: c,
                                                valueBn: u
                                            });
                                        }
                                        _createClass2(ot, [
                                            {
                                                key: "initialize",
                                                value: function initialize() {
                                                    return this.script = new q3(), this.stack = [], this.altStack = [], this.pc = 0, this.pBeginCodeHash = 0, this.nOpCount = 0, this.ifStack = [], this.errStr = "", this.flags = ot.defaultFlags, this;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    return this.fromJSONNoTx(t), this.tx = t.tx ? new nt1().fromJSON(t.tx) : void 0, this;
                                                }
                                            },
                                            {
                                                key: "fromJSONNoTx",
                                                value: function fromJSONNoTx(t21) {
                                                    return this.fromObject({
                                                        script: void 0 !== t21.script ? new q3().fromJSON(t21.script) : void 0,
                                                        nIn: t21.nIn
                                                    }), this.stack = [], t21.stack.forEach((function(t) {
                                                        this.stack.push(Buffer.from(t, "hex"));
                                                    }).bind(this)), this.altStack = [], t21.altStack.forEach((function(t) {
                                                        this.altStack.push(Buffer.from(t, "hex"));
                                                    }).bind(this)), this.fromObject({
                                                        pc: t21.pc,
                                                        pBeginCodeHash: t21.pBeginCodeHash,
                                                        nOpCount: t21.nOpCount,
                                                        ifStack: t21.ifStack,
                                                        errStr: t21.errStr,
                                                        flags: t21.flags
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "fromBr",
                                                value: function fromBr(t) {
                                                    var e = t.readVarIntNum(), r = t.read(e);
                                                    this.fromJSONNoTx(JSON.parse(r.toString()));
                                                    var i = t.readVarIntNum();
                                                    if (i > 0) {
                                                        var _e29 = t.read(i);
                                                        this.tx = new nt1().fromFastBuffer(_e29);
                                                    }
                                                    return this;
                                                }
                                            },
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t = this.toJSONNoTx();
                                                    return t.tx = this.tx ? this.tx.toJSON() : void 0, t;
                                                }
                                            },
                                            {
                                                key: "toJSONNoTx",
                                                value: function toJSONNoTx() {
                                                    var t22 = [];
                                                    this.stack.forEach(function(e) {
                                                        t22.push(e.toString("hex"));
                                                    });
                                                    var e9 = [];
                                                    return this.altStack.forEach(function(t) {
                                                        e9.push(t.toString("hex"));
                                                    }), {
                                                        script: this.script ? this.script.toJSON() : void 0,
                                                        nIn: this.nIn,
                                                        stack: t22,
                                                        altStack: e9,
                                                        pc: this.pc,
                                                        pBeginCodeHash: this.pBeginCodeHash,
                                                        nOpCount: this.nOpCount,
                                                        ifStack: this.ifStack,
                                                        errStr: this.errStr,
                                                        flags: this.flags
                                                    };
                                                }
                                            },
                                            {
                                                key: "toBw",
                                                value: function toBw(t) {
                                                    t || (t = new y3());
                                                    var e = Buffer.from(JSON.stringify(this.toJSONNoTx()));
                                                    if (t.writeVarIntNum(e.length), t.write(e), this.tx) {
                                                        var _e30 = this.tx.toFastBuffer();
                                                        t.writeVarIntNum(_e30.length), t.write(_e30);
                                                    } else t.writeVarIntNum(0);
                                                    return t;
                                                }
                                            },
                                            {
                                                key: "checkSigEncoding",
                                                value: function checkSigEncoding(t) {
                                                    if (0 === t.length) return !0;
                                                    if (0 != (this.flags & (ot.SCRIPT_VERIFY_DERSIG | ot.SCRIPT_VERIFY_LOW_S | ot.SCRIPT_VERIFY_STRICTENC)) && !j2.IsTxDer(t)) return this.errStr = "SCRIPT_ERR_SIG_DER", !1;
                                                    if (0 != (this.flags & ot.SCRIPT_VERIFY_LOW_S)) {
                                                        if (!new j2().fromTxFormat(t).hasLowS()) return this.errStr = "SCRIPT_ERR_SIG_DER", !1;
                                                    } else if (0 != (this.flags & ot.SCRIPT_VERIFY_STRICTENC) && !new j2().fromTxFormat(t).hasDefinedHashType()) return this.errStr = "SCRIPT_ERR_SIG_HASHTYPE", !1;
                                                    return !0;
                                                }
                                            },
                                            {
                                                key: "checkPubKeyEncoding",
                                                value: function checkPubKeyEncoding(t) {
                                                    return !(0 != (this.flags & ot.SCRIPT_VERIFY_STRICTENC) && !K1.isCompressedOrUncompressed(t) && (this.errStr = "SCRIPT_ERR_PUBKEYTYPE", 1));
                                                }
                                            },
                                            {
                                                key: "checkLockTime",
                                                value: function checkLockTime(t) {
                                                    return (this.tx.nLockTime < ot.LOCKTIME_THRESHOLD && t < ot.LOCKTIME_THRESHOLD || this.tx.nLockTime >= ot.LOCKTIME_THRESHOLD && t >= ot.LOCKTIME_THRESHOLD) && !(t > this.tx.nLockTime) && it5.SEQUENCE_FINAL !== this.tx.txIns[this.nIn].nSequence;
                                                }
                                            },
                                            {
                                                key: "checkSequence",
                                                value: function checkSequence(t) {
                                                    var e = this.tx.txIns[this.nIn].nSequence;
                                                    if (this.tx.versionBytesNum < 2) return !1;
                                                    if (e & it5.SEQUENCE_LOCKTIME_DISABLE_FLAG) return !1;
                                                    var r = it5.SEQUENCE_LOCKTIME_TYPE_FLAG | it5.SEQUENCE_LOCKTIME_MASK, i = e & r, s = t & r;
                                                    return (i < it5.SEQUENCE_LOCKTIME_TYPE_FLAG && s < it5.SEQUENCE_LOCKTIME_TYPE_FLAG || i >= it5.SEQUENCE_LOCKTIME_TYPE_FLAG && s >= it5.SEQUENCE_LOCKTIME_TYPE_FLAG) && !(s > i);
                                                }
                                            },
                                            {
                                                key: "eval",
                                                value: /*#__PURE__*/ _regeneratorRuntime().mark(function _eval() {
                                                    var _t30;
                                                    return _regeneratorRuntime().wrap(function _eval$(_context131) {
                                                        while(true)switch(_context131.prev = _context131.next){
                                                            case 0:
                                                                _context131.t0 = this.script.toBuffer().length > 1e4;
                                                                if (!_context131.t0) {
                                                                    _context131.next = 5;
                                                                    break;
                                                                }
                                                                this.errStr = "SCRIPT_ERR_SCRIPT_SIZE";
                                                                _context131.next = 5;
                                                                return !1;
                                                            case 5:
                                                                _context131.prev = 5;
                                                            case 6:
                                                                if (!(this.pc < this.script.chunks.length)) {
                                                                    _context131.next = 17;
                                                                    break;
                                                                }
                                                                _t30 = this.step();
                                                                if (!_t30) {
                                                                    _context131.next = 13;
                                                                    break;
                                                                }
                                                                _context131.next = 11;
                                                                return _t30;
                                                            case 11:
                                                                _context131.next = 15;
                                                                break;
                                                            case 13:
                                                                _context131.next = 15;
                                                                return !1;
                                                            case 15:
                                                                _context131.next = 6;
                                                                break;
                                                            case 17:
                                                                _context131.t1 = this.stack.length + this.altStack.length > 1e3;
                                                                if (!_context131.t1) {
                                                                    _context131.next = 22;
                                                                    break;
                                                                }
                                                                this.errStr = "SCRIPT_ERR_STACK_SIZE";
                                                                _context131.next = 22;
                                                                return !1;
                                                            case 22:
                                                                _context131.next = 29;
                                                                break;
                                                            case 24:
                                                                _context131.prev = 24;
                                                                _context131.t2 = _context131["catch"](5);
                                                                this.errStr = "SCRIPT_ERR_UNKNOWN_ERROR: " + _context131.t2;
                                                                _context131.next = 29;
                                                                return !1;
                                                            case 29:
                                                                _context131.t3 = this.ifStack.length > 0;
                                                                if (!_context131.t3) {
                                                                    _context131.next = 34;
                                                                    break;
                                                                }
                                                                this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL";
                                                                _context131.next = 34;
                                                                return !1;
                                                            case 34:
                                                                _context131.next = 36;
                                                                return !0;
                                                            case 36:
                                                            case "end":
                                                                return _context131.stop();
                                                        }
                                                    }, _eval, this, [
                                                        [
                                                            5,
                                                            24
                                                        ]
                                                    ]);
                                                })
                                            },
                                            {
                                                key: "step",
                                                value: function step() {
                                                    var t = 0 != (this.flags & ot.SCRIPT_VERIFY_MINIMALDATA), e = !(this.ifStack.indexOf(!1) + 1), r = this.script.chunks[this.pc];
                                                    this.pc++;
                                                    var i = r.opCodeNum;
                                                    if (void 0 === i) return this.errStr = "SCRIPT_ERR_BAD_OPCODE", !1;
                                                    if (r.buf && r.buf.length > ot.MAX_SCRIPT_ELEMENT_SIZE) return this.errStr = "SCRIPT_ERR_PUSH_SIZE", !1;
                                                    if (i > T3.OP_16 && ++this.nOpCount > 201) return this.errStr = "SCRIPT_ERR_OP_COUNT", !1;
                                                    if (i === T3.OP_LEFT || i === T3.OP_RIGHT || i === T3.OP_2MUL || i === T3.OP_2DIV) return this.errStr = "SCRIPT_ERR_DISABLED_OPCODE", !1;
                                                    if (e && i >= 0 && i <= T3.OP_PUSHDATA4) {
                                                        if (t && !this.script.checkMinimalPush(this.pc - 1)) return this.errStr = "SCRIPT_ERR_MINIMALDATA", !1;
                                                        if (r.buf) {
                                                            if (r.len !== r.buf.length) throw new Error("LEngth of push value not equal to length of data");
                                                            this.stack.push(r.buf);
                                                        } else this.stack.push(ot["false"]);
                                                    } else if (e || T3.OP_IF <= i && i <= T3.OP_ENDIF) switch(i){
                                                        case T3.OP_1NEGATE:
                                                        case T3.OP_1:
                                                        case T3.OP_2:
                                                        case T3.OP_3:
                                                        case T3.OP_4:
                                                        case T3.OP_5:
                                                        case T3.OP_6:
                                                        case T3.OP_7:
                                                        case T3.OP_8:
                                                        case T3.OP_9:
                                                        case T3.OP_10:
                                                        case T3.OP_11:
                                                        case T3.OP_12:
                                                        case T3.OP_13:
                                                        case T3.OP_14:
                                                        case T3.OP_15:
                                                        case T3.OP_16:
                                                            var _t31 = new p3(i - (T3.OP_1 - 1)).toScriptNumBuffer();
                                                            this.stack.push(_t31);
                                                            break;
                                                        case T3.OP_NOP:
                                                            break;
                                                        case T3.OP_CHECKLOCKTIMEVERIFY:
                                                            if (!(this.flags & ot.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)) {
                                                                if (this.flags & ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) return this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS", !1;
                                                                break;
                                                            }
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e31 = this.stack[this.stack.length - 1], _r27 = new p3().fromScriptNumBuffer(_e31, t, 5).toNumber();
                                                            if (_r27 < 0) return this.errStr = "SCRIPT_ERR_NEGATIVE_LOCKTIME", !1;
                                                            if (!this.checkLockTime(_r27)) return this.errStr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME", !1;
                                                            break;
                                                        case T3.OP_CHECKSEQUENCEVERIFY:
                                                            if (!(this.flags & ot.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)) {
                                                                if (this.flags & ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) return this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS", !1;
                                                                break;
                                                            }
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e32 = this.stack[this.stack.length - 1], _r28 = new p3().fromScriptNumBuffer(_e32, t, 5).toNumber();
                                                            if (_r28 < 0) return this.errStr = "SCRIPT_ERR_NEGATIVE_LOCKTIME", !1;
                                                            if (0 != (_r28 & it5.SEQUENCE_LOCKTIME_DISABLE_FLAG)) break;
                                                            if (!this.checkSequence(_r28)) return this.errStr = "SCRIPT_ERR_UNSATISFIED_LOCKTIME", !1;
                                                            break;
                                                        case T3.OP_NOP1:
                                                        case T3.OP_NOP3:
                                                        case T3.OP_NOP4:
                                                        case T3.OP_NOP5:
                                                        case T3.OP_NOP6:
                                                        case T3.OP_NOP7:
                                                        case T3.OP_NOP8:
                                                        case T3.OP_NOP9:
                                                        case T3.OP_NOP10:
                                                            if (this.flags & ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS) return this.errStr = "SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS", !1;
                                                            break;
                                                        case T3.OP_IF:
                                                        case T3.OP_NOTIF:
                                                            var _t32 = !1;
                                                            if (e) {
                                                                if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", !1;
                                                                var _e33 = this.stack.pop();
                                                                _t32 = ot.castToBool(_e33), i === T3.OP_NOTIF && (_t32 = !_t32);
                                                            }
                                                            this.ifStack.push(_t32);
                                                            break;
                                                        case T3.OP_ELSE:
                                                            if (0 === this.ifStack.length) return this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", !1;
                                                            this.ifStack[this.ifStack.length - 1] = !this.ifStack[this.ifStack.length - 1];
                                                            break;
                                                        case T3.OP_ENDIF:
                                                            if (0 === this.ifStack.length) return this.errStr = "SCRIPT_ERR_UNBALANCED_CONDITIONAL", !1;
                                                            this.ifStack.pop();
                                                            break;
                                                        case T3.OP_VERIFY:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t33 = this.stack[this.stack.length - 1];
                                                            if (!ot.castToBool(_t33)) return this.errStr = "SCRIPT_ERR_VERIFY", !1;
                                                            this.stack.pop();
                                                            break;
                                                        case T3.OP_RETURN:
                                                            return this.errStr = "SCRIPT_ERR_OP_RETURN", !1;
                                                        case T3.OP_TOALTSTACK:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.altStack.push(this.stack.pop());
                                                            break;
                                                        case T3.OP_FROMALTSTACK:
                                                            if (this.altStack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_ALTSTACK_OPERATION", !1;
                                                            this.stack.push(this.altStack.pop());
                                                            break;
                                                        case T3.OP_2DROP:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.stack.pop(), this.stack.pop();
                                                            break;
                                                        case T3.OP_2DUP:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t34 = this.stack[this.stack.length - 2], _e34 = this.stack[this.stack.length - 1];
                                                            this.stack.push(_t34), this.stack.push(_e34);
                                                            break;
                                                        case T3.OP_3DUP:
                                                            if (this.stack.length < 3) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t35 = this.stack[this.stack.length - 3], _e35 = this.stack[this.stack.length - 2], _r29 = this.stack[this.stack.length - 1];
                                                            this.stack.push(_t35), this.stack.push(_e35), this.stack.push(_r29);
                                                            break;
                                                        case T3.OP_2OVER:
                                                            if (this.stack.length < 4) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t36 = this.stack[this.stack.length - 4], _e36 = this.stack[this.stack.length - 3];
                                                            this.stack.push(_t36), this.stack.push(_e36);
                                                            break;
                                                        case T3.OP_2ROT:
                                                            if (this.stack.length < 6) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t37 = this.stack.splice(this.stack.length - 6, 2);
                                                            this.stack.push(_t37[0]), this.stack.push(_t37[1]);
                                                            break;
                                                        case T3.OP_2SWAP:
                                                            if (this.stack.length < 4) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t38 = this.stack.splice(this.stack.length - 4, 2);
                                                            this.stack.push(_t38[0]), this.stack.push(_t38[1]);
                                                            break;
                                                        case T3.OP_IFDUP:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t39 = this.stack[this.stack.length - 1];
                                                            ot.castToBool(_t39) && this.stack.push(_t39);
                                                            break;
                                                        case T3.OP_DEPTH:
                                                            var _t40 = new p3(this.stack.length).toScriptNumBuffer();
                                                            this.stack.push(_t40);
                                                            break;
                                                        case T3.OP_DROP:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.stack.pop();
                                                            break;
                                                        case T3.OP_DUP:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.stack.push(this.stack[this.stack.length - 1]);
                                                            break;
                                                        case T3.OP_NIP:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.stack.splice(this.stack.length - 2, 1);
                                                            break;
                                                        case T3.OP_OVER:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.stack.push(this.stack[this.stack.length - 2]);
                                                            break;
                                                        case T3.OP_PICK:
                                                        case T3.OP_ROLL:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e37 = this.stack[this.stack.length - 1], _r30 = new p3().fromScriptNumBuffer(_e37, t).toNumber();
                                                            if (this.stack.pop(), _r30 < 0 || _r30 >= this.stack.length) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            _e37 = this.stack[this.stack.length - _r30 - 1], i === T3.OP_ROLL && this.stack.splice(this.stack.length - _r30 - 1, 1), this.stack.push(_e37);
                                                            break;
                                                        case T3.OP_ROT:
                                                            if (this.stack.length < 3) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t41 = this.stack[this.stack.length - 3], _e38 = this.stack[this.stack.length - 2], _r31 = this.stack[this.stack.length - 1];
                                                            this.stack[this.stack.length - 3] = _e38, this.stack[this.stack.length - 2] = _r31, this.stack[this.stack.length - 1] = _t41;
                                                            break;
                                                        case T3.OP_SWAP:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t42 = this.stack[this.stack.length - 2], _e39 = this.stack[this.stack.length - 1];
                                                            this.stack[this.stack.length - 2] = _e39, this.stack[this.stack.length - 1] = _t42;
                                                            break;
                                                        case T3.OP_TUCK:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            this.stack.splice(this.stack.length - 2, 0, this.stack[this.stack.length - 1]);
                                                            break;
                                                        case T3.OP_SIZE:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t43 = new p3(this.stack[this.stack.length - 1].length);
                                                            this.stack.push(_t43.toScriptNumBuffer());
                                                            break;
                                                        case T3.OP_OR:
                                                        case T3.OP_AND:
                                                        case T3.OP_XOR:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _r26 = this.stack[this.stack.length - 2], _s7 = this.stack[this.stack.length - 1];
                                                            if (_r26.length != _s7.length) return this.errStr = "SCRIPT_ERR_INVALID_OPERAND_SIZE", !1;
                                                            switch(i){
                                                                case T3.OP_AND:
                                                                    for(var _t44 = 0; _t44 < _r26.length; _t44++)_r26[_t44] &= _s7[_t44];
                                                                    break;
                                                                case T3.OP_OR:
                                                                    for(var _t45 = 0; _t45 < _r26.length; _t45++)_r26[_t45] |= _s7[_t45];
                                                                    break;
                                                                case T3.OP_XOR:
                                                                    for(var _t46 = 0; _t46 < _r26.length; _t46++)_r26[_t46] ^= _s7[_t46];
                                                            }
                                                            this.stack.pop();
                                                            break;
                                                        case T3.OP_INVERT:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _n8 = this.stack[this.stack.length - 1];
                                                            for(var _t47 = 0; _t47 < _n8.length; _t47++)_n8[_t47] = ~_n8[_t47];
                                                            break;
                                                        case T3.OP_LSHIFT:
                                                        case T3.OP_RSHIFT:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e40 = this.stack[this.stack.length - 2], _r32 = new p3(_e40), _s8 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 1], t).toNumber();
                                                            if (_s8 < 0) return this.errStr = "SCRIPT_ERR_INVALID_NUMBER_RANGE", !1;
                                                            switch(this.stack.pop(), this.stack.pop(), i){
                                                                case T3.OP_LSHIFT:
                                                                    _r32 = _r32.ushln(_s8);
                                                                    break;
                                                                case T3.OP_RSHIFT:
                                                                    _r32 = _r32.ushrn(_s8);
                                                            }
                                                            var _n9 = _r32.toBuffer().slice(-_e40.length);
                                                            _n9.length < _e40.length && (_n9 = Buffer.concat([
                                                                Buffer.alloc(_e40.length - _n9.length),
                                                                _n9
                                                            ])), this.stack.push(_n9);
                                                            break;
                                                        case T3.OP_EQUAL:
                                                        case T3.OP_EQUALVERIFY:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t48 = this.stack[this.stack.length - 2], _e41 = this.stack[this.stack.length - 1], _r33 = B(_t48, _e41);
                                                            if (this.stack.pop(), this.stack.pop(), this.stack.push(_r33 ? ot["true"] : ot["false"]), i === T3.OP_EQUALVERIFY) {
                                                                if (!_r33) return this.errStr = "SCRIPT_ERR_EQUALVERIFY", !1;
                                                                this.stack.pop();
                                                            }
                                                            break;
                                                        case T3.OP_1ADD:
                                                        case T3.OP_1SUB:
                                                        case T3.OP_NEGATE:
                                                        case T3.OP_ABS:
                                                        case T3.OP_NOT:
                                                        case T3.OP_0NOTEQUAL:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e42 = this.stack[this.stack.length - 1], _r34 = new p3().fromScriptNumBuffer(_e42, t);
                                                            switch(i){
                                                                case T3.OP_1ADD:
                                                                    _r34 = _r34.add(1);
                                                                    break;
                                                                case T3.OP_1SUB:
                                                                    _r34 = _r34.sub(1);
                                                                    break;
                                                                case T3.OP_NEGATE:
                                                                    _r34 = _r34.neg();
                                                                    break;
                                                                case T3.OP_ABS:
                                                                    _r34.lt(0) && (_r34 = _r34.neg());
                                                                    break;
                                                                case T3.OP_NOT:
                                                                    _r34 = new p3(_r34.eq(0) + 0);
                                                                    break;
                                                                case T3.OP_0NOTEQUAL:
                                                                    _r34 = new p3(_r34.neq(0) + 0);
                                                            }
                                                            this.stack.pop(), this.stack.push(_r34.toScriptNumBuffer());
                                                            break;
                                                        case T3.OP_ADD:
                                                        case T3.OP_SUB:
                                                        case T3.OP_MUL:
                                                        case T3.OP_DIV:
                                                        case T3.OP_MOD:
                                                        case T3.OP_BOOLAND:
                                                        case T3.OP_BOOLOR:
                                                        case T3.OP_NUMEQUAL:
                                                        case T3.OP_NUMEQUALVERIFY:
                                                        case T3.OP_NUMNOTEQUAL:
                                                        case T3.OP_LESSTHAN:
                                                        case T3.OP_GREATERTHAN:
                                                        case T3.OP_LESSTHANOREQUAL:
                                                        case T3.OP_GREATERTHANOREQUAL:
                                                        case T3.OP_MIN:
                                                        case T3.OP_MAX:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e43 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 2], t), _r35 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 1], t), _s9 = new p3(0);
                                                            switch(i){
                                                                case T3.OP_ADD:
                                                                    _s9 = _e43.add(_r35);
                                                                    break;
                                                                case T3.OP_SUB:
                                                                    _s9 = _e43.sub(_r35);
                                                                    break;
                                                                case T3.OP_MUL:
                                                                    _s9 = _e43.mul(_r35);
                                                                    break;
                                                                case T3.OP_DIV:
                                                                    if (0 == _r35) return this.errStr = "SCRIPT_ERR_DIV_BY_ZERO", !1;
                                                                    _s9 = _e43.div(_r35);
                                                                    break;
                                                                case T3.OP_MOD:
                                                                    if (0 == _r35) return this.errStr = "SCRIPT_ERR_DIV_BY_ZERO", !1;
                                                                    _s9 = _e43.mod(_r35);
                                                                    break;
                                                                case T3.OP_BOOLAND:
                                                                    _s9 = new p3((_e43.neq(0) && _r35.neq(0)) + 0);
                                                                    break;
                                                                case T3.OP_BOOLOR:
                                                                    _s9 = new p3((_e43.neq(0) || _r35.neq(0)) + 0);
                                                                    break;
                                                                case T3.OP_NUMEQUAL:
                                                                case T3.OP_NUMEQUALVERIFY:
                                                                    _s9 = new p3(_e43.eq(_r35) + 0);
                                                                    break;
                                                                case T3.OP_NUMNOTEQUAL:
                                                                    _s9 = new p3(_e43.neq(_r35) + 0);
                                                                    break;
                                                                case T3.OP_LESSTHAN:
                                                                    _s9 = new p3(_e43.lt(_r35) + 0);
                                                                    break;
                                                                case T3.OP_GREATERTHAN:
                                                                    _s9 = new p3(_e43.gt(_r35) + 0);
                                                                    break;
                                                                case T3.OP_LESSTHANOREQUAL:
                                                                    _s9 = new p3(_e43.leq(_r35) + 0);
                                                                    break;
                                                                case T3.OP_GREATERTHANOREQUAL:
                                                                    _s9 = new p3(_e43.geq(_r35) + 0);
                                                                    break;
                                                                case T3.OP_MIN:
                                                                    _s9 = _e43.lt(_r35) ? _e43 : _r35;
                                                                    break;
                                                                case T3.OP_MAX:
                                                                    _s9 = _e43.gt(_r35) ? _e43 : _r35;
                                                            }
                                                            if (this.stack.pop(), this.stack.pop(), this.stack.push(_s9.toScriptNumBuffer()), i === T3.OP_NUMEQUALVERIFY) {
                                                                if (!ot.castToBool(this.stack[this.stack.length - 1])) return this.errStr = "SCRIPT_ERR_NUMEQUALVERIFY", !1;
                                                                this.stack.pop();
                                                            }
                                                            break;
                                                        case T3.OP_WITHIN:
                                                            if (this.stack.length < 3) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _e44 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 3], t), _r36 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 2], t), _i41 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 1], t), _s10 = _r36.leq(_e44) && _e44.lt(_i41);
                                                            this.stack.pop(), this.stack.pop(), this.stack.pop(), this.stack.push(_s10 ? ot["true"] : ot["false"]);
                                                            break;
                                                        case T3.OP_RIPEMD160:
                                                        case T3.OP_SHA1:
                                                        case T3.OP_SHA256:
                                                        case T3.OP_HASH160:
                                                        case T3.OP_HASH256:
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t49, _e45 = this.stack[this.stack.length - 1];
                                                            i === T3.OP_RIPEMD160 ? _t49 = P1.ripemd160(_e45) : i === T3.OP_SHA1 ? _t49 = P1.sha1(_e45) : i === T3.OP_SHA256 ? _t49 = P1.sha256(_e45) : i === T3.OP_HASH160 ? _t49 = P1.sha256Ripemd160(_e45) : i === T3.OP_HASH256 && (_t49 = P1.sha256Sha256(_e45)), this.stack.pop(), this.stack.push(_t49);
                                                            break;
                                                        case T3.OP_CODESEPARATOR:
                                                            this.pBeginCodeHash = this.pc;
                                                            break;
                                                        case T3.OP_CHECKSIG:
                                                        case T3.OP_CHECKSIGVERIFY:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _t50, _e46 = this.stack[this.stack.length - 2], _r37 = this.stack[this.stack.length - 1], _s11 = new q3().fromObject({
                                                                chunks: this.script.chunks.slice(this.pBeginCodeHash)
                                                            });
                                                            if ((_e46.length > 0 ? _e46.readUInt8(_e46.length - 1) : 0) & j2.SIGHASH_FORKID) {
                                                                if (!(this.flags & ot.SCRIPT_ENABLE_SIGHASH_FORKID)) return this.errStr = "SCRIPT_ERR_ILLEGAL_FORKID", !1;
                                                            } else _s11.findAndDelete(new q3().writeBuffer(_e46));
                                                            if (!this.checkSigEncoding(_e46) || !this.checkPubKeyEncoding(_r37)) return !1;
                                                            try {
                                                                var _i42 = new j2().fromTxFormat(_e46), _n10 = new K1().fromBuffer(_r37, !1);
                                                                _t50 = this.tx.verify(_i42, _n10, this.nIn, _s11, Boolean(this.flags & ot.SCRIPT_VERIFY_LOW_S), this.valueBn, this.flags);
                                                            } catch (e10) {
                                                                _t50 = !1;
                                                            }
                                                            if (this.stack.pop(), this.stack.pop(), this.stack.push(_t50 ? ot["true"] : ot["false"]), i === T3.OP_CHECKSIGVERIFY) {
                                                                if (!_t50) return this.errStr = "SCRIPT_ERR_CHECKSIGVERIFY", !1;
                                                                this.stack.pop();
                                                            }
                                                            break;
                                                        case T3.OP_CHECKMULTISIG:
                                                        case T3.OP_CHECKMULTISIGVERIFY:
                                                            var _e47 = 1;
                                                            if (this.stack.length < _e47) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _r38 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - _e47], t).toNumber();
                                                            if (_r38 < 0 || _r38 > 20) return this.errStr = "SCRIPT_ERR_PUBKEY_COUNT", !1;
                                                            if (this.nOpCount += _r38, this.nOpCount > 201) return this.errStr = "SCRIPT_ERR_OP_COUNT", !1;
                                                            var _s12 = ++_e47;
                                                            if (_e47 += _r38, this.stack.length < _e47) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _n11 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - _e47], t).toNumber();
                                                            if (_n11 < 0 || _n11 > _r38) return this.errStr = "SCRIPT_ERR_SIG_COUNT", !1;
                                                            var _a6 = ++_e47;
                                                            if (_e47 += _n11, this.stack.length < _e47) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _o5 = new q3().fromObject({
                                                                chunks: this.script.chunks.slice(this.pBeginCodeHash)
                                                            });
                                                            for(var _t51 = 0; _t51 < _n11; _t51++){
                                                                var _e48 = this.stack[this.stack.length - _a6 - _t51];
                                                                if ((_e48.length > 0 ? _e48.readUInt8(_e48.length - 1) : 0) & j2.SIGHASH_FORKID) {
                                                                    if (!(this.flags & ot.SCRIPT_ENABLE_SIGHASH_FORKID)) return this.errStr = "SCRIPT_ERR_ILLEGAL_FORKID", !1;
                                                                } else _o5.findAndDelete(new q3().writeBuffer(_e48));
                                                            }
                                                            var _h4 = !0;
                                                            for(; _h4 && _n11 > 0;){
                                                                var _t52 = void 0, _e49 = this.stack[this.stack.length - _a6], _i43 = this.stack[this.stack.length - _s12];
                                                                if (!this.checkSigEncoding(_e49) || !this.checkPubKeyEncoding(_i43)) return !1;
                                                                try {
                                                                    var _r39 = new j2().fromTxFormat(_e49), _s13 = new K1().fromBuffer(_i43, !1);
                                                                    _t52 = this.tx.verify(_r39, _s13, this.nIn, _o5, Boolean(this.flags & ot.SCRIPT_VERIFY_LOW_S), this.valueBn, this.flags);
                                                                } catch (e) {
                                                                    _t52 = !1;
                                                                }
                                                                _t52 && (_a6++, _n11--), _s12++, _r38--, _n11 > _r38 && (_h4 = !1);
                                                            }
                                                            for(; _e47-- > 1;)this.stack.pop();
                                                            if (this.stack.length < 1) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            if (this.flags & ot.SCRIPT_VERIFY_NULLDUMMY && this.stack[this.stack.length - 1].length) return this.errStr = "SCRIPT_ERR_SIG_NULLDUMMY", !1;
                                                            if (this.stack.pop(), this.stack.push(_h4 ? ot["true"] : ot["false"]), i === T3.OP_CHECKMULTISIGVERIFY) {
                                                                if (!_h4) return this.errStr = "SCRIPT_ERR_CHECKMULTISIGVERIFY", !1;
                                                                this.stack.pop();
                                                            }
                                                            break;
                                                        case T3.OP_CAT:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _a5 = this.stack[this.stack.length - 2], _o4 = this.stack[this.stack.length - 1];
                                                            this.stack[this.stack.length - 2] = Buffer.concat([
                                                                _a5,
                                                                _o4
                                                            ]), this.stack.pop();
                                                            break;
                                                        case T3.OP_SPLIT:
                                                            if (this.stack.length < 2) return this.errStr = "SCRIPT_ERR_INVALID_STACK_OPERATION", !1;
                                                            var _h3 = this.stack[this.stack.length - 2], _f2 = new p3().fromScriptNumBuffer(this.stack[this.stack.length - 1], t);
                                                            if (_f2.lt(0) || _f2.gt(_h3.length)) return this.errStr = "SCRIPT_ERR_INVALID_SPLIT_RANGE", !1;
                                                            var _c = _h3.slice(0, _f2), _u = _h3.slice(_f2);
                                                            this.stack.pop(), this.stack.pop(), this.stack.push(_c), this.stack.push(_u);
                                                            break;
                                                        default:
                                                            return this.errStr = "SCRIPT_ERR_BAD_OPCODE", !1;
                                                    }
                                                    return !0;
                                                }
                                            },
                                            {
                                                key: "verify",
                                                value: function verify(t, e, r, i, s, n) {
                                                    var a = this.results(t, e, r, i, s, n);
                                                    var _iterator5 = _createForOfIteratorHelper(a), _step5;
                                                    try {
                                                        for(_iterator5.s(); !(_step5 = _iterator5.n()).done;){
                                                            var _t53 = _step5.value;
                                                            if (!_t53) return !1;
                                                        }
                                                    } catch (err) {
                                                        _iterator5.e(err);
                                                    } finally{
                                                        _iterator5.f();
                                                    }
                                                    return !0;
                                                }
                                            },
                                            {
                                                key: "results",
                                                value: /*#__PURE__*/ _regeneratorRuntime().mark(function results(t, e, r, i, s, n) {
                                                    var a, o, h, _e50, _h5, _f3;
                                                    return _regeneratorRuntime().wrap(function results$(_context132) {
                                                        while(true)switch(_context132.prev = _context132.next){
                                                            case 0:
                                                                this.fromObject({
                                                                    script: t,
                                                                    tx: r,
                                                                    nIn: i,
                                                                    flags: s,
                                                                    valueBn: n
                                                                });
                                                                _context132.t0 = 0 == (s & ot.SCRIPT_VERIFY_SIGPUSHONLY) || t.isPushOnly();
                                                                if (_context132.t0) {
                                                                    _context132.next = 6;
                                                                    break;
                                                                }
                                                                this.errStr = this.errStr || "SCRIPT_ERR_SIG_PUSHONLY";
                                                                _context132.next = 6;
                                                                return !1;
                                                            case 6:
                                                                return _context132.delegateYield(this.eval(), "t1", 7);
                                                            case 7:
                                                                s & ot.SCRIPT_VERIFY_P2SH && (a = this.stack.slice());
                                                                o = this.stack;
                                                                this.initialize();
                                                                this.fromObject({
                                                                    script: e,
                                                                    stack: o,
                                                                    tx: r,
                                                                    nIn: i,
                                                                    flags: s,
                                                                    valueBn: n
                                                                });
                                                                return _context132.delegateYield(this.eval(), "t2", 12);
                                                            case 12:
                                                                _context132.t3 = 0 === this.stack.length;
                                                                if (!_context132.t3) {
                                                                    _context132.next = 17;
                                                                    break;
                                                                }
                                                                this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                                _context132.next = 17;
                                                                return !1;
                                                            case 17:
                                                                h = this.stack[this.stack.length - 1];
                                                                _context132.t4 = ot.castToBool(h);
                                                                if (_context132.t4) {
                                                                    _context132.next = 23;
                                                                    break;
                                                                }
                                                                this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                                _context132.next = 23;
                                                                return !1;
                                                            case 23:
                                                                if (!(s & ot.SCRIPT_VERIFY_P2SH && e.isScriptHashOut())) {
                                                                    _context132.next = 50;
                                                                    break;
                                                                }
                                                                _context132.t5 = t.isPushOnly();
                                                                if (_context132.t5) {
                                                                    _context132.next = 29;
                                                                    break;
                                                                }
                                                                this.errStr = this.errStr || "SCRIPT_ERR_SIG_PUSHONLY";
                                                                _context132.next = 29;
                                                                return !1;
                                                            case 29:
                                                                _e50 = o;
                                                                if (!(o = a, a = _e50, 0 === o.length)) {
                                                                    _context132.next = 32;
                                                                    break;
                                                                }
                                                                throw new Error("internal error - stack copy empty");
                                                            case 32:
                                                                _h5 = o[o.length - 1], _f3 = new q3().fromBuffer(_h5);
                                                                o.pop();
                                                                this.initialize();
                                                                this.fromObject({
                                                                    script: _f3,
                                                                    stack: o,
                                                                    tx: r,
                                                                    nIn: i,
                                                                    flags: s,
                                                                    valueBn: n
                                                                });
                                                                return _context132.delegateYield(this.eval(), "t6", 37);
                                                            case 37:
                                                                _context132.t7 = 0 === o.length;
                                                                if (!_context132.t7) {
                                                                    _context132.next = 42;
                                                                    break;
                                                                }
                                                                this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                                _context132.next = 42;
                                                                return !1;
                                                            case 42:
                                                                if (!ot.castToBool(o[o.length - 1])) {
                                                                    _context132.next = 47;
                                                                    break;
                                                                }
                                                                _context132.next = 45;
                                                                return !0;
                                                            case 45:
                                                                _context132.next = 50;
                                                                break;
                                                            case 47:
                                                                this.errStr = this.errStr || "SCRIPT_ERR_EVAL_FALSE";
                                                                _context132.next = 50;
                                                                return !1;
                                                            case 50:
                                                                if (!(0 != (s & ot.SCRIPT_VERIFY_CLEANSTACK))) {
                                                                    _context132.next = 58;
                                                                    break;
                                                                }
                                                                if (s & ot.SCRIPT_VERIFY_P2SH) {
                                                                    _context132.next = 53;
                                                                    break;
                                                                }
                                                                throw new Error("cannot use CLEANSTACK without P2SH");
                                                            case 53:
                                                                _context132.t8 = 1 !== o.length;
                                                                if (!_context132.t8) {
                                                                    _context132.next = 58;
                                                                    break;
                                                                }
                                                                this.errStr = this.errStr || "SCRIPT_ERR_CLEANSTACK";
                                                                _context132.next = 58;
                                                                return !1;
                                                            case 58:
                                                                _context132.next = 60;
                                                                return !0;
                                                            case 60:
                                                            case "end":
                                                                return _context132.stop();
                                                        }
                                                    }, results, this);
                                                })
                                            },
                                            {
                                                key: "getDebugObject",
                                                value: function getDebugObject() {
                                                    var t23 = this.pc - 1;
                                                    return {
                                                        errStr: this.errStr,
                                                        scriptStr: this.script ? this.script.toString() : "no script found",
                                                        pc: t23,
                                                        stack: this.stack.map(function(t) {
                                                            return t.toString("hex");
                                                        }),
                                                        altStack: this.altStack.map(function(t) {
                                                            return t.toString("hex");
                                                        }),
                                                        opCodeStr: this.script ? T3.fromNumber(this.script.chunks[t23].opCodeNum).toString() : "no script found"
                                                    };
                                                }
                                            },
                                            {
                                                key: "getDebugString",
                                                value: function getDebugString() {
                                                    return JSON.stringify(this.getDebugObject(), null, 2);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "getFlags",
                                                value: function getFlags(t) {
                                                    var e = 0;
                                                    return -1 !== t.indexOf("NONE") && (e |= ot.SCRIPT_VERIFY_NONE), -1 !== t.indexOf("P2SH") && (e |= ot.SCRIPT_VERIFY_P2SH), -1 !== t.indexOf("STRICTENC") && (e |= ot.SCRIPT_VERIFY_STRICTENC), -1 !== t.indexOf("DERSIG") && (e |= ot.SCRIPT_VERIFY_DERSIG), -1 !== t.indexOf("LOW_S") && (e |= ot.SCRIPT_VERIFY_LOW_S), -1 !== t.indexOf("NULLDUMMY") && (e |= ot.SCRIPT_VERIFY_NULLDUMMY), -1 !== t.indexOf("SIGPUSHONLY") && (e |= ot.SCRIPT_VERIFY_SIGPUSHONLY), -1 !== t.indexOf("MINIMALDATA") && (e |= ot.SCRIPT_VERIFY_MINIMALDATA), -1 !== t.indexOf("DISCOURAGE_UPGRADABLE_NOPS") && (e |= ot.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS), -1 !== t.indexOf("CLEANSTACK") && (e |= ot.SCRIPT_VERIFY_CLEANSTACK), -1 !== t.indexOf("CHECKLOCKTIMEVERIFY") && (e |= ot.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY), -1 !== t.indexOf("CHECKSEQUENCEVERIFY") && (e |= ot.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY), -1 !== t.indexOf("SIGHASH_FORKID") && (e |= ot.SCRIPT_ENABLE_SIGHASH_FORKID), e;
                                                }
                                            },
                                            {
                                                key: "castToBool",
                                                value: function castToBool(t) {
                                                    for(var _e51 = 0; _e51 < t.length; _e51++){
                                                        if (0 !== t[_e51]) return _e51 !== t.length - 1 || 128 !== t[_e51];
                                                    }
                                                    return !1;
                                                }
                                            }
                                        ]);
                                        return ot;
                                    }(S1);
                                    ot1["true"] = Buffer.from([
                                        1
                                    ]), ot1["false"] = Buffer.from([]), ot1.MAX_SCRIPT_ELEMENT_SIZE = 520, ot1.LOCKTIME_THRESHOLD = 5e8, ot1.SCRIPT_VERIFY_NONE = 0, ot1.SCRIPT_VERIFY_P2SH = 1, ot1.SCRIPT_VERIFY_STRICTENC = 2, ot1.SCRIPT_VERIFY_DERSIG = 4, ot1.SCRIPT_VERIFY_LOW_S = 8, ot1.SCRIPT_VERIFY_NULLDUMMY = 16, ot1.SCRIPT_VERIFY_SIGPUSHONLY = 32, ot1.SCRIPT_VERIFY_MINIMALDATA = 64, ot1.SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS = 128, ot1.SCRIPT_VERIFY_CLEANSTACK = 256, ot1.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY = 512, ot1.SCRIPT_VERIFY_CHECKSEQUENCEVERIFY = 1024, ot1.SCRIPT_ENABLE_SIGHASH_FORKID = 65536, ot1.defaultFlags = ot1.SCRIPT_VERIFY_P2SH | ot1.SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;
                                    var ht1 = /*#__PURE__*/ function(_S24) {
                                        _inherits(ht, _S24);
                                        var _super70 = _createSuper(ht);
                                        function ht() {
                                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();
                                            _classCallCheck2(this, ht);
                                            return _super70.call(this, {
                                                map: t
                                            });
                                        }
                                        _createClass2(ht, [
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t24 = {};
                                                    return this.map.forEach(function(e, r) {
                                                        t24[r] = e.map(function(t) {
                                                            return {
                                                                nScriptChunk: t.nScriptChunk,
                                                                type: t.type,
                                                                addressStr: t.addressStr,
                                                                nHashType: t.nHashType,
                                                                log: t.log
                                                            };
                                                        });
                                                    }), t24;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t25) {
                                                    var _this42 = this;
                                                    return Object.keys(t25).forEach(function(e) {
                                                        _this42.map.set(e, t25[e].map(function(t) {
                                                            return {
                                                                nScriptChunk: t.nScriptChunk,
                                                                type: t.type,
                                                                addressStr: t.addressStr,
                                                                nHashType: t.nHashType,
                                                                log: t.log
                                                            };
                                                        }));
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "setOne",
                                                value: function setOne(t, e, r) {
                                                    var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "sig";
                                                    var s = arguments.length > 4 ? arguments[4] : undefined;
                                                    var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                    var a = t.toString("hex") + ":" + e, o = {
                                                        nScriptChunk: r,
                                                        type: i,
                                                        addressStr: s,
                                                        nHashType: n
                                                    };
                                                    return this.map.set(a, [
                                                        o
                                                    ]), this;
                                                }
                                            },
                                            {
                                                key: "setMany",
                                                value: function setMany(t26, e, r) {
                                                    var i = t26.toString("hex") + ":" + e;
                                                    return r = r.map(function(t) {
                                                        return _objectSpread3({
                                                            type: t.type || "sig",
                                                            nHashType: t.nHashType || j2.SIGHASH_ALL | j2.SIGHASH_FORKID
                                                        }, t);
                                                    }), this.map.set(i, r), this;
                                                }
                                            },
                                            {
                                                key: "addOne",
                                                value: function addOne(t, e, r) {
                                                    var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "sig";
                                                    var s = arguments.length > 4 ? arguments[4] : undefined;
                                                    var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                    var a = this.get(t, e) || [];
                                                    return a.push({
                                                        nScriptChunk: r,
                                                        type: i,
                                                        addressStr: s,
                                                        nHashType: n
                                                    }), this.setMany(t, e, a), this;
                                                }
                                            },
                                            {
                                                key: "get",
                                                value: function get(t, e) {
                                                    var r = t.toString("hex") + ":" + e;
                                                    return this.map.get(r) || [];
                                                }
                                            }
                                        ]);
                                        return ht;
                                    }(S1);
                                    var ft1 = /*#__PURE__*/ function(_S25) {
                                        _inherits(ft, _S25);
                                        var _super71 = _createSuper(ft);
                                        function ft() {
                                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Map();
                                            _classCallCheck2(this, ft);
                                            return _super71.call(this, {
                                                map: t
                                            });
                                        }
                                        _createClass2(ft, [
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t = {};
                                                    return this.map.forEach(function(e, r) {
                                                        t[r] = e.toHex();
                                                    }), t;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t) {
                                                    var _this43 = this;
                                                    return Object.keys(t).forEach(function(e) {
                                                        _this43.map.set(e, st1.fromHex(t[e]));
                                                    }), this;
                                                }
                                            },
                                            {
                                                key: "set",
                                                value: function set(t, e, r) {
                                                    var i = t.toString("hex") + ":" + e;
                                                    return this.map.set(i, r), this;
                                                }
                                            },
                                            {
                                                key: "get",
                                                value: function get(t, e) {
                                                    var r = t.toString("hex") + ":" + e;
                                                    return this.map.get(r);
                                                }
                                            },
                                            {
                                                key: "setTx",
                                                value: function setTx(t27) {
                                                    var _this44 = this;
                                                    var e = t27.hash().toString("hex");
                                                    return t27.txOuts.forEach(function(t, r) {
                                                        var i = e + ":" + r;
                                                        _this44.map.set(i, t);
                                                    }), this;
                                                }
                                            }
                                        ]);
                                        return ft;
                                    }(S1);
                                    var ct = x.Default.TxBuilder;
                                    var ut1 = /*#__PURE__*/ function(_S26) {
                                        _inherits(ut, _S26);
                                        var _super72 = _createSuper(ut);
                                        function ut() {
                                            var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new nt1();
                                            var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                                            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
                                            var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new ft1();
                                            var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new ht1();
                                            var n = arguments.length > 5 ? arguments[5] : undefined;
                                            var a = arguments.length > 6 ? arguments[6] : undefined;
                                            var o = arguments.length > 7 ? arguments[7] : undefined;
                                            var h = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : ct.feePerKbNum;
                                            var f = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
                                            var c = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 1;
                                            var u = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 1;
                                            var d = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : ct.dust;
                                            var l = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : !1;
                                            var p = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : new et1();
                                            _classCallCheck2(this, ut);
                                            return _super72.call(this, {
                                                tx: t,
                                                txIns: e,
                                                txOuts: r,
                                                uTxOutMap: i,
                                                sigOperations: s,
                                                changeScript: n,
                                                changeAmountBn: a,
                                                feeAmountBn: o,
                                                feePerKbNum: h,
                                                nLockTime: f,
                                                versionBytesNum: c,
                                                sigsPerInput: u,
                                                dust: d,
                                                dustChangeToFees: l,
                                                hashCache: p
                                            });
                                        }
                                        _createClass2(ut, [
                                            {
                                                key: "toJSON",
                                                value: function toJSON() {
                                                    var t28 = {};
                                                    return t28.tx = this.tx.toHex(), t28.txIns = this.txIns.map(function(t) {
                                                        return t.toHex();
                                                    }), t28.txOuts = this.txOuts.map(function(t) {
                                                        return t.toHex();
                                                    }), t28.uTxOutMap = this.uTxOutMap.toJSON(), t28.sigOperations = this.sigOperations.toJSON(), t28.changeScript = this.changeScript ? this.changeScript.toHex() : void 0, t28.changeAmountBn = this.changeAmountBn ? this.changeAmountBn.toNumber() : void 0, t28.feeAmountBn = this.feeAmountBn ? this.feeAmountBn.toNumber() : void 0, t28.feePerKbNum = this.feePerKbNum, t28.sigsPerInput = this.sigsPerInput, t28.dust = this.dust, t28.dustChangeToFees = this.dustChangeToFees, t28.hashCache = this.hashCache.toJSON(), t28;
                                                }
                                            },
                                            {
                                                key: "fromJSON",
                                                value: function fromJSON(t29) {
                                                    return this.tx = new nt1().fromHex(t29.tx), this.txIns = t29.txIns.map(function(t) {
                                                        return it5.fromHex(t);
                                                    }), this.txOuts = t29.txOuts.map(function(t) {
                                                        return st1.fromHex(t);
                                                    }), this.uTxOutMap = new ft1().fromJSON(t29.uTxOutMap), this.sigOperations = new ht1().fromJSON(t29.sigOperations), this.changeScript = t29.changeScript ? new q3().fromHex(t29.changeScript) : void 0, this.changeAmountBn = t29.changeAmountBn ? new p3(t29.changeAmountBn) : void 0, this.feeAmountBn = t29.feeAmountBn ? new p3(t29.feeAmountBn) : void 0, this.feePerKbNum = t29.feePerKbNum || this.feePerKbNum, this.sigsPerInput = t29.sigsPerInput || this.sigsPerInput, this.dust = t29.dust || this.dust, this.dustChangeToFees = t29.dustChangeToFees || this.dustChangeToFees, this.hashCache = et1.fromJSON(t29.hashCache), this;
                                                }
                                            },
                                            {
                                                key: "setFeePerKbNum",
                                                value: function setFeePerKbNum(t) {
                                                    if ("number" != typeof t || t < 0) throw new Error("cannot set a fee of zero or less");
                                                    return this.feePerKbNum = t, this;
                                                }
                                            },
                                            {
                                                key: "setChangeAddress",
                                                value: function setChangeAddress(t) {
                                                    return this.changeScript = t.toTxOutScript(), this;
                                                }
                                            },
                                            {
                                                key: "setChangeScript",
                                                value: function setChangeScript(t) {
                                                    return this.changeScript = t, this;
                                                }
                                            },
                                            {
                                                key: "setNLocktime",
                                                value: function setNLocktime(t) {
                                                    return this.nLockTime = t, this;
                                                }
                                            },
                                            {
                                                key: "setVersion",
                                                value: function setVersion(t) {
                                                    return this.versionBytesNum = t, this;
                                                }
                                            },
                                            {
                                                key: "setDust",
                                                value: function setDust() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ct.dust;
                                                    return this.dust = t, this;
                                                }
                                            },
                                            {
                                                key: "sendDustChangeToFees",
                                                value: function sendDustChangeToFees() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !1;
                                                    return this.dustChangeToFees = t, this;
                                                }
                                            },
                                            {
                                                key: "importPartiallySignedTx",
                                                value: function importPartiallySignedTx(t) {
                                                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.uTxOutMap;
                                                    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.sigOperations;
                                                    return this.tx = t, this.uTxOutMap = e, this.sigOperations = r, this;
                                                }
                                            },
                                            {
                                                key: "inputFromScript",
                                                value: function inputFromScript(t, e, r, i, s) {
                                                    if (!(Buffer.isBuffer(t) && "number" == typeof e && r instanceof st1 && i instanceof q3)) throw new Error("invalid one of: txHashBuf, txOutNum, txOut, script");
                                                    return this.txIns.push(it5.fromProperties(t, e, i, s)), this.uTxOutMap.set(t, e, r), this;
                                                }
                                            },
                                            {
                                                key: "addSigOperation",
                                                value: function addSigOperation(t, e, r, i, s, n) {
                                                    return this.sigOperations.addOne(t, e, r, i, s, n), this;
                                                }
                                            },
                                            {
                                                key: "inputFromPubKeyHash",
                                                value: function inputFromPubKeyHash(t, e, r, i, s, n) {
                                                    if (!(Buffer.isBuffer(t) && "number" == typeof e && r instanceof st1)) throw new Error("invalid one of: txHashBuf, txOutNum, txOut");
                                                    this.txIns.push(new it5().fromObject({
                                                        nSequence: s
                                                    }).fromPubKeyHashTxOut(t, e, r, i)), this.uTxOutMap.set(t, e, r);
                                                    var a = z1.fromTxOutScript(r.script).toString();
                                                    return this.addSigOperation(t, e, 0, "sig", a, n), this.addSigOperation(t, e, 1, "pubKey", a), this;
                                                }
                                            },
                                            {
                                                key: "outputToAddress",
                                                value: function outputToAddress(t, e) {
                                                    if (!(e instanceof z1 && t instanceof p3)) throw new Error("addr must be an Address, and valueBn must be a Bn");
                                                    var r = new q3().fromPubKeyHash(e.hashBuf);
                                                    return this.outputToScript(t, r), this;
                                                }
                                            },
                                            {
                                                key: "outputToScript",
                                                value: function outputToScript(t, e) {
                                                    if (!(e instanceof q3 && t instanceof p3)) throw new Error("script must be a Script, and valueBn must be a Bn");
                                                    var r = st1.fromProperties(t, e);
                                                    return this.txOuts.push(r), this;
                                                }
                                            },
                                            {
                                                key: "buildOutputs",
                                                value: function buildOutputs() {
                                                    var _this45 = this;
                                                    var t = new p3(0);
                                                    return this.txOuts.forEach(function(e) {
                                                        if (e.valueBn.lt(_this45.dust) && !e.script.isNonSpendable()) throw new Error("cannot create output lesser than dust");
                                                        t = t.add(e.valueBn), _this45.tx.addTxOut(e);
                                                    }), t;
                                                }
                                            },
                                            {
                                                key: "buildInputs",
                                                value: function buildInputs(t) {
                                                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                                                    var r = new p3(0);
                                                    var _iterator6 = _createForOfIteratorHelper(this.txIns), _step6;
                                                    try {
                                                        for(_iterator6.s(); !(_step6 = _iterator6.n()).done;){
                                                            var _i44 = _step6.value;
                                                            var _s14 = this.uTxOutMap.get(_i44.txHashBuf, _i44.txOutNum);
                                                            if (r = r.add(_s14.valueBn), this.tx.addTxIn(_i44), r.geq(t)) {
                                                                if (e <= 0) break;
                                                                e--;
                                                            }
                                                        }
                                                    } catch (err) {
                                                        _iterator6.e(err);
                                                    } finally{
                                                        _iterator6.f();
                                                    }
                                                    if (r.lt(t)) throw new Error("not enough funds for outputs: inAmountBn " + r.toNumber() + " outAmountBn " + t.toNumber());
                                                    return r;
                                                }
                                            },
                                            {
                                                key: "estimateSize",
                                                value: function estimateSize() {
                                                    var _this46 = this;
                                                    var t = this.tx.toBuffer().length;
                                                    return this.tx.txIns.forEach(function(e) {
                                                        var r5 = e.txHashBuf, i8 = e.txOutNum;
                                                        _this46.sigOperations.get(r5, i8).forEach(function(r) {
                                                            var i = r.nScriptChunk, s = r.type, n = new q3([
                                                                e.script.chunks[i]
                                                            ]).toBuffer().length;
                                                            if (t -= n, "sig" === s) t += 72;
                                                            else {
                                                                if ("pubKey" !== r.type) throw new Error("unsupported sig operations type");
                                                                t += 35;
                                                            }
                                                        });
                                                    }), t += 1, Math.round(t);
                                                }
                                            },
                                            {
                                                key: "estimateFee",
                                                value: function estimateFee() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new p3(0);
                                                    return new p3(Math.ceil(this.estimateSize() / 1e3 * this.feePerKbNum)).add(t);
                                                }
                                            },
                                            {
                                                key: "build",
                                                value: function build() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
                                                        useAllInputs: !1
                                                    };
                                                    var e;
                                                    if (this.txIns.length <= 0) throw Error("tx-builder number of inputs must be greater than 0");
                                                    if (!this.changeScript) throw new Error("must specify change script to use build method");
                                                    for(var _r40 = t.useAllInputs ? this.txIns.length - 1 : 0; _r40 < this.txIns.length; _r40++){
                                                        this.tx = new nt1();
                                                        var _t54 = this.buildOutputs(), _i45 = st1.fromProperties(new p3(0), this.changeScript);
                                                        var _s15 = void 0;
                                                        this.tx.addTxOut(_i45);
                                                        try {
                                                            _s15 = this.buildInputs(_t54, _r40);
                                                        } catch (t) {
                                                            throw t.message.includes("not enough funds for outputs") ? new Error("unable to gather enough inputs for outputs and fee") : t;
                                                        }
                                                        if (this.changeAmountBn = _s15.sub(_t54), _i45.valueBn = this.changeAmountBn, e = this.estimateFee(), this.changeAmountBn.geq(e) && this.changeAmountBn.sub(e).gt(this.dust)) break;
                                                    }
                                                    if (this.changeAmountBn.geq(e)) {
                                                        if (this.feeAmountBn = e, this.changeAmountBn = this.changeAmountBn.sub(this.feeAmountBn), this.tx.txOuts[this.tx.txOuts.length - 1].valueBn = this.changeAmountBn, this.changeAmountBn.lt(this.dust)) {
                                                            if (!this.dustChangeToFees) throw new Error("unable to create change amount greater than dust");
                                                            this.tx.txOuts.pop(), this.tx.txOutsVi = rt1.fromNumber(this.tx.txOutsVi.toNumber() - 1), this.feeAmountBn = this.feeAmountBn.add(this.changeAmountBn), this.changeAmountBn = new p3(0);
                                                        }
                                                        if (this.tx.nLockTime = this.nLockTime, this.tx.versionBytesNum = this.versionBytesNum, 0 === this.tx.txOuts.length) throw new Error("outputs length is zero - unable to create any outputs greater than dust");
                                                        return this;
                                                    }
                                                    throw new Error("unable to gather enough inputs for outputs and fee");
                                                }
                                            },
                                            {
                                                key: "sort",
                                                value: function sort() {
                                                    return this.tx.sort(), this;
                                                }
                                            },
                                            {
                                                key: "fillSig",
                                                value: function fillSig(t, e, r) {
                                                    var i = this.tx.txIns[t];
                                                    return i.script.chunks[e] = new q3().writeBuffer(r.toTxFormat()).chunks[0], i.scriptVi = rt1.fromNumber(i.script.toBuffer().length), this;
                                                }
                                            },
                                            {
                                                key: "getSig",
                                                value: function getSig(t) {
                                                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                    var r = arguments.length > 2 ? arguments[2] : undefined;
                                                    var i = arguments.length > 3 ? arguments[3] : undefined;
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : nt1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                    var n;
                                                    if (e & j2.SIGHASH_FORKID && s & nt1.SCRIPT_ENABLE_SIGHASH_FORKID) {
                                                        var _t55 = this.tx.txIns[r].txHashBuf, _e52 = this.tx.txIns[r].txOutNum, _i46 = this.uTxOutMap.get(_t55, _e52);
                                                        if (!_i46) throw new Error("for SIGHASH_FORKID must provide UTXOs");
                                                        n = _i46.valueBn;
                                                    }
                                                    return this.tx.sign(t, e, r, i, n, s, this.hashCache);
                                                }
                                            },
                                            {
                                                key: "asyncGetSig",
                                                value: function asyncGetSig(t) {
                                                    var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                    var r = arguments.length > 2 ? arguments[2] : undefined;
                                                    var i = arguments.length > 3 ? arguments[3] : undefined;
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : nt1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                    var n;
                                                    if (e & j2.SIGHASH_FORKID && s & nt1.SCRIPT_ENABLE_SIGHASH_FORKID) {
                                                        var _t56 = this.tx.txIns[r].txHashBuf, _e53 = this.tx.txIns[r].txOutNum, _i47 = this.uTxOutMap.get(_t56, _e53);
                                                        if (!_i47) throw new Error("for SIGHASH_FORKID must provide UTXOs");
                                                        n = _i47.valueBn;
                                                    }
                                                    return this.tx.asyncSign(t, e, r, i, n, s, this.hashCache);
                                                }
                                            },
                                            {
                                                key: "signTxIn",
                                                value: function signTxIn(t, e, r, i) {
                                                    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                    var n = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : nt1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                    var a = this.tx.txIns[t], o = a.script;
                                                    if (void 0 === i && o.isPubKeyHashIn() && (i = 0), void 0 === i) throw new Error("cannot sign unknown script type for input " + t);
                                                    var h = a.txHashBuf, f = a.txOutNum;
                                                    r || (r = this.uTxOutMap.get(h, f));
                                                    var c = r.script, u = this.getSig(e, s, t, c, n, this.hashCache);
                                                    return this.fillSig(t, i, u), this;
                                                }
                                            },
                                            {
                                                key: "asyncSignTxIn",
                                                value: function() {
                                                    var _asyncSignTxIn2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee125(t, e, r, i) {
                                                        var s, n, a, o, h, f, c, u, _args133 = arguments;
                                                        return _regeneratorRuntime().wrap(function _callee125$(_context133) {
                                                            while(true)switch(_context133.prev = _context133.next){
                                                                case 0:
                                                                    s = _args133.length > 4 && _args133[4] !== undefined ? _args133[4] : j2.SIGHASH_ALL | j2.SIGHASH_FORKID;
                                                                    n = _args133.length > 5 && _args133[5] !== undefined ? _args133[5] : nt1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                                    a = this.tx.txIns[t], o = a.script;
                                                                    if (!(void 0 === i && o.isPubKeyHashIn() && (i = 0), void 0 === i)) {
                                                                        _context133.next = 5;
                                                                        break;
                                                                    }
                                                                    throw new Error("cannot sign unknown script type for input " + t);
                                                                case 5:
                                                                    h = a.txHashBuf, f = a.txOutNum;
                                                                    r || (r = this.uTxOutMap.get(h, f));
                                                                    c = r.script;
                                                                    _context133.next = 10;
                                                                    return this.asyncGetSig(e, s, t, c, n, this.hashCache);
                                                                case 10:
                                                                    u = _context133.sent;
                                                                    return _context133.abrupt("return", (this.fillSig(t, i, u), this));
                                                                case 12:
                                                                case "end":
                                                                    return _context133.stop();
                                                            }
                                                        }, _callee125, this);
                                                    }));
                                                    function asyncSignTxIn(_x173, _x174, _x175, _x176) {
                                                        return _asyncSignTxIn2.apply(this, arguments);
                                                    }
                                                    return asyncSignTxIn;
                                                }()
                                            },
                                            {
                                                key: "signWithKeyPairs",
                                                value: function signWithKeyPairs(t) {
                                                    var e = {};
                                                    var _iterator7 = _createForOfIteratorHelper(t), _step7;
                                                    try {
                                                        for(_iterator7.s(); !(_step7 = _iterator7.n()).done;){
                                                            var _r42 = _step7.value;
                                                            e[z1.fromPubKey(_r42.pubKey).toString()] = _r42;
                                                        }
                                                    } catch (err) {
                                                        _iterator7.e(err);
                                                    } finally{
                                                        _iterator7.f();
                                                    }
                                                    for(var _t57 in this.tx.txIns){
                                                        var _r41 = this.tx.txIns[_t57], _i48 = this.sigOperations.get(_r41.txHashBuf, _r41.txOutNum);
                                                        var _iterator8 = _createForOfIteratorHelper(_i48), _step8;
                                                        try {
                                                            for(_iterator8.s(); !(_step8 = _iterator8.n()).done;){
                                                                var _s16 = _step8.value;
                                                                var _i49 = _s16.nScriptChunk, _n12 = _s16.type, a = _s16.addressStr, _o6 = _s16.nHashType, _h6 = e[a];
                                                                if (!_h6) {
                                                                    _s16.log = "cannot find keyPair for addressStr ".concat(a);
                                                                    continue;
                                                                }
                                                                var _f4 = this.uTxOutMap.get(_r41.txHashBuf, _r41.txOutNum);
                                                                if ("sig" === _n12) this.signTxIn(_t57, _h6, _f4, _i49, _o6), _s16.log = "successfully inserted signature";
                                                                else {
                                                                    if ("pubKey" !== _n12) {
                                                                        _s16.log = "cannot perform operation of type ".concat(_n12);
                                                                        continue;
                                                                    }
                                                                    _r41.script.chunks[_i49] = new q3().writeBuffer(_h6.pubKey.toBuffer()).chunks[0], _r41.setScript(_r41.script), _s16.log = "successfully inserted public key";
                                                                }
                                                            }
                                                        } catch (err) {
                                                            _iterator8.e(err);
                                                        } finally{
                                                            _iterator8.f();
                                                        }
                                                    }
                                                    return this;
                                                }
                                            }
                                        ], [
                                            {
                                                key: "allSigsPresent",
                                                value: function allSigsPresent(t, e) {
                                                    var r = 0;
                                                    for(var _t58 = 1; _t58 < e.chunks.length - 1; _t58++)e.chunks[_t58].buf && r++;
                                                    return r === t;
                                                }
                                            },
                                            {
                                                key: "removeBlankSigs",
                                                value: function removeBlankSigs(t) {
                                                    t = new q3(t.chunks.slice());
                                                    for(var _e54 = 1; _e54 < t.chunks.length - 1; _e54++)t.chunks[_e54].buf || t.chunks.splice(_e54, 1);
                                                    return t;
                                                }
                                            }
                                        ]);
                                        return ut;
                                    }(S1);
                                    var dt1 = /*#__PURE__*/ function(_S27) {
                                        _inherits(dt, _S27);
                                        var _super73 = _createSuper(dt);
                                        function dt(t, e, r, i) {
                                            _classCallCheck2(this, dt);
                                            return _super73.call(this, {
                                                tx: t,
                                                txOutMap: e,
                                                errStr: r,
                                                interp: i
                                            });
                                        }
                                        _createClass2(dt, [
                                            {
                                                key: "verify",
                                                value: function verify() {
                                                    var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ot1.SCRIPT_ENABLE_SIGHASH_FORKID;
                                                    return !this.checkStr() && !this.verifyStr(t);
                                                }
                                            },
                                            {
                                                key: "asyncVerify",
                                                value: function() {
                                                    var _asyncVerify10 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee126(t) {
                                                        var e;
                                                        return _regeneratorRuntime().wrap(function _callee126$(_context134) {
                                                            while(true)switch(_context134.prev = _context134.next){
                                                                case 0:
                                                                    _context134.next = 2;
                                                                    return this.asyncVerifyStr(t);
                                                                case 2:
                                                                    e = _context134.sent;
                                                                    return _context134.abrupt("return", !this.checkStr() && !e);
                                                                case 4:
                                                                case "end":
                                                                    return _context134.stop();
                                                            }
                                                        }, _callee126, this);
                                                    }));
                                                    function asyncVerify(_x177) {
                                                        return _asyncVerify10.apply(this, arguments);
                                                    }
                                                    return asyncVerify;
                                                }()
                                            },
                                            {
                                                key: "checkStr",
                                                value: function checkStr() {
                                                    if (0 === this.tx.txIns.length || 0 === this.tx.txInsVi.toNumber()) return this.errStr = "transaction txIns empty", this.errStr;
                                                    if (0 === this.tx.txOuts.length || 0 === this.tx.txOutsVi.toNumber()) return this.errStr = "transaction txOuts empty", this.errStr;
                                                    if (this.tx.toBuffer().length > at1.MAX_BLOCK_SIZE) return this.errStr = "transaction over the maximum block size", this.errStr;
                                                    var t = new p3(0);
                                                    for(var _e55 = 0; _e55 < this.tx.txOuts.length; _e55++){
                                                        var _r43 = this.tx.txOuts[_e55];
                                                        if (_r43.valueBn.lt(0)) return this.errStr = "transaction txOut " + _e55 + " negative", this.errStr;
                                                        if (_r43.valueBn.gt(nt1.MAX_MONEY)) return this.errStr = "transaction txOut " + _e55 + " greater than MAX_MONEY", this.errStr;
                                                        if (t = t.add(_r43.valueBn), t.gt(nt1.MAX_MONEY)) return this.errStr = "transaction txOut " + _e55 + " total output greater than MAX_MONEY", this.errStr;
                                                    }
                                                    var e = {};
                                                    for(var _t59 = 0; _t59 < this.tx.txIns.length; _t59++){
                                                        var _r44 = this.tx.txIns[_t59], _i50 = _r44.txHashBuf.toString("hex") + ":" + _r44.txOutNum;
                                                        if (void 0 !== e[_i50]) return this.errStr = "transaction input " + _t59 + " duplicate input", this.errStr;
                                                        e[_i50] = !0;
                                                    }
                                                    if (this.tx.isCoinbase()) {
                                                        var _t60 = this.tx.txIns[0].script.toBuffer();
                                                        if (_t60.length < 2 || _t60.length > 100) return this.errStr = "coinbase trasaction script size invalid", this.errStr;
                                                    } else for(var _t61 = 0; _t61 < this.tx.txIns.length; _t61++){
                                                        if (this.tx.txIns[_t61].hasNullInput()) return this.errStr = "transaction input " + _t61 + " has null input", this.errStr;
                                                    }
                                                    return !1;
                                                }
                                            },
                                            {
                                                key: "verifyStr",
                                                value: function verifyStr(t) {
                                                    for(var _e56 = 0; _e56 < this.tx.txIns.length; _e56++){
                                                        if (!this.verifyNIn(_e56, t)) return this.errStr = "input " + _e56 + " failed script verify", this.errStr;
                                                    }
                                                    return !1;
                                                }
                                            },
                                            {
                                                key: "asyncVerifyStr",
                                                value: function() {
                                                    var _asyncVerifyStr2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee127(t) {
                                                        var _e57;
                                                        return _regeneratorRuntime().wrap(function _callee127$(_context135) {
                                                            while(true)switch(_context135.prev = _context135.next){
                                                                case 0:
                                                                    _e57 = 0;
                                                                case 1:
                                                                    if (!(_e57 < this.tx.txIns.length)) {
                                                                        _context135.next = 9;
                                                                        break;
                                                                    }
                                                                    _context135.next = 4;
                                                                    return this.asyncVerifyNIn(_e57, t);
                                                                case 4:
                                                                    if (_context135.sent) {
                                                                        _context135.next = 6;
                                                                        break;
                                                                    }
                                                                    return _context135.abrupt("return", (this.errStr = "input " + _e57 + " failed script verify", this.errStr));
                                                                case 6:
                                                                    _e57++;
                                                                    _context135.next = 1;
                                                                    break;
                                                                case 9:
                                                                    return _context135.abrupt("return", !1);
                                                                case 10:
                                                                case "end":
                                                                    return _context135.stop();
                                                            }
                                                        }, _callee127, this);
                                                    }));
                                                    function asyncVerifyStr(_x178) {
                                                        return _asyncVerifyStr2.apply(this, arguments);
                                                    }
                                                    return asyncVerifyStr;
                                                }()
                                            },
                                            {
                                                key: "verifyNIn",
                                                value: function verifyNIn(t, e) {
                                                    var r = this.tx.txIns[t], i = r.script, s = this.txOutMap.get(r.txHashBuf, r.txOutNum);
                                                    if (!s) return console.log("output " + r.txOutNum + " not found"), !1;
                                                    var n = s.script, a = s.valueBn;
                                                    return this.interp = new ot1(), this.interp.verify(i, n, this.tx, t, e, a);
                                                }
                                            },
                                            {
                                                key: "asyncVerifyNIn",
                                                value: function() {
                                                    var _asyncVerifyNIn2 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee128(t, e) {
                                                        var r, i, s, n, a, o;
                                                        return _regeneratorRuntime().wrap(function _callee128$(_context136) {
                                                            while(true)switch(_context136.prev = _context136.next){
                                                                case 0:
                                                                    r = this.tx.txIns[t], i = r.script, s = this.txOutMap.get(r.txHashBuf, r.txOutNum);
                                                                    if (s) {
                                                                        _context136.next = 3;
                                                                        break;
                                                                    }
                                                                    return _context136.abrupt("return", (console.log("output " + r.txOutNum + " not found"), !1));
                                                                case 3:
                                                                    n = s.script, a = s.valueBn;
                                                                    this.interp = new ot1();
                                                                    _context136.next = 7;
                                                                    return E1.asyncObjectMethod(this.interp, "verify", [
                                                                        i,
                                                                        n,
                                                                        this.tx,
                                                                        t,
                                                                        e,
                                                                        a
                                                                    ]);
                                                                case 7:
                                                                    o = _context136.sent;
                                                                    return _context136.abrupt("return", JSON.parse(o.resbuf.toString()));
                                                                case 9:
                                                                case "end":
                                                                    return _context136.stop();
                                                            }
                                                        }, _callee128, this);
                                                    }));
                                                    function asyncVerifyNIn(_x179, _x180) {
                                                        return _asyncVerifyNIn2.apply(this, arguments);
                                                    }
                                                    return asyncVerifyNIn;
                                                }()
                                            },
                                            {
                                                key: "getDebugObject",
                                                value: function getDebugObject() {
                                                    return {
                                                        errStr: this.errStr,
                                                        interpFailure: this.interp ? this.interp.getDebugObject() : void 0
                                                    };
                                                }
                                            },
                                            {
                                                key: "getDebugString",
                                                value: function getDebugString() {
                                                    return JSON.stringify(this.getDebugObject(), null, 2);
                                                }
                                            }
                                        ], [
                                            {
                                                key: "verify",
                                                value: function verify(t, e, r) {
                                                    return new dt(t, e).verify(r);
                                                }
                                            },
                                            {
                                                key: "asyncVerify",
                                                value: function asyncVerify(t, e, r) {
                                                    return new dt(t, e).asyncVerify(r);
                                                }
                                            }
                                        ]);
                                        return dt;
                                    }(S1);
                                    var lt1 = /*#__PURE__*/ _createClass2(function lt() {
                                        _classCallCheck2(this, lt);
                                    });
                                    lt1.encrypt = function(t, e) {
                                        var r = lt1.buf2Words(e), i = lt1.buf2Words(t), n = new (s4())(r).encrypt(i);
                                        return lt1.words2Buf(n);
                                    }, lt1.decrypt = function(t, e) {
                                        var r = lt1.buf2Words(t), i = lt1.buf2Words(e), n = new (s4())(i).decrypt(r);
                                        return lt1.words2Buf(n);
                                    }, lt1.buf2Words = function(t) {
                                        if (t.length % 4) throw new Error("buf length must be a multiple of 4");
                                        var e = [];
                                        for(var _r45 = 0; _r45 < t.length / 4; _r45++)e.push(t.readUInt32BE(4 * _r45));
                                        return e;
                                    }, lt1.words2Buf = function(t) {
                                        var e = Buffer.alloc(4 * t.length);
                                        for(var _r46 = 0; _r46 < t.length; _r46++)e.writeUInt32BE(t[_r46], 4 * _r46);
                                        return e;
                                    };
                                    var pt1 = /*#__PURE__*/ _createClass2(function pt() {
                                        _classCallCheck2(this, pt);
                                    });
                                    pt1.buf2BlocksBuf = function(t, e) {
                                        var r = e / 8, i = [];
                                        for(var _s17 = 0; _s17 <= t.length / r; _s17++){
                                            var _n13 = t.slice(_s17 * r, _s17 * r + r);
                                            _n13.length < e && (_n13 = pt1.pkcs7Pad(_n13, e)), i.push(_n13);
                                        }
                                        return i;
                                    }, pt1.blockBufs2Buf = function(t) {
                                        var e = t[t.length - 1];
                                        return e = pt1.pkcs7Unpad(e), t[t.length - 1] = e, Buffer.concat(t);
                                    }, pt1.encrypt = function(t, e, r, i) {
                                        var s = 8 * e.length, n = pt1.buf2BlocksBuf(t, s), a = pt1.encryptBlocks(n, e, r, i);
                                        return Buffer.concat(a);
                                    }, pt1.decrypt = function(t, e, r, i) {
                                        var s = e.length, n = [];
                                        for(var _e58 = 0; _e58 < t.length / s; _e58++)n.push(t.slice(_e58 * s, _e58 * s + s));
                                        var a = pt1.decryptBlocks(n, e, r, i);
                                        return pt1.blockBufs2Buf(a);
                                    }, pt1.encryptBlock = function(t, e, r, i) {
                                        var s = pt1.xorBufs(t, e);
                                        return r.encrypt(s, i);
                                    }, pt1.decryptBlock = function(t, e, r, i) {
                                        var s = r.decrypt(t, i);
                                        return pt1.xorBufs(s, e);
                                    }, pt1.encryptBlocks = function(t, e, r, i) {
                                        var s = [];
                                        for(var _n14 = 0; _n14 < t.length; _n14++){
                                            var a = t[_n14], _o7 = pt1.encryptBlock(a, e, r, i);
                                            s.push(_o7), e = _o7;
                                        }
                                        return s;
                                    }, pt1.decryptBlocks = function(t, e, r, i) {
                                        var s = [];
                                        for(var _n15 = 0; _n15 < t.length; _n15++){
                                            var a = t[_n15], _o8 = pt1.decryptBlock(a, e, r, i);
                                            s.push(_o8), e = a;
                                        }
                                        return s;
                                    }, pt1.pkcs7Pad = function(t, e) {
                                        var r = e / 8 - t.length, i = Buffer.alloc(r);
                                        return i.fill(r), Buffer.concat([
                                            t,
                                            i
                                        ]);
                                    }, pt1.pkcs7Unpad = function(t) {
                                        var e = t[t.length - 1], r = t.slice(t.length - e, t.length), i = Buffer.alloc(e);
                                        if (i.fill(e), !B(r, i)) throw new Error("invalid padding");
                                        return t.slice(0, t.length - e);
                                    }, pt1.xorBufs = function(t, e) {
                                        if (t.length !== e.length) throw new Error("bufs must have the same length");
                                        var r = Buffer.alloc(t.length);
                                        for(var _i51 = 0; _i51 < t.length; _i51++)r[_i51] = t[_i51] ^ e[_i51];
                                        return r;
                                    };
                                    var bt1 = /*#__PURE__*/ _createClass2(function bt() {
                                        _classCallCheck2(this, bt);
                                    });
                                    bt1.encrypt = function(t, e, r) {
                                        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !0;
                                        r = r || D1.getRandomBuffer(16);
                                        var s = pt1.encrypt(t, r, lt1, e);
                                        return i ? Buffer.concat([
                                            r,
                                            s
                                        ]) : s;
                                    }, bt1.decrypt = function(t, e) {
                                        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
                                        if (r) {
                                            var _i52 = t;
                                            return pt1.decrypt(_i52, r, lt1, e);
                                        }
                                        var _r47 = t.slice(0, 16), _i53 = t.slice(16);
                                        return pt1.decrypt(_i53, _r47, lt1, e);
                                    };
                                    var mt1 = /*#__PURE__*/ _createClass2(function mt() {
                                        _classCallCheck2(this, mt);
                                    });
                                    mt1.encrypt = function(t, e, r) {
                                        var i = bt1.encrypt(t, e, r), s = P1.sha256Hmac(i, e);
                                        return Buffer.concat([
                                            s,
                                            i
                                        ]);
                                    }, mt1.asyncEncrypt = /*#__PURE__*/ function() {
                                        var _ref28 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee129(t, e, r) {
                                            var i;
                                            return _regeneratorRuntime().wrap(function _callee129$(_context137) {
                                                while(true)switch(_context137.prev = _context137.next){
                                                    case 0:
                                                        r || (r = D1.getRandomBuffer(16));
                                                        i = [
                                                            t,
                                                            e,
                                                            r
                                                        ];
                                                        _context137.next = 4;
                                                        return E1.asyncClassMethod(mt1, "encrypt", i);
                                                    case 4:
                                                        return _context137.abrupt("return", _context137.sent.resbuf);
                                                    case 5:
                                                    case "end":
                                                        return _context137.stop();
                                                }
                                            }, _callee129);
                                        }));
                                        return function(_x181, _x182, _x183) {
                                            return _ref28.apply(this, arguments);
                                        };
                                    }(), mt1.decrypt = function(t, e) {
                                        if (t.length < 64) throw new Error("The encrypted data must be at least 256+128+128 bits, which is the length of the Hmac plus the iv plus the smallest encrypted data size");
                                        var r = t.slice(0, 32);
                                        t = t.slice(32, t.length);
                                        var i = P1.sha256Hmac(t, e);
                                        if (!B(r, i)) throw new Error("Message authentication failed - Hmacs are not equivalent");
                                        return bt1.decrypt(t, e);
                                    }, mt1.asyncDecrypt = /*#__PURE__*/ function() {
                                        var _ref29 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee130(t, e) {
                                            var r;
                                            return _regeneratorRuntime().wrap(function _callee130$(_context138) {
                                                while(true)switch(_context138.prev = _context138.next){
                                                    case 0:
                                                        r = [
                                                            t,
                                                            e
                                                        ];
                                                        _context138.next = 3;
                                                        return E1.asyncClassMethod(mt1, "decrypt", r);
                                                    case 3:
                                                        return _context138.abrupt("return", _context138.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context138.stop();
                                                }
                                            }, _callee130);
                                        }));
                                        return function(_x184, _x185) {
                                            return _ref29.apply(this, arguments);
                                        };
                                    }();
                                    var gt1 = /*#__PURE__*/ _createClass2(function gt() {
                                        _classCallCheck2(this, gt);
                                    });
                                    gt1.ivkEkM = function(t, e) {
                                        var r = t.bn, i = e.point.mul(r), s = new K1(i).toBuffer(), n = P1.sha512(s);
                                        return {
                                            iv: n.slice(0, 16),
                                            kE: n.slice(16, 32),
                                            kM: n.slice(32, 64)
                                        };
                                    }, gt1.electrumEncrypt = function(t, e, r) {
                                        var i = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;
                                        if (!Buffer.isBuffer(t)) throw new Error("messageBuf must be a buffer");
                                        var s;
                                        null === r && (r = Q1.fromRandom()), i || (s = r.pubKey.toDer(!0));
                                        var _gt$ivkEkM = gt1.ivkEkM(r.privKey, e), n = _gt$ivkEkM.iv, a = _gt$ivkEkM.kE, o = _gt$ivkEkM.kM, h = bt1.encrypt(t, a, n, !1), f = Buffer.from("BIE1");
                                        var c;
                                        c = s ? Buffer.concat([
                                            f,
                                            s,
                                            h
                                        ]) : Buffer.concat([
                                            f,
                                            h
                                        ]);
                                        var u = P1.sha256Hmac(c, o);
                                        return Buffer.concat([
                                            c,
                                            u
                                        ]);
                                    }, gt1.electrumDecrypt = function(t, e) {
                                        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
                                        if (!Buffer.isBuffer(t)) throw new Error("encBuf must be a buffer");
                                        if (!t.slice(0, 4).equals(Buffer.from("BIE1"))) throw new Error("Invalid Magic");
                                        var i = 4;
                                        if (null === r) {
                                            var _e59 = t.slice(4, 37);
                                            r = K1.fromDer(_e59), i = 37;
                                        }
                                        var _gt$ivkEkM2 = gt1.ivkEkM(e, r), s = _gt$ivkEkM2.iv, n = _gt$ivkEkM2.kE, a = _gt$ivkEkM2.kM, o = t.slice(i, t.length - 32), h = t.slice(t.length - 32, t.length), f = P1.sha256Hmac(t.slice(0, t.length - 32), a);
                                        if (!h.equals(f)) throw new Error("Invalid checksum");
                                        return bt1.decrypt(o, n, s);
                                    }, gt1.bitcoreEncrypt = function(t, e, r, i) {
                                        r || (r = Q1.fromRandom());
                                        var s = r.privKey.bn, n = r.pubKey.toDer(!0), a = e.point.mul(s).getX().toBuffer({
                                            size: 32
                                        }), o = P1.sha512(a), h = o.slice(0, 32), f = o.slice(32, 64), c = bt1.encrypt(t, h, i), u = P1.sha256Hmac(c, f);
                                        return Buffer.concat([
                                            n,
                                            c,
                                            u
                                        ]);
                                    }, gt1.asyncBitcoreEncrypt = /*#__PURE__*/ function() {
                                        var _ref30 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee131(t, e, r, i) {
                                            var s;
                                            return _regeneratorRuntime().wrap(function _callee131$(_context139) {
                                                while(true)switch(_context139.prev = _context139.next){
                                                    case 0:
                                                        _context139.t0 = r;
                                                        if (_context139.t0) {
                                                            _context139.next = 5;
                                                            break;
                                                        }
                                                        _context139.next = 4;
                                                        return Q1.asyncFromRandom();
                                                    case 4:
                                                        r = _context139.sent;
                                                    case 5:
                                                        i || (i = D1.getRandomBuffer(16));
                                                        s = [
                                                            t,
                                                            e,
                                                            r,
                                                            i
                                                        ];
                                                        _context139.next = 9;
                                                        return E1.asyncClassMethod(gt1, "bitcoreEncrypt", s);
                                                    case 9:
                                                        return _context139.abrupt("return", _context139.sent.resbuf);
                                                    case 10:
                                                    case "end":
                                                        return _context139.stop();
                                                }
                                            }, _callee131);
                                        }));
                                        return function(_x186, _x187, _x188, _x189) {
                                            return _ref30.apply(this, arguments);
                                        };
                                    }(), gt1.bitcoreDecrypt = function(t, e) {
                                        var r = e.bn, i = K1.fromDer(t.slice(0, 33)).point.mul(r);
                                        if (i.eq(new L1())) throw new Error("P equals 0");
                                        var s = i.getX().toBuffer({
                                            size: 32
                                        }), n = P1.sha512(s), a = n.slice(0, 32), o = n.slice(32, 64), h = t.slice(33, t.length - 32), f = t.slice(t.length - 32, t.length), c = P1.sha256Hmac(h, o);
                                        if (!B(f, c)) throw new Error("Invalid checksum");
                                        return bt1.decrypt(h, a);
                                    }, gt1.asyncBitcoreDecrypt = /*#__PURE__*/ function() {
                                        var _ref31 = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee132(t, e) {
                                            var r;
                                            return _regeneratorRuntime().wrap(function _callee132$(_context140) {
                                                while(true)switch(_context140.prev = _context140.next){
                                                    case 0:
                                                        r = [
                                                            t,
                                                            e
                                                        ];
                                                        _context140.next = 3;
                                                        return E1.asyncClassMethod(gt1, "bitcoreDecrypt", r);
                                                    case 3:
                                                        return _context140.abrupt("return", _context140.sent.resbuf);
                                                    case 4:
                                                    case "end":
                                                        return _context140.stop();
                                                }
                                            }, _callee132);
                                        }));
                                        return function(_x190, _x191) {
                                            return _ref31.apply(this, arguments);
                                        };
                                    }();
                                    var yt = {
                                        aes: s4(),
                                        bnjs: a10(),
                                        bs58: h1(),
                                        elliptic: c3(),
                                        hashjs: d3(),
                                        pbkdf2: l3,
                                        Buffer: Buffer
                                    }, wt = "2.0.10";
                                },
                                297: function _(t30) {
                                    function e11(t) {
                                        var e, r, i;
                                        this._tables[0][0][0] || this._precompute();
                                        var s = this._tables[0][4], n = this._tables[1], a = t.length, o = 1;
                                        if (4 !== a && 6 !== a && 8 !== a) throw new Error("invalid aes key size");
                                        this._key = [
                                            r = t.slice(0),
                                            i = []
                                        ];
                                        for(var h = a; h < 4 * a + 28; h++)e = r[h - 1], (h % a == 0 || 8 === a && h % a == 4) && (e = s[e >>> 24] << 24 ^ s[e >> 16 & 255] << 16 ^ s[e >> 8 & 255] << 8 ^ s[255 & e], h % a == 0 && (e = e << 8 ^ e >>> 24 ^ o << 24, o = o << 1 ^ 283 * (o >> 7))), r[h] = r[h - a] ^ e;
                                        for(var f = 0; h; f++, h--)e = r[3 & f ? h : h - 4], i[f] = h <= 4 || f < 4 ? e : n[0][s[e >>> 24]] ^ n[1][s[e >> 16 & 255]] ^ n[2][s[e >> 8 & 255]] ^ n[3][s[255 & e]];
                                    }
                                    t30.exports = e11, e11.prototype = {
                                        encrypt: function encrypt(t) {
                                            return this._crypt(t, 0);
                                        },
                                        decrypt: function decrypt(t) {
                                            return this._crypt(t, 1);
                                        },
                                        _tables: [
                                            [
                                                new Uint32Array(256),
                                                new Uint32Array(256),
                                                new Uint32Array(256),
                                                new Uint32Array(256),
                                                new Uint32Array(256)
                                            ],
                                            [
                                                new Uint32Array(256),
                                                new Uint32Array(256),
                                                new Uint32Array(256),
                                                new Uint32Array(256),
                                                new Uint32Array(256)
                                            ]
                                        ],
                                        _precompute: function _precompute() {
                                            var t, e, r, i, s, n, a, o, h = this._tables[0], f = this._tables[1], c = h[4], u = f[4], d = new Uint8Array(256), l = new Uint8Array(256);
                                            for(t = 0; t < 256; t++)l[(d[t] = t << 1 ^ 283 * (t >> 7)) ^ t] = t;
                                            for(e = r = 0; !c[e]; e ^= i || 1, r = l[r] || 1)for(n = (n = r ^ r << 1 ^ r << 2 ^ r << 3 ^ r << 4) >> 8 ^ 255 & n ^ 99, c[e] = n, u[n] = e, o = 16843009 * d[s = d[i = d[e]]] ^ 65537 * s ^ 257 * i ^ 16843008 * e, a = 257 * d[n] ^ 16843008 * n, t = 0; t < 4; t++)h[t][e] = a = a << 24 ^ a >>> 8, f[t][n] = o = o << 24 ^ o >>> 8;
                                        },
                                        _crypt: function _crypt(t, e) {
                                            if (4 !== t.length) throw new Error("invalid aes block size");
                                            var r, i, s, n, a = this._key[e], o = t[0] ^ a[0], h = t[e ? 3 : 1] ^ a[1], f = t[2] ^ a[2], c = t[e ? 1 : 3] ^ a[3], u = a.length / 4 - 2, d = 4, l = new Uint32Array(4), p = this._tables[e], b = p[0], m = p[1], g = p[2], y = p[3], w = p[4];
                                            for(n = 0; n < u; n++)r = b[o >>> 24] ^ m[h >> 16 & 255] ^ g[f >> 8 & 255] ^ y[255 & c] ^ a[d], i = b[h >>> 24] ^ m[f >> 16 & 255] ^ g[c >> 8 & 255] ^ y[255 & o] ^ a[d + 1], s = b[f >>> 24] ^ m[c >> 16 & 255] ^ g[o >> 8 & 255] ^ y[255 & h] ^ a[d + 2], c = b[c >>> 24] ^ m[o >> 16 & 255] ^ g[h >> 8 & 255] ^ y[255 & f] ^ a[d + 3], d += 4, o = r, h = i, f = s;
                                            for(n = 0; n < 4; n++)l[e ? 3 & -n : n] = w[o >>> 24] << 24 ^ w[h >> 16 & 255] << 16 ^ w[f >> 8 & 255] << 8 ^ w[255 & c] ^ a[d++], r = o, o = h, h = f, f = c, c = r;
                                            return l;
                                        }
                                    };
                                },
                                162: function _(t31, e12, r6) {
                                    "use strict";
                                    var i = r6(509).Buffer;
                                    t31.exports = function(t32) {
                                        if (t32.length >= 255) throw new TypeError("Alphabet too long");
                                        for(var e13 = new Uint8Array(256), r7 = 0; r7 < e13.length; r7++)e13[r7] = 255;
                                        for(var s5 = 0; s5 < t32.length; s5++){
                                            var n = t32.charAt(s5), a = n.charCodeAt(0);
                                            if (255 !== e13[a]) throw new TypeError(n + " is ambiguous");
                                            e13[a] = s5;
                                        }
                                        var o = t32.length, h = t32.charAt(0), f2 = Math.log(o) / Math.log(256), c4 = Math.log(256) / Math.log(o);
                                        function u4(t) {
                                            if ("string" != typeof t) throw new TypeError("Expected String");
                                            if (0 === t.length) return i.alloc(0);
                                            var r = 0;
                                            if (" " !== t[r]) {
                                                for(var s = 0, n = 0; t[r] === h;)s++, r++;
                                                for(var a = (t.length - r) * f2 + 1 >>> 0, c = new Uint8Array(a); t[r];){
                                                    var u = e13[t.charCodeAt(r)];
                                                    if (255 === u) return;
                                                    for(var d = 0, l = a - 1; (0 !== u || d < n) && -1 !== l; l--, d++)u += o * c[l] >>> 0, c[l] = u % 256 >>> 0, u = u / 256 >>> 0;
                                                    if (0 !== u) throw new Error("Non-zero carry");
                                                    n = d, r++;
                                                }
                                                if (" " !== t[r]) {
                                                    for(var p = a - n; p !== a && 0 === c[p];)p++;
                                                    var b = i.allocUnsafe(s + (a - p));
                                                    b.fill(0, 0, s);
                                                    for(var m = s; p !== a;)b[m++] = c[p++];
                                                    return b;
                                                }
                                            }
                                        }
                                        return {
                                            encode: function encode(e) {
                                                if ((Array.isArray(e) || e instanceof Uint8Array) && (e = i.from(e)), !i.isBuffer(e)) throw new TypeError("Expected Buffer");
                                                if (0 === e.length) return "";
                                                for(var r = 0, s = 0, n = 0, a = e.length; n !== a && 0 === e[n];)n++, r++;
                                                for(var f = (a - n) * c4 + 1 >>> 0, u = new Uint8Array(f); n !== a;){
                                                    for(var d = e[n], l = 0, p = f - 1; (0 !== d || l < s) && -1 !== p; p--, l++)d += 256 * u[p] >>> 0, u[p] = d % o >>> 0, d = d / o >>> 0;
                                                    if (0 !== d) throw new Error("Non-zero carry");
                                                    s = l, n++;
                                                }
                                                for(var b = f - s; b !== f && 0 === u[b];)b++;
                                                for(var m = h.repeat(r); b < f; ++b)m += t32.charAt(u[b]);
                                                return m;
                                            },
                                            decodeUnsafe: u4,
                                            decode: function decode(t) {
                                                var e = u4(t);
                                                if (e) return e;
                                                throw new Error("Non-base" + o + " character");
                                            }
                                        };
                                    };
                                },
                                666: function _(t, e, r) {
                                    "use strict";
                                    var i = e;
                                    i.version = r(60).i8, i.utils = r(359), i.rand = r(931), i.curve = r(104), i.curves = r(626), i.ec = r(630);
                                },
                                15: function _2(t33, e14, r8) {
                                    "use strict";
                                    var i9 = r8(550), s6 = r8(359), n4 = s6.getNAF, a11 = s6.getJSF, o4 = s6.assert;
                                    function h4(t, e) {
                                        this.type = t, this.p = new i9(e.p, 16), this.red = e.prime ? i9.red(e.prime) : i9.mont(this.p), this.zero = new i9(0).toRed(this.red), this.one = new i9(1).toRed(this.red), this.two = new i9(2).toRed(this.red), this.n = e.n && new i9(e.n, 16), this.g = e.g && this.pointFromJSON(e.g, e.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
                                        var r = this.n && this.p.div(this.n);
                                        !r || r.cmpn(100) > 0 ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
                                    }
                                    function f3(t, e) {
                                        this.curve = t, this.type = e, this.precomputed = null;
                                    }
                                    t33.exports = h4, h4.prototype.point = function() {
                                        throw new Error("Not implemented");
                                    }, h4.prototype.validate = function() {
                                        throw new Error("Not implemented");
                                    }, h4.prototype._fixedNafMul = function(t, e) {
                                        o4(t.precomputed);
                                        var r = t._getDoubles(), i = n4(e, 1, this._bitLength), s = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
                                        s /= 3;
                                        for(var a = [], h = 0; h < i.length; h += r.step){
                                            var f = 0;
                                            for(e = h + r.step - 1; e >= h; e--)f = (f << 1) + i[e];
                                            a.push(f);
                                        }
                                        for(var c = this.jpoint(null, null, null), u = this.jpoint(null, null, null), d = s; d > 0; d--){
                                            for(h = 0; h < a.length; h++)(f = a[h]) === d ? u = u.mixedAdd(r.points[h]) : f === -d && (u = u.mixedAdd(r.points[h].neg()));
                                            c = c.add(u);
                                        }
                                        return c.toP();
                                    }, h4.prototype._wnafMul = function(t, e) {
                                        var r = 4, i = t._getNAFPoints(r);
                                        r = i.wnd;
                                        for(var s = i.points, a = n4(e, r, this._bitLength), h = this.jpoint(null, null, null), f = a.length - 1; f >= 0; f--){
                                            for(e = 0; f >= 0 && 0 === a[f]; f--)e++;
                                            if (f >= 0 && e++, h = h.dblp(e), f < 0) break;
                                            var c = a[f];
                                            o4(0 !== c), h = "affine" === t.type ? c > 0 ? h.mixedAdd(s[c - 1 >> 1]) : h.mixedAdd(s[-c - 1 >> 1].neg()) : c > 0 ? h.add(s[c - 1 >> 1]) : h.add(s[-c - 1 >> 1].neg());
                                        }
                                        return "affine" === t.type ? h.toP() : h;
                                    }, h4.prototype._wnafMulAdd = function(t, e, r, i, s) {
                                        for(var o = this._wnafT1, h = this._wnafT2, f = this._wnafT3, c = 0, u = 0; u < i; u++){
                                            var d = (O = e[u])._getNAFPoints(t);
                                            o[u] = d.wnd, h[u] = d.points;
                                        }
                                        for(u = i - 1; u >= 1; u -= 2){
                                            var l = u - 1, p = u;
                                            if (1 === o[l] && 1 === o[p]) {
                                                var b = [
                                                    e[l],
                                                    null,
                                                    null,
                                                    e[p]
                                                ];
                                                0 === e[l].y.cmp(e[p].y) ? (b[1] = e[l].add(e[p]), b[2] = e[l].toJ().mixedAdd(e[p].neg())) : 0 === e[l].y.cmp(e[p].y.redNeg()) ? (b[1] = e[l].toJ().mixedAdd(e[p]), b[2] = e[l].add(e[p].neg())) : (b[1] = e[l].toJ().mixedAdd(e[p]), b[2] = e[l].toJ().mixedAdd(e[p].neg()));
                                                var m = [
                                                    -3,
                                                    -1,
                                                    -5,
                                                    -7,
                                                    0,
                                                    7,
                                                    5,
                                                    1,
                                                    3
                                                ], g = a11(r[l], r[p]);
                                                c = Math.max(g[0].length, c), f[l] = new Array(c), f[p] = new Array(c);
                                                for(var y = 0; y < c; y++){
                                                    var w = 0 | g[0][y], v = 0 | g[1][y];
                                                    f[l][y] = m[3 * (w + 1) + (v + 1)], f[p][y] = 0, h[l] = b;
                                                }
                                            } else f[l] = n4(r[l], o[l], this._bitLength), f[p] = n4(r[p], o[p], this._bitLength), c = Math.max(f[l].length, c), c = Math.max(f[p].length, c);
                                        }
                                        var S = this.jpoint(null, null, null), _ = this._wnafT4;
                                        for(u = c; u >= 0; u--){
                                            for(var B = 0; u >= 0;){
                                                var I = !0;
                                                for(y = 0; y < i; y++)_[y] = 0 | f[y][u], 0 !== _[y] && (I = !1);
                                                if (!I) break;
                                                B++, u--;
                                            }
                                            if (u >= 0 && B++, S = S.dblp(B), u < 0) break;
                                            for(y = 0; y < i; y++){
                                                var O, E = _[y];
                                                0 !== E && (E > 0 ? O = h[y][E - 1 >> 1] : E < 0 && (O = h[y][-E - 1 >> 1].neg()), S = "affine" === O.type ? S.mixedAdd(O) : S.add(O));
                                            }
                                        }
                                        for(u = 0; u < i; u++)h[u] = null;
                                        return s ? S : S.toP();
                                    }, h4.BasePoint = f3, f3.prototype.eq = function() {
                                        throw new Error("Not implemented");
                                    }, f3.prototype.validate = function() {
                                        return this.curve.validate(this);
                                    }, h4.prototype.decodePoint = function(t, e) {
                                        t = s6.toArray(t, e);
                                        var r = this.p.byteLength();
                                        if ((4 === t[0] || 6 === t[0] || 7 === t[0]) && t.length - 1 == 2 * r) return 6 === t[0] ? o4(t[t.length - 1] % 2 == 0) : 7 === t[0] && o4(t[t.length - 1] % 2 == 1), this.point(t.slice(1, 1 + r), t.slice(1 + r, 1 + 2 * r));
                                        if ((2 === t[0] || 3 === t[0]) && t.length - 1 === r) return this.pointFromX(t.slice(1, 1 + r), 3 === t[0]);
                                        throw new Error("Unknown point format");
                                    }, f3.prototype.encodeCompressed = function(t) {
                                        return this.encode(t, !0);
                                    }, f3.prototype._encode = function(t) {
                                        var e = this.curve.p.byteLength(), r = this.getX().toArray("be", e);
                                        return t ? [
                                            this.getY().isEven() ? 2 : 3
                                        ].concat(r) : [
                                            4
                                        ].concat(r, this.getY().toArray("be", e));
                                    }, f3.prototype.encode = function(t, e) {
                                        return s6.encode(this._encode(e), t);
                                    }, f3.prototype.precompute = function(t) {
                                        if (this.precomputed) return this;
                                        var e = {
                                            doubles: null,
                                            naf: null,
                                            beta: null
                                        };
                                        return e.naf = this._getNAFPoints(8), e.doubles = this._getDoubles(4, t), e.beta = this._getBeta(), this.precomputed = e, this;
                                    }, f3.prototype._hasDoubles = function(t) {
                                        if (!this.precomputed) return !1;
                                        var e = this.precomputed.doubles;
                                        return !!e && e.points.length >= Math.ceil((t.bitLength() + 1) / e.step);
                                    }, f3.prototype._getDoubles = function(t, e) {
                                        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                                        for(var r = [
                                            this
                                        ], i = this, s = 0; s < e; s += t){
                                            for(var n = 0; n < t; n++)i = i.dbl();
                                            r.push(i);
                                        }
                                        return {
                                            step: t,
                                            points: r
                                        };
                                    }, f3.prototype._getNAFPoints = function(t) {
                                        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                                        for(var e = [
                                            this
                                        ], r = (1 << t) - 1, i = 1 === r ? null : this.dbl(), s = 1; s < r; s++)e[s] = e[s - 1].add(i);
                                        return {
                                            wnd: t,
                                            points: e
                                        };
                                    }, f3.prototype._getBeta = function() {
                                        return null;
                                    }, f3.prototype.dblp = function(t) {
                                        for(var e = this, r = 0; r < t; r++)e = e.dbl();
                                        return e;
                                    };
                                },
                                104: function _(t, e, r) {
                                    "use strict";
                                    var i = e;
                                    i.base = r(15), i["short"] = r(505);
                                },
                                505: function _(t34, e15, r9) {
                                    "use strict";
                                    var i10 = r9(359), s7 = r9(550), n5 = r9(378), a12 = r9(15), o5 = i10.assert;
                                    function h5(t) {
                                        a12.call(this, "short", t), this.a = new s7(t.a, 16).toRed(this.red), this.b = new s7(t.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(t), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
                                    }
                                    function f4(t, e, r, i) {
                                        a12.BasePoint.call(this, t, "affine"), null === e && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new s7(e, 16), this.y = new s7(r, 16), i && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
                                    }
                                    function c5(t, e, r, i) {
                                        a12.BasePoint.call(this, t, "jacobian"), null === e && null === r && null === i ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new s7(0)) : (this.x = new s7(e, 16), this.y = new s7(r, 16), this.z = new s7(i, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
                                    }
                                    n5(h5, a12), t34.exports = h5, h5.prototype._getEndomorphism = function(t35) {
                                        if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) {
                                            var e, r;
                                            if (t35.beta) e = new s7(t35.beta, 16).toRed(this.red);
                                            else {
                                                var i = this._getEndoRoots(this.p);
                                                e = (e = i[0].cmp(i[1]) < 0 ? i[0] : i[1]).toRed(this.red);
                                            }
                                            if (t35.lambda) r = new s7(t35.lambda, 16);
                                            else {
                                                var n = this._getEndoRoots(this.n);
                                                0 === this.g.mul(n[0]).x.cmp(this.g.x.redMul(e)) ? r = n[0] : (r = n[1], o5(0 === this.g.mul(r).x.cmp(this.g.x.redMul(e))));
                                            }
                                            return {
                                                beta: e,
                                                lambda: r,
                                                basis: t35.basis ? t35.basis.map(function(t) {
                                                    return {
                                                        a: new s7(t.a, 16),
                                                        b: new s7(t.b, 16)
                                                    };
                                                }) : this._getEndoBasis(r)
                                            };
                                        }
                                    }, h5.prototype._getEndoRoots = function(t) {
                                        var e = t === this.p ? this.red : s7.mont(t), r = new s7(2).toRed(e).redInvm(), i = r.redNeg(), n = new s7(3).toRed(e).redNeg().redSqrt().redMul(r);
                                        return [
                                            i.redAdd(n).fromRed(),
                                            i.redSub(n).fromRed()
                                        ];
                                    }, h5.prototype._getEndoBasis = function(t) {
                                        for(var e, r, i, n, a, o, h, f, c, u = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), d = t, l = this.n.clone(), p = new s7(1), b = new s7(0), m = new s7(0), g = new s7(1), y = 0; 0 !== d.cmpn(0);){
                                            var w = l.div(d);
                                            f = l.sub(w.mul(d)), c = m.sub(w.mul(p));
                                            var v = g.sub(w.mul(b));
                                            if (!i && f.cmp(u) < 0) e = h.neg(), r = p, i = f.neg(), n = c;
                                            else if (i && 2 == ++y) break;
                                            h = f, l = d, d = f, m = p, p = c, g = b, b = v;
                                        }
                                        a = f.neg(), o = c;
                                        var S = i.sqr().add(n.sqr());
                                        return a.sqr().add(o.sqr()).cmp(S) >= 0 && (a = e, o = r), i.negative && (i = i.neg(), n = n.neg()), a.negative && (a = a.neg(), o = o.neg()), [
                                            {
                                                a: i,
                                                b: n
                                            },
                                            {
                                                a: a,
                                                b: o
                                            }
                                        ];
                                    }, h5.prototype._endoSplit = function(t) {
                                        var e = this.endo.basis, r = e[0], i = e[1], s = i.b.mul(t).divRound(this.n), n = r.b.neg().mul(t).divRound(this.n), a = s.mul(r.a), o = n.mul(i.a), h = s.mul(r.b), f = n.mul(i.b);
                                        return {
                                            k1: t.sub(a).sub(o),
                                            k2: h.add(f).neg()
                                        };
                                    }, h5.prototype.pointFromX = function(t, e) {
                                        (t = new s7(t, 16)).red || (t = t.toRed(this.red));
                                        var r = t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b), i = r.redSqrt();
                                        if (0 !== i.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
                                        var n = i.fromRed().isOdd();
                                        return (e && !n || !e && n) && (i = i.redNeg()), this.point(t, i);
                                    }, h5.prototype.validate = function(t) {
                                        if (t.inf) return !0;
                                        var e = t.x, r = t.y, i = this.a.redMul(e), s = e.redSqr().redMul(e).redIAdd(i).redIAdd(this.b);
                                        return 0 === r.redSqr().redISub(s).cmpn(0);
                                    }, h5.prototype._endoWnafMulAdd = function(t, e, r) {
                                        for(var i = this._endoWnafT1, s = this._endoWnafT2, n = 0; n < t.length; n++){
                                            var a = this._endoSplit(e[n]), o = t[n], h = o._getBeta();
                                            a.k1.negative && (a.k1.ineg(), o = o.neg(!0)), a.k2.negative && (a.k2.ineg(), h = h.neg(!0)), i[2 * n] = o, i[2 * n + 1] = h, s[2 * n] = a.k1, s[2 * n + 1] = a.k2;
                                        }
                                        for(var f = this._wnafMulAdd(1, i, s, 2 * n, r), c = 0; c < 2 * n; c++)i[c] = null, s[c] = null;
                                        return f;
                                    }, n5(f4, a12.BasePoint), h5.prototype.point = function(t, e, r) {
                                        return new f4(this, t, e, r);
                                    }, h5.prototype.pointFromJSON = function(t, e) {
                                        return f4.fromJSON(this, t, e);
                                    }, f4.prototype._getBeta = function() {
                                        if (this.curve.endo) {
                                            var t36 = this.precomputed;
                                            if (t36 && t36.beta) return t36.beta;
                                            var e = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                                            if (t36) {
                                                var r = this.curve, i = function i(t) {
                                                    return r.point(t.x.redMul(r.endo.beta), t.y);
                                                };
                                                t36.beta = e, e.precomputed = {
                                                    beta: null,
                                                    naf: t36.naf && {
                                                        wnd: t36.naf.wnd,
                                                        points: t36.naf.points.map(i)
                                                    },
                                                    doubles: t36.doubles && {
                                                        step: t36.doubles.step,
                                                        points: t36.doubles.points.map(i)
                                                    }
                                                };
                                            }
                                            return e;
                                        }
                                    }, f4.prototype.toJSON = function() {
                                        return this.precomputed ? [
                                            this.x,
                                            this.y,
                                            this.precomputed && {
                                                doubles: this.precomputed.doubles && {
                                                    step: this.precomputed.doubles.step,
                                                    points: this.precomputed.doubles.points.slice(1)
                                                },
                                                naf: this.precomputed.naf && {
                                                    wnd: this.precomputed.naf.wnd,
                                                    points: this.precomputed.naf.points.slice(1)
                                                }
                                            }
                                        ] : [
                                            this.x,
                                            this.y
                                        ];
                                    }, f4.fromJSON = function(t, e16, r) {
                                        "string" == typeof e16 && (e16 = JSON.parse(e16));
                                        var i = t.point(e16[0], e16[1], r);
                                        if (!e16[2]) return i;
                                        function s(e) {
                                            return t.point(e[0], e[1], r);
                                        }
                                        var n = e16[2];
                                        return i.precomputed = {
                                            beta: null,
                                            doubles: n.doubles && {
                                                step: n.doubles.step,
                                                points: [
                                                    i
                                                ].concat(n.doubles.points.map(s))
                                            },
                                            naf: n.naf && {
                                                wnd: n.naf.wnd,
                                                points: [
                                                    i
                                                ].concat(n.naf.points.map(s))
                                            }
                                        }, i;
                                    }, f4.prototype.inspect = function() {
                                        return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
                                    }, f4.prototype.isInfinity = function() {
                                        return this.inf;
                                    }, f4.prototype.add = function(t) {
                                        if (this.inf) return t;
                                        if (t.inf) return this;
                                        if (this.eq(t)) return this.dbl();
                                        if (this.neg().eq(t)) return this.curve.point(null, null);
                                        if (0 === this.x.cmp(t.x)) return this.curve.point(null, null);
                                        var e = this.y.redSub(t.y);
                                        0 !== e.cmpn(0) && (e = e.redMul(this.x.redSub(t.x).redInvm()));
                                        var r = e.redSqr().redISub(this.x).redISub(t.x), i = e.redMul(this.x.redSub(r)).redISub(this.y);
                                        return this.curve.point(r, i);
                                    }, f4.prototype.dbl = function() {
                                        if (this.inf) return this;
                                        var t = this.y.redAdd(this.y);
                                        if (0 === t.cmpn(0)) return this.curve.point(null, null);
                                        var e = this.curve.a, r = this.x.redSqr(), i = t.redInvm(), s = r.redAdd(r).redIAdd(r).redIAdd(e).redMul(i), n = s.redSqr().redISub(this.x.redAdd(this.x)), a = s.redMul(this.x.redSub(n)).redISub(this.y);
                                        return this.curve.point(n, a);
                                    }, f4.prototype.getX = function() {
                                        return this.x.fromRed();
                                    }, f4.prototype.getY = function() {
                                        return this.y.fromRed();
                                    }, f4.prototype.mul = function(t) {
                                        return t = new s7(t, 16), this.isInfinity() ? this : this._hasDoubles(t) ? this.curve._fixedNafMul(this, t) : this.curve.endo ? this.curve._endoWnafMulAdd([
                                            this
                                        ], [
                                            t
                                        ]) : this.curve._wnafMul(this, t);
                                    }, f4.prototype.mulAdd = function(t, e, r) {
                                        var i = [
                                            this,
                                            e
                                        ], s = [
                                            t,
                                            r
                                        ];
                                        return this.curve.endo ? this.curve._endoWnafMulAdd(i, s) : this.curve._wnafMulAdd(1, i, s, 2);
                                    }, f4.prototype.jmulAdd = function(t, e, r) {
                                        var i = [
                                            this,
                                            e
                                        ], s = [
                                            t,
                                            r
                                        ];
                                        return this.curve.endo ? this.curve._endoWnafMulAdd(i, s, !0) : this.curve._wnafMulAdd(1, i, s, 2, !0);
                                    }, f4.prototype.eq = function(t) {
                                        return this === t || this.inf === t.inf && (this.inf || 0 === this.x.cmp(t.x) && 0 === this.y.cmp(t.y));
                                    }, f4.prototype.neg = function(t38) {
                                        if (this.inf) return this;
                                        var e = this.curve.point(this.x, this.y.redNeg());
                                        if (t38 && this.precomputed) {
                                            var r = this.precomputed, i = function i(t) {
                                                return t.neg();
                                            };
                                            e.precomputed = {
                                                naf: r.naf && {
                                                    wnd: r.naf.wnd,
                                                    points: r.naf.points.map(i)
                                                },
                                                doubles: r.doubles && {
                                                    step: r.doubles.step,
                                                    points: r.doubles.points.map(i)
                                                }
                                            };
                                        }
                                        return e;
                                    }, f4.prototype.toJ = function() {
                                        return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
                                    }, n5(c5, a12.BasePoint), h5.prototype.jpoint = function(t, e, r) {
                                        return new c5(this, t, e, r);
                                    }, c5.prototype.toP = function() {
                                        if (this.isInfinity()) return this.curve.point(null, null);
                                        var t = this.z.redInvm(), e = t.redSqr(), r = this.x.redMul(e), i = this.y.redMul(e).redMul(t);
                                        return this.curve.point(r, i);
                                    }, c5.prototype.neg = function() {
                                        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                                    }, c5.prototype.add = function(t) {
                                        if (this.isInfinity()) return t;
                                        if (t.isInfinity()) return this;
                                        var e = t.z.redSqr(), r = this.z.redSqr(), i = this.x.redMul(e), s = t.x.redMul(r), n = this.y.redMul(e.redMul(t.z)), a = t.y.redMul(r.redMul(this.z)), o = i.redSub(s), h = n.redSub(a);
                                        if (0 === o.cmpn(0)) return 0 !== h.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                                        var f = o.redSqr(), c = f.redMul(o), u = i.redMul(f), d = h.redSqr().redIAdd(c).redISub(u).redISub(u), l = h.redMul(u.redISub(d)).redISub(n.redMul(c)), p = this.z.redMul(t.z).redMul(o);
                                        return this.curve.jpoint(d, l, p);
                                    }, c5.prototype.mixedAdd = function(t) {
                                        if (this.isInfinity()) return t.toJ();
                                        if (t.isInfinity()) return this;
                                        var e = this.z.redSqr(), r = this.x, i = t.x.redMul(e), s = this.y, n = t.y.redMul(e).redMul(this.z), a = r.redSub(i), o = s.redSub(n);
                                        if (0 === a.cmpn(0)) return 0 !== o.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                                        var h = a.redSqr(), f = h.redMul(a), c = r.redMul(h), u = o.redSqr().redIAdd(f).redISub(c).redISub(c), d = o.redMul(c.redISub(u)).redISub(s.redMul(f)), l = this.z.redMul(a);
                                        return this.curve.jpoint(u, d, l);
                                    }, c5.prototype.dblp = function(t) {
                                        if (0 === t) return this;
                                        if (this.isInfinity()) return this;
                                        if (!t) return this.dbl();
                                        if (this.curve.zeroA || this.curve.threeA) {
                                            for(var e = this, r = 0; r < t; r++)e = e.dbl();
                                            return e;
                                        }
                                        var i = this.curve.a, s = this.curve.tinv, n = this.x, a = this.y, o = this.z, h = o.redSqr().redSqr(), f = a.redAdd(a);
                                        for(r = 0; r < t; r++){
                                            var c = n.redSqr(), u = f.redSqr(), d = u.redSqr(), l = c.redAdd(c).redIAdd(c).redIAdd(i.redMul(h)), p = n.redMul(u), b = l.redSqr().redISub(p.redAdd(p)), m = p.redISub(b), g = l.redMul(m);
                                            g = g.redIAdd(g).redISub(d);
                                            var y = f.redMul(o);
                                            r + 1 < t && (h = h.redMul(d)), n = b, o = y, f = g;
                                        }
                                        return this.curve.jpoint(n, f.redMul(s), o);
                                    }, c5.prototype.dbl = function() {
                                        return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
                                    }, c5.prototype._zeroDbl = function() {
                                        var t, e, r;
                                        if (this.zOne) {
                                            var i = this.x.redSqr(), s = this.y.redSqr(), n = s.redSqr(), a = this.x.redAdd(s).redSqr().redISub(i).redISub(n);
                                            a = a.redIAdd(a);
                                            var o = i.redAdd(i).redIAdd(i), h = o.redSqr().redISub(a).redISub(a), f = n.redIAdd(n);
                                            f = (f = f.redIAdd(f)).redIAdd(f), t = h, e = o.redMul(a.redISub(h)).redISub(f), r = this.y.redAdd(this.y);
                                        } else {
                                            var c = this.x.redSqr(), u = this.y.redSqr(), d = u.redSqr(), l = this.x.redAdd(u).redSqr().redISub(c).redISub(d);
                                            l = l.redIAdd(l);
                                            var p = c.redAdd(c).redIAdd(c), b = p.redSqr(), m = d.redIAdd(d);
                                            m = (m = m.redIAdd(m)).redIAdd(m), t = b.redISub(l).redISub(l), e = p.redMul(l.redISub(t)).redISub(m), r = (r = this.y.redMul(this.z)).redIAdd(r);
                                        }
                                        return this.curve.jpoint(t, e, r);
                                    }, c5.prototype._threeDbl = function() {
                                        var t, e, r;
                                        if (this.zOne) {
                                            var i = this.x.redSqr(), s = this.y.redSqr(), n = s.redSqr(), a = this.x.redAdd(s).redSqr().redISub(i).redISub(n);
                                            a = a.redIAdd(a);
                                            var o = i.redAdd(i).redIAdd(i).redIAdd(this.curve.a), h = o.redSqr().redISub(a).redISub(a);
                                            t = h;
                                            var f = n.redIAdd(n);
                                            f = (f = f.redIAdd(f)).redIAdd(f), e = o.redMul(a.redISub(h)).redISub(f), r = this.y.redAdd(this.y);
                                        } else {
                                            var c = this.z.redSqr(), u = this.y.redSqr(), d = this.x.redMul(u), l = this.x.redSub(c).redMul(this.x.redAdd(c));
                                            l = l.redAdd(l).redIAdd(l);
                                            var p = d.redIAdd(d), b = (p = p.redIAdd(p)).redAdd(p);
                                            t = l.redSqr().redISub(b), r = this.y.redAdd(this.z).redSqr().redISub(u).redISub(c);
                                            var m = u.redSqr();
                                            m = (m = (m = m.redIAdd(m)).redIAdd(m)).redIAdd(m), e = l.redMul(p.redISub(t)).redISub(m);
                                        }
                                        return this.curve.jpoint(t, e, r);
                                    }, c5.prototype._dbl = function() {
                                        var t = this.curve.a, e = this.x, r = this.y, i = this.z, s = i.redSqr().redSqr(), n = e.redSqr(), a = r.redSqr(), o = n.redAdd(n).redIAdd(n).redIAdd(t.redMul(s)), h = e.redAdd(e), f = (h = h.redIAdd(h)).redMul(a), c = o.redSqr().redISub(f.redAdd(f)), u = f.redISub(c), d = a.redSqr();
                                        d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
                                        var l = o.redMul(u).redISub(d), p = r.redAdd(r).redMul(i);
                                        return this.curve.jpoint(c, l, p);
                                    }, c5.prototype.trpl = function() {
                                        if (!this.curve.zeroA) return this.dbl().add(this);
                                        var t = this.x.redSqr(), e = this.y.redSqr(), r = this.z.redSqr(), i = e.redSqr(), s = t.redAdd(t).redIAdd(t), n = s.redSqr(), a = this.x.redAdd(e).redSqr().redISub(t).redISub(i), o = (a = (a = (a = a.redIAdd(a)).redAdd(a).redIAdd(a)).redISub(n)).redSqr(), h = i.redIAdd(i);
                                        h = (h = (h = h.redIAdd(h)).redIAdd(h)).redIAdd(h);
                                        var f = s.redIAdd(a).redSqr().redISub(n).redISub(o).redISub(h), c = e.redMul(f);
                                        c = (c = c.redIAdd(c)).redIAdd(c);
                                        var u = this.x.redMul(o).redISub(c);
                                        u = (u = u.redIAdd(u)).redIAdd(u);
                                        var d = this.y.redMul(f.redMul(h.redISub(f)).redISub(a.redMul(o)));
                                        d = (d = (d = d.redIAdd(d)).redIAdd(d)).redIAdd(d);
                                        var l = this.z.redAdd(a).redSqr().redISub(r).redISub(o);
                                        return this.curve.jpoint(u, d, l);
                                    }, c5.prototype.mul = function(t, e) {
                                        return t = new s7(t, e), this.curve._wnafMul(this, t);
                                    }, c5.prototype.eq = function(t) {
                                        if ("affine" === t.type) return this.eq(t.toJ());
                                        if (this === t) return !0;
                                        var e = this.z.redSqr(), r = t.z.redSqr();
                                        if (0 !== this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0)) return !1;
                                        var i = e.redMul(this.z), s = r.redMul(t.z);
                                        return 0 === this.y.redMul(s).redISub(t.y.redMul(i)).cmpn(0);
                                    }, c5.prototype.eqXToP = function(t) {
                                        var e = this.z.redSqr(), r = t.toRed(this.curve.red).redMul(e);
                                        if (0 === this.x.cmp(r)) return !0;
                                        for(var i = t.clone(), s = this.curve.redN.redMul(e);;){
                                            if (i.iadd(this.curve.n), i.cmp(this.curve.p) >= 0) return !1;
                                            if (r.redIAdd(s), 0 === this.x.cmp(r)) return !0;
                                        }
                                    }, c5.prototype.inspect = function() {
                                        return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
                                    }, c5.prototype.isInfinity = function() {
                                        return 0 === this.z.cmpn(0);
                                    };
                                },
                                626: function _(t39, e, r) {
                                    "use strict";
                                    var i, s, n, a = e, o = r(715), h = r(104), f = r(359).assert;
                                    function c(t) {
                                        if ("short" !== t.type) throw new Error("invalid curve type");
                                        this.curve = new h["short"](t), this.g = this.curve.g, this.n = this.curve.n, this.hash = t.hash, f(this.g.validate(), "Invalid curve"), f(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                                    }
                                    a.PresetCurve = c;
                                    try {
                                        i = r(59);
                                    } catch (t40) {
                                        i = void 0;
                                    }
                                    s = "secp256k1", n = {
                                        type: "short",
                                        prime: "k256",
                                        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                                        a: "0",
                                        b: "7",
                                        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                                        h: "1",
                                        hash: o.sha256,
                                        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                                        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                                        basis: [
                                            {
                                                a: "3086d221a7d46bcde86c90e49284eb15",
                                                b: "-e4437ed6010e88286f547fa90abfe4c3"
                                            },
                                            {
                                                a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                                                b: "3086d221a7d46bcde86c90e49284eb15"
                                            }
                                        ],
                                        gRed: !1,
                                        g: [
                                            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                                            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                                            i
                                        ]
                                    }, Object.defineProperty(a, s, {
                                        configurable: !0,
                                        enumerable: !0,
                                        get: function get() {
                                            var t = new c(n);
                                            return Object.defineProperty(a, s, {
                                                configurable: !0,
                                                enumerable: !0,
                                                value: t
                                            }), t;
                                        }
                                    });
                                },
                                630: function _(t41, e17, r10) {
                                    "use strict";
                                    var i11 = r10(550), s8 = r10(156), n6 = r10(359), a13 = r10(626), o6 = r10(931), h6 = n6.assert, f5 = r10(119), c = r10(911);
                                    function u5(t) {
                                        if (!(this instanceof u5)) return new u5(t);
                                        "string" == typeof t && (h6(a13.hasOwnProperty(t), "Unknown curve " + t), t = a13[t]), t instanceof a13.PresetCurve && (t = {
                                            curve: t
                                        }), this.curve = t.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = t.curve.g, this.g.precompute(t.curve.n.bitLength() + 1), this.hash = t.hash || t.curve.hash;
                                    }
                                    t41.exports = u5, u5.prototype.keyPair = function(t) {
                                        return new f5(this, t);
                                    }, u5.prototype.keyFromPrivate = function(t, e) {
                                        return f5.fromPrivate(this, t, e);
                                    }, u5.prototype.keyFromPublic = function(t, e) {
                                        return f5.fromPublic(this, t, e);
                                    }, u5.prototype.genKeyPair = function(t) {
                                        t || (t = {});
                                        for(var e = new s8({
                                            hash: this.hash,
                                            pers: t.pers,
                                            persEnc: t.persEnc || "utf8",
                                            entropy: t.entropy || o6(this.hash.hmacStrength),
                                            entropyEnc: t.entropy && t.entropyEnc || "utf8",
                                            nonce: this.n.toArray()
                                        }), r = this.n.byteLength(), n = this.n.sub(new i11(2));;){
                                            var a = new i11(e.generate(r));
                                            if (!(a.cmp(n) > 0)) return a.iaddn(1), this.keyFromPrivate(a);
                                        }
                                    }, u5.prototype._truncateToN = function(t, e) {
                                        var r = 8 * t.byteLength() - this.n.bitLength();
                                        return r > 0 && (t = t.ushrn(r)), !e && t.cmp(this.n) >= 0 ? t.sub(this.n) : t;
                                    }, u5.prototype.sign = function(t, e, r, n) {
                                        "object" == _typeof(r) && (n = r, r = null), n || (n = {}), e = this.keyFromPrivate(e, r), t = this._truncateToN(new i11(t, 16));
                                        for(var a = this.n.byteLength(), o = e.getPrivate().toArray("be", a), h = t.toArray("be", a), f = new s8({
                                            hash: this.hash,
                                            entropy: o,
                                            nonce: h,
                                            pers: n.pers,
                                            persEnc: n.persEnc || "utf8"
                                        }), u = this.n.sub(new i11(1)), d = 0;; d++){
                                            var l = n.k ? n.k(d) : new i11(f.generate(this.n.byteLength()));
                                            if (!((l = this._truncateToN(l, !0)).cmpn(1) <= 0 || l.cmp(u) >= 0)) {
                                                var p = this.g.mul(l);
                                                if (!p.isInfinity()) {
                                                    var b = p.getX(), m = b.umod(this.n);
                                                    if (0 !== m.cmpn(0)) {
                                                        var g = l.invm(this.n).mul(m.mul(e.getPrivate()).iadd(t));
                                                        if (0 !== (g = g.umod(this.n)).cmpn(0)) {
                                                            var y = (p.getY().isOdd() ? 1 : 0) | (0 !== b.cmp(m) ? 2 : 0);
                                                            return n.canonical && g.cmp(this.nh) > 0 && (g = this.n.sub(g), y ^= 1), new c({
                                                                r: m,
                                                                s: g,
                                                                recoveryParam: y
                                                            });
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }, u5.prototype.verify = function(t, e, r, s) {
                                        t = this._truncateToN(new i11(t, 16)), r = this.keyFromPublic(r, s);
                                        var n = (e = new c(e, "hex")).r, a = e.s;
                                        if (n.cmpn(1) < 0 || n.cmp(this.n) >= 0) return !1;
                                        if (a.cmpn(1) < 0 || a.cmp(this.n) >= 0) return !1;
                                        var o, h = a.invm(this.n), f = h.mul(t).umod(this.n), u = h.mul(n).umod(this.n);
                                        return this.curve._maxwellTrick ? !(o = this.g.jmulAdd(f, r.getPublic(), u)).isInfinity() && o.eqXToP(n) : !(o = this.g.mulAdd(f, r.getPublic(), u)).isInfinity() && 0 === o.getX().umod(this.n).cmp(n);
                                    }, u5.prototype.recoverPubKey = function(t, e, r, s) {
                                        h6((3 & r) === r, "The recovery param is more than two bits"), e = new c(e, s);
                                        var n = this.n, a = new i11(t), o = e.r, f = e.s, u = 1 & r, d = r >> 1;
                                        if (o.cmp(this.curve.p.umod(this.curve.n)) >= 0 && d) throw new Error("Unable to find sencond key candinate");
                                        o = d ? this.curve.pointFromX(o.add(this.curve.n), u) : this.curve.pointFromX(o, u);
                                        var l = e.r.invm(n), p = n.sub(a).mul(l).umod(n), b = f.mul(l).umod(n);
                                        return this.g.mulAdd(p, o, b);
                                    }, u5.prototype.getKeyRecoveryParam = function(t, e, r, i) {
                                        if (null !== (e = new c(e, i)).recoveryParam) return e.recoveryParam;
                                        for(var s = 0; s < 4; s++){
                                            var n;
                                            try {
                                                n = this.recoverPubKey(t, e, s);
                                            } catch (t) {
                                                continue;
                                            }
                                            if (n.eq(r)) return s;
                                        }
                                        throw new Error("Unable to find valid recovery factor");
                                    };
                                },
                                119: function _(t42, e18, r11) {
                                    "use strict";
                                    var i = r11(550), s = r11(359).assert;
                                    function n(t, e) {
                                        this.ec = t, this.priv = null, this.pub = null, e.priv && this._importPrivate(e.priv, e.privEnc), e.pub && this._importPublic(e.pub, e.pubEnc);
                                    }
                                    t42.exports = n, n.fromPublic = function(t, e, r) {
                                        return e instanceof n ? e : new n(t, {
                                            pub: e,
                                            pubEnc: r
                                        });
                                    }, n.fromPrivate = function(t, e, r) {
                                        return e instanceof n ? e : new n(t, {
                                            priv: e,
                                            privEnc: r
                                        });
                                    }, n.prototype.validate = function() {
                                        var t = this.getPublic();
                                        return t.isInfinity() ? {
                                            result: !1,
                                            reason: "Invalid public key"
                                        } : t.validate() ? t.mul(this.ec.curve.n).isInfinity() ? {
                                            result: !0,
                                            reason: null
                                        } : {
                                            result: !1,
                                            reason: "Public key * N != O"
                                        } : {
                                            result: !1,
                                            reason: "Public key is not a point"
                                        };
                                    }, n.prototype.getPublic = function(t, e) {
                                        return "string" == typeof t && (e = t, t = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), e ? this.pub.encode(e, t) : this.pub;
                                    }, n.prototype.getPrivate = function(t) {
                                        return "hex" === t ? this.priv.toString(16, 2) : this.priv;
                                    }, n.prototype._importPrivate = function(t, e) {
                                        this.priv = new i(t, e || 16), this.priv = this.priv.umod(this.ec.curve.n);
                                    }, n.prototype._importPublic = function(t, e) {
                                        if (t.x || t.y) return "mont" === this.ec.curve.type ? s(t.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || s(t.x && t.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(t.x, t.y));
                                        this.pub = this.ec.curve.decodePoint(t, e);
                                    }, n.prototype.derive = function(t) {
                                        return t.mul(this.priv).getX();
                                    }, n.prototype.sign = function(t, e, r) {
                                        return this.ec.sign(t, this, e, r);
                                    }, n.prototype.verify = function(t, e) {
                                        return this.ec.verify(t, e, this);
                                    }, n.prototype.inspect = function() {
                                        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
                                    };
                                },
                                911: function _(t43, e19, r12) {
                                    "use strict";
                                    var i12 = r12(550), s9 = r12(359), n7 = s9.assert;
                                    function a14(t, e) {
                                        if (t instanceof a14) return t;
                                        this._importDER(t, e) || (n7(t.r && t.s, "Signature without r or s"), this.r = new i12(t.r, 16), this.s = new i12(t.s, 16), void 0 === t.recoveryParam ? this.recoveryParam = null : this.recoveryParam = t.recoveryParam);
                                    }
                                    function o() {
                                        this.place = 0;
                                    }
                                    function h(t, e) {
                                        var r = t[e.place++];
                                        if (!(128 & r)) return r;
                                        for(var i = 15 & r, s = 0, n = 0, a = e.place; n < i; n++, a++)s <<= 8, s |= t[a];
                                        return e.place = a, s;
                                    }
                                    function f6(t) {
                                        for(var e = 0, r = t.length - 1; !t[e] && !(128 & t[e + 1]) && e < r;)e++;
                                        return 0 === e ? t : t.slice(e);
                                    }
                                    function c6(t, e) {
                                        if (e < 128) t.push(e);
                                        else {
                                            var r = 1 + (Math.log(e) / Math.LN2 >>> 3);
                                            for(t.push(128 | r); --r;)t.push(e >>> (r << 3) & 255);
                                            t.push(e);
                                        }
                                    }
                                    t43.exports = a14, a14.prototype._importDER = function(t, e) {
                                        t = s9.toArray(t, e);
                                        var r = new o();
                                        if (48 !== t[r.place++]) return !1;
                                        if (h(t, r) + r.place !== t.length) return !1;
                                        if (2 !== t[r.place++]) return !1;
                                        var n = h(t, r), a = t.slice(r.place, n + r.place);
                                        if (r.place += n, 2 !== t[r.place++]) return !1;
                                        var f = h(t, r);
                                        if (t.length !== f + r.place) return !1;
                                        var c = t.slice(r.place, f + r.place);
                                        return 0 === a[0] && 128 & a[1] && (a = a.slice(1)), 0 === c[0] && 128 & c[1] && (c = c.slice(1)), this.r = new i12(a), this.s = new i12(c), this.recoveryParam = null, !0;
                                    }, a14.prototype.toDER = function(t) {
                                        var e = this.r.toArray(), r = this.s.toArray();
                                        for(128 & e[0] && (e = [
                                            0
                                        ].concat(e)), 128 & r[0] && (r = [
                                            0
                                        ].concat(r)), e = f6(e), r = f6(r); !(r[0] || 128 & r[1]);)r = r.slice(1);
                                        var i = [
                                            2
                                        ];
                                        c6(i, e.length), (i = i.concat(e)).push(2), c6(i, r.length);
                                        var n = i.concat(r), a = [
                                            48
                                        ];
                                        return c6(a, n.length), a = a.concat(n), s9.encode(a, t);
                                    };
                                },
                                59: function _(t) {
                                    t.exports = {
                                        doubles: {
                                            step: 4,
                                            points: [
                                                [
                                                    "e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a",
                                                    "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"
                                                ],
                                                [
                                                    "8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508",
                                                    "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"
                                                ],
                                                [
                                                    "175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739",
                                                    "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"
                                                ],
                                                [
                                                    "363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640",
                                                    "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"
                                                ],
                                                [
                                                    "8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c",
                                                    "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"
                                                ],
                                                [
                                                    "723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda",
                                                    "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"
                                                ],
                                                [
                                                    "eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa",
                                                    "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"
                                                ],
                                                [
                                                    "100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0",
                                                    "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"
                                                ],
                                                [
                                                    "e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d",
                                                    "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"
                                                ],
                                                [
                                                    "feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d",
                                                    "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"
                                                ],
                                                [
                                                    "da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1",
                                                    "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"
                                                ],
                                                [
                                                    "53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0",
                                                    "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"
                                                ],
                                                [
                                                    "8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047",
                                                    "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"
                                                ],
                                                [
                                                    "385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862",
                                                    "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"
                                                ],
                                                [
                                                    "6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7",
                                                    "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"
                                                ],
                                                [
                                                    "3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd",
                                                    "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"
                                                ],
                                                [
                                                    "85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83",
                                                    "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"
                                                ],
                                                [
                                                    "948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a",
                                                    "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"
                                                ],
                                                [
                                                    "6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8",
                                                    "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"
                                                ],
                                                [
                                                    "e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d",
                                                    "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"
                                                ],
                                                [
                                                    "e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725",
                                                    "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"
                                                ],
                                                [
                                                    "213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754",
                                                    "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"
                                                ],
                                                [
                                                    "4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c",
                                                    "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"
                                                ],
                                                [
                                                    "fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6",
                                                    "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"
                                                ],
                                                [
                                                    "76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39",
                                                    "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"
                                                ],
                                                [
                                                    "c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891",
                                                    "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"
                                                ],
                                                [
                                                    "d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b",
                                                    "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"
                                                ],
                                                [
                                                    "b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03",
                                                    "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"
                                                ],
                                                [
                                                    "e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d",
                                                    "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"
                                                ],
                                                [
                                                    "a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070",
                                                    "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"
                                                ],
                                                [
                                                    "90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4",
                                                    "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"
                                                ],
                                                [
                                                    "8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da",
                                                    "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"
                                                ],
                                                [
                                                    "e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11",
                                                    "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"
                                                ],
                                                [
                                                    "8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e",
                                                    "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"
                                                ],
                                                [
                                                    "e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41",
                                                    "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"
                                                ],
                                                [
                                                    "b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef",
                                                    "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"
                                                ],
                                                [
                                                    "d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8",
                                                    "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"
                                                ],
                                                [
                                                    "324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d",
                                                    "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"
                                                ],
                                                [
                                                    "4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96",
                                                    "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"
                                                ],
                                                [
                                                    "9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd",
                                                    "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"
                                                ],
                                                [
                                                    "6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5",
                                                    "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"
                                                ],
                                                [
                                                    "a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266",
                                                    "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"
                                                ],
                                                [
                                                    "7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71",
                                                    "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"
                                                ],
                                                [
                                                    "928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac",
                                                    "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"
                                                ],
                                                [
                                                    "85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751",
                                                    "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"
                                                ],
                                                [
                                                    "ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e",
                                                    "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"
                                                ],
                                                [
                                                    "827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241",
                                                    "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"
                                                ],
                                                [
                                                    "eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3",
                                                    "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"
                                                ],
                                                [
                                                    "e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f",
                                                    "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"
                                                ],
                                                [
                                                    "1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19",
                                                    "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"
                                                ],
                                                [
                                                    "146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be",
                                                    "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"
                                                ],
                                                [
                                                    "fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9",
                                                    "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"
                                                ],
                                                [
                                                    "da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2",
                                                    "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"
                                                ],
                                                [
                                                    "a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13",
                                                    "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"
                                                ],
                                                [
                                                    "174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c",
                                                    "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"
                                                ],
                                                [
                                                    "959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba",
                                                    "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"
                                                ],
                                                [
                                                    "d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151",
                                                    "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"
                                                ],
                                                [
                                                    "64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073",
                                                    "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"
                                                ],
                                                [
                                                    "8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458",
                                                    "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"
                                                ],
                                                [
                                                    "13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b",
                                                    "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"
                                                ],
                                                [
                                                    "bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366",
                                                    "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"
                                                ],
                                                [
                                                    "8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa",
                                                    "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"
                                                ],
                                                [
                                                    "8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0",
                                                    "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"
                                                ],
                                                [
                                                    "dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787",
                                                    "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"
                                                ],
                                                [
                                                    "f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e",
                                                    "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"
                                                ]
                                            ]
                                        },
                                        naf: {
                                            wnd: 7,
                                            points: [
                                                [
                                                    "f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9",
                                                    "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"
                                                ],
                                                [
                                                    "2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4",
                                                    "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"
                                                ],
                                                [
                                                    "5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc",
                                                    "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"
                                                ],
                                                [
                                                    "acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe",
                                                    "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"
                                                ],
                                                [
                                                    "774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb",
                                                    "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"
                                                ],
                                                [
                                                    "f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8",
                                                    "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"
                                                ],
                                                [
                                                    "d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e",
                                                    "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"
                                                ],
                                                [
                                                    "defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34",
                                                    "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"
                                                ],
                                                [
                                                    "2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c",
                                                    "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"
                                                ],
                                                [
                                                    "352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5",
                                                    "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"
                                                ],
                                                [
                                                    "2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f",
                                                    "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"
                                                ],
                                                [
                                                    "9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714",
                                                    "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"
                                                ],
                                                [
                                                    "daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729",
                                                    "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"
                                                ],
                                                [
                                                    "c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db",
                                                    "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"
                                                ],
                                                [
                                                    "6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4",
                                                    "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"
                                                ],
                                                [
                                                    "1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5",
                                                    "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"
                                                ],
                                                [
                                                    "605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479",
                                                    "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"
                                                ],
                                                [
                                                    "62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d",
                                                    "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"
                                                ],
                                                [
                                                    "80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f",
                                                    "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"
                                                ],
                                                [
                                                    "7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb",
                                                    "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"
                                                ],
                                                [
                                                    "d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9",
                                                    "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"
                                                ],
                                                [
                                                    "49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963",
                                                    "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"
                                                ],
                                                [
                                                    "77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74",
                                                    "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"
                                                ],
                                                [
                                                    "f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530",
                                                    "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"
                                                ],
                                                [
                                                    "463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b",
                                                    "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"
                                                ],
                                                [
                                                    "f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247",
                                                    "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"
                                                ],
                                                [
                                                    "caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1",
                                                    "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"
                                                ],
                                                [
                                                    "2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120",
                                                    "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"
                                                ],
                                                [
                                                    "7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435",
                                                    "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"
                                                ],
                                                [
                                                    "754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18",
                                                    "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"
                                                ],
                                                [
                                                    "e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8",
                                                    "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"
                                                ],
                                                [
                                                    "186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb",
                                                    "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"
                                                ],
                                                [
                                                    "df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f",
                                                    "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"
                                                ],
                                                [
                                                    "5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143",
                                                    "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"
                                                ],
                                                [
                                                    "290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba",
                                                    "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"
                                                ],
                                                [
                                                    "af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45",
                                                    "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"
                                                ],
                                                [
                                                    "766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a",
                                                    "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"
                                                ],
                                                [
                                                    "59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e",
                                                    "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"
                                                ],
                                                [
                                                    "f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8",
                                                    "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"
                                                ],
                                                [
                                                    "7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c",
                                                    "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"
                                                ],
                                                [
                                                    "948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519",
                                                    "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"
                                                ],
                                                [
                                                    "7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab",
                                                    "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"
                                                ],
                                                [
                                                    "3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca",
                                                    "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"
                                                ],
                                                [
                                                    "d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf",
                                                    "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"
                                                ],
                                                [
                                                    "1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610",
                                                    "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"
                                                ],
                                                [
                                                    "733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4",
                                                    "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"
                                                ],
                                                [
                                                    "15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c",
                                                    "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"
                                                ],
                                                [
                                                    "a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940",
                                                    "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"
                                                ],
                                                [
                                                    "e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980",
                                                    "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"
                                                ],
                                                [
                                                    "311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3",
                                                    "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"
                                                ],
                                                [
                                                    "34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf",
                                                    "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"
                                                ],
                                                [
                                                    "f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63",
                                                    "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"
                                                ],
                                                [
                                                    "d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448",
                                                    "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"
                                                ],
                                                [
                                                    "32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf",
                                                    "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"
                                                ],
                                                [
                                                    "7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5",
                                                    "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"
                                                ],
                                                [
                                                    "ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6",
                                                    "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"
                                                ],
                                                [
                                                    "16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5",
                                                    "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"
                                                ],
                                                [
                                                    "eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99",
                                                    "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"
                                                ],
                                                [
                                                    "78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51",
                                                    "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"
                                                ],
                                                [
                                                    "494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5",
                                                    "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"
                                                ],
                                                [
                                                    "a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5",
                                                    "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"
                                                ],
                                                [
                                                    "c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997",
                                                    "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"
                                                ],
                                                [
                                                    "841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881",
                                                    "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"
                                                ],
                                                [
                                                    "5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5",
                                                    "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"
                                                ],
                                                [
                                                    "36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66",
                                                    "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"
                                                ],
                                                [
                                                    "336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726",
                                                    "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"
                                                ],
                                                [
                                                    "8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede",
                                                    "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"
                                                ],
                                                [
                                                    "1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94",
                                                    "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"
                                                ],
                                                [
                                                    "85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31",
                                                    "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"
                                                ],
                                                [
                                                    "29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51",
                                                    "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"
                                                ],
                                                [
                                                    "a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252",
                                                    "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"
                                                ],
                                                [
                                                    "4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5",
                                                    "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"
                                                ],
                                                [
                                                    "d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b",
                                                    "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"
                                                ],
                                                [
                                                    "ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4",
                                                    "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"
                                                ],
                                                [
                                                    "af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f",
                                                    "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"
                                                ],
                                                [
                                                    "e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889",
                                                    "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"
                                                ],
                                                [
                                                    "591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246",
                                                    "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"
                                                ],
                                                [
                                                    "11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984",
                                                    "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"
                                                ],
                                                [
                                                    "3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a",
                                                    "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"
                                                ],
                                                [
                                                    "cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030",
                                                    "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"
                                                ],
                                                [
                                                    "c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197",
                                                    "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"
                                                ],
                                                [
                                                    "c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593",
                                                    "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"
                                                ],
                                                [
                                                    "a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef",
                                                    "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"
                                                ],
                                                [
                                                    "347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38",
                                                    "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"
                                                ],
                                                [
                                                    "da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a",
                                                    "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"
                                                ],
                                                [
                                                    "c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111",
                                                    "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"
                                                ],
                                                [
                                                    "4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502",
                                                    "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"
                                                ],
                                                [
                                                    "3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea",
                                                    "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"
                                                ],
                                                [
                                                    "cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26",
                                                    "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"
                                                ],
                                                [
                                                    "b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986",
                                                    "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"
                                                ],
                                                [
                                                    "d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e",
                                                    "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"
                                                ],
                                                [
                                                    "48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4",
                                                    "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"
                                                ],
                                                [
                                                    "dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda",
                                                    "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"
                                                ],
                                                [
                                                    "6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859",
                                                    "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"
                                                ],
                                                [
                                                    "e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f",
                                                    "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"
                                                ],
                                                [
                                                    "eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c",
                                                    "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"
                                                ],
                                                [
                                                    "13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942",
                                                    "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"
                                                ],
                                                [
                                                    "ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a",
                                                    "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"
                                                ],
                                                [
                                                    "b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80",
                                                    "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"
                                                ],
                                                [
                                                    "ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d",
                                                    "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"
                                                ],
                                                [
                                                    "8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1",
                                                    "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"
                                                ],
                                                [
                                                    "52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63",
                                                    "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"
                                                ],
                                                [
                                                    "e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352",
                                                    "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"
                                                ],
                                                [
                                                    "7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193",
                                                    "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"
                                                ],
                                                [
                                                    "5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00",
                                                    "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"
                                                ],
                                                [
                                                    "32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58",
                                                    "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"
                                                ],
                                                [
                                                    "e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7",
                                                    "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"
                                                ],
                                                [
                                                    "8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8",
                                                    "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"
                                                ],
                                                [
                                                    "4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e",
                                                    "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"
                                                ],
                                                [
                                                    "3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d",
                                                    "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"
                                                ],
                                                [
                                                    "674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b",
                                                    "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"
                                                ],
                                                [
                                                    "d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f",
                                                    "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"
                                                ],
                                                [
                                                    "30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6",
                                                    "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"
                                                ],
                                                [
                                                    "be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297",
                                                    "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"
                                                ],
                                                [
                                                    "93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a",
                                                    "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"
                                                ],
                                                [
                                                    "b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c",
                                                    "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"
                                                ],
                                                [
                                                    "d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52",
                                                    "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"
                                                ],
                                                [
                                                    "d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb",
                                                    "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"
                                                ],
                                                [
                                                    "463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065",
                                                    "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"
                                                ],
                                                [
                                                    "7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917",
                                                    "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"
                                                ],
                                                [
                                                    "74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9",
                                                    "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"
                                                ],
                                                [
                                                    "30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3",
                                                    "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"
                                                ],
                                                [
                                                    "9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57",
                                                    "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"
                                                ],
                                                [
                                                    "176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66",
                                                    "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"
                                                ],
                                                [
                                                    "75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8",
                                                    "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"
                                                ],
                                                [
                                                    "809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721",
                                                    "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"
                                                ],
                                                [
                                                    "1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180",
                                                    "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"
                                                ]
                                            ]
                                        }
                                    };
                                },
                                359: function _(t44, e20, r13) {
                                    "use strict";
                                    var i13 = e20, s10 = r13(550), n8 = r13(746), a15 = r13(504);
                                    i13.assert = n8, i13.toArray = a15.toArray, i13.zero2 = a15.zero2, i13.toHex = a15.toHex, i13.encode = a15.encode, i13.getNAF = function(t, e, r) {
                                        var i = new Array(Math.max(t.bitLength(), r) + 1);
                                        i.fill(0);
                                        for(var s = 1 << e + 1, n = t.clone(), a = 0; a < i.length; a++){
                                            var o, h = n.andln(s - 1);
                                            n.isOdd() ? (o = h > (s >> 1) - 1 ? (s >> 1) - h : h, n.isubn(o)) : o = 0, i[a] = o, n.iushrn(1);
                                        }
                                        return i;
                                    }, i13.getJSF = function(t, e) {
                                        var r = [
                                            [],
                                            []
                                        ];
                                        t = t.clone(), e = e.clone();
                                        for(var i = 0, s = 0; t.cmpn(-i) > 0 || e.cmpn(-s) > 0;){
                                            var n, a, o, h = t.andln(3) + i & 3, f = e.andln(3) + s & 3;
                                            3 === h && (h = -1), 3 === f && (f = -1), n = 0 == (1 & h) ? 0 : 3 != (o = t.andln(7) + i & 7) && 5 !== o || 2 !== f ? h : -h, r[0].push(n), a = 0 == (1 & f) ? 0 : 3 != (o = e.andln(7) + s & 7) && 5 !== o || 2 !== h ? f : -f, r[1].push(a), 2 * i === n + 1 && (i = 1 - i), 2 * s === a + 1 && (s = 1 - s), t.iushrn(1), e.iushrn(1);
                                        }
                                        return r;
                                    }, i13.cachedProperty = function(t, e, r) {
                                        var i = "_" + e;
                                        t.prototype[e] = function() {
                                            return void 0 !== this[i] ? this[i] : this[i] = r.call(this);
                                        };
                                    }, i13.parseBytes = function(t) {
                                        return "string" == typeof t ? i13.toArray(t, "hex") : t;
                                    }, i13.intFromLE = function(t) {
                                        return new s10(t, "hex", "le");
                                    };
                                },
                                60: function _(t) {
                                    "use strict";
                                    t.exports = {
                                        i8: "7.0.1"
                                    };
                                },
                                550: function _3(t45, e21, r14) {
                                    !function(t46, e22) {
                                        "use strict";
                                        function i14(t, e) {
                                            if (!t) throw new Error(e || "Assertion failed");
                                        }
                                        function s11(t, e) {
                                            t.super_ = e;
                                            var r = function r() {};
                                            r.prototype = e.prototype, t.prototype = new r(), t.prototype.constructor = t;
                                        }
                                        function n9(t, e, r) {
                                            if (n9.isBN(t)) return t;
                                            this.negative = 0, this.words = null, this.length = 0, this.red = null, null !== t && ("le" !== e && "be" !== e || (r = e, e = 10), this._init(t || 0, e || 10, r || "be"));
                                        }
                                        var a16;
                                        "object" == _typeof(t46) ? t46.exports = n9 : e22.BN = n9, n9.BN = n9, n9.wordSize = 26;
                                        try {
                                            a16 = "undefined" != typeof window && void 0 !== window.Buffer ? window.Buffer : r14(293).Buffer;
                                        } catch (t47) {}
                                        function o7(t, e) {
                                            var r = t.charCodeAt(e);
                                            return r >= 48 && r <= 57 ? r - 48 : r >= 65 && r <= 70 ? r - 55 : r >= 97 && r <= 102 ? r - 87 : void i14(!1, "Invalid character in " + t);
                                        }
                                        function h7(t, e, r) {
                                            var i = o7(t, r);
                                            return r - 1 >= e && (i |= o7(t, r - 1) << 4), i;
                                        }
                                        function f7(t, e, r, s) {
                                            for(var n = 0, a = 0, o = Math.min(t.length, r), h = e; h < o; h++){
                                                var f = t.charCodeAt(h) - 48;
                                                n *= s, a = f >= 49 ? f - 49 + 10 : f >= 17 ? f - 17 + 10 : f, i14(f >= 0 && a < s, "Invalid character"), n += a;
                                            }
                                            return n;
                                        }
                                        function c7(t, e) {
                                            t.words = e.words, t.length = e.length, t.negative = e.negative, t.red = e.red;
                                        }
                                        if (n9.isBN = function(t) {
                                            return t instanceof n9 || null !== t && "object" == _typeof(t) && t.constructor.wordSize === n9.wordSize && Array.isArray(t.words);
                                        }, n9.max = function(t, e) {
                                            return t.cmp(e) > 0 ? t : e;
                                        }, n9.min = function(t, e) {
                                            return t.cmp(e) < 0 ? t : e;
                                        }, n9.prototype._init = function(t, e, r) {
                                            if ("number" == typeof t) return this._initNumber(t, e, r);
                                            if ("object" == _typeof(t)) return this._initArray(t, e, r);
                                            "hex" === e && (e = 16), i14(e === (0 | e) && e >= 2 && e <= 36);
                                            var s = 0;
                                            "-" === (t = t.toString().replace(/\s+/g, ""))[0] && (s++, this.negative = 1), s < t.length && (16 === e ? this._parseHex(t, s, r) : (this._parseBase(t, e, s), "le" === r && this._initArray(this.toArray(), e, r)));
                                        }, n9.prototype._initNumber = function(t, e, r) {
                                            t < 0 && (this.negative = 1, t = -t), t < 67108864 ? (this.words = [
                                                67108863 & t
                                            ], this.length = 1) : t < 4503599627370496 ? (this.words = [
                                                67108863 & t,
                                                t / 67108864 & 67108863
                                            ], this.length = 2) : (i14(t < 9007199254740992), this.words = [
                                                67108863 & t,
                                                t / 67108864 & 67108863,
                                                1
                                            ], this.length = 3), "le" === r && this._initArray(this.toArray(), e, r);
                                        }, n9.prototype._initArray = function(t, e, r) {
                                            if (i14("number" == typeof t.length), t.length <= 0) return this.words = [
                                                0
                                            ], this.length = 1, this;
                                            this.length = Math.ceil(t.length / 3), this.words = new Array(this.length);
                                            for(var s = 0; s < this.length; s++)this.words[s] = 0;
                                            var n, a, o = 0;
                                            if ("be" === r) for(s = t.length - 1, n = 0; s >= 0; s -= 3)a = t[s] | t[s - 1] << 8 | t[s - 2] << 16, this.words[n] |= a << o & 67108863, this.words[n + 1] = a >>> 26 - o & 67108863, (o += 24) >= 26 && (o -= 26, n++);
                                            else if ("le" === r) for(s = 0, n = 0; s < t.length; s += 3)a = t[s] | t[s + 1] << 8 | t[s + 2] << 16, this.words[n] |= a << o & 67108863, this.words[n + 1] = a >>> 26 - o & 67108863, (o += 24) >= 26 && (o -= 26, n++);
                                            return this._strip();
                                        }, n9.prototype._parseHex = function(t, e, r) {
                                            this.length = Math.ceil((t.length - e) / 6), this.words = new Array(this.length);
                                            for(var i = 0; i < this.length; i++)this.words[i] = 0;
                                            var s, n = 0, a = 0;
                                            if ("be" === r) for(i = t.length - 1; i >= e; i -= 2)s = h7(t, e, i) << n, this.words[a] |= 67108863 & s, n >= 18 ? (n -= 18, a += 1, this.words[a] |= s >>> 26) : n += 8;
                                            else for(i = (t.length - e) % 2 == 0 ? e + 1 : e; i < t.length; i += 2)s = h7(t, e, i) << n, this.words[a] |= 67108863 & s, n >= 18 ? (n -= 18, a += 1, this.words[a] |= s >>> 26) : n += 8;
                                            this._strip();
                                        }, n9.prototype._parseBase = function(t, e, r) {
                                            this.words = [
                                                0
                                            ], this.length = 1;
                                            for(var i = 0, s = 1; s <= 67108863; s *= e)i++;
                                            i--, s = s / e | 0;
                                            for(var n = t.length - r, a = n % i, o = Math.min(n, n - a) + r, h = 0, c = r; c < o; c += i)h = f7(t, c, c + i, e), this.imuln(s), this.words[0] + h < 67108864 ? this.words[0] += h : this._iaddn(h);
                                            if (0 !== a) {
                                                var u = 1;
                                                for(h = f7(t, c, t.length, e), c = 0; c < a; c++)u *= e;
                                                this.imuln(u), this.words[0] + h < 67108864 ? this.words[0] += h : this._iaddn(h);
                                            }
                                            this._strip();
                                        }, n9.prototype.copy = function(t) {
                                            t.words = new Array(this.length);
                                            for(var e = 0; e < this.length; e++)t.words[e] = this.words[e];
                                            t.length = this.length, t.negative = this.negative, t.red = this.red;
                                        }, n9.prototype._move = function(t) {
                                            c7(t, this);
                                        }, n9.prototype.clone = function() {
                                            var t = new n9(null);
                                            return this.copy(t), t;
                                        }, n9.prototype._expand = function(t) {
                                            for(; this.length < t;)this.words[this.length++] = 0;
                                            return this;
                                        }, n9.prototype._strip = function() {
                                            for(; this.length > 1 && 0 === this.words[this.length - 1];)this.length--;
                                            return this._normSign();
                                        }, n9.prototype._normSign = function() {
                                            return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
                                        }, "undefined" != typeof Symbol && "function" == typeof Symbol["for"]) try {
                                            n9.prototype[Symbol["for"]("nodejs.util.inspect.custom")] = u6;
                                        } catch (t48) {
                                            n9.prototype.inspect = u6;
                                        }
                                        else n9.prototype.inspect = u6;
                                        function u6() {
                                            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                                        }
                                        var d4 = [
                                            "",
                                            "0",
                                            "00",
                                            "000",
                                            "0000",
                                            "00000",
                                            "000000",
                                            "0000000",
                                            "00000000",
                                            "000000000",
                                            "0000000000",
                                            "00000000000",
                                            "000000000000",
                                            "0000000000000",
                                            "00000000000000",
                                            "000000000000000",
                                            "0000000000000000",
                                            "00000000000000000",
                                            "000000000000000000",
                                            "0000000000000000000",
                                            "00000000000000000000",
                                            "000000000000000000000",
                                            "0000000000000000000000",
                                            "00000000000000000000000",
                                            "000000000000000000000000",
                                            "0000000000000000000000000"
                                        ], l4 = [
                                            0,
                                            0,
                                            25,
                                            16,
                                            12,
                                            11,
                                            10,
                                            9,
                                            8,
                                            8,
                                            7,
                                            7,
                                            7,
                                            7,
                                            6,
                                            6,
                                            6,
                                            6,
                                            6,
                                            6,
                                            6,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5,
                                            5
                                        ], p4 = [
                                            0,
                                            0,
                                            33554432,
                                            43046721,
                                            16777216,
                                            48828125,
                                            60466176,
                                            40353607,
                                            16777216,
                                            43046721,
                                            1e7,
                                            19487171,
                                            35831808,
                                            62748517,
                                            7529536,
                                            11390625,
                                            16777216,
                                            24137569,
                                            34012224,
                                            47045881,
                                            64e6,
                                            4084101,
                                            5153632,
                                            6436343,
                                            7962624,
                                            9765625,
                                            11881376,
                                            14348907,
                                            17210368,
                                            20511149,
                                            243e5,
                                            28629151,
                                            33554432,
                                            39135393,
                                            45435424,
                                            52521875,
                                            60466176
                                        ];
                                        function b11(t, e, r) {
                                            r.negative = e.negative ^ t.negative;
                                            var i = t.length + e.length | 0;
                                            r.length = i, i = i - 1 | 0;
                                            var s = 0 | t.words[0], n = 0 | e.words[0], a = s * n, o = 67108863 & a, h = a / 67108864 | 0;
                                            r.words[0] = o;
                                            for(var f = 1; f < i; f++){
                                                for(var c = h >>> 26, u = 67108863 & h, d = Math.min(f, e.length - 1), l = Math.max(0, f - t.length + 1); l <= d; l++){
                                                    var p = f - l | 0;
                                                    c += (a = (s = 0 | t.words[p]) * (n = 0 | e.words[l]) + u) / 67108864 | 0, u = 67108863 & a;
                                                }
                                                r.words[f] = 0 | u, h = 0 | c;
                                            }
                                            return 0 !== h ? r.words[f] = 0 | h : r.length--, r._strip();
                                        }
                                        n9.prototype.toString = function(t, e) {
                                            var r;
                                            if (e = 0 | e || 1, 16 === (t = t || 10) || "hex" === t) {
                                                r = "";
                                                for(var s = 0, n = 0, a = 0; a < this.length; a++){
                                                    var o = this.words[a], h = (16777215 & (o << s | n)).toString(16);
                                                    r = 0 != (n = o >>> 24 - s & 16777215) || a !== this.length - 1 ? d4[6 - h.length] + h + r : h + r, (s += 2) >= 26 && (s -= 26, a--);
                                                }
                                                for(0 !== n && (r = n.toString(16) + r); r.length % e != 0;)r = "0" + r;
                                                return 0 !== this.negative && (r = "-" + r), r;
                                            }
                                            if (t === (0 | t) && t >= 2 && t <= 36) {
                                                var f = l4[t], c = p4[t];
                                                r = "";
                                                var u = this.clone();
                                                for(u.negative = 0; !u.isZero();){
                                                    var b = u.modrn(c).toString(t);
                                                    r = (u = u.idivn(c)).isZero() ? b + r : d4[f - b.length] + b + r;
                                                }
                                                for(this.isZero() && (r = "0" + r); r.length % e != 0;)r = "0" + r;
                                                return 0 !== this.negative && (r = "-" + r), r;
                                            }
                                            i14(!1, "Base should be between 2 and 36");
                                        }, n9.prototype.toNumber = function() {
                                            var t = this.words[0];
                                            return 2 === this.length ? t += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? t += 4503599627370496 + 67108864 * this.words[1] : this.length > 2 && i14(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -t : t;
                                        }, n9.prototype.toJSON = function() {
                                            return this.toString(16, 2);
                                        }, a16 && (n9.prototype.toBuffer = function(t, e) {
                                            return this.toArrayLike(a16, t, e);
                                        }), n9.prototype.toArray = function(t, e) {
                                            return this.toArrayLike(Array, t, e);
                                        }, n9.prototype.toArrayLike = function(t49, e23, r) {
                                            this._strip();
                                            var s = this.byteLength(), n = r || Math.max(1, s);
                                            i14(s <= n, "byte array longer than desired length"), i14(n > 0, "Requested array length <= 0");
                                            var a = function(t, e) {
                                                return t.allocUnsafe ? t.allocUnsafe(e) : new t(e);
                                            }(t49, n);
                                            return this["_toArrayLike" + ("le" === e23 ? "LE" : "BE")](a, s), a;
                                        }, n9.prototype._toArrayLikeLE = function(t, e) {
                                            for(var r = 0, i = 0, s = 0, n = 0; s < this.length; s++){
                                                var a = this.words[s] << n | i;
                                                t[r++] = 255 & a, r < t.length && (t[r++] = a >> 8 & 255), r < t.length && (t[r++] = a >> 16 & 255), 6 === n ? (r < t.length && (t[r++] = a >> 24 & 255), i = 0, n = 0) : (i = a >>> 24, n += 2);
                                            }
                                            if (r < t.length) for(t[r++] = i; r < t.length;)t[r++] = 0;
                                        }, n9.prototype._toArrayLikeBE = function(t, e) {
                                            for(var r = t.length - 1, i = 0, s = 0, n = 0; s < this.length; s++){
                                                var a = this.words[s] << n | i;
                                                t[r--] = 255 & a, r >= 0 && (t[r--] = a >> 8 & 255), r >= 0 && (t[r--] = a >> 16 & 255), 6 === n ? (r >= 0 && (t[r--] = a >> 24 & 255), i = 0, n = 0) : (i = a >>> 24, n += 2);
                                            }
                                            if (r >= 0) for(t[r--] = i; r >= 0;)t[r--] = 0;
                                        }, Math.clz32 ? n9.prototype._countBits = function(t) {
                                            return 32 - Math.clz32(t);
                                        } : n9.prototype._countBits = function(t) {
                                            var e = t, r = 0;
                                            return e >= 4096 && (r += 13, e >>>= 13), e >= 64 && (r += 7, e >>>= 7), e >= 8 && (r += 4, e >>>= 4), e >= 2 && (r += 2, e >>>= 2), r + e;
                                        }, n9.prototype._zeroBits = function(t) {
                                            if (0 === t) return 26;
                                            var e = t, r = 0;
                                            return 0 == (8191 & e) && (r += 13, e >>>= 13), 0 == (127 & e) && (r += 7, e >>>= 7), 0 == (15 & e) && (r += 4, e >>>= 4), 0 == (3 & e) && (r += 2, e >>>= 2), 0 == (1 & e) && r++, r;
                                        }, n9.prototype.bitLength = function() {
                                            var t = this.words[this.length - 1], e = this._countBits(t);
                                            return 26 * (this.length - 1) + e;
                                        }, n9.prototype.zeroBits = function() {
                                            if (this.isZero()) return 0;
                                            for(var t = 0, e = 0; e < this.length; e++){
                                                var r = this._zeroBits(this.words[e]);
                                                if (t += r, 26 !== r) break;
                                            }
                                            return t;
                                        }, n9.prototype.byteLength = function() {
                                            return Math.ceil(this.bitLength() / 8);
                                        }, n9.prototype.toTwos = function(t) {
                                            return 0 !== this.negative ? this.abs().inotn(t).iaddn(1) : this.clone();
                                        }, n9.prototype.fromTwos = function(t) {
                                            return this.testn(t - 1) ? this.notn(t).iaddn(1).ineg() : this.clone();
                                        }, n9.prototype.isNeg = function() {
                                            return 0 !== this.negative;
                                        }, n9.prototype.neg = function() {
                                            return this.clone().ineg();
                                        }, n9.prototype.ineg = function() {
                                            return this.isZero() || (this.negative ^= 1), this;
                                        }, n9.prototype.iuor = function(t) {
                                            for(; this.length < t.length;)this.words[this.length++] = 0;
                                            for(var e = 0; e < t.length; e++)this.words[e] = this.words[e] | t.words[e];
                                            return this._strip();
                                        }, n9.prototype.ior = function(t) {
                                            return i14(0 == (this.negative | t.negative)), this.iuor(t);
                                        }, n9.prototype.or = function(t) {
                                            return this.length > t.length ? this.clone().ior(t) : t.clone().ior(this);
                                        }, n9.prototype.uor = function(t) {
                                            return this.length > t.length ? this.clone().iuor(t) : t.clone().iuor(this);
                                        }, n9.prototype.iuand = function(t) {
                                            var e;
                                            e = this.length > t.length ? t : this;
                                            for(var r = 0; r < e.length; r++)this.words[r] = this.words[r] & t.words[r];
                                            return this.length = e.length, this._strip();
                                        }, n9.prototype.iand = function(t) {
                                            return i14(0 == (this.negative | t.negative)), this.iuand(t);
                                        }, n9.prototype.and = function(t) {
                                            return this.length > t.length ? this.clone().iand(t) : t.clone().iand(this);
                                        }, n9.prototype.uand = function(t) {
                                            return this.length > t.length ? this.clone().iuand(t) : t.clone().iuand(this);
                                        }, n9.prototype.iuxor = function(t) {
                                            var e, r;
                                            this.length > t.length ? (e = this, r = t) : (e = t, r = this);
                                            for(var i = 0; i < r.length; i++)this.words[i] = e.words[i] ^ r.words[i];
                                            if (this !== e) for(; i < e.length; i++)this.words[i] = e.words[i];
                                            return this.length = e.length, this._strip();
                                        }, n9.prototype.ixor = function(t) {
                                            return i14(0 == (this.negative | t.negative)), this.iuxor(t);
                                        }, n9.prototype.xor = function(t) {
                                            return this.length > t.length ? this.clone().ixor(t) : t.clone().ixor(this);
                                        }, n9.prototype.uxor = function(t) {
                                            return this.length > t.length ? this.clone().iuxor(t) : t.clone().iuxor(this);
                                        }, n9.prototype.inotn = function(t) {
                                            i14("number" == typeof t && t >= 0);
                                            var e = 0 | Math.ceil(t / 26), r = t % 26;
                                            this._expand(e), r > 0 && e--;
                                            for(var s = 0; s < e; s++)this.words[s] = 67108863 & ~this.words[s];
                                            return r > 0 && (this.words[s] = ~this.words[s] & 67108863 >> 26 - r), this._strip();
                                        }, n9.prototype.notn = function(t) {
                                            return this.clone().inotn(t);
                                        }, n9.prototype.setn = function(t, e) {
                                            i14("number" == typeof t && t >= 0);
                                            var r = t / 26 | 0, s = t % 26;
                                            return this._expand(r + 1), this.words[r] = e ? this.words[r] | 1 << s : this.words[r] & ~(1 << s), this._strip();
                                        }, n9.prototype.iadd = function(t) {
                                            var e, r, i;
                                            if (0 !== this.negative && 0 === t.negative) return this.negative = 0, e = this.isub(t), this.negative ^= 1, this._normSign();
                                            if (0 === this.negative && 0 !== t.negative) return t.negative = 0, e = this.isub(t), t.negative = 1, e._normSign();
                                            this.length > t.length ? (r = this, i = t) : (r = t, i = this);
                                            for(var s = 0, n = 0; n < i.length; n++)e = (0 | r.words[n]) + (0 | i.words[n]) + s, this.words[n] = 67108863 & e, s = e >>> 26;
                                            for(; 0 !== s && n < r.length; n++)e = (0 | r.words[n]) + s, this.words[n] = 67108863 & e, s = e >>> 26;
                                            if (this.length = r.length, 0 !== s) this.words[this.length] = s, this.length++;
                                            else if (r !== this) for(; n < r.length; n++)this.words[n] = r.words[n];
                                            return this;
                                        }, n9.prototype.add = function(t) {
                                            var e;
                                            return 0 !== t.negative && 0 === this.negative ? (t.negative = 0, e = this.sub(t), t.negative ^= 1, e) : 0 === t.negative && 0 !== this.negative ? (this.negative = 0, e = t.sub(this), this.negative = 1, e) : this.length > t.length ? this.clone().iadd(t) : t.clone().iadd(this);
                                        }, n9.prototype.isub = function(t) {
                                            if (0 !== t.negative) {
                                                t.negative = 0;
                                                var e = this.iadd(t);
                                                return t.negative = 1, e._normSign();
                                            }
                                            if (0 !== this.negative) return this.negative = 0, this.iadd(t), this.negative = 1, this._normSign();
                                            var r, i, s = this.cmp(t);
                                            if (0 === s) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
                                            s > 0 ? (r = this, i = t) : (r = t, i = this);
                                            for(var n = 0, a = 0; a < i.length; a++)n = (e = (0 | r.words[a]) - (0 | i.words[a]) + n) >> 26, this.words[a] = 67108863 & e;
                                            for(; 0 !== n && a < r.length; a++)n = (e = (0 | r.words[a]) + n) >> 26, this.words[a] = 67108863 & e;
                                            if (0 === n && a < r.length && r !== this) for(; a < r.length; a++)this.words[a] = r.words[a];
                                            return this.length = Math.max(this.length, a), r !== this && (this.negative = 1), this._strip();
                                        }, n9.prototype.sub = function(t) {
                                            return this.clone().isub(t);
                                        };
                                        var m3 = function m(t, e, r) {
                                            var i, s, n, a = t.words, o = e.words, h = r.words, f = 0, c = 0 | a[0], u = 8191 & c, d = c >>> 13, l = 0 | a[1], p = 8191 & l, b = l >>> 13, m = 0 | a[2], g = 8191 & m, y = m >>> 13, w = 0 | a[3], v = 8191 & w, S = w >>> 13, _ = 0 | a[4], B = 8191 & _, I = _ >>> 13, O = 0 | a[5], E = 8191 & O, P = O >>> 13, k = 0 | a[6], N = 8191 & k, A = k >>> 13, x = 0 | a[7], R = 8191 & x, M = x >>> 13, T = 0 | a[8], C = 8191 & T, H = T >>> 13, L = 0 | a[9], K = 8191 & L, F = L >>> 13, U = 0 | o[0], D = 8191 & U, V = U >>> 13, j = 0 | o[1], q = 8191 & j, z = j >>> 13, G = 0 | o[2], J = 8191 & G, Y = G >>> 13, W = 0 | o[3], Q = 8191 & W, X = W >>> 13, Z = 0 | o[4], $ = 8191 & Z, tt = Z >>> 13, et = 0 | o[5], rt = 8191 & et, it = et >>> 13, st = 0 | o[6], nt = 8191 & st, at = st >>> 13, ot = 0 | o[7], ht = 8191 & ot, ft = ot >>> 13, ct = 0 | o[8], ut = 8191 & ct, dt = ct >>> 13, lt = 0 | o[9], pt = 8191 & lt, bt = lt >>> 13;
                                            r.negative = t.negative ^ e.negative, r.length = 19;
                                            var mt = (f + (i = Math.imul(u, D)) | 0) + ((8191 & (s = (s = Math.imul(u, V)) + Math.imul(d, D) | 0)) << 13) | 0;
                                            f = ((n = Math.imul(d, V)) + (s >>> 13) | 0) + (mt >>> 26) | 0, mt &= 67108863, i = Math.imul(p, D), s = (s = Math.imul(p, V)) + Math.imul(b, D) | 0, n = Math.imul(b, V);
                                            var gt = (f + (i = i + Math.imul(u, q) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, z) | 0) + Math.imul(d, q) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, z) | 0) + (s >>> 13) | 0) + (gt >>> 26) | 0, gt &= 67108863, i = Math.imul(g, D), s = (s = Math.imul(g, V)) + Math.imul(y, D) | 0, n = Math.imul(y, V), i = i + Math.imul(p, q) | 0, s = (s = s + Math.imul(p, z) | 0) + Math.imul(b, q) | 0, n = n + Math.imul(b, z) | 0;
                                            var yt = (f + (i = i + Math.imul(u, J) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, Y) | 0) + Math.imul(d, J) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, Y) | 0) + (s >>> 13) | 0) + (yt >>> 26) | 0, yt &= 67108863, i = Math.imul(v, D), s = (s = Math.imul(v, V)) + Math.imul(S, D) | 0, n = Math.imul(S, V), i = i + Math.imul(g, q) | 0, s = (s = s + Math.imul(g, z) | 0) + Math.imul(y, q) | 0, n = n + Math.imul(y, z) | 0, i = i + Math.imul(p, J) | 0, s = (s = s + Math.imul(p, Y) | 0) + Math.imul(b, J) | 0, n = n + Math.imul(b, Y) | 0;
                                            var wt = (f + (i = i + Math.imul(u, Q) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, X) | 0) + Math.imul(d, Q) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, X) | 0) + (s >>> 13) | 0) + (wt >>> 26) | 0, wt &= 67108863, i = Math.imul(B, D), s = (s = Math.imul(B, V)) + Math.imul(I, D) | 0, n = Math.imul(I, V), i = i + Math.imul(v, q) | 0, s = (s = s + Math.imul(v, z) | 0) + Math.imul(S, q) | 0, n = n + Math.imul(S, z) | 0, i = i + Math.imul(g, J) | 0, s = (s = s + Math.imul(g, Y) | 0) + Math.imul(y, J) | 0, n = n + Math.imul(y, Y) | 0, i = i + Math.imul(p, Q) | 0, s = (s = s + Math.imul(p, X) | 0) + Math.imul(b, Q) | 0, n = n + Math.imul(b, X) | 0;
                                            var vt = (f + (i = i + Math.imul(u, $) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, tt) | 0) + Math.imul(d, $) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, tt) | 0) + (s >>> 13) | 0) + (vt >>> 26) | 0, vt &= 67108863, i = Math.imul(E, D), s = (s = Math.imul(E, V)) + Math.imul(P, D) | 0, n = Math.imul(P, V), i = i + Math.imul(B, q) | 0, s = (s = s + Math.imul(B, z) | 0) + Math.imul(I, q) | 0, n = n + Math.imul(I, z) | 0, i = i + Math.imul(v, J) | 0, s = (s = s + Math.imul(v, Y) | 0) + Math.imul(S, J) | 0, n = n + Math.imul(S, Y) | 0, i = i + Math.imul(g, Q) | 0, s = (s = s + Math.imul(g, X) | 0) + Math.imul(y, Q) | 0, n = n + Math.imul(y, X) | 0, i = i + Math.imul(p, $) | 0, s = (s = s + Math.imul(p, tt) | 0) + Math.imul(b, $) | 0, n = n + Math.imul(b, tt) | 0;
                                            var St = (f + (i = i + Math.imul(u, rt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, it) | 0) + Math.imul(d, rt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, it) | 0) + (s >>> 13) | 0) + (St >>> 26) | 0, St &= 67108863, i = Math.imul(N, D), s = (s = Math.imul(N, V)) + Math.imul(A, D) | 0, n = Math.imul(A, V), i = i + Math.imul(E, q) | 0, s = (s = s + Math.imul(E, z) | 0) + Math.imul(P, q) | 0, n = n + Math.imul(P, z) | 0, i = i + Math.imul(B, J) | 0, s = (s = s + Math.imul(B, Y) | 0) + Math.imul(I, J) | 0, n = n + Math.imul(I, Y) | 0, i = i + Math.imul(v, Q) | 0, s = (s = s + Math.imul(v, X) | 0) + Math.imul(S, Q) | 0, n = n + Math.imul(S, X) | 0, i = i + Math.imul(g, $) | 0, s = (s = s + Math.imul(g, tt) | 0) + Math.imul(y, $) | 0, n = n + Math.imul(y, tt) | 0, i = i + Math.imul(p, rt) | 0, s = (s = s + Math.imul(p, it) | 0) + Math.imul(b, rt) | 0, n = n + Math.imul(b, it) | 0;
                                            var _t = (f + (i = i + Math.imul(u, nt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, at) | 0) + Math.imul(d, nt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, at) | 0) + (s >>> 13) | 0) + (_t >>> 26) | 0, _t &= 67108863, i = Math.imul(R, D), s = (s = Math.imul(R, V)) + Math.imul(M, D) | 0, n = Math.imul(M, V), i = i + Math.imul(N, q) | 0, s = (s = s + Math.imul(N, z) | 0) + Math.imul(A, q) | 0, n = n + Math.imul(A, z) | 0, i = i + Math.imul(E, J) | 0, s = (s = s + Math.imul(E, Y) | 0) + Math.imul(P, J) | 0, n = n + Math.imul(P, Y) | 0, i = i + Math.imul(B, Q) | 0, s = (s = s + Math.imul(B, X) | 0) + Math.imul(I, Q) | 0, n = n + Math.imul(I, X) | 0, i = i + Math.imul(v, $) | 0, s = (s = s + Math.imul(v, tt) | 0) + Math.imul(S, $) | 0, n = n + Math.imul(S, tt) | 0, i = i + Math.imul(g, rt) | 0, s = (s = s + Math.imul(g, it) | 0) + Math.imul(y, rt) | 0, n = n + Math.imul(y, it) | 0, i = i + Math.imul(p, nt) | 0, s = (s = s + Math.imul(p, at) | 0) + Math.imul(b, nt) | 0, n = n + Math.imul(b, at) | 0;
                                            var Bt = (f + (i = i + Math.imul(u, ht) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, ft) | 0) + Math.imul(d, ht) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, ft) | 0) + (s >>> 13) | 0) + (Bt >>> 26) | 0, Bt &= 67108863, i = Math.imul(C, D), s = (s = Math.imul(C, V)) + Math.imul(H, D) | 0, n = Math.imul(H, V), i = i + Math.imul(R, q) | 0, s = (s = s + Math.imul(R, z) | 0) + Math.imul(M, q) | 0, n = n + Math.imul(M, z) | 0, i = i + Math.imul(N, J) | 0, s = (s = s + Math.imul(N, Y) | 0) + Math.imul(A, J) | 0, n = n + Math.imul(A, Y) | 0, i = i + Math.imul(E, Q) | 0, s = (s = s + Math.imul(E, X) | 0) + Math.imul(P, Q) | 0, n = n + Math.imul(P, X) | 0, i = i + Math.imul(B, $) | 0, s = (s = s + Math.imul(B, tt) | 0) + Math.imul(I, $) | 0, n = n + Math.imul(I, tt) | 0, i = i + Math.imul(v, rt) | 0, s = (s = s + Math.imul(v, it) | 0) + Math.imul(S, rt) | 0, n = n + Math.imul(S, it) | 0, i = i + Math.imul(g, nt) | 0, s = (s = s + Math.imul(g, at) | 0) + Math.imul(y, nt) | 0, n = n + Math.imul(y, at) | 0, i = i + Math.imul(p, ht) | 0, s = (s = s + Math.imul(p, ft) | 0) + Math.imul(b, ht) | 0, n = n + Math.imul(b, ft) | 0;
                                            var It = (f + (i = i + Math.imul(u, ut) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, dt) | 0) + Math.imul(d, ut) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, dt) | 0) + (s >>> 13) | 0) + (It >>> 26) | 0, It &= 67108863, i = Math.imul(K, D), s = (s = Math.imul(K, V)) + Math.imul(F, D) | 0, n = Math.imul(F, V), i = i + Math.imul(C, q) | 0, s = (s = s + Math.imul(C, z) | 0) + Math.imul(H, q) | 0, n = n + Math.imul(H, z) | 0, i = i + Math.imul(R, J) | 0, s = (s = s + Math.imul(R, Y) | 0) + Math.imul(M, J) | 0, n = n + Math.imul(M, Y) | 0, i = i + Math.imul(N, Q) | 0, s = (s = s + Math.imul(N, X) | 0) + Math.imul(A, Q) | 0, n = n + Math.imul(A, X) | 0, i = i + Math.imul(E, $) | 0, s = (s = s + Math.imul(E, tt) | 0) + Math.imul(P, $) | 0, n = n + Math.imul(P, tt) | 0, i = i + Math.imul(B, rt) | 0, s = (s = s + Math.imul(B, it) | 0) + Math.imul(I, rt) | 0, n = n + Math.imul(I, it) | 0, i = i + Math.imul(v, nt) | 0, s = (s = s + Math.imul(v, at) | 0) + Math.imul(S, nt) | 0, n = n + Math.imul(S, at) | 0, i = i + Math.imul(g, ht) | 0, s = (s = s + Math.imul(g, ft) | 0) + Math.imul(y, ht) | 0, n = n + Math.imul(y, ft) | 0, i = i + Math.imul(p, ut) | 0, s = (s = s + Math.imul(p, dt) | 0) + Math.imul(b, ut) | 0, n = n + Math.imul(b, dt) | 0;
                                            var Ot = (f + (i = i + Math.imul(u, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(u, bt) | 0) + Math.imul(d, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(d, bt) | 0) + (s >>> 13) | 0) + (Ot >>> 26) | 0, Ot &= 67108863, i = Math.imul(K, q), s = (s = Math.imul(K, z)) + Math.imul(F, q) | 0, n = Math.imul(F, z), i = i + Math.imul(C, J) | 0, s = (s = s + Math.imul(C, Y) | 0) + Math.imul(H, J) | 0, n = n + Math.imul(H, Y) | 0, i = i + Math.imul(R, Q) | 0, s = (s = s + Math.imul(R, X) | 0) + Math.imul(M, Q) | 0, n = n + Math.imul(M, X) | 0, i = i + Math.imul(N, $) | 0, s = (s = s + Math.imul(N, tt) | 0) + Math.imul(A, $) | 0, n = n + Math.imul(A, tt) | 0, i = i + Math.imul(E, rt) | 0, s = (s = s + Math.imul(E, it) | 0) + Math.imul(P, rt) | 0, n = n + Math.imul(P, it) | 0, i = i + Math.imul(B, nt) | 0, s = (s = s + Math.imul(B, at) | 0) + Math.imul(I, nt) | 0, n = n + Math.imul(I, at) | 0, i = i + Math.imul(v, ht) | 0, s = (s = s + Math.imul(v, ft) | 0) + Math.imul(S, ht) | 0, n = n + Math.imul(S, ft) | 0, i = i + Math.imul(g, ut) | 0, s = (s = s + Math.imul(g, dt) | 0) + Math.imul(y, ut) | 0, n = n + Math.imul(y, dt) | 0;
                                            var Et = (f + (i = i + Math.imul(p, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(p, bt) | 0) + Math.imul(b, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(b, bt) | 0) + (s >>> 13) | 0) + (Et >>> 26) | 0, Et &= 67108863, i = Math.imul(K, J), s = (s = Math.imul(K, Y)) + Math.imul(F, J) | 0, n = Math.imul(F, Y), i = i + Math.imul(C, Q) | 0, s = (s = s + Math.imul(C, X) | 0) + Math.imul(H, Q) | 0, n = n + Math.imul(H, X) | 0, i = i + Math.imul(R, $) | 0, s = (s = s + Math.imul(R, tt) | 0) + Math.imul(M, $) | 0, n = n + Math.imul(M, tt) | 0, i = i + Math.imul(N, rt) | 0, s = (s = s + Math.imul(N, it) | 0) + Math.imul(A, rt) | 0, n = n + Math.imul(A, it) | 0, i = i + Math.imul(E, nt) | 0, s = (s = s + Math.imul(E, at) | 0) + Math.imul(P, nt) | 0, n = n + Math.imul(P, at) | 0, i = i + Math.imul(B, ht) | 0, s = (s = s + Math.imul(B, ft) | 0) + Math.imul(I, ht) | 0, n = n + Math.imul(I, ft) | 0, i = i + Math.imul(v, ut) | 0, s = (s = s + Math.imul(v, dt) | 0) + Math.imul(S, ut) | 0, n = n + Math.imul(S, dt) | 0;
                                            var Pt = (f + (i = i + Math.imul(g, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(g, bt) | 0) + Math.imul(y, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(y, bt) | 0) + (s >>> 13) | 0) + (Pt >>> 26) | 0, Pt &= 67108863, i = Math.imul(K, Q), s = (s = Math.imul(K, X)) + Math.imul(F, Q) | 0, n = Math.imul(F, X), i = i + Math.imul(C, $) | 0, s = (s = s + Math.imul(C, tt) | 0) + Math.imul(H, $) | 0, n = n + Math.imul(H, tt) | 0, i = i + Math.imul(R, rt) | 0, s = (s = s + Math.imul(R, it) | 0) + Math.imul(M, rt) | 0, n = n + Math.imul(M, it) | 0, i = i + Math.imul(N, nt) | 0, s = (s = s + Math.imul(N, at) | 0) + Math.imul(A, nt) | 0, n = n + Math.imul(A, at) | 0, i = i + Math.imul(E, ht) | 0, s = (s = s + Math.imul(E, ft) | 0) + Math.imul(P, ht) | 0, n = n + Math.imul(P, ft) | 0, i = i + Math.imul(B, ut) | 0, s = (s = s + Math.imul(B, dt) | 0) + Math.imul(I, ut) | 0, n = n + Math.imul(I, dt) | 0;
                                            var kt = (f + (i = i + Math.imul(v, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(v, bt) | 0) + Math.imul(S, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(S, bt) | 0) + (s >>> 13) | 0) + (kt >>> 26) | 0, kt &= 67108863, i = Math.imul(K, $), s = (s = Math.imul(K, tt)) + Math.imul(F, $) | 0, n = Math.imul(F, tt), i = i + Math.imul(C, rt) | 0, s = (s = s + Math.imul(C, it) | 0) + Math.imul(H, rt) | 0, n = n + Math.imul(H, it) | 0, i = i + Math.imul(R, nt) | 0, s = (s = s + Math.imul(R, at) | 0) + Math.imul(M, nt) | 0, n = n + Math.imul(M, at) | 0, i = i + Math.imul(N, ht) | 0, s = (s = s + Math.imul(N, ft) | 0) + Math.imul(A, ht) | 0, n = n + Math.imul(A, ft) | 0, i = i + Math.imul(E, ut) | 0, s = (s = s + Math.imul(E, dt) | 0) + Math.imul(P, ut) | 0, n = n + Math.imul(P, dt) | 0;
                                            var Nt = (f + (i = i + Math.imul(B, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(B, bt) | 0) + Math.imul(I, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(I, bt) | 0) + (s >>> 13) | 0) + (Nt >>> 26) | 0, Nt &= 67108863, i = Math.imul(K, rt), s = (s = Math.imul(K, it)) + Math.imul(F, rt) | 0, n = Math.imul(F, it), i = i + Math.imul(C, nt) | 0, s = (s = s + Math.imul(C, at) | 0) + Math.imul(H, nt) | 0, n = n + Math.imul(H, at) | 0, i = i + Math.imul(R, ht) | 0, s = (s = s + Math.imul(R, ft) | 0) + Math.imul(M, ht) | 0, n = n + Math.imul(M, ft) | 0, i = i + Math.imul(N, ut) | 0, s = (s = s + Math.imul(N, dt) | 0) + Math.imul(A, ut) | 0, n = n + Math.imul(A, dt) | 0;
                                            var At = (f + (i = i + Math.imul(E, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(E, bt) | 0) + Math.imul(P, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(P, bt) | 0) + (s >>> 13) | 0) + (At >>> 26) | 0, At &= 67108863, i = Math.imul(K, nt), s = (s = Math.imul(K, at)) + Math.imul(F, nt) | 0, n = Math.imul(F, at), i = i + Math.imul(C, ht) | 0, s = (s = s + Math.imul(C, ft) | 0) + Math.imul(H, ht) | 0, n = n + Math.imul(H, ft) | 0, i = i + Math.imul(R, ut) | 0, s = (s = s + Math.imul(R, dt) | 0) + Math.imul(M, ut) | 0, n = n + Math.imul(M, dt) | 0;
                                            var xt = (f + (i = i + Math.imul(N, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(N, bt) | 0) + Math.imul(A, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(A, bt) | 0) + (s >>> 13) | 0) + (xt >>> 26) | 0, xt &= 67108863, i = Math.imul(K, ht), s = (s = Math.imul(K, ft)) + Math.imul(F, ht) | 0, n = Math.imul(F, ft), i = i + Math.imul(C, ut) | 0, s = (s = s + Math.imul(C, dt) | 0) + Math.imul(H, ut) | 0, n = n + Math.imul(H, dt) | 0;
                                            var Rt = (f + (i = i + Math.imul(R, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(R, bt) | 0) + Math.imul(M, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(M, bt) | 0) + (s >>> 13) | 0) + (Rt >>> 26) | 0, Rt &= 67108863, i = Math.imul(K, ut), s = (s = Math.imul(K, dt)) + Math.imul(F, ut) | 0, n = Math.imul(F, dt);
                                            var Mt = (f + (i = i + Math.imul(C, pt) | 0) | 0) + ((8191 & (s = (s = s + Math.imul(C, bt) | 0) + Math.imul(H, pt) | 0)) << 13) | 0;
                                            f = ((n = n + Math.imul(H, bt) | 0) + (s >>> 13) | 0) + (Mt >>> 26) | 0, Mt &= 67108863;
                                            var Tt = (f + (i = Math.imul(K, pt)) | 0) + ((8191 & (s = (s = Math.imul(K, bt)) + Math.imul(F, pt) | 0)) << 13) | 0;
                                            return f = ((n = Math.imul(F, bt)) + (s >>> 13) | 0) + (Tt >>> 26) | 0, Tt &= 67108863, h[0] = mt, h[1] = gt, h[2] = yt, h[3] = wt, h[4] = vt, h[5] = St, h[6] = _t, h[7] = Bt, h[8] = It, h[9] = Ot, h[10] = Et, h[11] = Pt, h[12] = kt, h[13] = Nt, h[14] = At, h[15] = xt, h[16] = Rt, h[17] = Mt, h[18] = Tt, 0 !== f && (h[19] = f, r.length++), r;
                                        };
                                        function g2(t, e, r) {
                                            r.negative = e.negative ^ t.negative, r.length = t.length + e.length;
                                            for(var i = 0, s = 0, n = 0; n < r.length - 1; n++){
                                                var a = s;
                                                s = 0;
                                                for(var o = 67108863 & i, h = Math.min(n, e.length - 1), f = Math.max(0, n - t.length + 1); f <= h; f++){
                                                    var c = n - f, u = (0 | t.words[c]) * (0 | e.words[f]), d = 67108863 & u;
                                                    o = 67108863 & (d = d + o | 0), s += (a = (a = a + (u / 67108864 | 0) | 0) + (d >>> 26) | 0) >>> 26, a &= 67108863;
                                                }
                                                r.words[n] = o, i = a, a = s;
                                            }
                                            return 0 !== i ? r.words[n] = i : r.length--, r._strip();
                                        }
                                        function y4(t, e, r) {
                                            return g2(t, e, r);
                                        }
                                        function w19(t, e) {
                                            this.x = t, this.y = e;
                                        }
                                        Math.imul || (m3 = b11), n9.prototype.mulTo = function(t, e) {
                                            var r = this.length + t.length;
                                            return 10 === this.length && 10 === t.length ? m3(this, t, e) : r < 63 ? b11(this, t, e) : r < 1024 ? g2(this, t, e) : y4(this, t, e);
                                        }, w19.prototype.makeRBT = function(t) {
                                            for(var e = new Array(t), r = n9.prototype._countBits(t) - 1, i = 0; i < t; i++)e[i] = this.revBin(i, r, t);
                                            return e;
                                        }, w19.prototype.revBin = function(t, e, r) {
                                            if (0 === t || t === r - 1) return t;
                                            for(var i = 0, s = 0; s < e; s++)i |= (1 & t) << e - s - 1, t >>= 1;
                                            return i;
                                        }, w19.prototype.permute = function(t, e, r, i, s, n) {
                                            for(var a = 0; a < n; a++)i[a] = e[t[a]], s[a] = r[t[a]];
                                        }, w19.prototype.transform = function(t, e, r, i, s, n) {
                                            this.permute(n, t, e, r, i, s);
                                            for(var a = 1; a < s; a <<= 1){
                                                for(var o = a << 1, h = Math.cos(2 * Math.PI / o), f = Math.sin(2 * Math.PI / o), c = 0; c < s; c += o)for(var u = h, d = f, l = 0; l < a; l++){
                                                    var p = r[c + l], b = i[c + l], m = r[c + l + a], g = i[c + l + a], y = u * m - d * g;
                                                    g = u * g + d * m, m = y, r[c + l] = p + m, i[c + l] = b + g, r[c + l + a] = p - m, i[c + l + a] = b - g, l !== o && (y = h * u - f * d, d = h * d + f * u, u = y);
                                                }
                                            }
                                        }, w19.prototype.guessLen13b = function(t, e) {
                                            var r = 1 | Math.max(e, t), i = 1 & r, s = 0;
                                            for(r = r / 2 | 0; r; r >>>= 1)s++;
                                            return 1 << s + 1 + i;
                                        }, w19.prototype.conjugate = function(t, e, r) {
                                            if (!(r <= 1)) for(var i = 0; i < r / 2; i++){
                                                var s = t[i];
                                                t[i] = t[r - i - 1], t[r - i - 1] = s, s = e[i], e[i] = -e[r - i - 1], e[r - i - 1] = -s;
                                            }
                                        }, w19.prototype.normalize13b = function(t, e) {
                                            for(var r = 0, i = 0; i < e / 2; i++){
                                                var s = 8192 * Math.round(t[2 * i + 1] / e) + Math.round(t[2 * i] / e) + r;
                                                t[i] = 67108863 & s, r = s < 67108864 ? 0 : s / 67108864 | 0;
                                            }
                                            return t;
                                        }, w19.prototype.convert13b = function(t, e, r, s) {
                                            for(var n = 0, a = 0; a < e; a++)n += 0 | t[a], r[2 * a] = 8191 & n, n >>>= 13, r[2 * a + 1] = 8191 & n, n >>>= 13;
                                            for(a = 2 * e; a < s; ++a)r[a] = 0;
                                            i14(0 === n), i14(0 == (-8192 & n));
                                        }, w19.prototype.stub = function(t) {
                                            for(var e = new Array(t), r = 0; r < t; r++)e[r] = 0;
                                            return e;
                                        }, w19.prototype.mulp = function(t, e, r) {
                                            var i = 2 * this.guessLen13b(t.length, e.length), s = this.makeRBT(i), n = this.stub(i), a = new Array(i), o = new Array(i), h = new Array(i), f = new Array(i), c = new Array(i), u = new Array(i), d = r.words;
                                            d.length = i, this.convert13b(t.words, t.length, a, i), this.convert13b(e.words, e.length, f, i), this.transform(a, n, o, h, i, s), this.transform(f, n, c, u, i, s);
                                            for(var l = 0; l < i; l++){
                                                var p = o[l] * c[l] - h[l] * u[l];
                                                h[l] = o[l] * u[l] + h[l] * c[l], o[l] = p;
                                            }
                                            return this.conjugate(o, h, i), this.transform(o, h, d, n, i, s), this.conjugate(d, n, i), this.normalize13b(d, i), r.negative = t.negative ^ e.negative, r.length = t.length + e.length, r._strip();
                                        }, n9.prototype.mul = function(t) {
                                            var e = new n9(null);
                                            return e.words = new Array(this.length + t.length), this.mulTo(t, e);
                                        }, n9.prototype.mulf = function(t) {
                                            var e = new n9(null);
                                            return e.words = new Array(this.length + t.length), y4(this, t, e);
                                        }, n9.prototype.imul = function(t) {
                                            return this.clone().mulTo(t, this);
                                        }, n9.prototype.imuln = function(t) {
                                            var e = t < 0;
                                            e && (t = -t), i14("number" == typeof t), i14(t < 67108864);
                                            for(var r = 0, s = 0; s < this.length; s++){
                                                var n = (0 | this.words[s]) * t, a = (67108863 & n) + (67108863 & r);
                                                r >>= 26, r += n / 67108864 | 0, r += a >>> 26, this.words[s] = 67108863 & a;
                                            }
                                            return 0 !== r && (this.words[s] = r, this.length++), e ? this.ineg() : this;
                                        }, n9.prototype.muln = function(t) {
                                            return this.clone().imuln(t);
                                        }, n9.prototype.sqr = function() {
                                            return this.mul(this);
                                        }, n9.prototype.isqr = function() {
                                            return this.imul(this.clone());
                                        }, n9.prototype.pow = function(t50) {
                                            var e24 = function(t) {
                                                for(var e = new Array(t.bitLength()), r = 0; r < e.length; r++){
                                                    var i = r / 26 | 0, s = r % 26;
                                                    e[r] = t.words[i] >>> s & 1;
                                                }
                                                return e;
                                            }(t50);
                                            if (0 === e24.length) return new n9(1);
                                            for(var r15 = this, i15 = 0; i15 < e24.length && 0 === e24[i15]; i15++, r15 = r15.sqr());
                                            if (++i15 < e24.length) for(var s12 = r15.sqr(); i15 < e24.length; i15++, s12 = s12.sqr())0 !== e24[i15] && (r15 = r15.mul(s12));
                                            return r15;
                                        }, n9.prototype.iushln = function(t) {
                                            i14("number" == typeof t && t >= 0);
                                            var e, r = t % 26, s = (t - r) / 26, n = 67108863 >>> 26 - r << 26 - r;
                                            if (0 !== r) {
                                                var a = 0;
                                                for(e = 0; e < this.length; e++){
                                                    var o = this.words[e] & n, h = (0 | this.words[e]) - o << r;
                                                    this.words[e] = h | a, a = o >>> 26 - r;
                                                }
                                                a && (this.words[e] = a, this.length++);
                                            }
                                            if (0 !== s) {
                                                for(e = this.length - 1; e >= 0; e--)this.words[e + s] = this.words[e];
                                                for(e = 0; e < s; e++)this.words[e] = 0;
                                                this.length += s;
                                            }
                                            return this._strip();
                                        }, n9.prototype.ishln = function(t) {
                                            return i14(0 === this.negative), this.iushln(t);
                                        }, n9.prototype.iushrn = function(t, e, r) {
                                            var s;
                                            i14("number" == typeof t && t >= 0), s = e ? (e - e % 26) / 26 : 0;
                                            var n = t % 26, a = Math.min((t - n) / 26, this.length), o = 67108863 ^ 67108863 >>> n << n, h = r;
                                            if (s -= a, s = Math.max(0, s), h) {
                                                for(var f = 0; f < a; f++)h.words[f] = this.words[f];
                                                h.length = a;
                                            }
                                            if (0 === a) ;
                                            else if (this.length > a) for(this.length -= a, f = 0; f < this.length; f++)this.words[f] = this.words[f + a];
                                            else this.words[0] = 0, this.length = 1;
                                            var c = 0;
                                            for(f = this.length - 1; f >= 0 && (0 !== c || f >= s); f--){
                                                var u = 0 | this.words[f];
                                                this.words[f] = c << 26 - n | u >>> n, c = u & o;
                                            }
                                            return h && 0 !== c && (h.words[h.length++] = c), 0 === this.length && (this.words[0] = 0, this.length = 1), this._strip();
                                        }, n9.prototype.ishrn = function(t, e, r) {
                                            return i14(0 === this.negative), this.iushrn(t, e, r);
                                        }, n9.prototype.shln = function(t) {
                                            return this.clone().ishln(t);
                                        }, n9.prototype.ushln = function(t) {
                                            return this.clone().iushln(t);
                                        }, n9.prototype.shrn = function(t) {
                                            return this.clone().ishrn(t);
                                        }, n9.prototype.ushrn = function(t) {
                                            return this.clone().iushrn(t);
                                        }, n9.prototype.testn = function(t) {
                                            i14("number" == typeof t && t >= 0);
                                            var e = t % 26, r = (t - e) / 26, s = 1 << e;
                                            return !(this.length <= r || !(this.words[r] & s));
                                        }, n9.prototype.imaskn = function(t) {
                                            i14("number" == typeof t && t >= 0);
                                            var e = t % 26, r = (t - e) / 26;
                                            if (i14(0 === this.negative, "imaskn works only with positive numbers"), this.length <= r) return this;
                                            if (0 !== e && r++, this.length = Math.min(r, this.length), 0 !== e) {
                                                var s = 67108863 ^ 67108863 >>> e << e;
                                                this.words[this.length - 1] &= s;
                                            }
                                            return this._strip();
                                        }, n9.prototype.maskn = function(t) {
                                            return this.clone().imaskn(t);
                                        }, n9.prototype.iaddn = function(t) {
                                            return i14("number" == typeof t), i14(t < 67108864), t < 0 ? this.isubn(-t) : 0 !== this.negative ? 1 === this.length && (0 | this.words[0]) <= t ? (this.words[0] = t - (0 | this.words[0]), this.negative = 0, this) : (this.negative = 0, this.isubn(t), this.negative = 1, this) : this._iaddn(t);
                                        }, n9.prototype._iaddn = function(t) {
                                            this.words[0] += t;
                                            for(var e = 0; e < this.length && this.words[e] >= 67108864; e++)this.words[e] -= 67108864, e === this.length - 1 ? this.words[e + 1] = 1 : this.words[e + 1]++;
                                            return this.length = Math.max(this.length, e + 1), this;
                                        }, n9.prototype.isubn = function(t) {
                                            if (i14("number" == typeof t), i14(t < 67108864), t < 0) return this.iaddn(-t);
                                            if (0 !== this.negative) return this.negative = 0, this.iaddn(t), this.negative = 1, this;
                                            if (this.words[0] -= t, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;
                                            else for(var e = 0; e < this.length && this.words[e] < 0; e++)this.words[e] += 67108864, this.words[e + 1] -= 1;
                                            return this._strip();
                                        }, n9.prototype.addn = function(t) {
                                            return this.clone().iaddn(t);
                                        }, n9.prototype.subn = function(t) {
                                            return this.clone().isubn(t);
                                        }, n9.prototype.iabs = function() {
                                            return this.negative = 0, this;
                                        }, n9.prototype.abs = function() {
                                            return this.clone().iabs();
                                        }, n9.prototype._ishlnsubmul = function(t, e, r) {
                                            var s, n, a = t.length + r;
                                            this._expand(a);
                                            var o = 0;
                                            for(s = 0; s < t.length; s++){
                                                n = (0 | this.words[s + r]) + o;
                                                var h = (0 | t.words[s]) * e;
                                                o = ((n -= 67108863 & h) >> 26) - (h / 67108864 | 0), this.words[s + r] = 67108863 & n;
                                            }
                                            for(; s < this.length - r; s++)o = (n = (0 | this.words[s + r]) + o) >> 26, this.words[s + r] = 67108863 & n;
                                            if (0 === o) return this._strip();
                                            for(i14(-1 === o), o = 0, s = 0; s < this.length; s++)o = (n = -(0 | this.words[s]) + o) >> 26, this.words[s] = 67108863 & n;
                                            return this.negative = 1, this._strip();
                                        }, n9.prototype._wordDiv = function(t, e) {
                                            var r = (this.length, t.length), i = this.clone(), s = t, a = 0 | s.words[s.length - 1];
                                            0 != (r = 26 - this._countBits(a)) && (s = s.ushln(r), i.iushln(r), a = 0 | s.words[s.length - 1]);
                                            var o, h = i.length - s.length;
                                            if ("mod" !== e) {
                                                (o = new n9(null)).length = h + 1, o.words = new Array(o.length);
                                                for(var f = 0; f < o.length; f++)o.words[f] = 0;
                                            }
                                            var c = i.clone()._ishlnsubmul(s, 1, h);
                                            0 === c.negative && (i = c, o && (o.words[h] = 1));
                                            for(var u = h - 1; u >= 0; u--){
                                                var d = 67108864 * (0 | i.words[s.length + u]) + (0 | i.words[s.length + u - 1]);
                                                for(d = Math.min(d / a | 0, 67108863), i._ishlnsubmul(s, d, u); 0 !== i.negative;)d--, i.negative = 0, i._ishlnsubmul(s, 1, u), i.isZero() || (i.negative ^= 1);
                                                o && (o.words[u] = d);
                                            }
                                            return o && o._strip(), i._strip(), "div" !== e && 0 !== r && i.iushrn(r), {
                                                div: o || null,
                                                mod: i
                                            };
                                        }, n9.prototype.divmod = function(t, e, r) {
                                            var s, a, o;
                                            return i14(!t.isZero()), this.isZero() ? {
                                                div: new n9(0),
                                                mod: new n9(0)
                                            } : 0 !== this.negative && 0 === t.negative ? (o = this.neg().divmod(t, e), "mod" !== e && (s = o.div.neg()), "div" !== e && (a = o.mod.neg(), r && 0 !== a.negative && a.iadd(t)), {
                                                div: s,
                                                mod: a
                                            }) : 0 === this.negative && 0 !== t.negative ? (o = this.divmod(t.neg(), e), "mod" !== e && (s = o.div.neg()), {
                                                div: s,
                                                mod: o.mod
                                            }) : 0 != (this.negative & t.negative) ? (o = this.neg().divmod(t.neg(), e), "div" !== e && (a = o.mod.neg(), r && 0 !== a.negative && a.isub(t)), {
                                                div: o.div,
                                                mod: a
                                            }) : t.length > this.length || this.cmp(t) < 0 ? {
                                                div: new n9(0),
                                                mod: this
                                            } : 1 === t.length ? "div" === e ? {
                                                div: this.divn(t.words[0]),
                                                mod: null
                                            } : "mod" === e ? {
                                                div: null,
                                                mod: new n9(this.modrn(t.words[0]))
                                            } : {
                                                div: this.divn(t.words[0]),
                                                mod: new n9(this.modrn(t.words[0]))
                                            } : this._wordDiv(t, e);
                                        }, n9.prototype.div = function(t) {
                                            return this.divmod(t, "div", !1).div;
                                        }, n9.prototype.mod = function(t) {
                                            return this.divmod(t, "mod", !1).mod;
                                        }, n9.prototype.umod = function(t) {
                                            return this.divmod(t, "mod", !0).mod;
                                        }, n9.prototype.divRound = function(t) {
                                            var e = this.divmod(t);
                                            if (e.mod.isZero()) return e.div;
                                            var r = 0 !== e.div.negative ? e.mod.isub(t) : e.mod, i = t.ushrn(1), s = t.andln(1), n = r.cmp(i);
                                            return n < 0 || 1 === s && 0 === n ? e.div : 0 !== e.div.negative ? e.div.isubn(1) : e.div.iaddn(1);
                                        }, n9.prototype.modrn = function(t) {
                                            var e = t < 0;
                                            e && (t = -t), i14(t <= 67108863);
                                            for(var r = 67108864 % t, s = 0, n = this.length - 1; n >= 0; n--)s = (r * s + (0 | this.words[n])) % t;
                                            return e ? -s : s;
                                        }, n9.prototype.modn = function(t) {
                                            return this.modrn(t);
                                        }, n9.prototype.idivn = function(t) {
                                            var e = t < 0;
                                            e && (t = -t), i14(t <= 67108863);
                                            for(var r = 0, s = this.length - 1; s >= 0; s--){
                                                var n = (0 | this.words[s]) + 67108864 * r;
                                                this.words[s] = n / t | 0, r = n % t;
                                            }
                                            return this._strip(), e ? this.ineg() : this;
                                        }, n9.prototype.divn = function(t) {
                                            return this.clone().idivn(t);
                                        }, n9.prototype.egcd = function(t) {
                                            i14(0 === t.negative), i14(!t.isZero());
                                            var e = this, r = t.clone();
                                            e = 0 !== e.negative ? e.umod(t) : e.clone();
                                            for(var s = new n9(1), a = new n9(0), o = new n9(0), h = new n9(1), f = 0; e.isEven() && r.isEven();)e.iushrn(1), r.iushrn(1), ++f;
                                            for(var c = r.clone(), u = e.clone(); !e.isZero();){
                                                for(var d = 0, l = 1; 0 == (e.words[0] & l) && d < 26; ++d, l <<= 1);
                                                if (d > 0) for(e.iushrn(d); d-- > 0;)(s.isOdd() || a.isOdd()) && (s.iadd(c), a.isub(u)), s.iushrn(1), a.iushrn(1);
                                                for(var p = 0, b = 1; 0 == (r.words[0] & b) && p < 26; ++p, b <<= 1);
                                                if (p > 0) for(r.iushrn(p); p-- > 0;)(o.isOdd() || h.isOdd()) && (o.iadd(c), h.isub(u)), o.iushrn(1), h.iushrn(1);
                                                e.cmp(r) >= 0 ? (e.isub(r), s.isub(o), a.isub(h)) : (r.isub(e), o.isub(s), h.isub(a));
                                            }
                                            return {
                                                a: o,
                                                b: h,
                                                gcd: r.iushln(f)
                                            };
                                        }, n9.prototype._invmp = function(t) {
                                            i14(0 === t.negative), i14(!t.isZero());
                                            var e = this, r = t.clone();
                                            e = 0 !== e.negative ? e.umod(t) : e.clone();
                                            for(var s, a = new n9(1), o = new n9(0), h = r.clone(); e.cmpn(1) > 0 && r.cmpn(1) > 0;){
                                                for(var f = 0, c = 1; 0 == (e.words[0] & c) && f < 26; ++f, c <<= 1);
                                                if (f > 0) for(e.iushrn(f); f-- > 0;)a.isOdd() && a.iadd(h), a.iushrn(1);
                                                for(var u = 0, d = 1; 0 == (r.words[0] & d) && u < 26; ++u, d <<= 1);
                                                if (u > 0) for(r.iushrn(u); u-- > 0;)o.isOdd() && o.iadd(h), o.iushrn(1);
                                                e.cmp(r) >= 0 ? (e.isub(r), a.isub(o)) : (r.isub(e), o.isub(a));
                                            }
                                            return (s = 0 === e.cmpn(1) ? a : o).cmpn(0) < 0 && s.iadd(t), s;
                                        }, n9.prototype.gcd = function(t) {
                                            if (this.isZero()) return t.abs();
                                            if (t.isZero()) return this.abs();
                                            var e = this.clone(), r = t.clone();
                                            e.negative = 0, r.negative = 0;
                                            for(var i = 0; e.isEven() && r.isEven(); i++)e.iushrn(1), r.iushrn(1);
                                            for(;;){
                                                for(; e.isEven();)e.iushrn(1);
                                                for(; r.isEven();)r.iushrn(1);
                                                var s = e.cmp(r);
                                                if (s < 0) {
                                                    var n = e;
                                                    e = r, r = n;
                                                } else if (0 === s || 0 === r.cmpn(1)) break;
                                                e.isub(r);
                                            }
                                            return r.iushln(i);
                                        }, n9.prototype.invm = function(t) {
                                            return this.egcd(t).a.umod(t);
                                        }, n9.prototype.isEven = function() {
                                            return 0 == (1 & this.words[0]);
                                        }, n9.prototype.isOdd = function() {
                                            return 1 == (1 & this.words[0]);
                                        }, n9.prototype.andln = function(t) {
                                            return this.words[0] & t;
                                        }, n9.prototype.bincn = function(t) {
                                            i14("number" == typeof t);
                                            var e = t % 26, r = (t - e) / 26, s = 1 << e;
                                            if (this.length <= r) return this._expand(r + 1), this.words[r] |= s, this;
                                            for(var n = s, a = r; 0 !== n && a < this.length; a++){
                                                var o = 0 | this.words[a];
                                                n = (o += n) >>> 26, o &= 67108863, this.words[a] = o;
                                            }
                                            return 0 !== n && (this.words[a] = n, this.length++), this;
                                        }, n9.prototype.isZero = function() {
                                            return 1 === this.length && 0 === this.words[0];
                                        }, n9.prototype.cmpn = function(t) {
                                            var e, r = t < 0;
                                            if (0 !== this.negative && !r) return -1;
                                            if (0 === this.negative && r) return 1;
                                            if (this._strip(), this.length > 1) e = 1;
                                            else {
                                                r && (t = -t), i14(t <= 67108863, "Number is too big");
                                                var s = 0 | this.words[0];
                                                e = s === t ? 0 : s < t ? -1 : 1;
                                            }
                                            return 0 !== this.negative ? 0 | -e : e;
                                        }, n9.prototype.cmp = function(t) {
                                            if (0 !== this.negative && 0 === t.negative) return -1;
                                            if (0 === this.negative && 0 !== t.negative) return 1;
                                            var e = this.ucmp(t);
                                            return 0 !== this.negative ? 0 | -e : e;
                                        }, n9.prototype.ucmp = function(t) {
                                            if (this.length > t.length) return 1;
                                            if (this.length < t.length) return -1;
                                            for(var e = 0, r = this.length - 1; r >= 0; r--){
                                                var i = 0 | this.words[r], s = 0 | t.words[r];
                                                if (i !== s) {
                                                    i < s ? e = -1 : i > s && (e = 1);
                                                    break;
                                                }
                                            }
                                            return e;
                                        }, n9.prototype.gtn = function(t) {
                                            return 1 === this.cmpn(t);
                                        }, n9.prototype.gt = function(t) {
                                            return 1 === this.cmp(t);
                                        }, n9.prototype.gten = function(t) {
                                            return this.cmpn(t) >= 0;
                                        }, n9.prototype.gte = function(t) {
                                            return this.cmp(t) >= 0;
                                        }, n9.prototype.ltn = function(t) {
                                            return -1 === this.cmpn(t);
                                        }, n9.prototype.lt = function(t) {
                                            return -1 === this.cmp(t);
                                        }, n9.prototype.lten = function(t) {
                                            return this.cmpn(t) <= 0;
                                        }, n9.prototype.lte = function(t) {
                                            return this.cmp(t) <= 0;
                                        }, n9.prototype.eqn = function(t) {
                                            return 0 === this.cmpn(t);
                                        }, n9.prototype.eq = function(t) {
                                            return 0 === this.cmp(t);
                                        }, n9.red = function(t) {
                                            return new E2(t);
                                        }, n9.prototype.toRed = function(t) {
                                            return i14(!this.red, "Already a number in reduction context"), i14(0 === this.negative, "red works only with positives"), t.convertTo(this)._forceRed(t);
                                        }, n9.prototype.fromRed = function() {
                                            return i14(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
                                        }, n9.prototype._forceRed = function(t) {
                                            return this.red = t, this;
                                        }, n9.prototype.forceRed = function(t) {
                                            return i14(!this.red, "Already a number in reduction context"), this._forceRed(t);
                                        }, n9.prototype.redAdd = function(t) {
                                            return i14(this.red, "redAdd works only with red numbers"), this.red.add(this, t);
                                        }, n9.prototype.redIAdd = function(t) {
                                            return i14(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, t);
                                        }, n9.prototype.redSub = function(t) {
                                            return i14(this.red, "redSub works only with red numbers"), this.red.sub(this, t);
                                        }, n9.prototype.redISub = function(t) {
                                            return i14(this.red, "redISub works only with red numbers"), this.red.isub(this, t);
                                        }, n9.prototype.redShl = function(t) {
                                            return i14(this.red, "redShl works only with red numbers"), this.red.shl(this, t);
                                        }, n9.prototype.redMul = function(t) {
                                            return i14(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), this.red.mul(this, t);
                                        }, n9.prototype.redIMul = function(t) {
                                            return i14(this.red, "redMul works only with red numbers"), this.red._verify2(this, t), this.red.imul(this, t);
                                        }, n9.prototype.redSqr = function() {
                                            return i14(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
                                        }, n9.prototype.redISqr = function() {
                                            return i14(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
                                        }, n9.prototype.redSqrt = function() {
                                            return i14(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
                                        }, n9.prototype.redInvm = function() {
                                            return i14(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
                                        }, n9.prototype.redNeg = function() {
                                            return i14(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
                                        }, n9.prototype.redPow = function(t) {
                                            return i14(this.red && !t.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, t);
                                        };
                                        var v3 = {
                                            k256: null,
                                            p224: null,
                                            p192: null,
                                            p25519: null
                                        };
                                        function S2(t, e) {
                                            this.name = t, this.p = new n9(e, 16), this.n = this.p.bitLength(), this.k = new n9(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
                                        }
                                        function _4() {
                                            S2.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                                        }
                                        function B1() {
                                            S2.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                                        }
                                        function I2() {
                                            S2.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                                        }
                                        function O1() {
                                            S2.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                                        }
                                        function E2(t) {
                                            if ("string" == typeof t) {
                                                var e = n9._prime(t);
                                                this.m = e.p, this.prime = e;
                                            } else i14(t.gtn(1), "modulus must be greater than 1"), this.m = t, this.prime = null;
                                        }
                                        function P2(t) {
                                            E2.call(this, t), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new n9(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
                                        }
                                        S2.prototype._tmp = function() {
                                            var t = new n9(null);
                                            return t.words = new Array(Math.ceil(this.n / 13)), t;
                                        }, S2.prototype.ireduce = function(t) {
                                            var e, r = t;
                                            do this.split(r, this.tmp), e = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength();
                                            while (e > this.n);
                                            var i = e < this.n ? -1 : r.ucmp(this.p);
                                            return 0 === i ? (r.words[0] = 0, r.length = 1) : i > 0 ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), r;
                                        }, S2.prototype.split = function(t, e) {
                                            t.iushrn(this.n, 0, e);
                                        }, S2.prototype.imulK = function(t) {
                                            return t.imul(this.k);
                                        }, s11(_4, S2), _4.prototype.split = function(t, e) {
                                            for(var r = 4194303, i = Math.min(t.length, 9), s = 0; s < i; s++)e.words[s] = t.words[s];
                                            if (e.length = i, t.length <= 9) return t.words[0] = 0, void (t.length = 1);
                                            var n = t.words[9];
                                            for(e.words[e.length++] = n & r, s = 10; s < t.length; s++){
                                                var a = 0 | t.words[s];
                                                t.words[s - 10] = (a & r) << 4 | n >>> 22, n = a;
                                            }
                                            n >>>= 22, t.words[s - 10] = n, 0 === n && t.length > 10 ? t.length -= 10 : t.length -= 9;
                                        }, _4.prototype.imulK = function(t) {
                                            t.words[t.length] = 0, t.words[t.length + 1] = 0, t.length += 2;
                                            for(var e = 0, r = 0; r < t.length; r++){
                                                var i = 0 | t.words[r];
                                                e += 977 * i, t.words[r] = 67108863 & e, e = 64 * i + (e / 67108864 | 0);
                                            }
                                            return 0 === t.words[t.length - 1] && (t.length--, 0 === t.words[t.length - 1] && t.length--), t;
                                        }, s11(B1, S2), s11(I2, S2), s11(O1, S2), O1.prototype.imulK = function(t) {
                                            for(var e = 0, r = 0; r < t.length; r++){
                                                var i = 19 * (0 | t.words[r]) + e, s = 67108863 & i;
                                                i >>>= 26, t.words[r] = s, e = i;
                                            }
                                            return 0 !== e && (t.words[t.length++] = e), t;
                                        }, n9._prime = function(t) {
                                            if (v3[t]) return v3[t];
                                            var e;
                                            if ("k256" === t) e = new _4();
                                            else if ("p224" === t) e = new B1();
                                            else if ("p192" === t) e = new I2();
                                            else {
                                                if ("p25519" !== t) throw new Error("Unknown prime " + t);
                                                e = new O1();
                                            }
                                            return v3[t] = e, e;
                                        }, E2.prototype._verify1 = function(t) {
                                            i14(0 === t.negative, "red works only with positives"), i14(t.red, "red works only with red numbers");
                                        }, E2.prototype._verify2 = function(t, e) {
                                            i14(0 == (t.negative | e.negative), "red works only with positives"), i14(t.red && t.red === e.red, "red works only with red numbers");
                                        }, E2.prototype.imod = function(t) {
                                            return this.prime ? this.prime.ireduce(t)._forceRed(this) : (c7(t, t.umod(this.m)._forceRed(this)), t);
                                        }, E2.prototype.neg = function(t) {
                                            return t.isZero() ? t.clone() : this.m.sub(t)._forceRed(this);
                                        }, E2.prototype.add = function(t, e) {
                                            this._verify2(t, e);
                                            var r = t.add(e);
                                            return r.cmp(this.m) >= 0 && r.isub(this.m), r._forceRed(this);
                                        }, E2.prototype.iadd = function(t, e) {
                                            this._verify2(t, e);
                                            var r = t.iadd(e);
                                            return r.cmp(this.m) >= 0 && r.isub(this.m), r;
                                        }, E2.prototype.sub = function(t, e) {
                                            this._verify2(t, e);
                                            var r = t.sub(e);
                                            return r.cmpn(0) < 0 && r.iadd(this.m), r._forceRed(this);
                                        }, E2.prototype.isub = function(t, e) {
                                            this._verify2(t, e);
                                            var r = t.isub(e);
                                            return r.cmpn(0) < 0 && r.iadd(this.m), r;
                                        }, E2.prototype.shl = function(t, e) {
                                            return this._verify1(t), this.imod(t.ushln(e));
                                        }, E2.prototype.imul = function(t, e) {
                                            return this._verify2(t, e), this.imod(t.imul(e));
                                        }, E2.prototype.mul = function(t, e) {
                                            return this._verify2(t, e), this.imod(t.mul(e));
                                        }, E2.prototype.isqr = function(t) {
                                            return this.imul(t, t.clone());
                                        }, E2.prototype.sqr = function(t) {
                                            return this.mul(t, t);
                                        }, E2.prototype.sqrt = function(t) {
                                            if (t.isZero()) return t.clone();
                                            var e = this.m.andln(3);
                                            if (i14(e % 2 == 1), 3 === e) {
                                                var r = this.m.add(new n9(1)).iushrn(2);
                                                return this.pow(t, r);
                                            }
                                            for(var s = this.m.subn(1), a = 0; !s.isZero() && 0 === s.andln(1);)a++, s.iushrn(1);
                                            i14(!s.isZero());
                                            var o = new n9(1).toRed(this), h = o.redNeg(), f = this.m.subn(1).iushrn(1), c = this.m.bitLength();
                                            for(c = new n9(2 * c * c).toRed(this); 0 !== this.pow(c, f).cmp(h);)c.redIAdd(h);
                                            for(var u = this.pow(c, s), d = this.pow(t, s.addn(1).iushrn(1)), l = this.pow(t, s), p = a; 0 !== l.cmp(o);){
                                                for(var b = l, m = 0; 0 !== b.cmp(o); m++)b = b.redSqr();
                                                i14(m < p);
                                                var g = this.pow(u, new n9(1).iushln(p - m - 1));
                                                d = d.redMul(g), u = g.redSqr(), l = l.redMul(u), p = m;
                                            }
                                            return d;
                                        }, E2.prototype.invm = function(t) {
                                            var e = t._invmp(this.m);
                                            return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
                                        }, E2.prototype.pow = function(t, e) {
                                            if (e.isZero()) return new n9(1).toRed(this);
                                            if (0 === e.cmpn(1)) return t.clone();
                                            var r = new Array(16);
                                            r[0] = new n9(1).toRed(this), r[1] = t;
                                            for(var i = 2; i < r.length; i++)r[i] = this.mul(r[i - 1], t);
                                            var s = r[0], a = 0, o = 0, h = e.bitLength() % 26;
                                            for(0 === h && (h = 26), i = e.length - 1; i >= 0; i--){
                                                for(var f = e.words[i], c = h - 1; c >= 0; c--){
                                                    var u = f >> c & 1;
                                                    s !== r[0] && (s = this.sqr(s)), 0 !== u || 0 !== a ? (a <<= 1, a |= u, (4 == ++o || 0 === i && 0 === c) && (s = this.mul(s, r[a]), o = 0, a = 0)) : o = 0;
                                                }
                                                h = 26;
                                            }
                                            return s;
                                        }, E2.prototype.convertTo = function(t) {
                                            var e = t.umod(this.m);
                                            return e === t ? e.clone() : e;
                                        }, E2.prototype.convertFrom = function(t) {
                                            var e = t.clone();
                                            return e.red = null, e;
                                        }, n9.mont = function(t) {
                                            return new P2(t);
                                        }, s11(P2, E2), P2.prototype.convertTo = function(t) {
                                            return this.imod(t.ushln(this.shift));
                                        }, P2.prototype.convertFrom = function(t) {
                                            var e = this.imod(t.mul(this.rinv));
                                            return e.red = null, e;
                                        }, P2.prototype.imul = function(t, e) {
                                            if (t.isZero() || e.isZero()) return t.words[0] = 0, t.length = 1, t;
                                            var r = t.imul(e), i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), s = r.isub(i).iushrn(this.shift), n = s;
                                            return s.cmp(this.m) >= 0 ? n = s.isub(this.m) : s.cmpn(0) < 0 && (n = s.iadd(this.m)), n._forceRed(this);
                                        }, P2.prototype.mul = function(t, e) {
                                            if (t.isZero() || e.isZero()) return new n9(0)._forceRed(this);
                                            var r = t.mul(e), i = r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), s = r.isub(i).iushrn(this.shift), a = s;
                                            return s.cmp(this.m) >= 0 ? a = s.isub(this.m) : s.cmpn(0) < 0 && (a = s.iadd(this.m)), a._forceRed(this);
                                        }, P2.prototype.invm = function(t) {
                                            return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this);
                                        };
                                    }(t45 = r14.nmd(t45), this);
                                },
                                931: function _(t51, e25, r16) {
                                    var i;
                                    function s(t) {
                                        this.rand = t;
                                    }
                                    if (t51.exports = function(t) {
                                        return i || (i = new s(null)), i.generate(t);
                                    }, t51.exports.Rand = s, s.prototype.generate = function(t) {
                                        return this._rand(t);
                                    }, s.prototype._rand = function(t) {
                                        if (this.rand.getBytes) return this.rand.getBytes(t);
                                        for(var e = new Uint8Array(t), r = 0; r < e.length; r++)e[r] = this.rand.getByte();
                                        return e;
                                    }, "object" == (typeof self === "undefined" ? "undefined" : _typeof(self))) self.crypto && self.crypto.getRandomValues ? s.prototype._rand = function(t) {
                                        var e = new Uint8Array(t);
                                        return self.crypto.getRandomValues(e), e;
                                    } : self.msCrypto && self.msCrypto.getRandomValues ? s.prototype._rand = function(t) {
                                        var e = new Uint8Array(t);
                                        return self.msCrypto.getRandomValues(e), e;
                                    } : "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (s.prototype._rand = function() {
                                        throw new Error("Not implemented yet");
                                    });
                                    else try {
                                        var n = r16(417);
                                        if ("function" != typeof n.randomBytes) throw new Error("Not supported");
                                        s.prototype._rand = function(t) {
                                            return n.randomBytes(t);
                                        };
                                    } catch (t) {}
                                },
                                191: function _(t, e, r) {
                                    var i = r(162);
                                    t.exports = i("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
                                },
                                555: function _(t, e, r) {
                                    t.exports = r(417).createHmac;
                                },
                                715: function _(t, e, r) {
                                    var i = e;
                                    i.utils = r(436), i.common = r(772), i.sha = r(41), i.ripemd = r(949), i.hmac = r(326), i.sha1 = i.sha.sha1, i.sha256 = i.sha.sha256, i.sha224 = i.sha.sha224, i.sha384 = i.sha.sha384, i.sha512 = i.sha.sha512, i.ripemd160 = i.ripemd.ripemd160;
                                },
                                772: function _(t52, e26, r17) {
                                    "use strict";
                                    var i16 = r17(436), s13 = r17(746);
                                    function n10() {
                                        this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
                                    }
                                    e26.BlockHash = n10, n10.prototype.update = function(t, e) {
                                        if (t = i16.toArray(t, e), this.pending ? this.pending = this.pending.concat(t) : this.pending = t, this.pendingTotal += t.length, this.pending.length >= this._delta8) {
                                            var r = (t = this.pending).length % this._delta8;
                                            this.pending = t.slice(t.length - r, t.length), 0 === this.pending.length && (this.pending = null), t = i16.join32(t, 0, t.length - r, this.endian);
                                            for(var s = 0; s < t.length; s += this._delta32)this._update(t, s, s + this._delta32);
                                        }
                                        return this;
                                    }, n10.prototype.digest = function(t) {
                                        return this.update(this._pad()), s13(null === this.pending), this._digest(t);
                                    }, n10.prototype._pad = function() {
                                        var t = this.pendingTotal, e = this._delta8, r = e - (t + this.padLength) % e, i = new Array(r + this.padLength);
                                        i[0] = 128;
                                        for(var s = 1; s < r; s++)i[s] = 0;
                                        if (t <<= 3, "big" === this.endian) {
                                            for(var n = 8; n < this.padLength; n++)i[s++] = 0;
                                            i[s++] = 0, i[s++] = 0, i[s++] = 0, i[s++] = 0, i[s++] = t >>> 24 & 255, i[s++] = t >>> 16 & 255, i[s++] = t >>> 8 & 255, i[s++] = 255 & t;
                                        } else for(i[s++] = 255 & t, i[s++] = t >>> 8 & 255, i[s++] = t >>> 16 & 255, i[s++] = t >>> 24 & 255, i[s++] = 0, i[s++] = 0, i[s++] = 0, i[s++] = 0, n = 8; n < this.padLength; n++)i[s++] = 0;
                                        return i;
                                    };
                                },
                                326: function _(t53, e27, r18) {
                                    "use strict";
                                    var i = r18(436), s = r18(746);
                                    function n(t, e, r) {
                                        if (!(this instanceof n)) return new n(t, e, r);
                                        this.Hash = t, this.blockSize = t.blockSize / 8, this.outSize = t.outSize / 8, this.inner = null, this.outer = null, this._init(i.toArray(e, r));
                                    }
                                    t53.exports = n, n.prototype._init = function(t) {
                                        t.length > this.blockSize && (t = new this.Hash().update(t).digest()), s(t.length <= this.blockSize);
                                        for(var e = t.length; e < this.blockSize; e++)t.push(0);
                                        for(e = 0; e < t.length; e++)t[e] ^= 54;
                                        for(this.inner = new this.Hash().update(t), e = 0; e < t.length; e++)t[e] ^= 106;
                                        this.outer = new this.Hash().update(t);
                                    }, n.prototype.update = function(t, e) {
                                        return this.inner.update(t, e), this;
                                    }, n.prototype.digest = function(t) {
                                        return this.outer.update(this.inner.digest()), this.outer.digest(t);
                                    };
                                },
                                949: function _5(t54, e28, r19) {
                                    "use strict";
                                    var i17 = r19(436), s14 = r19(772), n = i17.rotl32, a = i17.sum32, o = i17.sum32_3, h = i17.sum32_4, f8 = s14.BlockHash;
                                    function c9() {
                                        if (!(this instanceof c9)) return new c9();
                                        f8.call(this), this.h = [
                                            1732584193,
                                            4023233417,
                                            2562383102,
                                            271733878,
                                            3285377520
                                        ], this.endian = "little";
                                    }
                                    function u(t, e, r, i) {
                                        return t <= 15 ? e ^ r ^ i : t <= 31 ? e & r | ~e & i : t <= 47 ? (e | ~r) ^ i : t <= 63 ? e & i | r & ~i : e ^ (r | ~i);
                                    }
                                    function d(t) {
                                        return t <= 15 ? 0 : t <= 31 ? 1518500249 : t <= 47 ? 1859775393 : t <= 63 ? 2400959708 : 2840853838;
                                    }
                                    function l(t) {
                                        return t <= 15 ? 1352829926 : t <= 31 ? 1548603684 : t <= 47 ? 1836072691 : t <= 63 ? 2053994217 : 0;
                                    }
                                    i17.inherits(c9, f8), e28.ripemd160 = c9, c9.blockSize = 512, c9.outSize = 160, c9.hmacStrength = 192, c9.padLength = 64, c9.prototype._update = function(t, e) {
                                        for(var r = this.h[0], i = this.h[1], s = this.h[2], f = this.h[3], c = this.h[4], y = r, w = i, v = s, S = f, _ = c, B = 0; B < 80; B++){
                                            var I = a(n(h(r, u(B, i, s, f), t[p[B] + e], d(B)), m[B]), c);
                                            r = c, c = f, f = n(s, 10), s = i, i = I, I = a(n(h(y, u(79 - B, w, v, S), t[b[B] + e], l(B)), g[B]), _), y = _, _ = S, S = n(v, 10), v = w, w = I;
                                        }
                                        I = o(this.h[1], s, S), this.h[1] = o(this.h[2], f, _), this.h[2] = o(this.h[3], c, y), this.h[3] = o(this.h[4], r, w), this.h[4] = o(this.h[0], i, v), this.h[0] = I;
                                    }, c9.prototype._digest = function(t) {
                                        return "hex" === t ? i17.toHex32(this.h, "little") : i17.split32(this.h, "little");
                                    };
                                    var p = [
                                        0,
                                        1,
                                        2,
                                        3,
                                        4,
                                        5,
                                        6,
                                        7,
                                        8,
                                        9,
                                        10,
                                        11,
                                        12,
                                        13,
                                        14,
                                        15,
                                        7,
                                        4,
                                        13,
                                        1,
                                        10,
                                        6,
                                        15,
                                        3,
                                        12,
                                        0,
                                        9,
                                        5,
                                        2,
                                        14,
                                        11,
                                        8,
                                        3,
                                        10,
                                        14,
                                        4,
                                        9,
                                        15,
                                        8,
                                        1,
                                        2,
                                        7,
                                        0,
                                        6,
                                        13,
                                        11,
                                        5,
                                        12,
                                        1,
                                        9,
                                        11,
                                        10,
                                        0,
                                        8,
                                        12,
                                        4,
                                        13,
                                        3,
                                        7,
                                        15,
                                        14,
                                        5,
                                        6,
                                        2,
                                        4,
                                        0,
                                        5,
                                        9,
                                        7,
                                        12,
                                        2,
                                        10,
                                        14,
                                        1,
                                        3,
                                        8,
                                        11,
                                        6,
                                        15,
                                        13
                                    ], b = [
                                        5,
                                        14,
                                        7,
                                        0,
                                        9,
                                        2,
                                        11,
                                        4,
                                        13,
                                        6,
                                        15,
                                        8,
                                        1,
                                        10,
                                        3,
                                        12,
                                        6,
                                        11,
                                        3,
                                        7,
                                        0,
                                        13,
                                        5,
                                        10,
                                        14,
                                        15,
                                        8,
                                        12,
                                        4,
                                        9,
                                        1,
                                        2,
                                        15,
                                        5,
                                        1,
                                        3,
                                        7,
                                        14,
                                        6,
                                        9,
                                        11,
                                        8,
                                        12,
                                        2,
                                        10,
                                        0,
                                        4,
                                        13,
                                        8,
                                        6,
                                        4,
                                        1,
                                        3,
                                        11,
                                        15,
                                        0,
                                        5,
                                        12,
                                        2,
                                        13,
                                        9,
                                        7,
                                        10,
                                        14,
                                        12,
                                        15,
                                        10,
                                        4,
                                        1,
                                        5,
                                        8,
                                        7,
                                        6,
                                        2,
                                        13,
                                        14,
                                        0,
                                        3,
                                        9,
                                        11
                                    ], m = [
                                        11,
                                        14,
                                        15,
                                        12,
                                        5,
                                        8,
                                        7,
                                        9,
                                        11,
                                        13,
                                        14,
                                        15,
                                        6,
                                        7,
                                        9,
                                        8,
                                        7,
                                        6,
                                        8,
                                        13,
                                        11,
                                        9,
                                        7,
                                        15,
                                        7,
                                        12,
                                        15,
                                        9,
                                        11,
                                        7,
                                        13,
                                        12,
                                        11,
                                        13,
                                        6,
                                        7,
                                        14,
                                        9,
                                        13,
                                        15,
                                        14,
                                        8,
                                        13,
                                        6,
                                        5,
                                        12,
                                        7,
                                        5,
                                        11,
                                        12,
                                        14,
                                        15,
                                        14,
                                        15,
                                        9,
                                        8,
                                        9,
                                        14,
                                        5,
                                        6,
                                        8,
                                        6,
                                        5,
                                        12,
                                        9,
                                        15,
                                        5,
                                        11,
                                        6,
                                        8,
                                        13,
                                        12,
                                        5,
                                        12,
                                        13,
                                        14,
                                        11,
                                        8,
                                        5,
                                        6
                                    ], g = [
                                        8,
                                        9,
                                        9,
                                        11,
                                        13,
                                        15,
                                        15,
                                        5,
                                        7,
                                        7,
                                        8,
                                        11,
                                        14,
                                        14,
                                        12,
                                        6,
                                        9,
                                        13,
                                        15,
                                        7,
                                        12,
                                        8,
                                        9,
                                        11,
                                        7,
                                        7,
                                        12,
                                        7,
                                        6,
                                        15,
                                        13,
                                        11,
                                        9,
                                        7,
                                        15,
                                        11,
                                        8,
                                        6,
                                        6,
                                        14,
                                        12,
                                        13,
                                        5,
                                        14,
                                        13,
                                        13,
                                        7,
                                        5,
                                        15,
                                        5,
                                        8,
                                        11,
                                        14,
                                        14,
                                        6,
                                        14,
                                        6,
                                        9,
                                        12,
                                        9,
                                        12,
                                        5,
                                        15,
                                        8,
                                        8,
                                        5,
                                        12,
                                        9,
                                        12,
                                        5,
                                        14,
                                        6,
                                        8,
                                        13,
                                        6,
                                        5,
                                        15,
                                        13,
                                        11,
                                        11
                                    ];
                                },
                                41: function _(t, e, r) {
                                    "use strict";
                                    e.sha1 = r(761), e.sha224 = r(799), e.sha256 = r(344), e.sha384 = r(978), e.sha512 = r(900);
                                },
                                761: function _(t55, e29, r20) {
                                    "use strict";
                                    var i18 = r20(436), s15 = r20(772), n11 = r20(38), a = i18.rotl32, o = i18.sum32, h = i18.sum32_5, f = n11.ft_1, c10 = s15.BlockHash, u = [
                                        1518500249,
                                        1859775393,
                                        2400959708,
                                        3395469782
                                    ];
                                    function d5() {
                                        if (!(this instanceof d5)) return new d5();
                                        c10.call(this), this.h = [
                                            1732584193,
                                            4023233417,
                                            2562383102,
                                            271733878,
                                            3285377520
                                        ], this.W = new Array(80);
                                    }
                                    i18.inherits(d5, c10), t55.exports = d5, d5.blockSize = 512, d5.outSize = 160, d5.hmacStrength = 80, d5.padLength = 64, d5.prototype._update = function(t, e) {
                                        for(var r = this.W, i = 0; i < 16; i++)r[i] = t[e + i];
                                        for(; i < r.length; i++)r[i] = a(r[i - 3] ^ r[i - 8] ^ r[i - 14] ^ r[i - 16], 1);
                                        var s = this.h[0], n = this.h[1], c = this.h[2], d = this.h[3], l = this.h[4];
                                        for(i = 0; i < r.length; i++){
                                            var p = ~~(i / 20), b = h(a(s, 5), f(p, n, c, d), l, r[i], u[p]);
                                            l = d, d = c, c = a(n, 30), n = s, s = b;
                                        }
                                        this.h[0] = o(this.h[0], s), this.h[1] = o(this.h[1], n), this.h[2] = o(this.h[2], c), this.h[3] = o(this.h[3], d), this.h[4] = o(this.h[4], l);
                                    }, d5.prototype._digest = function(t) {
                                        return "hex" === t ? i18.toHex32(this.h, "big") : i18.split32(this.h, "big");
                                    };
                                },
                                799: function _(t56, e, r) {
                                    "use strict";
                                    var i = r(436), s = r(344);
                                    function n() {
                                        if (!(this instanceof n)) return new n();
                                        s.call(this), this.h = [
                                            3238371032,
                                            914150663,
                                            812702999,
                                            4144912697,
                                            4290775857,
                                            1750603025,
                                            1694076839,
                                            3204075428
                                        ];
                                    }
                                    i.inherits(n, s), t56.exports = n, n.blockSize = 512, n.outSize = 224, n.hmacStrength = 192, n.padLength = 64, n.prototype._digest = function(t) {
                                        return "hex" === t ? i.toHex32(this.h.slice(0, 7), "big") : i.split32(this.h.slice(0, 7), "big");
                                    };
                                },
                                344: function _6(t57, e30, r21) {
                                    "use strict";
                                    var i19 = r21(436), s16 = r21(772), n12 = r21(38), a = r21(746), o = i19.sum32, h = i19.sum32_4, f = i19.sum32_5, c = n12.ch32, u = n12.maj32, d = n12.s0_256, l = n12.s1_256, p = n12.g0_256, b = n12.g1_256, m4 = s16.BlockHash, g3 = [
                                        1116352408,
                                        1899447441,
                                        3049323471,
                                        3921009573,
                                        961987163,
                                        1508970993,
                                        2453635748,
                                        2870763221,
                                        3624381080,
                                        310598401,
                                        607225278,
                                        1426881987,
                                        1925078388,
                                        2162078206,
                                        2614888103,
                                        3248222580,
                                        3835390401,
                                        4022224774,
                                        264347078,
                                        604807628,
                                        770255983,
                                        1249150122,
                                        1555081692,
                                        1996064986,
                                        2554220882,
                                        2821834349,
                                        2952996808,
                                        3210313671,
                                        3336571891,
                                        3584528711,
                                        113926993,
                                        338241895,
                                        666307205,
                                        773529912,
                                        1294757372,
                                        1396182291,
                                        1695183700,
                                        1986661051,
                                        2177026350,
                                        2456956037,
                                        2730485921,
                                        2820302411,
                                        3259730800,
                                        3345764771,
                                        3516065817,
                                        3600352804,
                                        4094571909,
                                        275423344,
                                        430227734,
                                        506948616,
                                        659060556,
                                        883997877,
                                        958139571,
                                        1322822218,
                                        1537002063,
                                        1747873779,
                                        1955562222,
                                        2024104815,
                                        2227730452,
                                        2361852424,
                                        2428436474,
                                        2756734187,
                                        3204031479,
                                        3329325298
                                    ];
                                    function y5() {
                                        if (!(this instanceof y5)) return new y5();
                                        m4.call(this), this.h = [
                                            1779033703,
                                            3144134277,
                                            1013904242,
                                            2773480762,
                                            1359893119,
                                            2600822924,
                                            528734635,
                                            1541459225
                                        ], this.k = g3, this.W = new Array(64);
                                    }
                                    i19.inherits(y5, m4), t57.exports = y5, y5.blockSize = 512, y5.outSize = 256, y5.hmacStrength = 192, y5.padLength = 64, y5.prototype._update = function(t, e) {
                                        for(var r = this.W, i = 0; i < 16; i++)r[i] = t[e + i];
                                        for(; i < r.length; i++)r[i] = h(b(r[i - 2]), r[i - 7], p(r[i - 15]), r[i - 16]);
                                        var s = this.h[0], n = this.h[1], m = this.h[2], g = this.h[3], y = this.h[4], w = this.h[5], v = this.h[6], S = this.h[7];
                                        for(a(this.k.length === r.length), i = 0; i < r.length; i++){
                                            var _ = f(S, l(y), c(y, w, v), this.k[i], r[i]), B = o(d(s), u(s, n, m));
                                            S = v, v = w, w = y, y = o(g, _), g = m, m = n, n = s, s = o(_, B);
                                        }
                                        this.h[0] = o(this.h[0], s), this.h[1] = o(this.h[1], n), this.h[2] = o(this.h[2], m), this.h[3] = o(this.h[3], g), this.h[4] = o(this.h[4], y), this.h[5] = o(this.h[5], w), this.h[6] = o(this.h[6], v), this.h[7] = o(this.h[7], S);
                                    }, y5.prototype._digest = function(t) {
                                        return "hex" === t ? i19.toHex32(this.h, "big") : i19.split32(this.h, "big");
                                    };
                                },
                                978: function _(t58, e, r) {
                                    "use strict";
                                    var i = r(436), s = r(900);
                                    function n() {
                                        if (!(this instanceof n)) return new n();
                                        s.call(this), this.h = [
                                            3418070365,
                                            3238371032,
                                            1654270250,
                                            914150663,
                                            2438529370,
                                            812702999,
                                            355462360,
                                            4144912697,
                                            1731405415,
                                            4290775857,
                                            2394180231,
                                            1750603025,
                                            3675008525,
                                            1694076839,
                                            1203062813,
                                            3204075428
                                        ];
                                    }
                                    i.inherits(n, s), t58.exports = n, n.blockSize = 1024, n.outSize = 384, n.hmacStrength = 192, n.padLength = 128, n.prototype._digest = function(t) {
                                        return "hex" === t ? i.toHex32(this.h.slice(0, 12), "big") : i.split32(this.h.slice(0, 12), "big");
                                    };
                                },
                                900: function _(t59, e31, r22) {
                                    "use strict";
                                    var i20 = r22(436), s17 = r22(772), n13 = r22(746), a17 = i20.rotr64_hi, o8 = i20.rotr64_lo, h8 = i20.shr64_hi, f9 = i20.shr64_lo, c11 = i20.sum64, u7 = i20.sum64_hi, d6 = i20.sum64_lo, l5 = i20.sum64_4_hi, p5 = i20.sum64_4_lo, b12 = i20.sum64_5_hi, m5 = i20.sum64_5_lo, g4 = s17.BlockHash, y6 = [
                                        1116352408,
                                        3609767458,
                                        1899447441,
                                        602891725,
                                        3049323471,
                                        3964484399,
                                        3921009573,
                                        2173295548,
                                        961987163,
                                        4081628472,
                                        1508970993,
                                        3053834265,
                                        2453635748,
                                        2937671579,
                                        2870763221,
                                        3664609560,
                                        3624381080,
                                        2734883394,
                                        310598401,
                                        1164996542,
                                        607225278,
                                        1323610764,
                                        1426881987,
                                        3590304994,
                                        1925078388,
                                        4068182383,
                                        2162078206,
                                        991336113,
                                        2614888103,
                                        633803317,
                                        3248222580,
                                        3479774868,
                                        3835390401,
                                        2666613458,
                                        4022224774,
                                        944711139,
                                        264347078,
                                        2341262773,
                                        604807628,
                                        2007800933,
                                        770255983,
                                        1495990901,
                                        1249150122,
                                        1856431235,
                                        1555081692,
                                        3175218132,
                                        1996064986,
                                        2198950837,
                                        2554220882,
                                        3999719339,
                                        2821834349,
                                        766784016,
                                        2952996808,
                                        2566594879,
                                        3210313671,
                                        3203337956,
                                        3336571891,
                                        1034457026,
                                        3584528711,
                                        2466948901,
                                        113926993,
                                        3758326383,
                                        338241895,
                                        168717936,
                                        666307205,
                                        1188179964,
                                        773529912,
                                        1546045734,
                                        1294757372,
                                        1522805485,
                                        1396182291,
                                        2643833823,
                                        1695183700,
                                        2343527390,
                                        1986661051,
                                        1014477480,
                                        2177026350,
                                        1206759142,
                                        2456956037,
                                        344077627,
                                        2730485921,
                                        1290863460,
                                        2820302411,
                                        3158454273,
                                        3259730800,
                                        3505952657,
                                        3345764771,
                                        106217008,
                                        3516065817,
                                        3606008344,
                                        3600352804,
                                        1432725776,
                                        4094571909,
                                        1467031594,
                                        275423344,
                                        851169720,
                                        430227734,
                                        3100823752,
                                        506948616,
                                        1363258195,
                                        659060556,
                                        3750685593,
                                        883997877,
                                        3785050280,
                                        958139571,
                                        3318307427,
                                        1322822218,
                                        3812723403,
                                        1537002063,
                                        2003034995,
                                        1747873779,
                                        3602036899,
                                        1955562222,
                                        1575990012,
                                        2024104815,
                                        1125592928,
                                        2227730452,
                                        2716904306,
                                        2361852424,
                                        442776044,
                                        2428436474,
                                        593698344,
                                        2756734187,
                                        3733110249,
                                        3204031479,
                                        2999351573,
                                        3329325298,
                                        3815920427,
                                        3391569614,
                                        3928383900,
                                        3515267271,
                                        566280711,
                                        3940187606,
                                        3454069534,
                                        4118630271,
                                        4000239992,
                                        116418474,
                                        1914138554,
                                        174292421,
                                        2731055270,
                                        289380356,
                                        3203993006,
                                        460393269,
                                        320620315,
                                        685471733,
                                        587496836,
                                        852142971,
                                        1086792851,
                                        1017036298,
                                        365543100,
                                        1126000580,
                                        2618297676,
                                        1288033470,
                                        3409855158,
                                        1501505948,
                                        4234509866,
                                        1607167915,
                                        987167468,
                                        1816402316,
                                        1246189591
                                    ];
                                    function w20() {
                                        if (!(this instanceof w20)) return new w20();
                                        g4.call(this), this.h = [
                                            1779033703,
                                            4089235720,
                                            3144134277,
                                            2227873595,
                                            1013904242,
                                            4271175723,
                                            2773480762,
                                            1595750129,
                                            1359893119,
                                            2917565137,
                                            2600822924,
                                            725511199,
                                            528734635,
                                            4215389547,
                                            1541459225,
                                            327033209
                                        ], this.k = y6, this.W = new Array(160);
                                    }
                                    function v(t, e, r, i, s) {
                                        var n = t & r ^ ~t & s;
                                        return n < 0 && (n += 4294967296), n;
                                    }
                                    function S(t, e, r, i, s, n) {
                                        var a = e & i ^ ~e & n;
                                        return a < 0 && (a += 4294967296), a;
                                    }
                                    function _(t, e, r, i, s) {
                                        var n = t & r ^ t & s ^ r & s;
                                        return n < 0 && (n += 4294967296), n;
                                    }
                                    function B(t, e, r, i, s, n) {
                                        var a = e & i ^ e & n ^ i & n;
                                        return a < 0 && (a += 4294967296), a;
                                    }
                                    function I(t, e) {
                                        var r = a17(t, e, 28) ^ a17(e, t, 2) ^ a17(e, t, 7);
                                        return r < 0 && (r += 4294967296), r;
                                    }
                                    function O(t, e) {
                                        var r = o8(t, e, 28) ^ o8(e, t, 2) ^ o8(e, t, 7);
                                        return r < 0 && (r += 4294967296), r;
                                    }
                                    function E(t, e) {
                                        var r = o8(t, e, 14) ^ o8(t, e, 18) ^ o8(e, t, 9);
                                        return r < 0 && (r += 4294967296), r;
                                    }
                                    function P3(t, e) {
                                        var r = a17(t, e, 1) ^ a17(t, e, 8) ^ h8(t, e, 7);
                                        return r < 0 && (r += 4294967296), r;
                                    }
                                    function k5(t, e) {
                                        var r = o8(t, e, 1) ^ o8(t, e, 8) ^ f9(t, e, 7);
                                        return r < 0 && (r += 4294967296), r;
                                    }
                                    function N2(t, e) {
                                        var r = o8(t, e, 19) ^ o8(e, t, 29) ^ f9(t, e, 6);
                                        return r < 0 && (r += 4294967296), r;
                                    }
                                    i20.inherits(w20, g4), t59.exports = w20, w20.blockSize = 1024, w20.outSize = 512, w20.hmacStrength = 192, w20.padLength = 128, w20.prototype._prepareBlock = function(t, e) {
                                        for(var r = this.W, i = 0; i < 32; i++)r[i] = t[e + i];
                                        for(; i < r.length; i += 2){
                                            var s = (m = r[i - 4], g = r[i - 3], y = void 0, (y = a17(m, g, 19) ^ a17(g, m, 29) ^ h8(m, g, 6)) < 0 && (y += 4294967296), y), n = N2(r[i - 4], r[i - 3]), o = r[i - 14], f = r[i - 13], c = P3(r[i - 30], r[i - 29]), u = k5(r[i - 30], r[i - 29]), d = r[i - 32], b = r[i - 31];
                                            r[i] = l5(s, n, o, f, c, u, d, b), r[i + 1] = p5(s, n, o, f, c, u, d, b);
                                        }
                                        var m, g, y;
                                    }, w20.prototype._update = function(t, e) {
                                        this._prepareBlock(t, e);
                                        var r, i, s, o = this.W, h = this.h[0], f = this.h[1], l = this.h[2], p = this.h[3], g = this.h[4], y = this.h[5], w = this.h[6], P = this.h[7], k = this.h[8], N = this.h[9], A = this.h[10], x = this.h[11], R = this.h[12], M = this.h[13], T = this.h[14], C = this.h[15];
                                        n13(this.k.length === o.length);
                                        for(var H = 0; H < o.length; H += 2){
                                            var L = T, K = C, F = (s = void 0, (s = a17(r = k, i = N, 14) ^ a17(r, i, 18) ^ a17(i, r, 9)) < 0 && (s += 4294967296), s), U = E(k, N), D = v(k, 0, A, 0, R), V = S(0, N, 0, x, 0, M), j = this.k[H], q = this.k[H + 1], z = o[H], G = o[H + 1], J = b12(L, K, F, U, D, V, j, q, z, G), Y = m5(L, K, F, U, D, V, j, q, z, G);
                                            L = I(h, f), K = O(h, f), F = _(h, 0, l, 0, g), U = B(0, f, 0, p, 0, y);
                                            var W = u7(L, K, F, U), Q = d6(L, K, F, U);
                                            T = R, C = M, R = A, M = x, A = k, x = N, k = u7(w, P, J, Y), N = d6(P, P, J, Y), w = g, P = y, g = l, y = p, l = h, p = f, h = u7(J, Y, W, Q), f = d6(J, Y, W, Q);
                                        }
                                        c11(this.h, 0, h, f), c11(this.h, 2, l, p), c11(this.h, 4, g, y), c11(this.h, 6, w, P), c11(this.h, 8, k, N), c11(this.h, 10, A, x), c11(this.h, 12, R, M), c11(this.h, 14, T, C);
                                    }, w20.prototype._digest = function(t) {
                                        return "hex" === t ? i20.toHex32(this.h, "big") : i20.split32(this.h, "big");
                                    };
                                },
                                38: function _(t60, e32, r23) {
                                    "use strict";
                                    var i21 = r23(436).rotr32;
                                    function s(t, e, r) {
                                        return t & e ^ ~t & r;
                                    }
                                    function n(t, e, r) {
                                        return t & e ^ t & r ^ e & r;
                                    }
                                    function a(t, e, r) {
                                        return t ^ e ^ r;
                                    }
                                    e32.ft_1 = function(t, e, r, i) {
                                        return 0 === t ? s(e, r, i) : 1 === t || 3 === t ? a(e, r, i) : 2 === t ? n(e, r, i) : void 0;
                                    }, e32.ch32 = s, e32.maj32 = n, e32.p32 = a, e32.s0_256 = function(t) {
                                        return i21(t, 2) ^ i21(t, 13) ^ i21(t, 22);
                                    }, e32.s1_256 = function(t) {
                                        return i21(t, 6) ^ i21(t, 11) ^ i21(t, 25);
                                    }, e32.g0_256 = function(t) {
                                        return i21(t, 7) ^ i21(t, 18) ^ t >>> 3;
                                    }, e32.g1_256 = function(t) {
                                        return i21(t, 17) ^ i21(t, 19) ^ t >>> 10;
                                    };
                                },
                                436: function _(t61, e33, r24) {
                                    "use strict";
                                    var i22 = r24(746), s18 = r24(378);
                                    function n14(t, e) {
                                        return 55296 == (64512 & t.charCodeAt(e)) && !(e < 0 || e + 1 >= t.length) && 56320 == (64512 & t.charCodeAt(e + 1));
                                    }
                                    function a18(t) {
                                        return (t >>> 24 | t >>> 8 & 65280 | t << 8 & 16711680 | (255 & t) << 24) >>> 0;
                                    }
                                    function o9(t) {
                                        return 1 === t.length ? "0" + t : t;
                                    }
                                    function h9(t) {
                                        return 7 === t.length ? "0" + t : 6 === t.length ? "00" + t : 5 === t.length ? "000" + t : 4 === t.length ? "0000" + t : 3 === t.length ? "00000" + t : 2 === t.length ? "000000" + t : 1 === t.length ? "0000000" + t : t;
                                    }
                                    e33.inherits = s18, e33.toArray = function(t, e) {
                                        if (Array.isArray(t)) return t.slice();
                                        if (!t) return [];
                                        var r = [];
                                        if ("string" == typeof t) {
                                            if (e) {
                                                if ("hex" === e) for((t = t.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t = "0" + t), s = 0; s < t.length; s += 2)r.push(parseInt(t[s] + t[s + 1], 16));
                                            } else for(var i = 0, s = 0; s < t.length; s++){
                                                var a = t.charCodeAt(s);
                                                a < 128 ? r[i++] = a : a < 2048 ? (r[i++] = a >> 6 | 192, r[i++] = 63 & a | 128) : n14(t, s) ? (a = 65536 + ((1023 & a) << 10) + (1023 & t.charCodeAt(++s)), r[i++] = a >> 18 | 240, r[i++] = a >> 12 & 63 | 128, r[i++] = a >> 6 & 63 | 128, r[i++] = 63 & a | 128) : (r[i++] = a >> 12 | 224, r[i++] = a >> 6 & 63 | 128, r[i++] = 63 & a | 128);
                                            }
                                        } else for(s = 0; s < t.length; s++)r[s] = 0 | t[s];
                                        return r;
                                    }, e33.toHex = function(t) {
                                        for(var e = "", r = 0; r < t.length; r++)e += o9(t[r].toString(16));
                                        return e;
                                    }, e33.htonl = a18, e33.toHex32 = function(t, e) {
                                        for(var r = "", i = 0; i < t.length; i++){
                                            var s = t[i];
                                            "little" === e && (s = a18(s)), r += h9(s.toString(16));
                                        }
                                        return r;
                                    }, e33.zero2 = o9, e33.zero8 = h9, e33.join32 = function(t, e, r, s) {
                                        var n = r - e;
                                        i22(n % 4 == 0);
                                        for(var a = new Array(n / 4), o = 0, h = e; o < a.length; o++, h += 4){
                                            var f;
                                            f = "big" === s ? t[h] << 24 | t[h + 1] << 16 | t[h + 2] << 8 | t[h + 3] : t[h + 3] << 24 | t[h + 2] << 16 | t[h + 1] << 8 | t[h], a[o] = f >>> 0;
                                        }
                                        return a;
                                    }, e33.split32 = function(t, e) {
                                        for(var r = new Array(4 * t.length), i = 0, s = 0; i < t.length; i++, s += 4){
                                            var n = t[i];
                                            "big" === e ? (r[s] = n >>> 24, r[s + 1] = n >>> 16 & 255, r[s + 2] = n >>> 8 & 255, r[s + 3] = 255 & n) : (r[s + 3] = n >>> 24, r[s + 2] = n >>> 16 & 255, r[s + 1] = n >>> 8 & 255, r[s] = 255 & n);
                                        }
                                        return r;
                                    }, e33.rotr32 = function(t, e) {
                                        return t >>> e | t << 32 - e;
                                    }, e33.rotl32 = function(t, e) {
                                        return t << e | t >>> 32 - e;
                                    }, e33.sum32 = function(t, e) {
                                        return t + e >>> 0;
                                    }, e33.sum32_3 = function(t, e, r) {
                                        return t + e + r >>> 0;
                                    }, e33.sum32_4 = function(t, e, r, i) {
                                        return t + e + r + i >>> 0;
                                    }, e33.sum32_5 = function(t, e, r, i, s) {
                                        return t + e + r + i + s >>> 0;
                                    }, e33.sum64 = function(t, e, r, i) {
                                        var s = t[e], n = i + t[e + 1] >>> 0, a = (n < i ? 1 : 0) + r + s;
                                        t[e] = a >>> 0, t[e + 1] = n;
                                    }, e33.sum64_hi = function(t, e, r, i) {
                                        return (e + i >>> 0 < e ? 1 : 0) + t + r >>> 0;
                                    }, e33.sum64_lo = function(t, e, r, i) {
                                        return e + i >>> 0;
                                    }, e33.sum64_4_hi = function(t, e, r, i, s, n, a, o) {
                                        var h = 0, f = e;
                                        return h += (f = f + i >>> 0) < e ? 1 : 0, h += (f = f + n >>> 0) < n ? 1 : 0, t + r + s + a + (h += (f = f + o >>> 0) < o ? 1 : 0) >>> 0;
                                    }, e33.sum64_4_lo = function(t, e, r, i, s, n, a, o) {
                                        return e + i + n + o >>> 0;
                                    }, e33.sum64_5_hi = function(t, e, r, i, s, n, a, o, h, f) {
                                        var c = 0, u = e;
                                        return c += (u = u + i >>> 0) < e ? 1 : 0, c += (u = u + n >>> 0) < n ? 1 : 0, c += (u = u + o >>> 0) < o ? 1 : 0, t + r + s + a + h + (c += (u = u + f >>> 0) < f ? 1 : 0) >>> 0;
                                    }, e33.sum64_5_lo = function(t, e, r, i, s, n, a, o, h, f) {
                                        return e + i + n + o + f >>> 0;
                                    }, e33.rotr64_hi = function(t, e, r) {
                                        return (e << 32 - r | t >>> r) >>> 0;
                                    }, e33.rotr64_lo = function(t, e, r) {
                                        return (t << 32 - r | e >>> r) >>> 0;
                                    }, e33.shr64_hi = function(t, e, r) {
                                        return t >>> r;
                                    }, e33.shr64_lo = function(t, e, r) {
                                        return (t << 32 - r | e >>> r) >>> 0;
                                    };
                                },
                                156: function _(t62, e34, r25) {
                                    "use strict";
                                    var i23 = r25(715), s19 = r25(504), n15 = r25(746);
                                    function a19(t) {
                                        if (!(this instanceof a19)) return new a19(t);
                                        this.hash = t.hash, this.predResist = !!t.predResist, this.outLen = this.hash.outSize, this.minEntropy = t.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
                                        var e = s19.toArray(t.entropy, t.entropyEnc || "hex"), r = s19.toArray(t.nonce, t.nonceEnc || "hex"), i = s19.toArray(t.pers, t.persEnc || "hex");
                                        n15(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(e, r, i);
                                    }
                                    t62.exports = a19, a19.prototype._init = function(t, e, r) {
                                        var i = t.concat(e).concat(r);
                                        this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
                                        for(var s = 0; s < this.V.length; s++)this.K[s] = 0, this.V[s] = 1;
                                        this._update(i), this._reseed = 1, this.reseedInterval = 281474976710656;
                                    }, a19.prototype._hmac = function() {
                                        return new i23.hmac(this.hash, this.K);
                                    }, a19.prototype._update = function(t) {
                                        var e = this._hmac().update(this.V).update([
                                            0
                                        ]);
                                        t && (e = e.update(t)), this.K = e.digest(), this.V = this._hmac().update(this.V).digest(), t && (this.K = this._hmac().update(this.V).update([
                                            1
                                        ]).update(t).digest(), this.V = this._hmac().update(this.V).digest());
                                    }, a19.prototype.reseed = function(t, e, r, i) {
                                        "string" != typeof e && (i = r, r = e, e = null), t = s19.toArray(t, e), r = s19.toArray(r, i), n15(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(t.concat(r || [])), this._reseed = 1;
                                    }, a19.prototype.generate = function(t, e, r, i) {
                                        if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
                                        "string" != typeof e && (i = r, r = e, e = null), r && (r = s19.toArray(r, i || "hex"), this._update(r));
                                        for(var n = []; n.length < t;)this.V = this._hmac().update(this.V).digest(), n = n.concat(this.V);
                                        var a = n.slice(0, t);
                                        return this._update(r), this._reseed++, s19.encode(a, e);
                                    };
                                },
                                378: function _(t, e, r) {
                                    try {
                                        var i = r(669);
                                        if ("function" != typeof i.inherits) throw "";
                                        t.exports = i.inherits;
                                    } catch (e35) {
                                        t.exports = r(717);
                                    }
                                },
                                717: function _(t63) {
                                    "function" == typeof Object.create ? t63.exports = function(t, e) {
                                        e && (t.super_ = e, t.prototype = Object.create(e.prototype, {
                                            constructor: {
                                                value: t,
                                                enumerable: !1,
                                                writable: !0,
                                                configurable: !0
                                            }
                                        }));
                                    } : t63.exports = function(t, e) {
                                        if (e) {
                                            t.super_ = e;
                                            var r = function r() {};
                                            r.prototype = e.prototype, t.prototype = new r(), t.prototype.constructor = t;
                                        }
                                    };
                                },
                                484: function _(t64) {
                                    "use strict";
                                    var e = /([0-9]|[a-f])/gim;
                                    t64.exports = function(t) {
                                        return "string" == typeof t && (t.match(e) || []).length === t.length;
                                    };
                                },
                                746: function _(t65) {
                                    function e36(t, e) {
                                        if (!t) throw new Error(e || "Assertion failed");
                                    }
                                    t65.exports = e36, e36.equal = function(t, e, r) {
                                        if (t != e) throw new Error(r || "Assertion failed: " + t + " != " + e);
                                    };
                                },
                                504: function _(t66, e37) {
                                    "use strict";
                                    var r26 = e37;
                                    function i24(t) {
                                        return 1 === t.length ? "0" + t : t;
                                    }
                                    function s20(t) {
                                        for(var e = "", r = 0; r < t.length; r++)e += i24(t[r].toString(16));
                                        return e;
                                    }
                                    r26.toArray = function(t, e) {
                                        if (Array.isArray(t)) return t.slice();
                                        if (!t) return [];
                                        var r = [];
                                        if ("string" != typeof t) {
                                            for(var i = 0; i < t.length; i++)r[i] = 0 | t[i];
                                            return r;
                                        }
                                        if ("hex" === e) for((t = t.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (t = "0" + t), i = 0; i < t.length; i += 2)r.push(parseInt(t[i] + t[i + 1], 16));
                                        else for(i = 0; i < t.length; i++){
                                            var s = t.charCodeAt(i), n = s >> 8, a = 255 & s;
                                            n ? r.push(n, a) : r.push(a);
                                        }
                                        return r;
                                    }, r26.zero2 = i24, r26.toHex = s20, r26.encode = function(t, e) {
                                        return "hex" === e ? s20(t) : t;
                                    };
                                },
                                601: function _(t67, e38, r27) {
                                    var i = r27(417), s = r27(357), n = r27(368), a = r27(777);
                                    i.pbkdf2Sync && -1 !== i.pbkdf2Sync.toString().indexOf("keylen, digest") ? (e38.pbkdf2Sync = function(t, e, r, o, h) {
                                        return s(r, o), t = a(t, n, "Password"), e = a(e, n, "Salt"), h = h || "sha1", i.pbkdf2Sync(t, e, r, o, h);
                                    }, e38.pbkdf2 = function(t, e, r, o, h, f) {
                                        if (s(r, o), t = a(t, n, "Password"), e = a(e, n, "Salt"), "function" == typeof h && (f = h, h = "sha1"), "function" != typeof f) throw new Error("No callback provided to pbkdf2");
                                        return i.pbkdf2(t, e, r, o, h, f);
                                    }) : (e38.pbkdf2Sync = r27(493), e38.pbkdf2 = r27(638));
                                },
                                638: function _(t68, e39, r28) {
                                    var i25, s = r28(509).Buffer, n16 = r28(357), a = r28(368), o = r28(493), h = r28(777), f = global.crypto && global.crypto.subtle, c = {
                                        sha: "SHA-1",
                                        "sha-1": "SHA-1",
                                        sha1: "SHA-1",
                                        sha256: "SHA-256",
                                        "sha-256": "SHA-256",
                                        sha384: "SHA-384",
                                        "sha-384": "SHA-384",
                                        "sha-512": "SHA-512",
                                        sha512: "SHA-512"
                                    }, u = [];
                                    function d(t69, e, r, i, n) {
                                        return f.importKey("raw", t69, {
                                            name: "PBKDF2"
                                        }, !1, [
                                            "deriveBits"
                                        ]).then(function(t) {
                                            return f.deriveBits({
                                                name: "PBKDF2",
                                                salt: e,
                                                iterations: r,
                                                hash: {
                                                    name: n
                                                }
                                            }, t, i << 3);
                                        }).then(function(t) {
                                            return s.from(t);
                                        });
                                    }
                                    t68.exports = function(t70, e40, r, l, p, b) {
                                        "function" == typeof p && (b = p, p = void 0);
                                        var m = c[(p = p || "sha1").toLowerCase()];
                                        if (!m || "function" != typeof global.Promise) return process.nextTick(function() {
                                            var i;
                                            try {
                                                i = o(t70, e40, r, l, p);
                                            } catch (t) {
                                                return b(t);
                                            }
                                            b(null, i);
                                        });
                                        if (n16(r, l), t70 = h(t70, a, "Password"), e40 = h(e40, a, "Salt"), "function" != typeof b) throw new Error("No callback provided to pbkdf2");
                                        !function(t71, e) {
                                            t71.then(function(t) {
                                                process.nextTick(function() {
                                                    e(null, t);
                                                });
                                            }, function(t) {
                                                process.nextTick(function() {
                                                    e(t);
                                                });
                                            });
                                        }((function(t) {
                                            if (global.process && !global.process.browser) return Promise.resolve(!1);
                                            if (!f || !f.importKey || !f.deriveBits) return Promise.resolve(!1);
                                            if (void 0 !== u[t]) return u[t];
                                            var e = d(i25 = i25 || s.alloc(8), i25, 10, 128, t).then(function() {
                                                return !0;
                                            })["catch"](function() {
                                                return !1;
                                            });
                                            return u[t] = e, e;
                                        })(m).then(function(i) {
                                            return i ? d(t70, e40, r, l, m) : o(t70, e40, r, l, p);
                                        }), b);
                                    };
                                },
                                368: function _(t) {
                                    var e;
                                    e = process.browser ? "utf-8" : process.version ? parseInt(process.version.split(".")[0].slice(1), 10) >= 6 ? "utf-8" : "binary" : "utf-8", t.exports = e;
                                },
                                357: function _(t72) {
                                    var e = Math.pow(2, 30) - 1;
                                    t72.exports = function(t, r) {
                                        if ("number" != typeof t) throw new TypeError("Iterations not a number");
                                        if (t < 0) throw new TypeError("Bad iterations");
                                        if ("number" != typeof r) throw new TypeError("Key length not a number");
                                        if (r < 0 || r > e || r != r) throw new TypeError("Bad key length");
                                    };
                                },
                                493: function _(t73, e41, r29) {
                                    var i = {
                                        md5: 16,
                                        sha1: 20,
                                        sha224: 28,
                                        sha256: 32,
                                        sha384: 48,
                                        sha512: 64,
                                        rmd160: 20,
                                        ripemd160: 20
                                    }, s = r29(555), n = r29(509).Buffer, a = r29(357), o = r29(368), h = r29(777);
                                    t73.exports = function(t, e, r, f, c) {
                                        a(r, f), t = h(t, o, "Password"), e = h(e, o, "Salt"), c = c || "sha1";
                                        var u = n.allocUnsafe(f), d = n.allocUnsafe(e.length + 4);
                                        e.copy(d, 0, 0, e.length);
                                        for(var l = 0, p = i[c], b = Math.ceil(f / p), m = 1; m <= b; m++){
                                            d.writeUInt32BE(m, e.length);
                                            for(var g = s(c, t).update(d).digest(), y = g, w = 1; w < r; w++){
                                                y = s(c, t).update(y).digest();
                                                for(var v = 0; v < p; v++)g[v] ^= y[v];
                                            }
                                            g.copy(u, l), l += p;
                                        }
                                        return u;
                                    };
                                },
                                777: function _(t74, e42, r30) {
                                    var i = r30(509).Buffer;
                                    t74.exports = function(t, e, r) {
                                        if (i.isBuffer(t)) return t;
                                        if ("string" == typeof t) return i.from(t, e);
                                        if (ArrayBuffer.isView(t)) return i.from(t.buffer);
                                        throw new TypeError(r + " must be a string, a Buffer, a typed array or a DataView");
                                    };
                                },
                                353: function _(t, e, r) {
                                    t.exports = r(417).randomBytes;
                                },
                                509: function _(t75, e43, r31) {
                                    var i26 = r31(293), s = i26.Buffer;
                                    function n(t, e) {
                                        for(var r in t)e[r] = t[r];
                                    }
                                    function a(t, e, r) {
                                        return s(t, e, r);
                                    }
                                    s.from && s.alloc && s.allocUnsafe && s.allocUnsafeSlow ? t75.exports = i26 : (n(i26, e43), e43.Buffer = a), a.prototype = Object.create(s.prototype), n(s, a), a.from = function(t, e, r) {
                                        if ("number" == typeof t) throw new TypeError("Argument must not be a number");
                                        return s(t, e, r);
                                    }, a.alloc = function(t, e, r) {
                                        if ("number" != typeof t) throw new TypeError("Argument must be a number");
                                        var i = s(t);
                                        return void 0 !== e ? "string" == typeof r ? i.fill(e, r) : i.fill(e) : i.fill(0), i;
                                    }, a.allocUnsafe = function(t) {
                                        if ("number" != typeof t) throw new TypeError("Argument must be a number");
                                        return s(t);
                                    }, a.allocUnsafeSlow = function(t) {
                                        if ("number" != typeof t) throw new TypeError("Argument must be a number");
                                        return i26.SlowBuffer(t);
                                    };
                                },
                                293: function _(t) {
                                    "use strict";
                                    t.exports = require("buffer");
                                },
                                417: function _(t) {
                                    "use strict";
                                    t.exports = require("crypto");
                                },
                                669: function _(t) {
                                    "use strict";
                                    t.exports = require("util");
                                }
                            }, e6 = {};
                            function r3(i) {
                                var s = e6[i];
                                if (void 0 !== s) return s.exports;
                                var n = e6[i] = {
                                    id: i,
                                    loaded: !1,
                                    exports: {}
                                };
                                return t4[i].call(n.exports, n, n.exports, r3), n.loaded = !0, n.exports;
                            }
                            r3.n = function(t) {
                                var e = t && t.__esModule ? function() {
                                    return t["default"];
                                } : function() {
                                    return t;
                                };
                                return r3.d(e, {
                                    a: e
                                }), e;
                            }, r3.d = function(t, e) {
                                for(var i in e)r3.o(e, i) && !r3.o(t, i) && Object.defineProperty(t, i, {
                                    enumerable: !0,
                                    get: e[i]
                                });
                            }, r3.o = function(t, e) {
                                return Object.prototype.hasOwnProperty.call(t, e);
                            }, r3.r = function(t) {
                                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                                    value: "Module"
                                }), Object.defineProperty(t, "__esModule", {
                                    value: !0
                                });
                            }, r3.nmd = function(t) {
                                return t.paths = [], t.children || (t.children = []), t;
                            };
                            var i5 = r3(671);
                            module.exports = i5;
                        })();
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer);
            },
            {
                "_process": 163,
                "buffer": 63,
                "crypto": 73,
                "util": 203
            }
        ],
        227: [
            function(require, module, exports) {
                arguments[4][70][0].apply(exports, arguments);
            },
            {
                "dup": 70,
                "md5.js": 245
            }
        ],
        228: [
            function(require, module, exports) {
                arguments[4][113][0].apply(exports, arguments);
            },
            {
                "dup": 113,
                "inherits": 242,
                "readable-stream": 270,
                "safe-buffer": 272
            }
        ],
        229: [
            function(require, module, exports) {
                arguments[4][129][0].apply(exports, arguments);
            },
            {
                "./hash/common": 230,
                "./hash/hmac": 231,
                "./hash/ripemd": 232,
                "./hash/sha": 233,
                "./hash/utils": 240,
                "dup": 129
            }
        ],
        230: [
            function(require, module, exports) {
                arguments[4][130][0].apply(exports, arguments);
            },
            {
                "./utils": 240,
                "dup": 130,
                "minimalistic-assert": 246
            }
        ],
        231: [
            function(require, module, exports) {
                arguments[4][131][0].apply(exports, arguments);
            },
            {
                "./utils": 240,
                "dup": 131,
                "minimalistic-assert": 246
            }
        ],
        232: [
            function(require, module, exports) {
                arguments[4][132][0].apply(exports, arguments);
            },
            {
                "./common": 230,
                "./utils": 240,
                "dup": 132
            }
        ],
        233: [
            function(require, module, exports) {
                arguments[4][133][0].apply(exports, arguments);
            },
            {
                "./sha/1": 234,
                "./sha/224": 235,
                "./sha/256": 236,
                "./sha/384": 237,
                "./sha/512": 238,
                "dup": 133
            }
        ],
        234: [
            function(require, module, exports) {
                arguments[4][134][0].apply(exports, arguments);
            },
            {
                "../common": 230,
                "../utils": 240,
                "./common": 239,
                "dup": 134
            }
        ],
        235: [
            function(require, module, exports) {
                arguments[4][135][0].apply(exports, arguments);
            },
            {
                "../utils": 240,
                "./256": 236,
                "dup": 135
            }
        ],
        236: [
            function(require, module, exports) {
                arguments[4][136][0].apply(exports, arguments);
            },
            {
                "../common": 230,
                "../utils": 240,
                "./common": 239,
                "dup": 136,
                "minimalistic-assert": 246
            }
        ],
        237: [
            function(require, module, exports) {
                arguments[4][137][0].apply(exports, arguments);
            },
            {
                "../utils": 240,
                "./512": 238,
                "dup": 137
            }
        ],
        238: [
            function(require, module, exports) {
                arguments[4][138][0].apply(exports, arguments);
            },
            {
                "../common": 230,
                "../utils": 240,
                "dup": 138,
                "minimalistic-assert": 246
            }
        ],
        239: [
            function(require, module, exports) {
                arguments[4][139][0].apply(exports, arguments);
            },
            {
                "../utils": 240,
                "dup": 139
            }
        ],
        240: [
            function(require, module, exports) {
                arguments[4][140][0].apply(exports, arguments);
            },
            {
                "dup": 140,
                "inherits": 242,
                "minimalistic-assert": 246
            }
        ],
        241: [
            function(require, module, exports) {
                arguments[4][141][0].apply(exports, arguments);
            },
            {
                "dup": 141,
                "hash.js": 229,
                "minimalistic-assert": 246,
                "minimalistic-crypto-utils": 247
            }
        ],
        242: [
            function(require, module, exports) {
                arguments[4][143][0].apply(exports, arguments);
            },
            {
                "dup": 143
            }
        ],
        243: [
            function(require, module, exports) {
                "use strict";
                var hexRegEx = /([0-9]|[a-f])/gim;
                module.exports = function(input) {
                    return typeof input === "string" && (input.match(hexRegEx) || []).length === input.length;
                };
            },
            {}
        ],
        244: [
            function(require, module, exports) {
                "use strict"; // the whatwg-fetch polyfill installs the fetch() function
                // on the global object (window or self)
                //
                // Return that as the export for use in Webpack, Browserify etc.
                require("whatwg-fetch");
                module.exports = self.fetch.bind(self);
            },
            {
                "whatwg-fetch": 283
            }
        ],
        245: [
            function(require, module, exports) {
                arguments[4][147][0].apply(exports, arguments);
            },
            {
                "dup": 147,
                "hash-base": 228,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        246: [
            function(require, module, exports) {
                arguments[4][150][0].apply(exports, arguments);
            },
            {
                "dup": 150
            }
        ],
        247: [
            function(require, module, exports) {
                arguments[4][151][0].apply(exports, arguments);
            },
            {
                "dup": 151
            }
        ],
        248: [
            function(require, module, exports) {
                (function(global, factory) {
                    _typeof(exports) === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
                })(this, function() {
                    "use strict";
                    var hookCallback;
                    function hooks() {
                        return hookCallback.apply(null, arguments);
                    } // This is done to register the method called with moment()
                    // without creating circular dependencies.
                    function setHookCallback(callback) {
                        hookCallback = callback;
                    }
                    function isArray(input) {
                        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
                    }
                    function isObject(input) {
                        // IE8 will treat undefined and null as object if it wasn't for
                        // input != null
                        return input != null && Object.prototype.toString.call(input) === "[object Object]";
                    }
                    function hasOwnProp(a, b) {
                        return Object.prototype.hasOwnProperty.call(a, b);
                    }
                    function isObjectEmpty(obj) {
                        if (Object.getOwnPropertyNames) return Object.getOwnPropertyNames(obj).length === 0;
                        else {
                            var k;
                            for(k in obj){
                                if (hasOwnProp(obj, k)) return false;
                            }
                            return true;
                        }
                    }
                    function isUndefined(input) {
                        return input === void 0;
                    }
                    function isNumber(input) {
                        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
                    }
                    function isDate(input) {
                        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
                    }
                    function map(arr, fn) {
                        var res = [], i, arrLen = arr.length;
                        for(i = 0; i < arrLen; ++i)res.push(fn(arr[i], i));
                        return res;
                    }
                    function extend(a, b) {
                        for(var i in b)if (hasOwnProp(b, i)) a[i] = b[i];
                        if (hasOwnProp(b, "toString")) a.toString = b.toString;
                        if (hasOwnProp(b, "valueOf")) a.valueOf = b.valueOf;
                        return a;
                    }
                    function createUTC(input, format, locale, strict) {
                        return createLocalOrUTC(input, format, locale, strict, true).utc();
                    }
                    function defaultParsingFlags() {
                        // We need to deep clone this object.
                        return {
                            empty: false,
                            unusedTokens: [],
                            unusedInput: [],
                            overflow: -2,
                            charsLeftOver: 0,
                            nullInput: false,
                            invalidEra: null,
                            invalidMonth: null,
                            invalidFormat: false,
                            userInvalidated: false,
                            iso: false,
                            parsedDateParts: [],
                            era: null,
                            meridiem: null,
                            rfc2822: false,
                            weekdayMismatch: false
                        };
                    }
                    function getParsingFlags(m) {
                        if (m._pf == null) m._pf = defaultParsingFlags();
                        return m._pf;
                    }
                    var some;
                    if (Array.prototype.some) some = Array.prototype.some;
                    else some = function some(fun) {
                        var t = Object(this), len = t.length >>> 0, i;
                        for(i = 0; i < len; i++){
                            if (i in t && fun.call(this, t[i], i, t)) return true;
                        }
                        return false;
                    };
                    function isValid(m) {
                        if (m._isValid == null) {
                            var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i) {
                                return i != null;
                            }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
                            if (m._strict) isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
                            if (Object.isFrozen == null || !Object.isFrozen(m)) m._isValid = isNowValid;
                            else return isNowValid;
                        }
                        return m._isValid;
                    }
                    function createInvalid(flags) {
                        var m = createUTC(NaN);
                        if (flags != null) extend(getParsingFlags(m), flags);
                        else getParsingFlags(m).userInvalidated = true;
                        return m;
                    } // Plugins that add properties should also add the key here (null value),
                    // so we can properly clone ourselves.
                    var momentProperties = hooks.momentProperties = [], updateInProgress = false;
                    function copyConfig(to, from) {
                        var i, prop, val, momentPropertiesLen = momentProperties.length;
                        if (!isUndefined(from._isAMomentObject)) to._isAMomentObject = from._isAMomentObject;
                        if (!isUndefined(from._i)) to._i = from._i;
                        if (!isUndefined(from._f)) to._f = from._f;
                        if (!isUndefined(from._l)) to._l = from._l;
                        if (!isUndefined(from._strict)) to._strict = from._strict;
                        if (!isUndefined(from._tzm)) to._tzm = from._tzm;
                        if (!isUndefined(from._isUTC)) to._isUTC = from._isUTC;
                        if (!isUndefined(from._offset)) to._offset = from._offset;
                        if (!isUndefined(from._pf)) to._pf = getParsingFlags(from);
                        if (!isUndefined(from._locale)) to._locale = from._locale;
                        if (momentPropertiesLen > 0) for(i = 0; i < momentPropertiesLen; i++){
                            prop = momentProperties[i];
                            val = from[prop];
                            if (!isUndefined(val)) to[prop] = val;
                        }
                        return to;
                    } // Moment prototype object
                    function Moment(config) {
                        copyConfig(this, config);
                        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
                        if (!this.isValid()) this._d = new Date(NaN);
                         // Prevent infinite loop in case updateOffset creates new moment
                        // objects.
                        if (updateInProgress === false) {
                            updateInProgress = true;
                            hooks.updateOffset(this);
                            updateInProgress = false;
                        }
                    }
                    function isMoment(obj) {
                        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
                    }
                    function warn(msg) {
                        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) console.warn("Deprecation warning: " + msg);
                    }
                    function deprecate(msg, fn) {
                        var firstTime = true;
                        return extend(function() {
                            if (hooks.deprecationHandler != null) hooks.deprecationHandler(null, msg);
                            if (firstTime) {
                                var args = [], arg, i, key, argLen = arguments.length;
                                for(i = 0; i < argLen; i++){
                                    arg = "";
                                    if (_typeof(arguments[i]) === "object") {
                                        arg += "\n[" + i + "] ";
                                        for(key in arguments[0])if (hasOwnProp(arguments[0], key)) arg += key + ": " + arguments[0][key] + ", ";
                                        arg = arg.slice(0, -2); // Remove trailing comma and space
                                    } else arg = arguments[i];
                                    args.push(arg);
                                }
                                warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
                                firstTime = false;
                            }
                            return fn.apply(this, arguments);
                        }, fn);
                    }
                    var deprecations = {};
                    function deprecateSimple(name, msg) {
                        if (hooks.deprecationHandler != null) hooks.deprecationHandler(name, msg);
                        if (!deprecations[name]) {
                            warn(msg);
                            deprecations[name] = true;
                        }
                    }
                    hooks.suppressDeprecationWarnings = false;
                    hooks.deprecationHandler = null;
                    function isFunction(input) {
                        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
                    }
                    function set(config) {
                        var prop, i;
                        for(i in config)if (hasOwnProp(config, i)) {
                            prop = config[i];
                            if (isFunction(prop)) this[i] = prop;
                            else this["_" + i] = prop;
                        }
                        this._config = config; // Lenient ordinal parsing accepts just a number in addition to
                        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
                        // TODO: Remove "ordinalParse" fallback in next major release.
                        this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
                    }
                    function mergeConfigs(parentConfig, childConfig) {
                        var res = extend({}, parentConfig), prop;
                        for(prop in childConfig)if (hasOwnProp(childConfig, prop)) {
                            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                                res[prop] = {};
                                extend(res[prop], parentConfig[prop]);
                                extend(res[prop], childConfig[prop]);
                            } else if (childConfig[prop] != null) res[prop] = childConfig[prop];
                            else delete res[prop];
                        }
                        for(prop in parentConfig)if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) // make sure changes to properties don't modify parent config
                        res[prop] = extend({}, res[prop]);
                        return res;
                    }
                    function Locale(config) {
                        if (config != null) this.set(config);
                    }
                    var keys;
                    if (Object.keys) keys = Object.keys;
                    else keys = function keys(obj) {
                        var i, res = [];
                        for(i in obj)if (hasOwnProp(obj, i)) res.push(i);
                        return res;
                    };
                    var defaultCalendar = {
                        sameDay: "[Today at] LT",
                        nextDay: "[Tomorrow at] LT",
                        nextWeek: "dddd [at] LT",
                        lastDay: "[Yesterday at] LT",
                        lastWeek: "[Last] dddd [at] LT",
                        sameElse: "L"
                    };
                    function calendar(key, mom, now) {
                        var output = this._calendar[key] || this._calendar["sameElse"];
                        return isFunction(output) ? output.call(mom, now) : output;
                    }
                    function zeroFill(number, targetLength, forceSign) {
                        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
                        return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
                    }
                    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {}; // token:    'M'
                    // padded:   ['MM', 2]
                    // ordinal:  'Mo'
                    // callback: function () { this.month() + 1 }
                    function addFormatToken(token, padded, ordinal, callback) {
                        var func = callback;
                        if (typeof callback === "string") func = function func() {
                            return this[callback]();
                        };
                        if (token) formatTokenFunctions[token] = func;
                        if (padded) formatTokenFunctions[padded[0]] = function() {
                            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                        };
                        if (ordinal) formatTokenFunctions[ordinal] = function() {
                            return this.localeData().ordinal(func.apply(this, arguments), token);
                        };
                    }
                    function removeFormattingTokens(input) {
                        if (input.match(/\[[\s\S]/)) return input.replace(/^\[|\]$/g, "");
                        return input.replace(/\\/g, "");
                    }
                    function makeFormatFunction(format) {
                        var array = format.match(formattingTokens), i27, length;
                        for(i27 = 0, length = array.length; i27 < length; i27++)if (formatTokenFunctions[array[i27]]) array[i27] = formatTokenFunctions[array[i27]];
                        else array[i27] = removeFormattingTokens(array[i27]);
                        return function(mom) {
                            var output = "", i;
                            for(i = 0; i < length; i++)output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
                            return output;
                        };
                    } // format date using native date object
                    function formatMoment(m, format) {
                        if (!m.isValid()) return m.localeData().invalidDate();
                        format = expandFormat(format, m.localeData());
                        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
                        return formatFunctions[format](m);
                    }
                    function expandFormat(format, locale) {
                        var i = 5;
                        function replaceLongDateFormatTokens(input) {
                            return locale.longDateFormat(input) || input;
                        }
                        localFormattingTokens.lastIndex = 0;
                        while(i >= 0 && localFormattingTokens.test(format)){
                            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
                            localFormattingTokens.lastIndex = 0;
                            i -= 1;
                        }
                        return format;
                    }
                    var defaultLongDateFormat = {
                        LTS: "h:mm:ss A",
                        LT: "h:mm A",
                        L: "MM/DD/YYYY",
                        LL: "MMMM D, YYYY",
                        LLL: "MMMM D, YYYY h:mm A",
                        LLLL: "dddd, MMMM D, YYYY h:mm A"
                    };
                    function longDateFormat(key) {
                        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
                        if (format || !formatUpper) return format;
                        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
                            if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") return tok.slice(1);
                            return tok;
                        }).join("");
                        return this._longDateFormat[key];
                    }
                    var defaultInvalidDate = "Invalid date";
                    function invalidDate() {
                        return this._invalidDate;
                    }
                    var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
                    function ordinal1(number) {
                        return this._ordinal.replace("%d", number);
                    }
                    var defaultRelativeTime = {
                        future: "in %s",
                        past: "%s ago",
                        s: "a few seconds",
                        ss: "%d seconds",
                        m: "a minute",
                        mm: "%d minutes",
                        h: "an hour",
                        hh: "%d hours",
                        d: "a day",
                        dd: "%d days",
                        w: "a week",
                        ww: "%d weeks",
                        M: "a month",
                        MM: "%d months",
                        y: "a year",
                        yy: "%d years"
                    };
                    function relativeTime(number, withoutSuffix, string, isFuture) {
                        var output = this._relativeTime[string];
                        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
                    }
                    function pastFuture(diff, output) {
                        var format = this._relativeTime[diff > 0 ? "future" : "past"];
                        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
                    }
                    var aliases = {};
                    function addUnitAlias(unit, shorthand) {
                        var lowerCase = unit.toLowerCase();
                        aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
                    }
                    function normalizeUnits(units) {
                        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : undefined;
                    }
                    function normalizeObjectUnits(inputObject) {
                        var normalizedInput = {}, normalizedProp, prop;
                        for(prop in inputObject)if (hasOwnProp(inputObject, prop)) {
                            normalizedProp = normalizeUnits(prop);
                            if (normalizedProp) normalizedInput[normalizedProp] = inputObject[prop];
                        }
                        return normalizedInput;
                    }
                    var priorities = {};
                    function addUnitPriority(unit, priority) {
                        priorities[unit] = priority;
                    }
                    function getPrioritizedUnits(unitsObj) {
                        var units = [], u;
                        for(u in unitsObj)if (hasOwnProp(unitsObj, u)) units.push({
                            unit: u,
                            priority: priorities[u]
                        });
                        units.sort(function(a, b) {
                            return a.priority - b.priority;
                        });
                        return units;
                    }
                    function isLeapYear(year) {
                        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
                    }
                    function absFloor(number) {
                        if (number < 0) // -0 -> 0
                        return Math.ceil(number) || 0;
                        else return Math.floor(number);
                    }
                    function toInt(argumentForCoercion) {
                        var coercedNumber = +argumentForCoercion, value = 0;
                        if (coercedNumber !== 0 && isFinite(coercedNumber)) value = absFloor(coercedNumber);
                        return value;
                    }
                    function makeGetSet(unit, keepTime) {
                        return function(value) {
                            if (value != null) {
                                set$1(this, unit, value);
                                hooks.updateOffset(this, keepTime);
                                return this;
                            } else return get(this, unit);
                        };
                    }
                    function get(mom, unit) {
                        return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
                    }
                    function set$1(mom, unit, value) {
                        if (mom.isValid() && !isNaN(value)) {
                            if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                                value = toInt(value);
                                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
                            } else mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
                        }
                    } // MOMENTS
                    function stringGet(units) {
                        units = normalizeUnits(units);
                        if (isFunction(this[units])) return this[units]();
                        return this;
                    }
                    function stringSet(units, value) {
                        if (_typeof(units) === "object") {
                            units = normalizeObjectUnits(units);
                            var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
                            for(i = 0; i < prioritizedLen; i++)this[prioritized[i].unit](units[prioritized[i].unit]);
                        } else {
                            units = normalizeUnits(units);
                            if (isFunction(this[units])) return this[units](value);
                        }
                        return this;
                    }
                    var match1 = /\d/, //       0 - 9
                    match2 = /\d\d/, //      00 - 99
                    match3 = /\d{3}/, //     000 - 999
                    match4 = /\d{4}/, //    0000 - 9999
                    match6 = /[+-]?\d{6}/, // -999999 - 999999
                    match1to2 = /\d\d?/, //       0 - 99
                    match3to4 = /\d\d\d\d?/, //     999 - 9999
                    match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
                    match1to3 = /\d{1,3}/, //       0 - 999
                    match1to4 = /\d{1,4}/, //       0 - 9999
                    match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
                    matchUnsigned = /\d+/, //       0 - inf
                    matchSigned = /[+-]?\d+/, //    -inf - inf
                    matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
                    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
                    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
                    // any word (or two) characters or numbers including two/three word month in arabic.
                    // includes scottish gaelic two word and hyphenated months
                    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
                    regexes = {};
                    function addRegexToken(token, regex, strictRegex) {
                        regexes[token] = isFunction(regex) ? regex : function(isStrict, localeData) {
                            return isStrict && strictRegex ? strictRegex : regex;
                        };
                    }
                    function getParseRegexForToken(token, config) {
                        if (!hasOwnProp(regexes, token)) return new RegExp(unescapeFormat(token));
                        return regexes[token](config._strict, config._locale);
                    } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
                    function unescapeFormat(s) {
                        return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
                            return p1 || p2 || p3 || p4;
                        }));
                    }
                    function regexEscape(s) {
                        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
                    }
                    var tokens1 = {};
                    function addParseToken(token, callback) {
                        var i, func = callback, tokenLen;
                        if (typeof token === "string") token = [
                            token
                        ];
                        if (isNumber(callback)) func = function func(input, array) {
                            array[callback] = toInt(input);
                        };
                        tokenLen = token.length;
                        for(i = 0; i < tokenLen; i++)tokens1[token[i]] = func;
                    }
                    function addWeekParseToken(token2, callback) {
                        addParseToken(token2, function(input, array, config, token) {
                            config._w = config._w || {};
                            callback(input, config._w, config, token);
                        });
                    }
                    function addTimeToArrayFromToken(token, input, config) {
                        if (input != null && hasOwnProp(tokens1, token)) tokens1[token](input, config._a, config, token);
                    }
                    var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
                    function mod(n, x) {
                        return (n % x + x) % x;
                    }
                    var indexOf;
                    if (Array.prototype.indexOf) indexOf = Array.prototype.indexOf;
                    else indexOf = function indexOf(o) {
                        // I know
                        var i;
                        for(i = 0; i < this.length; ++i){
                            if (this[i] === o) return i;
                        }
                        return -1;
                    };
                    function daysInMonth(year, month) {
                        if (isNaN(year) || isNaN(month)) return NaN;
                        var modMonth = mod(month, 12);
                        year += (month - modMonth) / 12;
                        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
                    } // FORMATTING
                    addFormatToken("M", [
                        "MM",
                        2
                    ], "Mo", function() {
                        return this.month() + 1;
                    });
                    addFormatToken("MMM", 0, 0, function(format) {
                        return this.localeData().monthsShort(this, format);
                    });
                    addFormatToken("MMMM", 0, 0, function(format) {
                        return this.localeData().months(this, format);
                    }); // ALIASES
                    addUnitAlias("month", "M"); // PRIORITY
                    addUnitPriority("month", 8); // PARSING
                    addRegexToken("M", match1to2);
                    addRegexToken("MM", match1to2, match2);
                    addRegexToken("MMM", function(isStrict, locale) {
                        return locale.monthsShortRegex(isStrict);
                    });
                    addRegexToken("MMMM", function(isStrict, locale) {
                        return locale.monthsRegex(isStrict);
                    });
                    addParseToken([
                        "M",
                        "MM"
                    ], function(input, array) {
                        array[MONTH] = toInt(input) - 1;
                    });
                    addParseToken([
                        "MMM",
                        "MMMM"
                    ], function(input, array, config, token) {
                        var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.
                        if (month != null) array[MONTH] = month;
                        else getParsingFlags(config).invalidMonth = input;
                    }); // LOCALES
                    var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
                    function localeMonths(m, format) {
                        if (!m) return isArray(this._months) ? this._months : this._months["standalone"];
                        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()];
                    }
                    function localeMonthsShort(m, format) {
                        if (!m) return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
                        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()];
                    }
                    function handleStrictParse(monthName, format, strict) {
                        var i, ii, mom, llc = monthName.toLocaleLowerCase();
                        if (!this._monthsParse) {
                            // this is not used
                            this._monthsParse = [];
                            this._longMonthsParse = [];
                            this._shortMonthsParse = [];
                            for(i = 0; i < 12; ++i){
                                mom = createUTC([
                                    2000,
                                    i
                                ]);
                                this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
                                this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
                            }
                        }
                        if (strict) {
                            if (format === "MMM") {
                                ii = indexOf.call(this._shortMonthsParse, llc);
                                return ii !== -1 ? ii : null;
                            } else {
                                ii = indexOf.call(this._longMonthsParse, llc);
                                return ii !== -1 ? ii : null;
                            }
                        } else if (format === "MMM") {
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            if (ii !== -1) return ii;
                            ii = indexOf.call(this._longMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        } else {
                            ii = indexOf.call(this._longMonthsParse, llc);
                            if (ii !== -1) return ii;
                            ii = indexOf.call(this._shortMonthsParse, llc);
                            return ii !== -1 ? ii : null;
                        }
                    }
                    function localeMonthsParse(monthName, format, strict) {
                        var i, mom, regex;
                        if (this._monthsParseExact) return handleStrictParse.call(this, monthName, format, strict);
                        if (!this._monthsParse) {
                            this._monthsParse = [];
                            this._longMonthsParse = [];
                            this._shortMonthsParse = [];
                        } // TODO: add sorting
                        // Sorting makes sure if one month (or abbr) is a prefix of another
                        // see sorting in computeMonthsParse
                        for(i = 0; i < 12; i++){
                            // make the regex if we don't have it already
                            mom = createUTC([
                                2000,
                                i
                            ]);
                            if (strict && !this._longMonthsParse[i]) {
                                this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                                this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
                            }
                            if (!strict && !this._monthsParse[i]) {
                                regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                                this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
                            } // test the regex
                            if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) return i;
                            else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) return i;
                            else if (!strict && this._monthsParse[i].test(monthName)) return i;
                        }
                    } // MOMENTS
                    function setMonth(mom, value) {
                        var dayOfMonth;
                        if (!mom.isValid()) // No op
                        return mom;
                        if (typeof value === "string") {
                            if (/^\d+$/.test(value)) value = toInt(value);
                            else {
                                value = mom.localeData().monthsParse(value); // TODO: Another silent failure?
                                if (!isNumber(value)) return mom;
                            }
                        }
                        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
                        mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
                        return mom;
                    }
                    function getSetMonth(value) {
                        if (value != null) {
                            setMonth(this, value);
                            hooks.updateOffset(this, true);
                            return this;
                        } else return get(this, "Month");
                    }
                    function getDaysInMonth() {
                        return daysInMonth(this.year(), this.month());
                    }
                    function monthsShortRegex(isStrict) {
                        if (this._monthsParseExact) {
                            if (!hasOwnProp(this, "_monthsRegex")) computeMonthsParse.call(this);
                            if (isStrict) return this._monthsShortStrictRegex;
                            else return this._monthsShortRegex;
                        } else {
                            if (!hasOwnProp(this, "_monthsShortRegex")) this._monthsShortRegex = defaultMonthsShortRegex;
                            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
                        }
                    }
                    function monthsRegex(isStrict) {
                        if (this._monthsParseExact) {
                            if (!hasOwnProp(this, "_monthsRegex")) computeMonthsParse.call(this);
                            if (isStrict) return this._monthsStrictRegex;
                            else return this._monthsRegex;
                        } else {
                            if (!hasOwnProp(this, "_monthsRegex")) this._monthsRegex = defaultMonthsRegex;
                            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
                        }
                    }
                    function computeMonthsParse() {
                        function cmpLenRev(a, b) {
                            return b.length - a.length;
                        }
                        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
                        for(i = 0; i < 12; i++){
                            // make the regex if we don't have it already
                            mom = createUTC([
                                2000,
                                i
                            ]);
                            shortPieces.push(this.monthsShort(mom, ""));
                            longPieces.push(this.months(mom, ""));
                            mixedPieces.push(this.months(mom, ""));
                            mixedPieces.push(this.monthsShort(mom, ""));
                        } // Sorting makes sure if one month (or abbr) is a prefix of another it
                        // will match the longer piece.
                        shortPieces.sort(cmpLenRev);
                        longPieces.sort(cmpLenRev);
                        mixedPieces.sort(cmpLenRev);
                        for(i = 0; i < 12; i++){
                            shortPieces[i] = regexEscape(shortPieces[i]);
                            longPieces[i] = regexEscape(longPieces[i]);
                        }
                        for(i = 0; i < 24; i++)mixedPieces[i] = regexEscape(mixedPieces[i]);
                        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
                        this._monthsShortRegex = this._monthsRegex;
                        this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
                        this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
                    } // FORMATTING
                    addFormatToken("Y", 0, 0, function() {
                        var y = this.year();
                        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
                    });
                    addFormatToken(0, [
                        "YY",
                        2
                    ], 0, function() {
                        return this.year() % 100;
                    });
                    addFormatToken(0, [
                        "YYYY",
                        4
                    ], 0, "year");
                    addFormatToken(0, [
                        "YYYYY",
                        5
                    ], 0, "year");
                    addFormatToken(0, [
                        "YYYYYY",
                        6,
                        true
                    ], 0, "year"); // ALIASES
                    addUnitAlias("year", "y"); // PRIORITIES
                    addUnitPriority("year", 1); // PARSING
                    addRegexToken("Y", matchSigned);
                    addRegexToken("YY", match1to2, match2);
                    addRegexToken("YYYY", match1to4, match4);
                    addRegexToken("YYYYY", match1to6, match6);
                    addRegexToken("YYYYYY", match1to6, match6);
                    addParseToken([
                        "YYYYY",
                        "YYYYYY"
                    ], YEAR);
                    addParseToken("YYYY", function(input, array) {
                        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
                    });
                    addParseToken("YY", function(input, array) {
                        array[YEAR] = hooks.parseTwoDigitYear(input);
                    });
                    addParseToken("Y", function(input, array) {
                        array[YEAR] = parseInt(input, 10);
                    }); // HELPERS
                    function daysInYear(year) {
                        return isLeapYear(year) ? 366 : 365;
                    } // HOOKS
                    hooks.parseTwoDigitYear = function(input) {
                        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
                    }; // MOMENTS
                    var getSetYear = makeGetSet("FullYear", true);
                    function getIsLeapYear() {
                        return isLeapYear(this.year());
                    }
                    function createDate(y, m, d, h, M, s, ms) {
                        // can't just apply() to create a date:
                        // https://stackoverflow.com/q/181348
                        var date; // the date constructor remaps years 0-99 to 1900-1999
                        if (y < 100 && y >= 0) {
                            // preserve leap years using a full 400 year cycle, then reset
                            date = new Date(y + 400, m, d, h, M, s, ms);
                            if (isFinite(date.getFullYear())) date.setFullYear(y);
                        } else date = new Date(y, m, d, h, M, s, ms);
                        return date;
                    }
                    function createUTCDate(y) {
                        var date, args; // the Date.UTC function remaps years 0-99 to 1900-1999
                        if (y < 100 && y >= 0) {
                            args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset
                            args[0] = y + 400;
                            date = new Date(Date.UTC.apply(null, args));
                            if (isFinite(date.getUTCFullYear())) date.setUTCFullYear(y);
                        } else date = new Date(Date.UTC.apply(null, arguments));
                        return date;
                    } // start-of-first-week - start-of-year
                    function firstWeekOffset(year, dow, doy) {
                        var fwd = 7 + dow - doy, // first-week day local weekday -- which local weekday is fwd
                        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
                        return -fwdlw + fwd - 1;
                    } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
                    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
                        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
                        if (dayOfYear <= 0) {
                            resYear = year - 1;
                            resDayOfYear = daysInYear(resYear) + dayOfYear;
                        } else if (dayOfYear > daysInYear(year)) {
                            resYear = year + 1;
                            resDayOfYear = dayOfYear - daysInYear(year);
                        } else {
                            resYear = year;
                            resDayOfYear = dayOfYear;
                        }
                        return {
                            year: resYear,
                            dayOfYear: resDayOfYear
                        };
                    }
                    function weekOfYear(mom, dow, doy) {
                        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
                        if (week < 1) {
                            resYear = mom.year() - 1;
                            resWeek = week + weeksInYear(resYear, dow, doy);
                        } else if (week > weeksInYear(mom.year(), dow, doy)) {
                            resWeek = week - weeksInYear(mom.year(), dow, doy);
                            resYear = mom.year() + 1;
                        } else {
                            resYear = mom.year();
                            resWeek = week;
                        }
                        return {
                            week: resWeek,
                            year: resYear
                        };
                    }
                    function weeksInYear(year, dow, doy) {
                        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
                        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
                    } // FORMATTING
                    addFormatToken("w", [
                        "ww",
                        2
                    ], "wo", "week");
                    addFormatToken("W", [
                        "WW",
                        2
                    ], "Wo", "isoWeek"); // ALIASES
                    addUnitAlias("week", "w");
                    addUnitAlias("isoWeek", "W"); // PRIORITIES
                    addUnitPriority("week", 5);
                    addUnitPriority("isoWeek", 5); // PARSING
                    addRegexToken("w", match1to2);
                    addRegexToken("ww", match1to2, match2);
                    addRegexToken("W", match1to2);
                    addRegexToken("WW", match1to2, match2);
                    addWeekParseToken([
                        "w",
                        "ww",
                        "W",
                        "WW"
                    ], function(input, week, config, token) {
                        week[token.substr(0, 1)] = toInt(input);
                    }); // HELPERS
                    // LOCALES
                    function localeWeek(mom) {
                        return weekOfYear(mom, this._week.dow, this._week.doy).week;
                    }
                    var defaultLocaleWeek = {
                        dow: 0,
                        // Sunday is the first day of the week.
                        doy: 6 // The week that contains Jan 6th is the first week of the year.
                    };
                    function localeFirstDayOfWeek() {
                        return this._week.dow;
                    }
                    function localeFirstDayOfYear() {
                        return this._week.doy;
                    } // MOMENTS
                    function getSetWeek(input) {
                        var week = this.localeData().week(this);
                        return input == null ? week : this.add((input - week) * 7, "d");
                    }
                    function getSetISOWeek(input) {
                        var week = weekOfYear(this, 1, 4).week;
                        return input == null ? week : this.add((input - week) * 7, "d");
                    } // FORMATTING
                    addFormatToken("d", 0, "do", "day");
                    addFormatToken("dd", 0, 0, function(format) {
                        return this.localeData().weekdaysMin(this, format);
                    });
                    addFormatToken("ddd", 0, 0, function(format) {
                        return this.localeData().weekdaysShort(this, format);
                    });
                    addFormatToken("dddd", 0, 0, function(format) {
                        return this.localeData().weekdays(this, format);
                    });
                    addFormatToken("e", 0, 0, "weekday");
                    addFormatToken("E", 0, 0, "isoWeekday"); // ALIASES
                    addUnitAlias("day", "d");
                    addUnitAlias("weekday", "e");
                    addUnitAlias("isoWeekday", "E"); // PRIORITY
                    addUnitPriority("day", 11);
                    addUnitPriority("weekday", 11);
                    addUnitPriority("isoWeekday", 11); // PARSING
                    addRegexToken("d", match1to2);
                    addRegexToken("e", match1to2);
                    addRegexToken("E", match1to2);
                    addRegexToken("dd", function(isStrict, locale) {
                        return locale.weekdaysMinRegex(isStrict);
                    });
                    addRegexToken("ddd", function(isStrict, locale) {
                        return locale.weekdaysShortRegex(isStrict);
                    });
                    addRegexToken("dddd", function(isStrict, locale) {
                        return locale.weekdaysRegex(isStrict);
                    });
                    addWeekParseToken([
                        "dd",
                        "ddd",
                        "dddd"
                    ], function(input, week, config, token) {
                        var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid
                        if (weekday != null) week.d = weekday;
                        else getParsingFlags(config).invalidWeekday = input;
                    });
                    addWeekParseToken([
                        "d",
                        "e",
                        "E"
                    ], function(input, week, config, token) {
                        week[token] = toInt(input);
                    }); // HELPERS
                    function parseWeekday(input, locale) {
                        if (typeof input !== "string") return input;
                        if (!isNaN(input)) return parseInt(input, 10);
                        input = locale.weekdaysParse(input);
                        if (typeof input === "number") return input;
                        return null;
                    }
                    function parseIsoWeekday(input, locale) {
                        if (typeof input === "string") return locale.weekdaysParse(input) % 7 || 7;
                        return isNaN(input) ? null : input;
                    } // LOCALES
                    function shiftWeekdays(ws, n) {
                        return ws.slice(n, 7).concat(ws.slice(0, n));
                    }
                    var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
                    function localeWeekdays(m, format) {
                        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? "format" : "standalone"];
                        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
                    }
                    function localeWeekdaysShort(m) {
                        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
                    }
                    function localeWeekdaysMin(m) {
                        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
                    }
                    function handleStrictParse$1(weekdayName, format, strict) {
                        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
                        if (!this._weekdaysParse) {
                            this._weekdaysParse = [];
                            this._shortWeekdaysParse = [];
                            this._minWeekdaysParse = [];
                            for(i = 0; i < 7; ++i){
                                mom = createUTC([
                                    2000,
                                    1
                                ]).day(i);
                                this._minWeekdaysParse[i] = this.weekdaysMin(mom, "").toLocaleLowerCase();
                                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, "").toLocaleLowerCase();
                                this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
                            }
                        }
                        if (strict) {
                            if (format === "dddd") {
                                ii = indexOf.call(this._weekdaysParse, llc);
                                return ii !== -1 ? ii : null;
                            } else if (format === "ddd") {
                                ii = indexOf.call(this._shortWeekdaysParse, llc);
                                return ii !== -1 ? ii : null;
                            } else {
                                ii = indexOf.call(this._minWeekdaysParse, llc);
                                return ii !== -1 ? ii : null;
                            }
                        } else {
                            if (format === "dddd") {
                                ii = indexOf.call(this._weekdaysParse, llc);
                                if (ii !== -1) return ii;
                                ii = indexOf.call(this._shortWeekdaysParse, llc);
                                if (ii !== -1) return ii;
                                ii = indexOf.call(this._minWeekdaysParse, llc);
                                return ii !== -1 ? ii : null;
                            } else if (format === "ddd") {
                                ii = indexOf.call(this._shortWeekdaysParse, llc);
                                if (ii !== -1) return ii;
                                ii = indexOf.call(this._weekdaysParse, llc);
                                if (ii !== -1) return ii;
                                ii = indexOf.call(this._minWeekdaysParse, llc);
                                return ii !== -1 ? ii : null;
                            } else {
                                ii = indexOf.call(this._minWeekdaysParse, llc);
                                if (ii !== -1) return ii;
                                ii = indexOf.call(this._weekdaysParse, llc);
                                if (ii !== -1) return ii;
                                ii = indexOf.call(this._shortWeekdaysParse, llc);
                                return ii !== -1 ? ii : null;
                            }
                        }
                    }
                    function localeWeekdaysParse(weekdayName, format, strict) {
                        var i, mom, regex;
                        if (this._weekdaysParseExact) return handleStrictParse$1.call(this, weekdayName, format, strict);
                        if (!this._weekdaysParse) {
                            this._weekdaysParse = [];
                            this._minWeekdaysParse = [];
                            this._shortWeekdaysParse = [];
                            this._fullWeekdaysParse = [];
                        }
                        for(i = 0; i < 7; i++){
                            // make the regex if we don't have it already
                            mom = createUTC([
                                2000,
                                1
                            ]).day(i);
                            if (strict && !this._fullWeekdaysParse[i]) {
                                this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
                                this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
                                this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
                            }
                            if (!this._weekdaysParse[i]) {
                                regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                                this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
                            } // test the regex
                            if (strict && format === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) return i;
                            else if (strict && format === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) return i;
                            else if (strict && format === "dd" && this._minWeekdaysParse[i].test(weekdayName)) return i;
                            else if (!strict && this._weekdaysParse[i].test(weekdayName)) return i;
                        }
                    } // MOMENTS
                    function getSetDayOfWeek(input) {
                        if (!this.isValid()) return input != null ? this : NaN;
                        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                        if (input != null) {
                            input = parseWeekday(input, this.localeData());
                            return this.add(input - day, "d");
                        } else return day;
                    }
                    function getSetLocaleDayOfWeek(input) {
                        if (!this.isValid()) return input != null ? this : NaN;
                        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
                        return input == null ? weekday : this.add(input - weekday, "d");
                    }
                    function getSetISODayOfWeek(input) {
                        if (!this.isValid()) return input != null ? this : NaN;
                         // behaves the same as moment#day except
                        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
                        // as a setter, sunday should belong to the previous week.
                        if (input != null) {
                            var weekday = parseIsoWeekday(input, this.localeData());
                            return this.day(this.day() % 7 ? weekday : weekday - 7);
                        } else return this.day() || 7;
                    }
                    function weekdaysRegex(isStrict) {
                        if (this._weekdaysParseExact) {
                            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
                            if (isStrict) return this._weekdaysStrictRegex;
                            else return this._weekdaysRegex;
                        } else {
                            if (!hasOwnProp(this, "_weekdaysRegex")) this._weekdaysRegex = defaultWeekdaysRegex;
                            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
                        }
                    }
                    function weekdaysShortRegex(isStrict) {
                        if (this._weekdaysParseExact) {
                            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
                            if (isStrict) return this._weekdaysShortStrictRegex;
                            else return this._weekdaysShortRegex;
                        } else {
                            if (!hasOwnProp(this, "_weekdaysShortRegex")) this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
                        }
                    }
                    function weekdaysMinRegex(isStrict) {
                        if (this._weekdaysParseExact) {
                            if (!hasOwnProp(this, "_weekdaysRegex")) computeWeekdaysParse.call(this);
                            if (isStrict) return this._weekdaysMinStrictRegex;
                            else return this._weekdaysMinRegex;
                        } else {
                            if (!hasOwnProp(this, "_weekdaysMinRegex")) this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
                        }
                    }
                    function computeWeekdaysParse() {
                        function cmpLenRev(a, b) {
                            return b.length - a.length;
                        }
                        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
                        for(i = 0; i < 7; i++){
                            // make the regex if we don't have it already
                            mom = createUTC([
                                2000,
                                1
                            ]).day(i);
                            minp = regexEscape(this.weekdaysMin(mom, ""));
                            shortp = regexEscape(this.weekdaysShort(mom, ""));
                            longp = regexEscape(this.weekdays(mom, ""));
                            minPieces.push(minp);
                            shortPieces.push(shortp);
                            longPieces.push(longp);
                            mixedPieces.push(minp);
                            mixedPieces.push(shortp);
                            mixedPieces.push(longp);
                        } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
                        // will match the longer piece.
                        minPieces.sort(cmpLenRev);
                        shortPieces.sort(cmpLenRev);
                        longPieces.sort(cmpLenRev);
                        mixedPieces.sort(cmpLenRev);
                        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
                        this._weekdaysShortRegex = this._weekdaysRegex;
                        this._weekdaysMinRegex = this._weekdaysRegex;
                        this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
                        this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
                        this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
                    } // FORMATTING
                    function hFormat() {
                        return this.hours() % 12 || 12;
                    }
                    function kFormat() {
                        return this.hours() || 24;
                    }
                    addFormatToken("H", [
                        "HH",
                        2
                    ], 0, "hour");
                    addFormatToken("h", [
                        "hh",
                        2
                    ], 0, hFormat);
                    addFormatToken("k", [
                        "kk",
                        2
                    ], 0, kFormat);
                    addFormatToken("hmm", 0, 0, function() {
                        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
                    });
                    addFormatToken("hmmss", 0, 0, function() {
                        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
                    });
                    addFormatToken("Hmm", 0, 0, function() {
                        return "" + this.hours() + zeroFill(this.minutes(), 2);
                    });
                    addFormatToken("Hmmss", 0, 0, function() {
                        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
                    });
                    function meridiem1(token, lowercase) {
                        addFormatToken(token, 0, 0, function() {
                            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
                        });
                    }
                    meridiem1("a", true);
                    meridiem1("A", false); // ALIASES
                    addUnitAlias("hour", "h"); // PRIORITY
                    addUnitPriority("hour", 13); // PARSING
                    function matchMeridiem(isStrict, locale) {
                        return locale._meridiemParse;
                    }
                    addRegexToken("a", matchMeridiem);
                    addRegexToken("A", matchMeridiem);
                    addRegexToken("H", match1to2);
                    addRegexToken("h", match1to2);
                    addRegexToken("k", match1to2);
                    addRegexToken("HH", match1to2, match2);
                    addRegexToken("hh", match1to2, match2);
                    addRegexToken("kk", match1to2, match2);
                    addRegexToken("hmm", match3to4);
                    addRegexToken("hmmss", match5to6);
                    addRegexToken("Hmm", match3to4);
                    addRegexToken("Hmmss", match5to6);
                    addParseToken([
                        "H",
                        "HH"
                    ], HOUR);
                    addParseToken([
                        "k",
                        "kk"
                    ], function(input, array, config) {
                        var kInput = toInt(input);
                        array[HOUR] = kInput === 24 ? 0 : kInput;
                    });
                    addParseToken([
                        "a",
                        "A"
                    ], function(input, array, config) {
                        config._isPm = config._locale.isPM(input);
                        config._meridiem = input;
                    });
                    addParseToken([
                        "h",
                        "hh"
                    ], function(input, array, config) {
                        array[HOUR] = toInt(input);
                        getParsingFlags(config).bigHour = true;
                    });
                    addParseToken("hmm", function(input, array, config) {
                        var pos = input.length - 2;
                        array[HOUR] = toInt(input.substr(0, pos));
                        array[MINUTE] = toInt(input.substr(pos));
                        getParsingFlags(config).bigHour = true;
                    });
                    addParseToken("hmmss", function(input, array, config) {
                        var pos1 = input.length - 4, pos2 = input.length - 2;
                        array[HOUR] = toInt(input.substr(0, pos1));
                        array[MINUTE] = toInt(input.substr(pos1, 2));
                        array[SECOND] = toInt(input.substr(pos2));
                        getParsingFlags(config).bigHour = true;
                    });
                    addParseToken("Hmm", function(input, array, config) {
                        var pos = input.length - 2;
                        array[HOUR] = toInt(input.substr(0, pos));
                        array[MINUTE] = toInt(input.substr(pos));
                    });
                    addParseToken("Hmmss", function(input, array, config) {
                        var pos1 = input.length - 4, pos2 = input.length - 2;
                        array[HOUR] = toInt(input.substr(0, pos1));
                        array[MINUTE] = toInt(input.substr(pos1, 2));
                        array[SECOND] = toInt(input.substr(pos2));
                    }); // LOCALES
                    function localeIsPM(input) {
                        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
                        // Using charAt should be more compatible.
                        return (input + "").toLowerCase().charAt(0) === "p";
                    }
                    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, // Setting the hour should keep the time, because the user explicitly
                    // specified which hour they want. So trying to maintain the same hour (in
                    // a new timezone) makes sense. Adding/subtracting hours does not follow
                    // this rule.
                    getSetHour = makeGetSet("Hours", true);
                    function localeMeridiem(hours, minutes, isLower) {
                        if (hours > 11) return isLower ? "pm" : "PM";
                        else return isLower ? "am" : "AM";
                    }
                    var baseConfig = {
                        calendar: defaultCalendar,
                        longDateFormat: defaultLongDateFormat,
                        invalidDate: defaultInvalidDate,
                        ordinal: defaultOrdinal,
                        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
                        relativeTime: defaultRelativeTime,
                        months: defaultLocaleMonths,
                        monthsShort: defaultLocaleMonthsShort,
                        week: defaultLocaleWeek,
                        weekdays: defaultLocaleWeekdays,
                        weekdaysMin: defaultLocaleWeekdaysMin,
                        weekdaysShort: defaultLocaleWeekdaysShort,
                        meridiemParse: defaultLocaleMeridiemParse
                    }; // internal storage for locale config files
                    var locales = {}, localeFamilies = {}, globalLocale;
                    function commonPrefix(arr1, arr2) {
                        var i, minl = Math.min(arr1.length, arr2.length);
                        for(i = 0; i < minl; i += 1){
                            if (arr1[i] !== arr2[i]) return i;
                        }
                        return minl;
                    }
                    function normalizeLocale(key) {
                        return key ? key.toLowerCase().replace("_", "-") : key;
                    } // pick the locale from the array
                    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
                    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
                    function chooseLocale(names) {
                        var i = 0, j, next, locale, split;
                        while(i < names.length){
                            split = normalizeLocale(names[i]).split("-");
                            j = split.length;
                            next = normalizeLocale(names[i + 1]);
                            next = next ? next.split("-") : null;
                            while(j > 0){
                                locale = loadLocale(split.slice(0, j).join("-"));
                                if (locale) return locale;
                                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) break;
                                j--;
                            }
                            i++;
                        }
                        return globalLocale;
                    }
                    function isLocaleNameSane(name) {
                        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
                        return name.match("^[^/\\\\]*$") != null;
                    }
                    function loadLocale(name) {
                        var oldLocale = null, aliasedRequire; // TODO: Find a better way to register and load all the locales in Node
                        if (locales[name] === undefined && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) try {
                            oldLocale = globalLocale._abbr;
                            aliasedRequire = require;
                            aliasedRequire("./locale/" + name);
                            getSetGlobalLocale(oldLocale);
                        } catch (e) {
                            // mark as not found to avoid repeating expensive file require call causing high CPU
                            // when trying to find en-US, en_US, en-us for every format call
                            locales[name] = null; // null means not found
                        }
                        return locales[name];
                    } // This function will load locale and then set the global locale.  If
                    // no arguments are passed in, it will simply return the current global
                    // locale key.
                    function getSetGlobalLocale(key, values) {
                        var data;
                        if (key) {
                            if (isUndefined(values)) data = getLocale(key);
                            else data = defineLocale(key, values);
                            if (data) // moment.duration._locale = moment._locale = data;
                            globalLocale = data;
                            else if (typeof console !== "undefined" && console.warn) //warn user if arguments are passed but the locale could not be set
                            console.warn("Locale " + key + " not found. Did you forget to load it?");
                        }
                        return globalLocale._abbr;
                    }
                    function defineLocale(name, config) {
                        if (config !== null) {
                            var locale, parentConfig = baseConfig;
                            config.abbr = name;
                            if (locales[name] != null) {
                                deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                                parentConfig = locales[name]._config;
                            } else if (config.parentLocale != null) {
                                if (locales[config.parentLocale] != null) parentConfig = locales[config.parentLocale]._config;
                                else {
                                    locale = loadLocale(config.parentLocale);
                                    if (locale != null) parentConfig = locale._config;
                                    else {
                                        if (!localeFamilies[config.parentLocale]) localeFamilies[config.parentLocale] = [];
                                        localeFamilies[config.parentLocale].push({
                                            name: name,
                                            config: config
                                        });
                                        return null;
                                    }
                                }
                            }
                            locales[name] = new Locale(mergeConfigs(parentConfig, config));
                            if (localeFamilies[name]) localeFamilies[name].forEach(function(x) {
                                defineLocale(x.name, x.config);
                            });
                             // backwards compat for now: also set the locale
                            // make sure we set the locale AFTER all child locales have been
                            // created, so we won't end up with the child locale set.
                            getSetGlobalLocale(name);
                            return locales[name];
                        } else {
                            // useful for testing
                            delete locales[name];
                            return null;
                        }
                    }
                    function updateLocale(name, config) {
                        if (config != null) {
                            var locale, tmpLocale, parentConfig = baseConfig;
                            if (locales[name] != null && locales[name].parentLocale != null) // Update existing child locale in-place to avoid memory-leaks
                            locales[name].set(mergeConfigs(locales[name]._config, config));
                            else {
                                // MERGE
                                tmpLocale = loadLocale(name);
                                if (tmpLocale != null) parentConfig = tmpLocale._config;
                                config = mergeConfigs(parentConfig, config);
                                if (tmpLocale == null) // updateLocale is called for creating a new locale
                                // Set abbr so it will have a name (getters return
                                // undefined otherwise).
                                config.abbr = name;
                                locale = new Locale(config);
                                locale.parentLocale = locales[name];
                                locales[name] = locale;
                            } // backwards compat for now: also set the locale
                            getSetGlobalLocale(name);
                        } else // pass null for config to unupdate, useful for tests
                        if (locales[name] != null) {
                            if (locales[name].parentLocale != null) {
                                locales[name] = locales[name].parentLocale;
                                if (name === getSetGlobalLocale()) getSetGlobalLocale(name);
                            } else if (locales[name] != null) delete locales[name];
                        }
                        return locales[name];
                    } // returns locale data
                    function getLocale(key) {
                        var locale;
                        if (key && key._locale && key._locale._abbr) key = key._locale._abbr;
                        if (!key) return globalLocale;
                        if (!isArray(key)) {
                            //short-circuit everything else
                            locale = loadLocale(key);
                            if (locale) return locale;
                            key = [
                                key
                            ];
                        }
                        return chooseLocale(key);
                    }
                    function listLocales() {
                        return keys(locales);
                    }
                    function checkOverflow(m) {
                        var overflow, a = m._a;
                        if (a && getParsingFlags(m).overflow === -2) {
                            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
                            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) overflow = DATE;
                            if (getParsingFlags(m)._overflowWeeks && overflow === -1) overflow = WEEK;
                            if (getParsingFlags(m)._overflowWeekday && overflow === -1) overflow = WEEKDAY;
                            getParsingFlags(m).overflow = overflow;
                        }
                        return m;
                    } // iso 8601 regex
                    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
                    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
                        [
                            "YYYYYY-MM-DD",
                            /[+-]\d{6}-\d\d-\d\d/
                        ],
                        [
                            "YYYY-MM-DD",
                            /\d{4}-\d\d-\d\d/
                        ],
                        [
                            "GGGG-[W]WW-E",
                            /\d{4}-W\d\d-\d/
                        ],
                        [
                            "GGGG-[W]WW",
                            /\d{4}-W\d\d/,
                            false
                        ],
                        [
                            "YYYY-DDD",
                            /\d{4}-\d{3}/
                        ],
                        [
                            "YYYY-MM",
                            /\d{4}-\d\d/,
                            false
                        ],
                        [
                            "YYYYYYMMDD",
                            /[+-]\d{10}/
                        ],
                        [
                            "YYYYMMDD",
                            /\d{8}/
                        ],
                        [
                            "GGGG[W]WWE",
                            /\d{4}W\d{3}/
                        ],
                        [
                            "GGGG[W]WW",
                            /\d{4}W\d{2}/,
                            false
                        ],
                        [
                            "YYYYDDD",
                            /\d{7}/
                        ],
                        [
                            "YYYYMM",
                            /\d{6}/,
                            false
                        ],
                        [
                            "YYYY",
                            /\d{4}/,
                            false
                        ]
                    ], // iso time formats and regexes
                    isoTimes = [
                        [
                            "HH:mm:ss.SSSS",
                            /\d\d:\d\d:\d\d\.\d+/
                        ],
                        [
                            "HH:mm:ss,SSSS",
                            /\d\d:\d\d:\d\d,\d+/
                        ],
                        [
                            "HH:mm:ss",
                            /\d\d:\d\d:\d\d/
                        ],
                        [
                            "HH:mm",
                            /\d\d:\d\d/
                        ],
                        [
                            "HHmmss.SSSS",
                            /\d\d\d\d\d\d\.\d+/
                        ],
                        [
                            "HHmmss,SSSS",
                            /\d\d\d\d\d\d,\d+/
                        ],
                        [
                            "HHmmss",
                            /\d\d\d\d\d\d/
                        ],
                        [
                            "HHmm",
                            /\d\d\d\d/
                        ],
                        [
                            "HH",
                            /\d\d/
                        ]
                    ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
                    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
                        UT: 0,
                        GMT: 0,
                        EDT: -240,
                        EST: -300,
                        CDT: -300,
                        CST: -360,
                        MDT: -360,
                        MST: -420,
                        PDT: -420,
                        PST: -480
                    }; // date from iso format
                    function configFromISO(config) {
                        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
                        if (match) {
                            getParsingFlags(config).iso = true;
                            for(i = 0, l = isoDatesLen; i < l; i++)if (isoDates[i][1].exec(match[1])) {
                                dateFormat = isoDates[i][0];
                                allowTime = isoDates[i][2] !== false;
                                break;
                            }
                            if (dateFormat == null) {
                                config._isValid = false;
                                return;
                            }
                            if (match[3]) {
                                for(i = 0, l = isoTimesLen; i < l; i++)if (isoTimes[i][1].exec(match[3])) {
                                    // match[2] should be 'T' or space
                                    timeFormat = (match[2] || " ") + isoTimes[i][0];
                                    break;
                                }
                                if (timeFormat == null) {
                                    config._isValid = false;
                                    return;
                                }
                            }
                            if (!allowTime && timeFormat != null) {
                                config._isValid = false;
                                return;
                            }
                            if (match[4]) {
                                if (tzRegex.exec(match[4])) tzFormat = "Z";
                                else {
                                    config._isValid = false;
                                    return;
                                }
                            }
                            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
                            configFromStringAndFormat(config);
                        } else config._isValid = false;
                    }
                    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
                        var result = [
                            untruncateYear(yearStr),
                            defaultLocaleMonthsShort.indexOf(monthStr),
                            parseInt(dayStr, 10),
                            parseInt(hourStr, 10),
                            parseInt(minuteStr, 10)
                        ];
                        if (secondStr) result.push(parseInt(secondStr, 10));
                        return result;
                    }
                    function untruncateYear(yearStr) {
                        var year = parseInt(yearStr, 10);
                        if (year <= 49) return 2000 + year;
                        else if (year <= 999) return 1900 + year;
                        return year;
                    }
                    function preprocessRFC2822(s) {
                        // Remove comments and folding whitespace and replace multiple-spaces with a single space
                        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
                    }
                    function checkWeekday(weekdayStr, parsedInput, config) {
                        if (weekdayStr) {
                            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
                            if (weekdayProvided !== weekdayActual) {
                                getParsingFlags(config).weekdayMismatch = true;
                                config._isValid = false;
                                return false;
                            }
                        }
                        return true;
                    }
                    function calculateOffset(obsOffset, militaryOffset, numOffset) {
                        if (obsOffset) return obsOffsets[obsOffset];
                        else if (militaryOffset) // the only allowed military tz is Z
                        return 0;
                        else {
                            var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
                            return h * 60 + m;
                        }
                    } // date and time from ref 2822 format
                    function configFromRFC2822(config) {
                        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
                        if (match) {
                            parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
                            if (!checkWeekday(match[1], parsedArray, config)) return;
                            config._a = parsedArray;
                            config._tzm = calculateOffset(match[8], match[9], match[10]);
                            config._d = createUTCDate.apply(null, config._a);
                            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                            getParsingFlags(config).rfc2822 = true;
                        } else config._isValid = false;
                    } // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
                    function configFromString(config) {
                        var matched = aspNetJsonRegex.exec(config._i);
                        if (matched !== null) {
                            config._d = new Date(+matched[1]);
                            return;
                        }
                        configFromISO(config);
                        if (config._isValid === false) delete config._isValid;
                        else return;
                        configFromRFC2822(config);
                        if (config._isValid === false) delete config._isValid;
                        else return;
                        if (config._strict) config._isValid = false;
                        else // Final attempt, use Input Fallback
                        hooks.createFromInputFallback(config);
                    }
                    hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
                        config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
                    }); // Pick the first defined of two or three arguments.
                    function defaults(a, b, c) {
                        if (a != null) return a;
                        if (b != null) return b;
                        return c;
                    }
                    function currentDateArray(config) {
                        // hooks is actually the exported moment object
                        var nowValue = new Date(hooks.now());
                        if (config._useUTC) return [
                            nowValue.getUTCFullYear(),
                            nowValue.getUTCMonth(),
                            nowValue.getUTCDate()
                        ];
                        return [
                            nowValue.getFullYear(),
                            nowValue.getMonth(),
                            nowValue.getDate()
                        ];
                    } // convert an array to a date.
                    // the array should mirror the parameters below
                    // note: all values past the year are optional and will default to the lowest possible value.
                    // [year, month, day , hour, minute, second, millisecond]
                    function configFromArray(config) {
                        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
                        if (config._d) return;
                        currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays
                        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) dayOfYearFromWeekInfo(config);
                         //if the day of the year is set, figure out what it is
                        if (config._dayOfYear != null) {
                            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
                            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) getParsingFlags(config)._overflowDayOfYear = true;
                            date = createUTCDate(yearToUse, 0, config._dayOfYear);
                            config._a[MONTH] = date.getUTCMonth();
                            config._a[DATE] = date.getUTCDate();
                        } // Default to current date.
                        // * if no year, month, day of month are given, default to today
                        // * if day of month is given, default month and year
                        // * if month is given, default only year
                        // * if year is given, don't default anything
                        for(i = 0; i < 3 && config._a[i] == null; ++i)config._a[i] = input[i] = currentDate[i];
                         // Zero out whatever was not defaulted, including time
                        for(; i < 7; i++)config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
                         // Check for 24:00:00.000
                        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
                            config._nextDay = true;
                            config._a[HOUR] = 0;
                        }
                        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
                        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
                        // with parseZone.
                        if (config._tzm != null) config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
                        if (config._nextDay) config._a[HOUR] = 24;
                         // check for mismatching day of week
                        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) getParsingFlags(config).weekdayMismatch = true;
                    }
                    function dayOfYearFromWeekInfo(config) {
                        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
                        w = config._w;
                        if (w.GG != null || w.W != null || w.E != null) {
                            dow = 1;
                            doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
                            // how we interpret now (local, utc, fixed offset). So create
                            // a now version of current config (take local/utc/offset flags, and
                            // create now).
                            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
                            week = defaults(w.W, 1);
                            weekday = defaults(w.E, 1);
                            if (weekday < 1 || weekday > 7) weekdayOverflow = true;
                        } else {
                            dow = config._locale._week.dow;
                            doy = config._locale._week.doy;
                            curWeek = weekOfYear(createLocal(), dow, doy);
                            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.
                            week = defaults(w.w, curWeek.week);
                            if (w.d != null) {
                                // weekday -- low day numbers are considered next week
                                weekday = w.d;
                                if (weekday < 0 || weekday > 6) weekdayOverflow = true;
                            } else if (w.e != null) {
                                // local weekday -- counting starts from beginning of week
                                weekday = w.e + dow;
                                if (w.e < 0 || w.e > 6) weekdayOverflow = true;
                            } else // default to beginning of week
                            weekday = dow;
                        }
                        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) getParsingFlags(config)._overflowWeeks = true;
                        else if (weekdayOverflow != null) getParsingFlags(config)._overflowWeekday = true;
                        else {
                            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                            config._a[YEAR] = temp.year;
                            config._dayOfYear = temp.dayOfYear;
                        }
                    } // constant that refers to the ISO standard
                    hooks.ISO_8601 = function() {}; // constant that refers to the RFC 2822 form
                    hooks.RFC_2822 = function() {}; // date from string and format string
                    function configFromStringAndFormat(config) {
                        // TODO: Move this to another part of the creation flow to prevent circular deps
                        if (config._f === hooks.ISO_8601) {
                            configFromISO(config);
                            return;
                        }
                        if (config._f === hooks.RFC_2822) {
                            configFromRFC2822(config);
                            return;
                        }
                        config._a = [];
                        getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`
                        var string = "" + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
                        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
                        tokenLen = tokens.length;
                        for(i = 0; i < tokenLen; i++){
                            token = tokens[i];
                            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
                            if (parsedInput) {
                                skipped = string.substr(0, string.indexOf(parsedInput));
                                if (skipped.length > 0) getParsingFlags(config).unusedInput.push(skipped);
                                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                                totalParsedInputLength += parsedInput.length;
                            } // don't parse if it's not a known token
                            if (formatTokenFunctions[token]) {
                                if (parsedInput) getParsingFlags(config).empty = false;
                                else getParsingFlags(config).unusedTokens.push(token);
                                addTimeToArrayFromToken(token, parsedInput, config);
                            } else if (config._strict && !parsedInput) getParsingFlags(config).unusedTokens.push(token);
                        } // add remaining unparsed input length to the string
                        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
                        if (string.length > 0) getParsingFlags(config).unusedInput.push(string);
                         // clear _12h flag if hour is <= 12
                        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) getParsingFlags(config).bigHour = undefined;
                        getParsingFlags(config).parsedDateParts = config._a.slice(0);
                        getParsingFlags(config).meridiem = config._meridiem; // handle meridiem
                        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem); // handle era
                        era = getParsingFlags(config).era;
                        if (era !== null) config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
                        configFromArray(config);
                        checkOverflow(config);
                    }
                    function meridiemFixWrap(locale, hour, meridiem) {
                        var isPm;
                        if (meridiem == null) // nothing to do
                        return hour;
                        if (locale.meridiemHour != null) return locale.meridiemHour(hour, meridiem);
                        else if (locale.isPM != null) {
                            // Fallback
                            isPm = locale.isPM(meridiem);
                            if (isPm && hour < 12) hour += 12;
                            if (!isPm && hour === 12) hour = 0;
                            return hour;
                        } else // this is not supposed to happen
                        return hour;
                    } // date from string and array of format strings
                    function configFromStringAndArray(config) {
                        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
                        if (configfLen === 0) {
                            getParsingFlags(config).invalidFormat = true;
                            config._d = new Date(NaN);
                            return;
                        }
                        for(i = 0; i < configfLen; i++){
                            currentScore = 0;
                            validFormatFound = false;
                            tempConfig = copyConfig({}, config);
                            if (config._useUTC != null) tempConfig._useUTC = config._useUTC;
                            tempConfig._f = config._f[i];
                            configFromStringAndFormat(tempConfig);
                            if (isValid(tempConfig)) validFormatFound = true;
                             // if there is any input that was not parsed add a penalty for that format
                            currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens
                            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
                            getParsingFlags(tempConfig).score = currentScore;
                            if (!bestFormatIsValid) {
                                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                                    scoreToBeat = currentScore;
                                    bestMoment = tempConfig;
                                    if (validFormatFound) bestFormatIsValid = true;
                                }
                            } else if (currentScore < scoreToBeat) {
                                scoreToBeat = currentScore;
                                bestMoment = tempConfig;
                            }
                        }
                        extend(config, bestMoment || tempConfig);
                    }
                    function configFromObject(config) {
                        if (config._d) return;
                        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === undefined ? i.date : i.day;
                        config._a = map([
                            i.year,
                            i.month,
                            dayOrDate,
                            i.hour,
                            i.minute,
                            i.second,
                            i.millisecond
                        ], function(obj) {
                            return obj && parseInt(obj, 10);
                        });
                        configFromArray(config);
                    }
                    function createFromConfig(config) {
                        var res = new Moment(checkOverflow(prepareConfig(config)));
                        if (res._nextDay) {
                            // Adding is smart enough around DST
                            res.add(1, "d");
                            res._nextDay = undefined;
                        }
                        return res;
                    }
                    function prepareConfig(config) {
                        var input = config._i, format = config._f;
                        config._locale = config._locale || getLocale(config._l);
                        if (input === null || format === undefined && input === "") return createInvalid({
                            nullInput: true
                        });
                        if (typeof input === "string") config._i = input = config._locale.preparse(input);
                        if (isMoment(input)) return new Moment(checkOverflow(input));
                        else if (isDate(input)) config._d = input;
                        else if (isArray(format)) configFromStringAndArray(config);
                        else if (format) configFromStringAndFormat(config);
                        else configFromInput(config);
                        if (!isValid(config)) config._d = null;
                        return config;
                    }
                    function configFromInput(config) {
                        var input = config._i;
                        if (isUndefined(input)) config._d = new Date(hooks.now());
                        else if (isDate(input)) config._d = new Date(input.valueOf());
                        else if (typeof input === "string") configFromString(config);
                        else if (isArray(input)) {
                            config._a = map(input.slice(0), function(obj) {
                                return parseInt(obj, 10);
                            });
                            configFromArray(config);
                        } else if (isObject(input)) configFromObject(config);
                        else if (isNumber(input)) // from milliseconds
                        config._d = new Date(input);
                        else hooks.createFromInputFallback(config);
                    }
                    function createLocalOrUTC(input, format, locale, strict, isUTC) {
                        var c = {};
                        if (format === true || format === false) {
                            strict = format;
                            format = undefined;
                        }
                        if (locale === true || locale === false) {
                            strict = locale;
                            locale = undefined;
                        }
                        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) input = undefined;
                         // object construction must be done this way.
                        // https://github.com/moment/moment/issues/1423
                        c._isAMomentObject = true;
                        c._useUTC = c._isUTC = isUTC;
                        c._l = locale;
                        c._i = input;
                        c._f = format;
                        c._strict = strict;
                        return createFromConfig(c);
                    }
                    function createLocal(input, format, locale, strict) {
                        return createLocalOrUTC(input, format, locale, strict, false);
                    }
                    var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) return other < this ? this : other;
                        else return createInvalid();
                    }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                        var other = createLocal.apply(null, arguments);
                        if (this.isValid() && other.isValid()) return other > this ? this : other;
                        else return createInvalid();
                    }); // Pick a moment m from moments so that m[fn](other) is true for all
                    // other. This relies on the function fn to be transitive.
                    //
                    // moments should either be an array of moment objects or an array, whose
                    // first element is an array of moment objects.
                    function pickBy(fn, moments) {
                        var res, i;
                        if (moments.length === 1 && isArray(moments[0])) moments = moments[0];
                        if (!moments.length) return createLocal();
                        res = moments[0];
                        for(i = 1; i < moments.length; ++i)if (!moments[i].isValid() || moments[i][fn](res)) res = moments[i];
                        return res;
                    } // TODO: Use [].sort instead?
                    function min() {
                        var args = [].slice.call(arguments, 0);
                        return pickBy("isBefore", args);
                    }
                    function max() {
                        var args = [].slice.call(arguments, 0);
                        return pickBy("isAfter", args);
                    }
                    var now1 = function now() {
                        return Date.now ? Date.now() : +new Date();
                    };
                    var ordering = [
                        "year",
                        "quarter",
                        "month",
                        "week",
                        "day",
                        "hour",
                        "minute",
                        "second",
                        "millisecond"
                    ];
                    function isDurationValid(m) {
                        var key, unitHasDecimal = false, i, orderLen = ordering.length;
                        for(key in m){
                            if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) return false;
                        }
                        for(i = 0; i < orderLen; ++i)if (m[ordering[i]]) {
                            if (unitHasDecimal) return false; // only allow non-integers for smallest unit
                            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) unitHasDecimal = true;
                        }
                        return true;
                    }
                    function isValid$1() {
                        return this._isValid;
                    }
                    function createInvalid$1() {
                        return createDuration(NaN);
                    }
                    function Duration(duration) {
                        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || normalizedInput.isoWeek || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
                        this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove
                        this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 3600000; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
                        // Because of dateAddRemove treats 24 hours as different from a
                        // day when working around DST, we need to store them separately
                        this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
                        // which months you are are talking about, so we have to store
                        // it separately.
                        this._months = +months + quarters * 3 + years * 12;
                        this._data = {};
                        this._locale = getLocale();
                        this._bubble();
                    }
                    function isDuration(obj) {
                        return obj instanceof Duration;
                    }
                    function absRound(number) {
                        if (number < 0) return Math.round(-1 * number) * -1;
                        else return Math.round(number);
                    } // compare two arrays, return the number of differences
                    function compareArrays(array1, array2, dontConvert) {
                        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
                        for(i = 0; i < len; i++)if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) diffs++;
                        return diffs + lengthDiff;
                    } // FORMATTING
                    function offset1(token, separator) {
                        addFormatToken(token, 0, 0, function() {
                            var offset = this.utcOffset(), sign = "+";
                            if (offset < 0) {
                                offset = -offset;
                                sign = "-";
                            }
                            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
                        });
                    }
                    offset1("Z", ":");
                    offset1("ZZ", ""); // PARSING
                    addRegexToken("Z", matchShortOffset);
                    addRegexToken("ZZ", matchShortOffset);
                    addParseToken([
                        "Z",
                        "ZZ"
                    ], function(input, array, config) {
                        config._useUTC = true;
                        config._tzm = offsetFromString(matchShortOffset, input);
                    }); // HELPERS
                    // timezone chunker
                    // '+10:00' > ['10',  '00']
                    // '-1530'  > ['-15', '30']
                    var chunkOffset = /([\+\-]|\d\d)/gi;
                    function offsetFromString(matcher, string) {
                        var matches = (string || "").match(matcher), chunk, parts, minutes;
                        if (matches === null) return null;
                        chunk = matches[matches.length - 1] || [];
                        parts = (chunk + "").match(chunkOffset) || [
                            "-",
                            0,
                            0
                        ];
                        minutes = +(parts[1] * 60) + toInt(parts[2]);
                        return minutes === 0 ? 0 : parts[0] === "+" ? minutes : -minutes;
                    } // Return a moment from input, that is local/utc/zone equivalent to model.
                    function cloneWithOffset(input, model) {
                        var res, diff;
                        if (model._isUTC) {
                            res = model.clone();
                            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.
                            res._d.setTime(res._d.valueOf() + diff);
                            hooks.updateOffset(res, false);
                            return res;
                        } else return createLocal(input).local();
                    }
                    function getDateOffset(m) {
                        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
                        // https://github.com/moment/moment/pull/1871
                        return -Math.round(m._d.getTimezoneOffset());
                    } // HOOKS
                    // This function will be called whenever a moment is mutated.
                    // It is intended to keep the offset in sync with the timezone.
                    hooks.updateOffset = function() {}; // MOMENTS
                    // keepLocalTime = true means only change the timezone, without
                    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
                    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
                    // +0200, so we adjust the time as needed, to be valid.
                    //
                    // Keeping the time actually adds/subtracts (one hour)
                    // from the actual represented time. That is why we call updateOffset
                    // a second time. In case it wants us to change the offset again
                    // _changeInProgress == true case, then we have to adjust, because
                    // there is no such time in the given timezone.
                    function getSetOffset(input, keepLocalTime, keepMinutes) {
                        var offset = this._offset || 0, localAdjust;
                        if (!this.isValid()) return input != null ? this : NaN;
                        if (input != null) {
                            if (typeof input === "string") {
                                input = offsetFromString(matchShortOffset, input);
                                if (input === null) return this;
                            } else if (Math.abs(input) < 16 && !keepMinutes) input = input * 60;
                            if (!this._isUTC && keepLocalTime) localAdjust = getDateOffset(this);
                            this._offset = input;
                            this._isUTC = true;
                            if (localAdjust != null) this.add(localAdjust, "m");
                            if (offset !== input) {
                                if (!keepLocalTime || this._changeInProgress) addSubtract(this, createDuration(input - offset, "m"), 1, false);
                                else if (!this._changeInProgress) {
                                    this._changeInProgress = true;
                                    hooks.updateOffset(this, true);
                                    this._changeInProgress = null;
                                }
                            }
                            return this;
                        } else return this._isUTC ? offset : getDateOffset(this);
                    }
                    function getSetZone(input, keepLocalTime) {
                        if (input != null) {
                            if (typeof input !== "string") input = -input;
                            this.utcOffset(input, keepLocalTime);
                            return this;
                        } else return -this.utcOffset();
                    }
                    function setOffsetToUTC(keepLocalTime) {
                        return this.utcOffset(0, keepLocalTime);
                    }
                    function setOffsetToLocal(keepLocalTime) {
                        if (this._isUTC) {
                            this.utcOffset(0, keepLocalTime);
                            this._isUTC = false;
                            if (keepLocalTime) this.subtract(getDateOffset(this), "m");
                        }
                        return this;
                    }
                    function setOffsetToParsedOffset() {
                        if (this._tzm != null) this.utcOffset(this._tzm, false, true);
                        else if (typeof this._i === "string") {
                            var tZone = offsetFromString(matchOffset, this._i);
                            if (tZone != null) this.utcOffset(tZone);
                            else this.utcOffset(0, true);
                        }
                        return this;
                    }
                    function hasAlignedHourOffset(input) {
                        if (!this.isValid()) return false;
                        input = input ? createLocal(input).utcOffset() : 0;
                        return (this.utcOffset() - input) % 60 === 0;
                    }
                    function isDaylightSavingTime() {
                        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
                    }
                    function isDaylightSavingTimeShifted() {
                        if (!isUndefined(this._isDSTShifted)) return this._isDSTShifted;
                        var c = {}, other;
                        copyConfig(c, this);
                        c = prepareConfig(c);
                        if (c._a) {
                            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
                        } else this._isDSTShifted = false;
                        return this._isDSTShifted;
                    }
                    function isLocal() {
                        return this.isValid() ? !this._isUTC : false;
                    }
                    function isUtcOffset() {
                        return this.isValid() ? this._isUTC : false;
                    }
                    function isUtc() {
                        return this.isValid() ? this._isUTC && this._offset === 0 : false;
                    } // ASP.NET json date format regex
                    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
                    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
                    // and further modified to allow for strings containing both week and day
                    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
                    function createDuration(input, key) {
                        var duration = input, // matching against regexp is expensive, do it on demand
                        match = null, sign, ret, diffRes;
                        if (isDuration(input)) duration = {
                            ms: input._milliseconds,
                            d: input._days,
                            M: input._months
                        };
                        else if (isNumber(input) || !isNaN(+input)) {
                            duration = {};
                            if (key) duration[key] = +input;
                            else duration.milliseconds = +input;
                        } else if (match = aspNetRegex.exec(input)) {
                            sign = match[1] === "-" ? -1 : 1;
                            duration = {
                                y: 0,
                                d: toInt(match[DATE]) * sign,
                                h: toInt(match[HOUR]) * sign,
                                m: toInt(match[MINUTE]) * sign,
                                s: toInt(match[SECOND]) * sign,
                                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
                            };
                        } else if (match = isoRegex.exec(input)) {
                            sign = match[1] === "-" ? -1 : 1;
                            duration = {
                                y: parseIso(match[2], sign),
                                M: parseIso(match[3], sign),
                                w: parseIso(match[4], sign),
                                d: parseIso(match[5], sign),
                                h: parseIso(match[6], sign),
                                m: parseIso(match[7], sign),
                                s: parseIso(match[8], sign)
                            };
                        } else if (duration == null) // checks for null or undefined
                        duration = {};
                        else if (_typeof(duration) === "object" && ("from" in duration || "to" in duration)) {
                            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
                            duration = {};
                            duration.ms = diffRes.milliseconds;
                            duration.M = diffRes.months;
                        }
                        ret = new Duration(duration);
                        if (isDuration(input) && hasOwnProp(input, "_locale")) ret._locale = input._locale;
                        if (isDuration(input) && hasOwnProp(input, "_isValid")) ret._isValid = input._isValid;
                        return ret;
                    }
                    createDuration.fn = Duration.prototype;
                    createDuration.invalid = createInvalid$1;
                    function parseIso(inp, sign) {
                        // We'd normally use ~~inp for this, but unfortunately it also
                        // converts floats to ints.
                        // inp may be undefined, so careful calling replace on it.
                        var res = inp && parseFloat(inp.replace(",", ".")); // apply sign while we're at it
                        return (isNaN(res) ? 0 : res) * sign;
                    }
                    function positiveMomentsDifference(base, other) {
                        var res = {};
                        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
                        if (base.clone().add(res.months, "M").isAfter(other)) --res.months;
                        res.milliseconds = +other - +base.clone().add(res.months, "M");
                        return res;
                    }
                    function momentsDifference(base, other) {
                        var res;
                        if (!(base.isValid() && other.isValid())) return {
                            milliseconds: 0,
                            months: 0
                        };
                        other = cloneWithOffset(other, base);
                        if (base.isBefore(other)) res = positiveMomentsDifference(base, other);
                        else {
                            res = positiveMomentsDifference(other, base);
                            res.milliseconds = -res.milliseconds;
                            res.months = -res.months;
                        }
                        return res;
                    } // TODO: remove 'name' arg after deprecation is removed
                    function createAdder(direction, name) {
                        return function(val, period) {
                            var dur, tmp; //invert the arguments, but complain about it
                            if (period !== null && !isNaN(+period)) {
                                deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). " + "See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                                tmp = val;
                                val = period;
                                period = tmp;
                            }
                            dur = createDuration(val, period);
                            addSubtract(this, dur, direction);
                            return this;
                        };
                    }
                    function addSubtract(mom, duration, isAdding, updateOffset) {
                        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
                        if (!mom.isValid()) // No op
                        return;
                        updateOffset = updateOffset == null ? true : updateOffset;
                        if (months) setMonth(mom, get(mom, "Month") + months * isAdding);
                        if (days) set$1(mom, "Date", get(mom, "Date") + days * isAdding);
                        if (milliseconds) mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
                        if (updateOffset) hooks.updateOffset(mom, days || months);
                    }
                    var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
                    function isString(input) {
                        return typeof input === "string" || input instanceof String;
                    } // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
                    function isMomentInput(input) {
                        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === undefined;
                    }
                    function isMomentInputObject(input) {
                        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
                            "years",
                            "year",
                            "y",
                            "months",
                            "month",
                            "M",
                            "days",
                            "day",
                            "d",
                            "dates",
                            "date",
                            "D",
                            "hours",
                            "hour",
                            "h",
                            "minutes",
                            "minute",
                            "m",
                            "seconds",
                            "second",
                            "s",
                            "milliseconds",
                            "millisecond",
                            "ms"
                        ], i, property, propertyLen = properties.length;
                        for(i = 0; i < propertyLen; i += 1){
                            property = properties[i];
                            propertyTest = propertyTest || hasOwnProp(input, property);
                        }
                        return objectTest && propertyTest;
                    }
                    function isNumberOrStringArray(input) {
                        var arrayTest = isArray(input), dataTypeTest = false;
                        if (arrayTest) dataTypeTest = input.filter(function(item) {
                            return !isNumber(item) && isString(input);
                        }).length === 0;
                        return arrayTest && dataTypeTest;
                    }
                    function isCalendarSpec(input) {
                        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
                            "sameDay",
                            "nextDay",
                            "lastDay",
                            "nextWeek",
                            "lastWeek",
                            "sameElse"
                        ], i, property;
                        for(i = 0; i < properties.length; i += 1){
                            property = properties[i];
                            propertyTest = propertyTest || hasOwnProp(input, property);
                        }
                        return objectTest && propertyTest;
                    }
                    function getCalendarFormat(myMoment, now) {
                        var diff = myMoment.diff(now, "days", true);
                        return diff < -6 ? "sameElse" : diff < -1 ? "lastWeek" : diff < 0 ? "lastDay" : diff < 1 ? "sameDay" : diff < 2 ? "nextDay" : diff < 7 ? "nextWeek" : "sameElse";
                    }
                    function calendar$1(time, formats) {
                        // Support for single parameter, formats only overload to the calendar function
                        if (arguments.length === 1) {
                            if (!arguments[0]) {
                                time = undefined;
                                formats = undefined;
                            } else if (isMomentInput(arguments[0])) {
                                time = arguments[0];
                                formats = undefined;
                            } else if (isCalendarSpec(arguments[0])) {
                                formats = arguments[0];
                                time = undefined;
                            }
                        } // We want to compare the start of today, vs this.
                        // Getting start-of-today depends on whether we're local/utc/offset or not.
                        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf("day"), format = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
                        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
                    }
                    function clone() {
                        return new Moment(this);
                    }
                    function isAfter(input, units) {
                        var localInput = isMoment(input) ? input : createLocal(input);
                        if (!(this.isValid() && localInput.isValid())) return false;
                        units = normalizeUnits(units) || "millisecond";
                        if (units === "millisecond") return this.valueOf() > localInput.valueOf();
                        else return localInput.valueOf() < this.clone().startOf(units).valueOf();
                    }
                    function isBefore(input, units) {
                        var localInput = isMoment(input) ? input : createLocal(input);
                        if (!(this.isValid() && localInput.isValid())) return false;
                        units = normalizeUnits(units) || "millisecond";
                        if (units === "millisecond") return this.valueOf() < localInput.valueOf();
                        else return this.clone().endOf(units).valueOf() < localInput.valueOf();
                    }
                    function isBetween(from, to, units, inclusivity) {
                        var localFrom = isMoment(from) ? from : createLocal(from), localTo = isMoment(to) ? to : createLocal(to);
                        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) return false;
                        inclusivity = inclusivity || "()";
                        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
                    }
                    function isSame(input, units) {
                        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
                        if (!(this.isValid() && localInput.isValid())) return false;
                        units = normalizeUnits(units) || "millisecond";
                        if (units === "millisecond") return this.valueOf() === localInput.valueOf();
                        else {
                            inputMs = localInput.valueOf();
                            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
                        }
                    }
                    function isSameOrAfter(input, units) {
                        return this.isSame(input, units) || this.isAfter(input, units);
                    }
                    function isSameOrBefore(input, units) {
                        return this.isSame(input, units) || this.isBefore(input, units);
                    }
                    function diff1(input, units, asFloat) {
                        var that, zoneDelta, output;
                        if (!this.isValid()) return NaN;
                        that = cloneWithOffset(input, this);
                        if (!that.isValid()) return NaN;
                        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
                        units = normalizeUnits(units);
                        switch(units){
                            case "year":
                                output = monthDiff(this, that) / 12;
                                break;
                            case "month":
                                output = monthDiff(this, that);
                                break;
                            case "quarter":
                                output = monthDiff(this, that) / 3;
                                break;
                            case "second":
                                output = (this - that) / 1e3;
                                break;
                            // 1000
                            case "minute":
                                output = (this - that) / 6e4;
                                break;
                            // 1000 * 60
                            case "hour":
                                output = (this - that) / 36e5;
                                break;
                            // 1000 * 60 * 60
                            case "day":
                                output = (this - that - zoneDelta) / 864e5;
                                break;
                            // 1000 * 60 * 60 * 24, negate dst
                            case "week":
                                output = (this - that - zoneDelta) / 6048e5;
                                break;
                            // 1000 * 60 * 60 * 24 * 7, negate dst
                            default:
                                output = this - that;
                        }
                        return asFloat ? output : absFloor(output);
                    }
                    function monthDiff(a, b) {
                        if (a.date() < b.date()) // end-of-month calculations work correct when the start month has more
                        // days than the end month.
                        return -monthDiff(b, a);
                         // difference in months
                        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), // b is in (anchor - 1 month, anchor + 1 month)
                        anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
                        if (b - anchor < 0) {
                            anchor2 = a.clone().add(wholeMonthDiff - 1, "months"); // linear across the month
                            adjust = (b - anchor) / (anchor - anchor2);
                        } else {
                            anchor2 = a.clone().add(wholeMonthDiff + 1, "months"); // linear across the month
                            adjust = (b - anchor) / (anchor2 - anchor);
                        } //check for negative zero, return zero if negative zero
                        return -(wholeMonthDiff + adjust) || 0;
                    }
                    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
                    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
                    function toString() {
                        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
                    }
                    function toISOString(keepOffset) {
                        if (!this.isValid()) return null;
                        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
                        if (m.year() < 0 || m.year() > 9999) return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
                        if (isFunction(Date.prototype.toISOString)) {
                            // native implementation is ~50x faster, use it when we can
                            if (utc) return this.toDate().toISOString();
                            else return new Date(this.valueOf() + this.utcOffset() * 60000).toISOString().replace("Z", formatMoment(m, "Z"));
                        }
                        return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
                    }
                    /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */ function inspect() {
                        if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
                        var func = "moment", zone = "", prefix, year, datetime, suffix;
                        if (!this.isLocal()) {
                            func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
                            zone = "Z";
                        }
                        prefix = "[" + func + '("]';
                        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
                        datetime = "-MM-DD[T]HH:mm:ss.SSS";
                        suffix = zone + '[")]';
                        return this.format(prefix + year + datetime + suffix);
                    }
                    function format1(inputString) {
                        if (!inputString) inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
                        var output = formatMoment(this, inputString);
                        return this.localeData().postformat(output);
                    }
                    function from1(time, withoutSuffix) {
                        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
                            to: this,
                            from: time
                        }).locale(this.locale()).humanize(!withoutSuffix);
                        else return this.localeData().invalidDate();
                    }
                    function fromNow(withoutSuffix) {
                        return this.from(createLocal(), withoutSuffix);
                    }
                    function to1(time, withoutSuffix) {
                        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) return createDuration({
                            from: this,
                            to: time
                        }).locale(this.locale()).humanize(!withoutSuffix);
                        else return this.localeData().invalidDate();
                    }
                    function toNow(withoutSuffix) {
                        return this.to(createLocal(), withoutSuffix);
                    } // If passed a locale key, it will set the locale for this
                    // instance.  Otherwise, it will return the locale configuration
                    // variables for this instance.
                    function locale1(key) {
                        var newLocaleData;
                        if (key === undefined) return this._locale._abbr;
                        else {
                            newLocaleData = getLocale(key);
                            if (newLocaleData != null) this._locale = newLocaleData;
                            return this;
                        }
                    }
                    var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
                        if (key === undefined) return this.localeData();
                        else return this.locale(key);
                    });
                    function localeData() {
                        return this._locale;
                    }
                    var MS_PER_SECOND = 1000, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = 3506328 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):
                    function mod$1(dividend, divisor) {
                        return (dividend % divisor + divisor) % divisor;
                    }
                    function localStartOfDate(y, m, d) {
                        // the date constructor remaps years 0-99 to 1900-1999
                        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
                        return new Date(y + 400, m, d) - MS_PER_400_YEARS;
                        else return new Date(y, m, d).valueOf();
                    }
                    function utcStartOfDate(y, m, d) {
                        // Date.UTC remaps years 0-99 to 1900-1999
                        if (y < 100 && y >= 0) // preserve leap years using a full 400 year cycle, then reset
                        return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
                        else return Date.UTC(y, m, d);
                    }
                    function startOf(units) {
                        var time, startOfDate;
                        units = normalizeUnits(units);
                        if (units === undefined || units === "millisecond" || !this.isValid()) return this;
                        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
                        switch(units){
                            case "year":
                                time = startOfDate(this.year(), 0, 1);
                                break;
                            case "quarter":
                                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                                break;
                            case "month":
                                time = startOfDate(this.year(), this.month(), 1);
                                break;
                            case "week":
                                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                                break;
                            case "isoWeek":
                                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                                break;
                            case "day":
                            case "date":
                                time = startOfDate(this.year(), this.month(), this.date());
                                break;
                            case "hour":
                                time = this._d.valueOf();
                                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                                break;
                            case "minute":
                                time = this._d.valueOf();
                                time -= mod$1(time, MS_PER_MINUTE);
                                break;
                            case "second":
                                time = this._d.valueOf();
                                time -= mod$1(time, MS_PER_SECOND);
                                break;
                        }
                        this._d.setTime(time);
                        hooks.updateOffset(this, true);
                        return this;
                    }
                    function endOf(units) {
                        var time, startOfDate;
                        units = normalizeUnits(units);
                        if (units === undefined || units === "millisecond" || !this.isValid()) return this;
                        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
                        switch(units){
                            case "year":
                                time = startOfDate(this.year() + 1, 0, 1) - 1;
                                break;
                            case "quarter":
                                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                                break;
                            case "month":
                                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                                break;
                            case "week":
                                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                                break;
                            case "isoWeek":
                                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                                break;
                            case "day":
                            case "date":
                                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                                break;
                            case "hour":
                                time = this._d.valueOf();
                                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                                break;
                            case "minute":
                                time = this._d.valueOf();
                                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                                break;
                            case "second":
                                time = this._d.valueOf();
                                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                                break;
                        }
                        this._d.setTime(time);
                        hooks.updateOffset(this, true);
                        return this;
                    }
                    function valueOf() {
                        return this._d.valueOf() - (this._offset || 0) * 60000;
                    }
                    function unix() {
                        return Math.floor(this.valueOf() / 1000);
                    }
                    function toDate() {
                        return new Date(this.valueOf());
                    }
                    function toArray() {
                        var m = this;
                        return [
                            m.year(),
                            m.month(),
                            m.date(),
                            m.hour(),
                            m.minute(),
                            m.second(),
                            m.millisecond()
                        ];
                    }
                    function toObject() {
                        var m = this;
                        return {
                            years: m.year(),
                            months: m.month(),
                            date: m.date(),
                            hours: m.hours(),
                            minutes: m.minutes(),
                            seconds: m.seconds(),
                            milliseconds: m.milliseconds()
                        };
                    }
                    function toJSON() {
                        // new Date(NaN).toJSON() === null
                        return this.isValid() ? this.toISOString() : null;
                    }
                    function isValid$2() {
                        return isValid(this);
                    }
                    function parsingFlags() {
                        return extend({}, getParsingFlags(this));
                    }
                    function invalidAt() {
                        return getParsingFlags(this).overflow;
                    }
                    function creationData() {
                        return {
                            input: this._i,
                            format: this._f,
                            locale: this._locale,
                            isUTC: this._isUTC,
                            strict: this._strict
                        };
                    }
                    addFormatToken("N", 0, 0, "eraAbbr");
                    addFormatToken("NN", 0, 0, "eraAbbr");
                    addFormatToken("NNN", 0, 0, "eraAbbr");
                    addFormatToken("NNNN", 0, 0, "eraName");
                    addFormatToken("NNNNN", 0, 0, "eraNarrow");
                    addFormatToken("y", [
                        "y",
                        1
                    ], "yo", "eraYear");
                    addFormatToken("y", [
                        "yy",
                        2
                    ], 0, "eraYear");
                    addFormatToken("y", [
                        "yyy",
                        3
                    ], 0, "eraYear");
                    addFormatToken("y", [
                        "yyyy",
                        4
                    ], 0, "eraYear");
                    addRegexToken("N", matchEraAbbr);
                    addRegexToken("NN", matchEraAbbr);
                    addRegexToken("NNN", matchEraAbbr);
                    addRegexToken("NNNN", matchEraName);
                    addRegexToken("NNNNN", matchEraNarrow);
                    addParseToken([
                        "N",
                        "NN",
                        "NNN",
                        "NNNN",
                        "NNNNN"
                    ], function(input, array, config, token) {
                        var era = config._locale.erasParse(input, token, config._strict);
                        if (era) getParsingFlags(config).era = era;
                        else getParsingFlags(config).invalidEra = input;
                    });
                    addRegexToken("y", matchUnsigned);
                    addRegexToken("yy", matchUnsigned);
                    addRegexToken("yyy", matchUnsigned);
                    addRegexToken("yyyy", matchUnsigned);
                    addRegexToken("yo", matchEraYearOrdinal);
                    addParseToken([
                        "y",
                        "yy",
                        "yyy",
                        "yyyy"
                    ], YEAR);
                    addParseToken([
                        "yo"
                    ], function(input, array, config, token) {
                        var match;
                        if (config._locale._eraYearOrdinalRegex) match = input.match(config._locale._eraYearOrdinalRegex);
                        if (config._locale.eraYearOrdinalParse) array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
                        else array[YEAR] = parseInt(input, 10);
                    });
                    function localeEras(m, format) {
                        var i, l, date, eras = this._eras || getLocale("en")._eras;
                        for(i = 0, l = eras.length; i < l; ++i){
                            switch(_typeof(eras[i].since)){
                                case "string":
                                    // truncate time
                                    date = hooks(eras[i].since).startOf("day");
                                    eras[i].since = date.valueOf();
                                    break;
                            }
                            switch(_typeof(eras[i].until)){
                                case "undefined":
                                    eras[i].until = Infinity;
                                    break;
                                case "string":
                                    // truncate time
                                    date = hooks(eras[i].until).startOf("day").valueOf();
                                    eras[i].until = date.valueOf();
                                    break;
                            }
                        }
                        return eras;
                    }
                    function localeErasParse(eraName, format, strict) {
                        var i, l, eras = this.eras(), name, abbr, narrow;
                        eraName = eraName.toUpperCase();
                        for(i = 0, l = eras.length; i < l; ++i){
                            name = eras[i].name.toUpperCase();
                            abbr = eras[i].abbr.toUpperCase();
                            narrow = eras[i].narrow.toUpperCase();
                            if (strict) switch(format){
                                case "N":
                                case "NN":
                                case "NNN":
                                    if (abbr === eraName) return eras[i];
                                    break;
                                case "NNNN":
                                    if (name === eraName) return eras[i];
                                    break;
                                case "NNNNN":
                                    if (narrow === eraName) return eras[i];
                                    break;
                            }
                            else if ([
                                name,
                                abbr,
                                narrow
                            ].indexOf(eraName) >= 0) return eras[i];
                        }
                    }
                    function localeErasConvertYear(era, year) {
                        var dir = era.since <= era.until ? 1 : -1;
                        if (year === undefined) return hooks(era.since).year();
                        else return hooks(era.since).year() + (year - era.offset) * dir;
                    }
                    function getEraName() {
                        var i, l, val, eras = this.localeData().eras();
                        for(i = 0, l = eras.length; i < l; ++i){
                            // truncate time
                            val = this.clone().startOf("day").valueOf();
                            if (eras[i].since <= val && val <= eras[i].until) return eras[i].name;
                            if (eras[i].until <= val && val <= eras[i].since) return eras[i].name;
                        }
                        return "";
                    }
                    function getEraNarrow() {
                        var i, l, val, eras = this.localeData().eras();
                        for(i = 0, l = eras.length; i < l; ++i){
                            // truncate time
                            val = this.clone().startOf("day").valueOf();
                            if (eras[i].since <= val && val <= eras[i].until) return eras[i].narrow;
                            if (eras[i].until <= val && val <= eras[i].since) return eras[i].narrow;
                        }
                        return "";
                    }
                    function getEraAbbr() {
                        var i, l, val, eras = this.localeData().eras();
                        for(i = 0, l = eras.length; i < l; ++i){
                            // truncate time
                            val = this.clone().startOf("day").valueOf();
                            if (eras[i].since <= val && val <= eras[i].until) return eras[i].abbr;
                            if (eras[i].until <= val && val <= eras[i].since) return eras[i].abbr;
                        }
                        return "";
                    }
                    function getEraYear() {
                        var i, l, dir, val, eras = this.localeData().eras();
                        for(i = 0, l = eras.length; i < l; ++i){
                            dir = eras[i].since <= eras[i].until ? 1 : -1; // truncate time
                            val = this.clone().startOf("day").valueOf();
                            if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
                        }
                        return this.year();
                    }
                    function erasNameRegex(isStrict) {
                        if (!hasOwnProp(this, "_erasNameRegex")) computeErasParse.call(this);
                        return isStrict ? this._erasNameRegex : this._erasRegex;
                    }
                    function erasAbbrRegex(isStrict) {
                        if (!hasOwnProp(this, "_erasAbbrRegex")) computeErasParse.call(this);
                        return isStrict ? this._erasAbbrRegex : this._erasRegex;
                    }
                    function erasNarrowRegex(isStrict) {
                        if (!hasOwnProp(this, "_erasNarrowRegex")) computeErasParse.call(this);
                        return isStrict ? this._erasNarrowRegex : this._erasRegex;
                    }
                    function matchEraAbbr(isStrict, locale) {
                        return locale.erasAbbrRegex(isStrict);
                    }
                    function matchEraName(isStrict, locale) {
                        return locale.erasNameRegex(isStrict);
                    }
                    function matchEraNarrow(isStrict, locale) {
                        return locale.erasNarrowRegex(isStrict);
                    }
                    function matchEraYearOrdinal(isStrict, locale) {
                        return locale._eraYearOrdinalRegex || matchUnsigned;
                    }
                    function computeErasParse() {
                        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, eras = this.eras();
                        for(i = 0, l = eras.length; i < l; ++i){
                            namePieces.push(regexEscape(eras[i].name));
                            abbrPieces.push(regexEscape(eras[i].abbr));
                            narrowPieces.push(regexEscape(eras[i].narrow));
                            mixedPieces.push(regexEscape(eras[i].name));
                            mixedPieces.push(regexEscape(eras[i].abbr));
                            mixedPieces.push(regexEscape(eras[i].narrow));
                        }
                        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
                        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
                        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
                        this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
                    } // FORMATTING
                    addFormatToken(0, [
                        "gg",
                        2
                    ], 0, function() {
                        return this.weekYear() % 100;
                    });
                    addFormatToken(0, [
                        "GG",
                        2
                    ], 0, function() {
                        return this.isoWeekYear() % 100;
                    });
                    function addWeekYearFormatToken(token, getter) {
                        addFormatToken(0, [
                            token,
                            token.length
                        ], 0, getter);
                    }
                    addWeekYearFormatToken("gggg", "weekYear");
                    addWeekYearFormatToken("ggggg", "weekYear");
                    addWeekYearFormatToken("GGGG", "isoWeekYear");
                    addWeekYearFormatToken("GGGGG", "isoWeekYear"); // ALIASES
                    addUnitAlias("weekYear", "gg");
                    addUnitAlias("isoWeekYear", "GG"); // PRIORITY
                    addUnitPriority("weekYear", 1);
                    addUnitPriority("isoWeekYear", 1); // PARSING
                    addRegexToken("G", matchSigned);
                    addRegexToken("g", matchSigned);
                    addRegexToken("GG", match1to2, match2);
                    addRegexToken("gg", match1to2, match2);
                    addRegexToken("GGGG", match1to4, match4);
                    addRegexToken("gggg", match1to4, match4);
                    addRegexToken("GGGGG", match1to6, match6);
                    addRegexToken("ggggg", match1to6, match6);
                    addWeekParseToken([
                        "gggg",
                        "ggggg",
                        "GGGG",
                        "GGGGG"
                    ], function(input, week, config, token) {
                        week[token.substr(0, 2)] = toInt(input);
                    });
                    addWeekParseToken([
                        "gg",
                        "GG"
                    ], function(input, week, config, token) {
                        week[token] = hooks.parseTwoDigitYear(input);
                    }); // MOMENTS
                    function getSetWeekYear(input) {
                        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
                    }
                    function getSetISOWeekYear(input) {
                        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
                    }
                    function getISOWeeksInYear() {
                        return weeksInYear(this.year(), 1, 4);
                    }
                    function getISOWeeksInISOWeekYear() {
                        return weeksInYear(this.isoWeekYear(), 1, 4);
                    }
                    function getWeeksInYear() {
                        var weekInfo = this.localeData()._week;
                        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
                    }
                    function getWeeksInWeekYear() {
                        var weekInfo = this.localeData()._week;
                        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
                    }
                    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
                        var weeksTarget;
                        if (input == null) return weekOfYear(this, dow, doy).year;
                        else {
                            weeksTarget = weeksInYear(input, dow, doy);
                            if (week > weeksTarget) week = weeksTarget;
                            return setWeekAll.call(this, input, week, weekday, dow, doy);
                        }
                    }
                    function setWeekAll(weekYear, week, weekday, dow, doy) {
                        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
                        this.year(date.getUTCFullYear());
                        this.month(date.getUTCMonth());
                        this.date(date.getUTCDate());
                        return this;
                    } // FORMATTING
                    addFormatToken("Q", 0, "Qo", "quarter"); // ALIASES
                    addUnitAlias("quarter", "Q"); // PRIORITY
                    addUnitPriority("quarter", 7); // PARSING
                    addRegexToken("Q", match1);
                    addParseToken("Q", function(input, array) {
                        array[MONTH] = (toInt(input) - 1) * 3;
                    }); // MOMENTS
                    function getSetQuarter(input) {
                        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
                    } // FORMATTING
                    addFormatToken("D", [
                        "DD",
                        2
                    ], "Do", "date"); // ALIASES
                    addUnitAlias("date", "D"); // PRIORITY
                    addUnitPriority("date", 9); // PARSING
                    addRegexToken("D", match1to2);
                    addRegexToken("DD", match1to2, match2);
                    addRegexToken("Do", function(isStrict, locale) {
                        // TODO: Remove "ordinalParse" fallback in next major release.
                        return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
                    });
                    addParseToken([
                        "D",
                        "DD"
                    ], DATE);
                    addParseToken("Do", function(input, array) {
                        array[DATE] = toInt(input.match(match1to2)[0]);
                    }); // MOMENTS
                    var getSetDayOfMonth = makeGetSet("Date", true); // FORMATTING
                    addFormatToken("DDD", [
                        "DDDD",
                        3
                    ], "DDDo", "dayOfYear"); // ALIASES
                    addUnitAlias("dayOfYear", "DDD"); // PRIORITY
                    addUnitPriority("dayOfYear", 4); // PARSING
                    addRegexToken("DDD", match1to3);
                    addRegexToken("DDDD", match3);
                    addParseToken([
                        "DDD",
                        "DDDD"
                    ], function(input, array, config) {
                        config._dayOfYear = toInt(input);
                    }); // HELPERS
                    // MOMENTS
                    function getSetDayOfYear(input) {
                        var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
                        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
                    } // FORMATTING
                    addFormatToken("m", [
                        "mm",
                        2
                    ], 0, "minute"); // ALIASES
                    addUnitAlias("minute", "m"); // PRIORITY
                    addUnitPriority("minute", 14); // PARSING
                    addRegexToken("m", match1to2);
                    addRegexToken("mm", match1to2, match2);
                    addParseToken([
                        "m",
                        "mm"
                    ], MINUTE); // MOMENTS
                    var getSetMinute = makeGetSet("Minutes", false); // FORMATTING
                    addFormatToken("s", [
                        "ss",
                        2
                    ], 0, "second"); // ALIASES
                    addUnitAlias("second", "s"); // PRIORITY
                    addUnitPriority("second", 15); // PARSING
                    addRegexToken("s", match1to2);
                    addRegexToken("ss", match1to2, match2);
                    addParseToken([
                        "s",
                        "ss"
                    ], SECOND); // MOMENTS
                    var getSetSecond = makeGetSet("Seconds", false); // FORMATTING
                    addFormatToken("S", 0, 0, function() {
                        return ~~(this.millisecond() / 100);
                    });
                    addFormatToken(0, [
                        "SS",
                        2
                    ], 0, function() {
                        return ~~(this.millisecond() / 10);
                    });
                    addFormatToken(0, [
                        "SSS",
                        3
                    ], 0, "millisecond");
                    addFormatToken(0, [
                        "SSSS",
                        4
                    ], 0, function() {
                        return this.millisecond() * 10;
                    });
                    addFormatToken(0, [
                        "SSSSS",
                        5
                    ], 0, function() {
                        return this.millisecond() * 100;
                    });
                    addFormatToken(0, [
                        "SSSSSS",
                        6
                    ], 0, function() {
                        return this.millisecond() * 1000;
                    });
                    addFormatToken(0, [
                        "SSSSSSS",
                        7
                    ], 0, function() {
                        return this.millisecond() * 10000;
                    });
                    addFormatToken(0, [
                        "SSSSSSSS",
                        8
                    ], 0, function() {
                        return this.millisecond() * 100000;
                    });
                    addFormatToken(0, [
                        "SSSSSSSSS",
                        9
                    ], 0, function() {
                        return this.millisecond() * 1000000;
                    }); // ALIASES
                    addUnitAlias("millisecond", "ms"); // PRIORITY
                    addUnitPriority("millisecond", 16); // PARSING
                    addRegexToken("S", match1to3, match1);
                    addRegexToken("SS", match1to3, match2);
                    addRegexToken("SSS", match1to3, match3);
                    var token1, getSetMillisecond;
                    for(token1 = "SSSS"; token1.length <= 9; token1 += "S")addRegexToken(token1, matchUnsigned);
                    function parseMs(input, array) {
                        array[MILLISECOND] = toInt(("0." + input) * 1000);
                    }
                    for(token1 = "S"; token1.length <= 9; token1 += "S")addParseToken(token1, parseMs);
                    getSetMillisecond = makeGetSet("Milliseconds", false); // FORMATTING
                    addFormatToken("z", 0, 0, "zoneAbbr");
                    addFormatToken("zz", 0, 0, "zoneName"); // MOMENTS
                    function getZoneAbbr() {
                        return this._isUTC ? "UTC" : "";
                    }
                    function getZoneName() {
                        return this._isUTC ? "Coordinated Universal Time" : "";
                    }
                    var proto = Moment.prototype;
                    proto.add = add;
                    proto.calendar = calendar$1;
                    proto.clone = clone;
                    proto.diff = diff1;
                    proto.endOf = endOf;
                    proto.format = format1;
                    proto.from = from1;
                    proto.fromNow = fromNow;
                    proto.to = to1;
                    proto.toNow = toNow;
                    proto.get = stringGet;
                    proto.invalidAt = invalidAt;
                    proto.isAfter = isAfter;
                    proto.isBefore = isBefore;
                    proto.isBetween = isBetween;
                    proto.isSame = isSame;
                    proto.isSameOrAfter = isSameOrAfter;
                    proto.isSameOrBefore = isSameOrBefore;
                    proto.isValid = isValid$2;
                    proto.lang = lang;
                    proto.locale = locale1;
                    proto.localeData = localeData;
                    proto.max = prototypeMax;
                    proto.min = prototypeMin;
                    proto.parsingFlags = parsingFlags;
                    proto.set = stringSet;
                    proto.startOf = startOf;
                    proto.subtract = subtract;
                    proto.toArray = toArray;
                    proto.toObject = toObject;
                    proto.toDate = toDate;
                    proto.toISOString = toISOString;
                    proto.inspect = inspect;
                    if (typeof Symbol !== "undefined" && Symbol["for"] != null) proto[Symbol["for"]("nodejs.util.inspect.custom")] = function() {
                        return "Moment<" + this.format() + ">";
                    };
                    proto.toJSON = toJSON;
                    proto.toString = toString;
                    proto.unix = unix;
                    proto.valueOf = valueOf;
                    proto.creationData = creationData;
                    proto.eraName = getEraName;
                    proto.eraNarrow = getEraNarrow;
                    proto.eraAbbr = getEraAbbr;
                    proto.eraYear = getEraYear;
                    proto.year = getSetYear;
                    proto.isLeapYear = getIsLeapYear;
                    proto.weekYear = getSetWeekYear;
                    proto.isoWeekYear = getSetISOWeekYear;
                    proto.quarter = proto.quarters = getSetQuarter;
                    proto.month = getSetMonth;
                    proto.daysInMonth = getDaysInMonth;
                    proto.week = proto.weeks = getSetWeek;
                    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
                    proto.weeksInYear = getWeeksInYear;
                    proto.weeksInWeekYear = getWeeksInWeekYear;
                    proto.isoWeeksInYear = getISOWeeksInYear;
                    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
                    proto.date = getSetDayOfMonth;
                    proto.day = proto.days = getSetDayOfWeek;
                    proto.weekday = getSetLocaleDayOfWeek;
                    proto.isoWeekday = getSetISODayOfWeek;
                    proto.dayOfYear = getSetDayOfYear;
                    proto.hour = proto.hours = getSetHour;
                    proto.minute = proto.minutes = getSetMinute;
                    proto.second = proto.seconds = getSetSecond;
                    proto.millisecond = proto.milliseconds = getSetMillisecond;
                    proto.utcOffset = getSetOffset;
                    proto.utc = setOffsetToUTC;
                    proto.local = setOffsetToLocal;
                    proto.parseZone = setOffsetToParsedOffset;
                    proto.hasAlignedHourOffset = hasAlignedHourOffset;
                    proto.isDST = isDaylightSavingTime;
                    proto.isLocal = isLocal;
                    proto.isUtcOffset = isUtcOffset;
                    proto.isUtc = isUtc;
                    proto.isUTC = isUtc;
                    proto.zoneAbbr = getZoneAbbr;
                    proto.zoneName = getZoneName;
                    proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
                    proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
                    proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
                    proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
                    proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
                    function createUnix(input) {
                        return createLocal(input * 1000);
                    }
                    function createInZone() {
                        return createLocal.apply(null, arguments).parseZone();
                    }
                    function preParsePostFormat(string) {
                        return string;
                    }
                    var proto$1 = Locale.prototype;
                    proto$1.calendar = calendar;
                    proto$1.longDateFormat = longDateFormat;
                    proto$1.invalidDate = invalidDate;
                    proto$1.ordinal = ordinal1;
                    proto$1.preparse = preParsePostFormat;
                    proto$1.postformat = preParsePostFormat;
                    proto$1.relativeTime = relativeTime;
                    proto$1.pastFuture = pastFuture;
                    proto$1.set = set;
                    proto$1.eras = localeEras;
                    proto$1.erasParse = localeErasParse;
                    proto$1.erasConvertYear = localeErasConvertYear;
                    proto$1.erasAbbrRegex = erasAbbrRegex;
                    proto$1.erasNameRegex = erasNameRegex;
                    proto$1.erasNarrowRegex = erasNarrowRegex;
                    proto$1.months = localeMonths;
                    proto$1.monthsShort = localeMonthsShort;
                    proto$1.monthsParse = localeMonthsParse;
                    proto$1.monthsRegex = monthsRegex;
                    proto$1.monthsShortRegex = monthsShortRegex;
                    proto$1.week = localeWeek;
                    proto$1.firstDayOfYear = localeFirstDayOfYear;
                    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
                    proto$1.weekdays = localeWeekdays;
                    proto$1.weekdaysMin = localeWeekdaysMin;
                    proto$1.weekdaysShort = localeWeekdaysShort;
                    proto$1.weekdaysParse = localeWeekdaysParse;
                    proto$1.weekdaysRegex = weekdaysRegex;
                    proto$1.weekdaysShortRegex = weekdaysShortRegex;
                    proto$1.weekdaysMinRegex = weekdaysMinRegex;
                    proto$1.isPM = localeIsPM;
                    proto$1.meridiem = localeMeridiem;
                    function get$1(format, index, field, setter) {
                        var locale = getLocale(), utc = createUTC().set(setter, index);
                        return locale[field](utc, format);
                    }
                    function listMonthsImpl(format, index, field) {
                        if (isNumber(format)) {
                            index = format;
                            format = undefined;
                        }
                        format = format || "";
                        if (index != null) return get$1(format, index, field, "month");
                        var i, out = [];
                        for(i = 0; i < 12; i++)out[i] = get$1(format, i, field, "month");
                        return out;
                    } // ()
                    // (5)
                    // (fmt, 5)
                    // (fmt)
                    // (true)
                    // (true, 5)
                    // (true, fmt, 5)
                    // (true, fmt)
                    function listWeekdaysImpl(localeSorted, format, index, field) {
                        if (typeof localeSorted === "boolean") {
                            if (isNumber(format)) {
                                index = format;
                                format = undefined;
                            }
                            format = format || "";
                        } else {
                            format = localeSorted;
                            index = format;
                            localeSorted = false;
                            if (isNumber(format)) {
                                index = format;
                                format = undefined;
                            }
                            format = format || "";
                        }
                        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0, i, out = [];
                        if (index != null) return get$1(format, (index + shift) % 7, field, "day");
                        for(i = 0; i < 7; i++)out[i] = get$1(format, (i + shift) % 7, field, "day");
                        return out;
                    }
                    function listMonths(format, index) {
                        return listMonthsImpl(format, index, "months");
                    }
                    function listMonthsShort(format, index) {
                        return listMonthsImpl(format, index, "monthsShort");
                    }
                    function listWeekdays(localeSorted, format, index) {
                        return listWeekdaysImpl(localeSorted, format, index, "weekdays");
                    }
                    function listWeekdaysShort(localeSorted, format, index) {
                        return listWeekdaysImpl(localeSorted, format, index, "weekdaysShort");
                    }
                    function listWeekdaysMin(localeSorted, format, index) {
                        return listWeekdaysImpl(localeSorted, format, index, "weekdaysMin");
                    }
                    getSetGlobalLocale("en", {
                        eras: [
                            {
                                since: "0001-01-01",
                                until: Infinity,
                                offset: 1,
                                name: "Anno Domini",
                                narrow: "AD",
                                abbr: "AD"
                            },
                            {
                                since: "0000-12-31",
                                until: -Infinity,
                                offset: 1,
                                name: "Before Christ",
                                narrow: "BC",
                                abbr: "BC"
                            }
                        ],
                        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                        ordinal: function ordinal(number) {
                            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
                            return number + output;
                        }
                    }); // Side effect imports
                    hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
                    hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
                    var mathAbs = Math.abs;
                    function abs() {
                        var data = this._data;
                        this._milliseconds = mathAbs(this._milliseconds);
                        this._days = mathAbs(this._days);
                        this._months = mathAbs(this._months);
                        data.milliseconds = mathAbs(data.milliseconds);
                        data.seconds = mathAbs(data.seconds);
                        data.minutes = mathAbs(data.minutes);
                        data.hours = mathAbs(data.hours);
                        data.months = mathAbs(data.months);
                        data.years = mathAbs(data.years);
                        return this;
                    }
                    function addSubtract$1(duration, input, value, direction) {
                        var other = createDuration(input, value);
                        duration._milliseconds += direction * other._milliseconds;
                        duration._days += direction * other._days;
                        duration._months += direction * other._months;
                        return duration._bubble();
                    } // supports only 2.0-style add(1, 's') or add(duration)
                    function add$1(input, value) {
                        return addSubtract$1(this, input, value, 1);
                    } // supports only 2.0-style subtract(1, 's') or subtract(duration)
                    function subtract$1(input, value) {
                        return addSubtract$1(this, input, value, -1);
                    }
                    function absCeil(number) {
                        if (number < 0) return Math.floor(number);
                        else return Math.ceil(number);
                    }
                    function bubble() {
                        var milliseconds = this._milliseconds, days = this._days, months = this._months, data = this._data, seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
                        // check: https://github.com/moment/moment/issues/2166
                        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
                            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                            days = 0;
                            months = 0;
                        } // The following code bubbles up values, see the tests for
                        // examples of what that means.
                        data.milliseconds = milliseconds % 1000;
                        seconds = absFloor(milliseconds / 1000);
                        data.seconds = seconds % 60;
                        minutes = absFloor(seconds / 60);
                        data.minutes = minutes % 60;
                        hours = absFloor(minutes / 60);
                        data.hours = hours % 24;
                        days += absFloor(hours / 24); // convert days to months
                        monthsFromDays = absFloor(daysToMonths(days));
                        months += monthsFromDays;
                        days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year
                        years = absFloor(months / 12);
                        months %= 12;
                        data.days = days;
                        data.months = months;
                        data.years = years;
                        return this;
                    }
                    function daysToMonths(days) {
                        // 400 years have 146097 days (taking into account leap year rules)
                        // 400 years have 12 months === 4800
                        return days * 4800 / 146097;
                    }
                    function monthsToDays(months) {
                        // the reverse of daysToMonths
                        return months * 146097 / 4800;
                    }
                    function as(units) {
                        if (!this.isValid()) return NaN;
                        var days, months, milliseconds = this._milliseconds;
                        units = normalizeUnits(units);
                        if (units === "month" || units === "quarter" || units === "year") {
                            days = this._days + milliseconds / 864e5;
                            months = this._months + daysToMonths(days);
                            switch(units){
                                case "month":
                                    return months;
                                case "quarter":
                                    return months / 3;
                                case "year":
                                    return months / 12;
                            }
                        } else {
                            // handle milliseconds separately because of floating point math errors (issue #1867)
                            days = this._days + Math.round(monthsToDays(this._months));
                            switch(units){
                                case "week":
                                    return days / 7 + milliseconds / 6048e5;
                                case "day":
                                    return days + milliseconds / 864e5;
                                case "hour":
                                    return days * 24 + milliseconds / 36e5;
                                case "minute":
                                    return days * 1440 + milliseconds / 6e4;
                                case "second":
                                    return days * 86400 + milliseconds / 1000;
                                // Math.floor prevents floating point math errors here
                                case "millisecond":
                                    return Math.floor(days * 864e5) + milliseconds;
                                default:
                                    throw new Error("Unknown unit " + units);
                            }
                        }
                    } // TODO: Use this.as('ms')?
                    function valueOf$1() {
                        if (!this.isValid()) return NaN;
                        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
                    }
                    function makeAs(alias) {
                        return function() {
                            return this.as(alias);
                        };
                    }
                    var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
                    function clone$1() {
                        return createDuration(this);
                    }
                    function get$2(units) {
                        units = normalizeUnits(units);
                        return this.isValid() ? this[units + "s"]() : NaN;
                    }
                    function makeGetter(name) {
                        return function() {
                            return this.isValid() ? this._data[name] : NaN;
                        };
                    }
                    var milliseconds1 = makeGetter("milliseconds"), seconds1 = makeGetter("seconds"), minutes1 = makeGetter("minutes"), hours1 = makeGetter("hours"), days1 = makeGetter("days"), months1 = makeGetter("months"), years1 = makeGetter("years");
                    function weeks1() {
                        return absFloor(this.days() / 7);
                    }
                    var round = Math.round, thresholds1 = {
                        ss: 44,
                        // a few seconds to seconds
                        s: 45,
                        // seconds to minute
                        m: 45,
                        // minutes to hour
                        h: 22,
                        // hours to day
                        d: 26,
                        // days to month/week
                        w: null,
                        // weeks to month
                        M: 11 // months to year
                    }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
                    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
                        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
                    }
                    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
                        var duration = createDuration(posNegDuration).abs(), seconds = round(duration.as("s")), minutes = round(duration.as("m")), hours = round(duration.as("h")), days = round(duration.as("d")), months = round(duration.as("M")), weeks = round(duration.as("w")), years = round(duration.as("y")), a = seconds <= thresholds.ss && [
                            "s",
                            seconds
                        ] || seconds < thresholds.s && [
                            "ss",
                            seconds
                        ] || minutes <= 1 && [
                            "m"
                        ] || minutes < thresholds.m && [
                            "mm",
                            minutes
                        ] || hours <= 1 && [
                            "h"
                        ] || hours < thresholds.h && [
                            "hh",
                            hours
                        ] || days <= 1 && [
                            "d"
                        ] || days < thresholds.d && [
                            "dd",
                            days
                        ];
                        if (thresholds.w != null) a = a || weeks <= 1 && [
                            "w"
                        ] || weeks < thresholds.w && [
                            "ww",
                            weeks
                        ];
                        a = a || months <= 1 && [
                            "M"
                        ] || months < thresholds.M && [
                            "MM",
                            months
                        ] || years <= 1 && [
                            "y"
                        ] || [
                            "yy",
                            years
                        ];
                        a[2] = withoutSuffix;
                        a[3] = +posNegDuration > 0;
                        a[4] = locale;
                        return substituteTimeAgo.apply(null, a);
                    } // This function allows you to set the rounding function for relative time strings
                    function getSetRelativeTimeRounding(roundingFunction) {
                        if (roundingFunction === undefined) return round;
                        if (typeof roundingFunction === "function") {
                            round = roundingFunction;
                            return true;
                        }
                        return false;
                    } // This function allows you to set a threshold for relative time strings
                    function getSetRelativeTimeThreshold(threshold, limit) {
                        if (thresholds1[threshold] === undefined) return false;
                        if (limit === undefined) return thresholds1[threshold];
                        thresholds1[threshold] = limit;
                        if (threshold === "s") thresholds1.ss = limit - 1;
                        return true;
                    }
                    function humanize(argWithSuffix, argThresholds) {
                        if (!this.isValid()) return this.localeData().invalidDate();
                        var withSuffix = false, th = thresholds1, locale, output;
                        if (_typeof(argWithSuffix) === "object") {
                            argThresholds = argWithSuffix;
                            argWithSuffix = false;
                        }
                        if (typeof argWithSuffix === "boolean") withSuffix = argWithSuffix;
                        if (_typeof(argThresholds) === "object") {
                            th = Object.assign({}, thresholds1, argThresholds);
                            if (argThresholds.s != null && argThresholds.ss == null) th.ss = argThresholds.s - 1;
                        }
                        locale = this.localeData();
                        output = relativeTime$1(this, !withSuffix, th, locale);
                        if (withSuffix) output = locale.pastFuture(+this, output);
                        return locale.postformat(output);
                    }
                    var abs$1 = Math.abs;
                    function sign1(x) {
                        return (x > 0) - (x < 0) || +x;
                    }
                    function toISOString$1() {
                        // for ISO strings we do not use the normal bubbling rules:
                        //  * milliseconds bubble up until they become hours
                        //  * days do not bubble at all
                        //  * months bubble up until they become years
                        // This is because there is no context-free conversion between hours and days
                        // (think of clock changes)
                        // and also not between days and months (28-31 days per month)
                        if (!this.isValid()) return this.localeData().invalidDate();
                        var seconds = abs$1(this._milliseconds) / 1000, days = abs$1(this._days), months = abs$1(this._months), minutes, hours, years, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
                        if (!total) // this is the same as C#'s (Noda) and python (isodate)...
                        // but not other JS (goog.date)
                        return "P0D";
                         // 3600 seconds -> 60 minutes -> 1 hour
                        minutes = absFloor(seconds / 60);
                        hours = absFloor(minutes / 60);
                        seconds %= 60;
                        minutes %= 60; // 12 months -> 1 year
                        years = absFloor(months / 12);
                        months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
                        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, "") : "";
                        totalSign = total < 0 ? "-" : "";
                        ymSign = sign1(this._months) !== sign1(total) ? "-" : "";
                        daysSign = sign1(this._days) !== sign1(total) ? "-" : "";
                        hmsSign = sign1(this._milliseconds) !== sign1(total) ? "-" : "";
                        return totalSign + "P" + (years ? ymSign + years + "Y" : "") + (months ? ymSign + months + "M" : "") + (days ? daysSign + days + "D" : "") + (hours || minutes || seconds ? "T" : "") + (hours ? hmsSign + hours + "H" : "") + (minutes ? hmsSign + minutes + "M" : "") + (seconds ? hmsSign + s + "S" : "");
                    }
                    var proto$2 = Duration.prototype;
                    proto$2.isValid = isValid$1;
                    proto$2.abs = abs;
                    proto$2.add = add$1;
                    proto$2.subtract = subtract$1;
                    proto$2.as = as;
                    proto$2.asMilliseconds = asMilliseconds;
                    proto$2.asSeconds = asSeconds;
                    proto$2.asMinutes = asMinutes;
                    proto$2.asHours = asHours;
                    proto$2.asDays = asDays;
                    proto$2.asWeeks = asWeeks;
                    proto$2.asMonths = asMonths;
                    proto$2.asQuarters = asQuarters;
                    proto$2.asYears = asYears;
                    proto$2.valueOf = valueOf$1;
                    proto$2._bubble = bubble;
                    proto$2.clone = clone$1;
                    proto$2.get = get$2;
                    proto$2.milliseconds = milliseconds1;
                    proto$2.seconds = seconds1;
                    proto$2.minutes = minutes1;
                    proto$2.hours = hours1;
                    proto$2.days = days1;
                    proto$2.weeks = weeks1;
                    proto$2.months = months1;
                    proto$2.years = years1;
                    proto$2.humanize = humanize;
                    proto$2.toISOString = toISOString$1;
                    proto$2.toString = toISOString$1;
                    proto$2.toJSON = toISOString$1;
                    proto$2.locale = locale1;
                    proto$2.localeData = localeData;
                    proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
                    proto$2.lang = lang; // FORMATTING
                    addFormatToken("X", 0, 0, "unix");
                    addFormatToken("x", 0, 0, "valueOf"); // PARSING
                    addRegexToken("x", matchSigned);
                    addRegexToken("X", matchTimestamp);
                    addParseToken("X", function(input, array, config) {
                        config._d = new Date(parseFloat(input) * 1000);
                    });
                    addParseToken("x", function(input, array, config) {
                        config._d = new Date(toInt(input));
                    }); //! moment.js
                    hooks.version = "2.29.4";
                    setHookCallback(createLocal);
                    hooks.fn = proto;
                    hooks.min = min;
                    hooks.max = max;
                    hooks.now = now1;
                    hooks.utc = createUTC;
                    hooks.unix = createUnix;
                    hooks.months = listMonths;
                    hooks.isDate = isDate;
                    hooks.locale = getSetGlobalLocale;
                    hooks.invalid = createInvalid;
                    hooks.duration = createDuration;
                    hooks.isMoment = isMoment;
                    hooks.weekdays = listWeekdays;
                    hooks.parseZone = createInZone;
                    hooks.localeData = getLocale;
                    hooks.isDuration = isDuration;
                    hooks.monthsShort = listMonthsShort;
                    hooks.weekdaysMin = listWeekdaysMin;
                    hooks.defineLocale = defineLocale;
                    hooks.updateLocale = updateLocale;
                    hooks.locales = listLocales;
                    hooks.weekdaysShort = listWeekdaysShort;
                    hooks.normalizeUnits = normalizeUnits;
                    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
                    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
                    hooks.calendarFormat = getCalendarFormat;
                    hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats
                    hooks.HTML5_FMT = {
                        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
                        // <input type="datetime-local" />
                        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
                        // <input type="datetime-local" step="1" />
                        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
                        // <input type="datetime-local" step="0.001" />
                        DATE: "YYYY-MM-DD",
                        // <input type="date" />
                        TIME: "HH:mm",
                        // <input type="time" />
                        TIME_SECONDS: "HH:mm:ss",
                        // <input type="time" step="1" />
                        TIME_MS: "HH:mm:ss.SSS",
                        // <input type="time" step="0.001" />
                        WEEK: "GGGG-[W]WW",
                        // <input type="week" />
                        MONTH: "YYYY-MM" // <input type="month" />
                    };
                    return hooks;
                });
            },
            {}
        ],
        249: [
            function(require, module, exports) {
                arguments[4][157][0].apply(exports, arguments);
            },
            {
                "./lib/async": 250,
                "./lib/sync": 253,
                "dup": 157
            }
        ],
        250: [
            function(require, module, exports) {
                (function(process, global) {
                    (function() {
                        var Buffer = require("safe-buffer").Buffer;
                        var checkParameters = require("./precondition");
                        var defaultEncoding = require("./default-encoding");
                        var sync = require("./sync");
                        var toBuffer = require("./to-buffer");
                        var ZERO_BUF;
                        var subtle = global.crypto && global.crypto.subtle;
                        var toBrowser = {
                            sha: "SHA-1",
                            "sha-1": "SHA-1",
                            sha1: "SHA-1",
                            sha256: "SHA-256",
                            "sha-256": "SHA-256",
                            sha384: "SHA-384",
                            "sha-384": "SHA-384",
                            "sha-512": "SHA-512",
                            sha512: "SHA-512"
                        };
                        var checks = [];
                        function checkNative(algo) {
                            if (global.process && !global.process.browser) return Promise.resolve(false);
                            if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
                            if (checks[algo] !== undefined) return checks[algo];
                            ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
                            var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
                                return true;
                            })["catch"](function() {
                                return false;
                            });
                            checks[algo] = prom;
                            return prom;
                        }
                        function browserPbkdf2(password, salt, iterations, length, algo) {
                            return subtle.importKey("raw", password, {
                                name: "PBKDF2"
                            }, false, [
                                "deriveBits"
                            ]).then(function(key) {
                                return subtle.deriveBits({
                                    name: "PBKDF2",
                                    salt: salt,
                                    iterations: iterations,
                                    hash: {
                                        name: algo
                                    }
                                }, key, length << 3);
                            }).then(function(res) {
                                return Buffer.from(res);
                            });
                        }
                        function resolvePromise(promise, callback) {
                            promise.then(function(out) {
                                process.nextTick(function() {
                                    callback(null, out);
                                });
                            }, function(e) {
                                process.nextTick(function() {
                                    callback(e);
                                });
                            });
                        }
                        module.exports = function(password, salt, iterations, keylen, digest, callback) {
                            if (typeof digest === "function") {
                                callback = digest;
                                digest = undefined;
                            }
                            digest = digest || "sha1";
                            var algo = toBrowser[digest.toLowerCase()];
                            if (!algo || typeof global.Promise !== "function") return process.nextTick(function() {
                                var out;
                                try {
                                    out = sync(password, salt, iterations, keylen, digest);
                                } catch (e) {
                                    return callback(e);
                                }
                                callback(null, out);
                            });
                            checkParameters(iterations, keylen);
                            password = toBuffer(password, defaultEncoding, "Password");
                            salt = toBuffer(salt, defaultEncoding, "Salt");
                            if (typeof callback !== "function") throw new Error("No callback provided to pbkdf2");
                            resolvePromise(checkNative(algo).then(function(resp) {
                                if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
                                return sync(password, salt, iterations, keylen, digest);
                            }), callback);
                        };
                    }).call(this);
                }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
            },
            {
                "./default-encoding": 251,
                "./precondition": 252,
                "./sync": 253,
                "./to-buffer": 254,
                "_process": 163,
                "safe-buffer": 272
            }
        ],
        251: [
            function(require, module, exports) {
                (function(process) {
                    (function() {
                        var defaultEncoding;
                        /* istanbul ignore next */ if (process.browser) defaultEncoding = "utf-8";
                        else if (process.version) {
                            var pVersionMajor = parseInt(process.version.split(".")[0].slice(1), 10);
                            defaultEncoding = pVersionMajor >= 6 ? "utf-8" : "binary";
                        } else defaultEncoding = "utf-8";
                        module.exports = defaultEncoding;
                    }).call(this);
                }).call(this, require("_process"));
            },
            {
                "_process": 163
            }
        ],
        252: [
            function(require, module, exports) {
                arguments[4][160][0].apply(exports, arguments);
            },
            {
                "dup": 160
            }
        ],
        253: [
            function(require, module, exports) {
                arguments[4][161][0].apply(exports, arguments);
            },
            {
                "./default-encoding": 251,
                "./precondition": 252,
                "./to-buffer": 254,
                "create-hash/md5": 227,
                "dup": 161,
                "ripemd160": 271,
                "safe-buffer": 272,
                "sha.js": 274
            }
        ],
        254: [
            function(require, module, exports) {
                arguments[4][162][0].apply(exports, arguments);
            },
            {
                "dup": 162,
                "safe-buffer": 272
            }
        ],
        255: [
            function(require, module, exports) {
                arguments[4][171][0].apply(exports, arguments);
            },
            {
                "_process": 163,
                "dup": 171,
                "safe-buffer": 272
            }
        ],
        256: [
            function(require, module, exports) {
                arguments[4][47][0].apply(exports, arguments);
            },
            {
                "dup": 47
            }
        ],
        257: [
            function(require, module, exports) {
                arguments[4][48][0].apply(exports, arguments);
            },
            {
                "./_stream_readable": 259,
                "./_stream_writable": 261,
                "_process": 163,
                "dup": 48,
                "inherits": 242
            }
        ],
        258: [
            function(require, module, exports) {
                arguments[4][49][0].apply(exports, arguments);
            },
            {
                "./_stream_transform": 260,
                "dup": 49,
                "inherits": 242
            }
        ],
        259: [
            function(require, module, exports) {
                arguments[4][50][0].apply(exports, arguments);
            },
            {
                "../errors": 256,
                "./_stream_duplex": 257,
                "./internal/streams/async_iterator": 262,
                "./internal/streams/buffer_list": 263,
                "./internal/streams/destroy": 264,
                "./internal/streams/from": 266,
                "./internal/streams/state": 268,
                "./internal/streams/stream": 269,
                "_process": 163,
                "buffer": 63,
                "dup": 50,
                "events": 103,
                "inherits": 242,
                "string_decoder/": 281,
                "util": 224
            }
        ],
        260: [
            function(require, module, exports) {
                arguments[4][51][0].apply(exports, arguments);
            },
            {
                "../errors": 256,
                "./_stream_duplex": 257,
                "dup": 51,
                "inherits": 242
            }
        ],
        261: [
            function(require, module, exports) {
                arguments[4][52][0].apply(exports, arguments);
            },
            {
                "../errors": 256,
                "./_stream_duplex": 257,
                "./internal/streams/destroy": 264,
                "./internal/streams/state": 268,
                "./internal/streams/stream": 269,
                "_process": 163,
                "buffer": 63,
                "dup": 52,
                "inherits": 242,
                "util-deprecate": 282
            }
        ],
        262: [
            function(require, module, exports) {
                arguments[4][53][0].apply(exports, arguments);
            },
            {
                "./end-of-stream": 265,
                "_process": 163,
                "dup": 53
            }
        ],
        263: [
            function(require, module, exports) {
                arguments[4][54][0].apply(exports, arguments);
            },
            {
                "buffer": 63,
                "dup": 54,
                "util": 224
            }
        ],
        264: [
            function(require, module, exports) {
                arguments[4][55][0].apply(exports, arguments);
            },
            {
                "_process": 163,
                "dup": 55
            }
        ],
        265: [
            function(require, module, exports) {
                arguments[4][56][0].apply(exports, arguments);
            },
            {
                "../../../errors": 256,
                "dup": 56
            }
        ],
        266: [
            function(require, module, exports) {
                arguments[4][57][0].apply(exports, arguments);
            },
            {
                "dup": 57
            }
        ],
        267: [
            function(require, module, exports) {
                arguments[4][58][0].apply(exports, arguments);
            },
            {
                "../../../errors": 256,
                "./end-of-stream": 265,
                "dup": 58
            }
        ],
        268: [
            function(require, module, exports) {
                arguments[4][59][0].apply(exports, arguments);
            },
            {
                "../../../errors": 256,
                "dup": 59
            }
        ],
        269: [
            function(require, module, exports) {
                arguments[4][60][0].apply(exports, arguments);
            },
            {
                "dup": 60,
                "events": 103
            }
        ],
        270: [
            function(require, module, exports) {
                arguments[4][61][0].apply(exports, arguments);
            },
            {
                "./lib/_stream_duplex.js": 257,
                "./lib/_stream_passthrough.js": 258,
                "./lib/_stream_readable.js": 259,
                "./lib/_stream_transform.js": 260,
                "./lib/_stream_writable.js": 261,
                "./lib/internal/streams/end-of-stream.js": 265,
                "./lib/internal/streams/pipeline.js": 267,
                "dup": 61
            }
        ],
        271: [
            function(require, module, exports) {
                arguments[4][173][0].apply(exports, arguments);
            },
            {
                "buffer": 63,
                "dup": 173,
                "hash-base": 228,
                "inherits": 242
            }
        ],
        272: [
            function(require, module, exports) {
                arguments[4][174][0].apply(exports, arguments);
            },
            {
                "buffer": 63,
                "dup": 174
            }
        ],
        273: [
            function(require, module, exports) {
                arguments[4][176][0].apply(exports, arguments);
            },
            {
                "dup": 176,
                "safe-buffer": 272
            }
        ],
        274: [
            function(require, module, exports) {
                arguments[4][177][0].apply(exports, arguments);
            },
            {
                "./sha": 275,
                "./sha1": 276,
                "./sha224": 277,
                "./sha256": 278,
                "./sha384": 279,
                "./sha512": 280,
                "dup": 177
            }
        ],
        275: [
            function(require, module, exports) {
                arguments[4][178][0].apply(exports, arguments);
            },
            {
                "./hash": 273,
                "dup": 178,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        276: [
            function(require, module, exports) {
                arguments[4][179][0].apply(exports, arguments);
            },
            {
                "./hash": 273,
                "dup": 179,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        277: [
            function(require, module, exports) {
                arguments[4][180][0].apply(exports, arguments);
            },
            {
                "./hash": 273,
                "./sha256": 278,
                "dup": 180,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        278: [
            function(require, module, exports) {
                arguments[4][181][0].apply(exports, arguments);
            },
            {
                "./hash": 273,
                "dup": 181,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        279: [
            function(require, module, exports) {
                arguments[4][182][0].apply(exports, arguments);
            },
            {
                "./hash": 273,
                "./sha512": 280,
                "dup": 182,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        280: [
            function(require, module, exports) {
                arguments[4][183][0].apply(exports, arguments);
            },
            {
                "./hash": 273,
                "dup": 183,
                "inherits": 242,
                "safe-buffer": 272
            }
        ],
        281: [
            function(require, module, exports) {
                arguments[4][199][0].apply(exports, arguments);
            },
            {
                "dup": 199,
                "safe-buffer": 272
            }
        ],
        282: [
            function(require, module, exports) {
                arguments[4][200][0].apply(exports, arguments);
            },
            {
                "dup": 200
            }
        ],
        283: [
            function(require, module, exports) {
                "use strict";
                Object.defineProperty(exports, "__esModule", {
                    value: true
                });
                exports.DOMException = void 0;
                exports.Headers = Headers;
                exports.Request = Request;
                exports.Response = Response;
                exports.fetch = fetch;
                var global = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof global !== "undefined" && global;
                var support = {
                    searchParams: "URLSearchParams" in global,
                    iterable: "Symbol" in global && "iterator" in Symbol,
                    blob: "FileReader" in global && "Blob" in global && function() {
                        try {
                            new Blob();
                            return true;
                        } catch (e) {
                            return false;
                        }
                    }(),
                    formData: "FormData" in global,
                    arrayBuffer: "ArrayBuffer" in global
                };
                function isDataView(obj) {
                    return obj && DataView.prototype.isPrototypeOf(obj);
                }
                if (support.arrayBuffer) {
                    var viewClasses = [
                        "[object Int8Array]",
                        "[object Uint8Array]",
                        "[object Uint8ClampedArray]",
                        "[object Int16Array]",
                        "[object Uint16Array]",
                        "[object Int32Array]",
                        "[object Uint32Array]",
                        "[object Float32Array]",
                        "[object Float64Array]"
                    ];
                    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
                        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
                    };
                }
                function normalizeName(name) {
                    if (typeof name !== "string") name = String(name);
                    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === "") throw new TypeError('Invalid character in header field name: "' + name + '"');
                    return name.toLowerCase();
                }
                function normalizeValue(value) {
                    if (typeof value !== "string") value = String(value);
                    return value;
                } // Build a destructive iterator for the value list
                function iteratorFor(items) {
                    var iterator = {
                        next: function next() {
                            var value = items.shift();
                            return {
                                done: value === undefined,
                                value: value
                            };
                        }
                    };
                    if (support.iterable) iterator[Symbol.iterator] = function() {
                        return iterator;
                    };
                    return iterator;
                }
                function Headers(headers) {
                    this.map = {};
                    if (headers instanceof Headers) headers.forEach(function(value, name) {
                        this.append(name, value);
                    }, this);
                    else if (Array.isArray(headers)) headers.forEach(function(header) {
                        this.append(header[0], header[1]);
                    }, this);
                    else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name) {
                        this.append(name, headers[name]);
                    }, this);
                }
                Headers.prototype.append = function(name, value) {
                    name = normalizeName(name);
                    value = normalizeValue(value);
                    var oldValue = this.map[name];
                    this.map[name] = oldValue ? oldValue + ", " + value : value;
                };
                Headers.prototype["delete"] = function(name) {
                    delete this.map[normalizeName(name)];
                };
                Headers.prototype.get = function(name) {
                    name = normalizeName(name);
                    return this.has(name) ? this.map[name] : null;
                };
                Headers.prototype.has = function(name) {
                    return this.map.hasOwnProperty(normalizeName(name));
                };
                Headers.prototype.set = function(name, value) {
                    this.map[normalizeName(name)] = normalizeValue(value);
                };
                Headers.prototype.forEach = function(callback, thisArg) {
                    for(var name in this.map)if (this.map.hasOwnProperty(name)) callback.call(thisArg, this.map[name], name, this);
                };
                Headers.prototype.keys = function() {
                    var items = [];
                    this.forEach(function(value, name) {
                        items.push(name);
                    });
                    return iteratorFor(items);
                };
                Headers.prototype.values = function() {
                    var items = [];
                    this.forEach(function(value) {
                        items.push(value);
                    });
                    return iteratorFor(items);
                };
                Headers.prototype.entries = function() {
                    var items = [];
                    this.forEach(function(value, name) {
                        items.push([
                            name,
                            value
                        ]);
                    });
                    return iteratorFor(items);
                };
                if (support.iterable) Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
                function consumed(body) {
                    if (body.bodyUsed) return Promise.reject(new TypeError("Already read"));
                    body.bodyUsed = true;
                }
                function fileReaderReady(reader) {
                    return new Promise(function(resolve, reject) {
                        reader.onload = function() {
                            resolve(reader.result);
                        };
                        reader.onerror = function() {
                            reject(reader.error);
                        };
                    });
                }
                function readBlobAsArrayBuffer(blob) {
                    var reader = new FileReader();
                    var promise = fileReaderReady(reader);
                    reader.readAsArrayBuffer(blob);
                    return promise;
                }
                function readBlobAsText(blob) {
                    var reader = new FileReader();
                    var promise = fileReaderReady(reader);
                    reader.readAsText(blob);
                    return promise;
                }
                function readArrayBufferAsText(buf) {
                    var view = new Uint8Array(buf);
                    var chars = new Array(view.length);
                    for(var i = 0; i < view.length; i++)chars[i] = String.fromCharCode(view[i]);
                    return chars.join("");
                }
                function bufferClone(buf) {
                    if (buf.slice) return buf.slice(0);
                    else {
                        var view = new Uint8Array(buf.byteLength);
                        view.set(new Uint8Array(buf));
                        return view.buffer;
                    }
                }
                function Body() {
                    this.bodyUsed = false;
                    this._initBody = function(body) {
                        /*
            fetch-mock wraps the Response object in an ES6 Proxy to
            provide useful test harness features such as flush. However, on
            ES5 browsers without fetch or Proxy support pollyfills must be used;
            the proxy-pollyfill is unable to proxy an attribute unless it exists
            on the object before the Proxy is created. This change ensures
            Response.bodyUsed exists on the instance, while maintaining the
            semantic of setting Request.bodyUsed in the constructor before
            _initBody is called.
          */ this.bodyUsed = this.bodyUsed;
                        this._bodyInit = body;
                        if (!body) this._bodyText = "";
                        else if (typeof body === "string") this._bodyText = body;
                        else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
                        else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
                        else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
                        else if (support.arrayBuffer && support.blob && isDataView(body)) {
                            this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.
                            this._bodyInit = new Blob([
                                this._bodyArrayBuffer
                            ]);
                        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
                        else this._bodyText = body = Object.prototype.toString.call(body);
                        if (!this.headers.get("content-type")) {
                            if (typeof body === "string") this.headers.set("content-type", "text/plain;charset=UTF-8");
                            else if (this._bodyBlob && this._bodyBlob.type) this.headers.set("content-type", this._bodyBlob.type);
                            else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                        }
                    };
                    if (support.blob) {
                        this.blob = function() {
                            var rejected = consumed(this);
                            if (rejected) return rejected;
                            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
                            else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                                this._bodyArrayBuffer
                            ]));
                            else if (this._bodyFormData) throw new Error("could not read FormData body as blob");
                            else return Promise.resolve(new Blob([
                                this._bodyText
                            ]));
                        };
                        this.arrayBuffer = function() {
                            if (this._bodyArrayBuffer) {
                                var isConsumed = consumed(this);
                                if (isConsumed) return isConsumed;
                                if (ArrayBuffer.isView(this._bodyArrayBuffer)) return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                                else return Promise.resolve(this._bodyArrayBuffer);
                            } else return this.blob().then(readBlobAsArrayBuffer);
                        };
                    }
                    this.text = function() {
                        var rejected = consumed(this);
                        if (rejected) return rejected;
                        if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
                        else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
                        else if (this._bodyFormData) throw new Error("could not read FormData body as text");
                        else return Promise.resolve(this._bodyText);
                    };
                    if (support.formData) this.formData = function() {
                        return this.text().then(decode);
                    };
                    this.json = function() {
                        return this.text().then(JSON.parse);
                    };
                    return this;
                } // HTTP methods whose capitalization should be normalized
                var methods = [
                    "DELETE",
                    "GET",
                    "HEAD",
                    "OPTIONS",
                    "POST",
                    "PUT"
                ];
                function normalizeMethod(method) {
                    var upcased = method.toUpperCase();
                    return methods.indexOf(upcased) > -1 ? upcased : method;
                }
                function Request(input, options) {
                    if (!(this instanceof Request)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
                    options = options || {};
                    var body = options.body;
                    if (input instanceof Request) {
                        if (input.bodyUsed) throw new TypeError("Already read");
                        this.url = input.url;
                        this.credentials = input.credentials;
                        if (!options.headers) this.headers = new Headers(input.headers);
                        this.method = input.method;
                        this.mode = input.mode;
                        this.signal = input.signal;
                        if (!body && input._bodyInit != null) {
                            body = input._bodyInit;
                            input.bodyUsed = true;
                        }
                    } else this.url = String(input);
                    this.credentials = options.credentials || this.credentials || "same-origin";
                    if (options.headers || !this.headers) this.headers = new Headers(options.headers);
                    this.method = normalizeMethod(options.method || this.method || "GET");
                    this.mode = options.mode || this.mode || null;
                    this.signal = options.signal || this.signal;
                    this.referrer = null;
                    if ((this.method === "GET" || this.method === "HEAD") && body) throw new TypeError("Body not allowed for GET or HEAD requests");
                    this._initBody(body);
                    if (this.method === "GET" || this.method === "HEAD") {
                        if (options.cache === "no-store" || options.cache === "no-cache") {
                            // Search for a '_' parameter in the query string
                            var reParamSearch = /([?&])_=[^&]*/;
                            if (reParamSearch.test(this.url)) // If it already exists then set the value with the current time
                            this.url = this.url.replace(reParamSearch, "$1_=" + new Date().getTime());
                            else {
                                // Otherwise add a new '_' parameter to the end with the current time
                                var reQueryString = /\?/;
                                this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + new Date().getTime();
                            }
                        }
                    }
                }
                Request.prototype.clone = function() {
                    return new Request(this, {
                        body: this._bodyInit
                    });
                };
                function decode(body) {
                    var form = new FormData();
                    body.trim().split("&").forEach(function(bytes) {
                        if (bytes) {
                            var split = bytes.split("=");
                            var name = split.shift().replace(/\+/g, " ");
                            var value = split.join("=").replace(/\+/g, " ");
                            form.append(decodeURIComponent(name), decodeURIComponent(value));
                        }
                    });
                    return form;
                }
                function parseHeaders(rawHeaders) {
                    var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
                    // https://tools.ietf.org/html/rfc7230#section-3.2
                    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " "); // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
                    // https://github.com/github/fetch/issues/748
                    // https://github.com/zloirock/core-js/issues/751
                    preProcessedHeaders.split("\r").map(function(header) {
                        return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
                    }).forEach(function(line) {
                        var parts = line.split(":");
                        var key = parts.shift().trim();
                        if (key) {
                            var value = parts.join(":").trim();
                            headers.append(key, value);
                        }
                    });
                    return headers;
                }
                Body.call(Request.prototype);
                function Response(bodyInit, options) {
                    if (!(this instanceof Response)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
                    if (!options) options = {};
                    this.type = "default";
                    this.status = options.status === undefined ? 200 : options.status;
                    this.ok = this.status >= 200 && this.status < 300;
                    this.statusText = options.statusText === undefined ? "" : "" + options.statusText;
                    this.headers = new Headers(options.headers);
                    this.url = options.url || "";
                    this._initBody(bodyInit);
                }
                Body.call(Response.prototype);
                Response.prototype.clone = function() {
                    return new Response(this._bodyInit, {
                        status: this.status,
                        statusText: this.statusText,
                        headers: new Headers(this.headers),
                        url: this.url
                    });
                };
                Response.error = function() {
                    var response = new Response(null, {
                        status: 0,
                        statusText: ""
                    });
                    response.type = "error";
                    return response;
                };
                var redirectStatuses = [
                    301,
                    302,
                    303,
                    307,
                    308
                ];
                Response.redirect = function(url, status) {
                    if (redirectStatuses.indexOf(status) === -1) throw new RangeError("Invalid status code");
                    return new Response(null, {
                        status: status,
                        headers: {
                            location: url
                        }
                    });
                };
                var DOMException = global.DOMException;
                exports.DOMException = DOMException;
                try {
                    new DOMException();
                } catch (err) {
                    exports.DOMException = DOMException = function DOMException(message, name) {
                        this.message = message;
                        this.name = name;
                        var error = Error(message);
                        this.stack = error.stack;
                    };
                    DOMException.prototype = Object.create(Error.prototype);
                    DOMException.prototype.constructor = DOMException;
                }
                function fetch(input, init) {
                    return new Promise(function(resolve, reject) {
                        var request = new Request(input, init);
                        if (request.signal && request.signal.aborted) return reject(new DOMException("Aborted", "AbortError"));
                        var xhr = new XMLHttpRequest();
                        function abortXhr() {
                            xhr.abort();
                        }
                        xhr.onload = function() {
                            var options = {
                                status: xhr.status,
                                statusText: xhr.statusText,
                                headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                            };
                            options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                            var body = "response" in xhr ? xhr.response : xhr.responseText;
                            setTimeout(function() {
                                resolve(new Response(body, options));
                            }, 0);
                        };
                        xhr.onerror = function() {
                            setTimeout(function() {
                                reject(new TypeError("Network request failed"));
                            }, 0);
                        };
                        xhr.ontimeout = function() {
                            setTimeout(function() {
                                reject(new TypeError("Network request failed"));
                            }, 0);
                        };
                        xhr.onabort = function() {
                            setTimeout(function() {
                                reject(new DOMException("Aborted", "AbortError"));
                            }, 0);
                        };
                        function fixUrl(url) {
                            try {
                                return url === "" && global.location.href ? global.location.href : url;
                            } catch (e) {
                                return url;
                            }
                        }
                        xhr.open(request.method, fixUrl(request.url), true);
                        if (request.credentials === "include") xhr.withCredentials = true;
                        else if (request.credentials === "omit") xhr.withCredentials = false;
                        if ("responseType" in xhr) {
                            if (support.blob) xhr.responseType = "blob";
                            else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) xhr.responseType = "arraybuffer";
                        }
                        if (init && _typeof(init.headers) === "object" && !(init.headers instanceof Headers)) Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                        });
                        else request.headers.forEach(function(value, name) {
                            xhr.setRequestHeader(name, value);
                        });
                        if (request.signal) {
                            request.signal.addEventListener("abort", abortXhr);
                            xhr.onreadystatechange = function() {
                                // DONE (success or failure)
                                if (xhr.readyState === 4) request.signal.removeEventListener("abort", abortXhr);
                            };
                        }
                        xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
                    });
                }
                fetch.polyfill = true;
                if (!global.fetch) {
                    global.fetch = fetch;
                    global.Headers = Headers;
                    global.Request = Request;
                    global.Response = Response;
                }
            },
            {}
        ]
    }, {}, [
        205
    ])(205);
});

//# sourceMappingURL=test.b23bfc77.js.map
